<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.field.BaseDurationField: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.web.servlet.support.ErrorPageFilterConfiguration: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.Object getPrimaryPrincipal()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: void add(org.apache.shiro.authz.SimpleRole)>-><java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>
<org.springframework.web.server.adapter.ForwardedHeaderTransformer: void <clinit>()>-><java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.ThreadGroup: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$4: void processCase(int,org.springframework.asm.Label)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<com.hazelcast.security.permission.ScheduledExecutorPermission: void <init>(java.lang.String,java.lang.String[])>-><com.hazelcast.security.permission.InstancePermission: void <init>(java.lang.String,java.lang.String[])>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.apache.shiro.config.ConfigurationException: void <init>(java.lang.Throwable)>-><org.apache.shiro.ShiroException: void <init>(java.lang.Throwable)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.quartz.xml.ValidationException: java.lang.String getMessage()>
<java.util.Collections$SynchronizedMap: void clear()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap: void clear()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><com.google.common.base.Absent: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><javax.security.auth.Subject: boolean isReadOnly()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$1: java.util.List convert(io.lettuce.core.cluster.models.partitions.Partitions)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.apache.shiro.authc.SimpleAccount: int hashCode()>
<org.apache.shiro.config.Ini: void addSection(java.lang.String,java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<redis.clients.jedis.util.Pool: java.lang.Object getResource()>-><org.apache.commons.pool2.impl.GenericObjectPool: java.lang.Object borrowObject()>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$7: void <init>(java.lang.String,int)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: int hashCode()>
<org.apache.shiro.util.CollectionUtils: java.util.Set asSet(java.lang.Object[])>-><java.util.Collections: java.util.Set singleton(java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>(java.lang.ClassLoader)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.util.ArrayList: void forEach(java.util.function.Consumer)>
<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void remove(java.util.Collection,byte[][])>-><org.springframework.data.redis.connection.util.ByteArrayWrapper: void <init>(byte[])>
<org.springframework.boot.autoconfigure.http.HttpProperties$Encoding$Type: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpProperties$Encoding$Type: void <init>(java.lang.String,int)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<com.google.common.base.Ticker$1: void <init>()>-><com.google.common.base.Ticker: void <init>()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void info(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void setConfig(java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void pipeline(org.springframework.data.redis.connection.lettuce.LettuceResult)>
<redis.clients.jedis.JedisClusterInfoCache: java.util.Map getNodes()>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><freemarker.ext.beans.HashAdapter$1$1$1: java.lang.Object getKey()>
<org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.lang.String)>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<com.hazelcast.internal.partition.operation.PartitionReplicaSyncResponse: void executeOperations()>-><com.hazelcast.cache.impl.operation.CacheGetConfigOperation: void run()>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void remove(java.util.Collection,byte[][])>-><java.util.ArrayList: boolean remove(java.lang.Object)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><org.springframework.data.redis.connection.ClusterCommandExecutor$NodeExecution: org.springframework.data.redis.connection.ClusterCommandExecutor$PositionalKey getPositionalKey()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$1: java.lang.Object next()>
<org.apache.shiro.config.Ini: java.lang.String cleanName(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<org.springframework.boot.autoconfigure.quartz.JobStoreType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<com.google.common.cache.LocalCache$AbstractReferenceEntry: void <init>()>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: void configure(javax.servlet.ServletRegistration$Dynamic)>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void configure(javax.servlet.Registration$Dynamic)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration$WebFluxConfig: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties,org.springframework.beans.factory.ListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfAvailable()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.String: byte[] getBytes()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collection: java.util.stream.Stream stream()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.alibaba.druid.support.profile.ProfileEntryKey: int hashCode()>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties: void <init>()>
<java.lang.Thread: void <init>(java.lang.Runnable,java.security.AccessControlContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.web.accept.ContentNegotiationManagerFactoryBean: void addMediaType(java.lang.String,org.springframework.http.MediaType)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress,int,java.lang.String)>-><org.apache.http.util.Args: java.lang.Object notNull(java.lang.Object,java.lang.String)>
<org.apache.shiro.config.Ini: void load(java.util.Scanner)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache: java.util.Queue discardingQueue()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int access$500(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><freemarker.ext.beans.HashAdapter$1$1$1: java.lang.Object getKey()>
<springfox.documentation.spring.web.readers.operation.DefaultTagsProvider: void <init>()>-><java.lang.Object: void <init>()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties)>-><org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties: void <init>()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: int hashCode()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.EnumMap$1: java.lang.String toString()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><org.apache.shiro.authz.SimpleRole: java.util.Set getPermissions()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.concurrent.FutureTask: java.lang.Object get()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void finishRefresh()>-><org.springframework.context.support.AbstractApplicationContext: void publishEvent(org.springframework.context.ApplicationEvent)>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode$SlotRange parseSlotRange(java.lang.String[])>-><org.springframework.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.lang.String getDescription()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerWebApplicationScopes()>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.cluster.api.sync.RedisClusterCommands getDedicatedConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.api.StatefulConnection doGetAsyncDedicatedConnection()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedHeader(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.config.ServerSocketEndpointConfig: java.lang.String toString()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.io.PrintWriter: java.nio.charset.Charset toCharset(java.lang.String)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.lang.StringBuilder: void <init>()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$3: void <init>(java.lang.String,int)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.publisher.FluxCreate$DropAsyncSink: java.lang.String toString()>
<org.springframework.web.cors.CorsConfiguration: void <clinit>()>-><java.lang.Enum: java.lang.String name()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceMessageListener: void <init>(org.springframework.data.redis.connection.MessageListener)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(org.springframework.util.MultiValueMap)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: boolean isDebugEnabled()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: java.lang.Object getCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.api.StatefulConnection doGetAsyncDedicatedConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void potentiallySelectDatabase(int)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.template.Template: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.google.common.base.Present: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder: java.util.Optional getAnnotationWrapper(java.lang.reflect.Method,boolean,java.util.Collection)>-><org.apache.shiro.config.Ini$Section: boolean isEmpty()>
<org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.rmi.server.LogStream: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration: void <init>()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration: void <init>()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.springframework.data.redis.TooManyClusterRedirectionsException: void <init>(java.lang.String,java.lang.Throwable)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: void setConfig(java.lang.String,java.lang.String)>-><org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>
<org.springframework.data.redis.FallbackExceptionTranslationStrategy: org.springframework.data.redis.RedisSystemException getFallback(java.lang.Exception)>-><org.springframework.data.redis.RedisSystemException: void <init>(java.lang.String,java.lang.Throwable)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.Operation: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedList: void sort(java.util.Comparator)>-><java.util.List: void sort(java.util.Comparator)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.Collections$SetFromMap: boolean isEmpty()>
<org.springframework.beans.factory.config.DependencyDescriptor: void <init>(java.lang.reflect.Field,boolean)>-><org.springframework.beans.factory.config.DependencyDescriptor: void <init>(java.lang.reflect.Field,boolean,boolean)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.apache.shiro.config.Ini: org.apache.shiro.config.Ini fromResourcePath(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><net.sf.ehcache.search.Attribute: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$EmptyList: int size()>
<redis.clients.jedis.Connection: java.lang.String getBulkReply()>-><redis.clients.jedis.Connection: byte[] getBinaryBulkReply()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<java.util.ResourceBundle$Control$1: java.io.InputStream run()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.io.InputStream getResourceAsStream(java.lang.String)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char,char,boolean,boolean)>-><java.lang.String: char charAt(int)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerApplicationScope(javax.servlet.ServletContext)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pSubscribe(byte[][])>-><org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getTransactionAwareConnectionProxy(javax.sql.DataSource)>-><org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy$TransactionAwareInvocationHandler: void <init>(org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy,javax.sql.DataSource)>
<com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.internal.cluster.impl.MembershipManager: void removeAllMissingMembers()>-><org.apache.shiro.config.Ini$Section: java.util.Collection values()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.nio.tcp.TcpIpEndpointManager: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Class: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.hazelcast.HazelcastServerConfiguration$HazelcastServerConfigFileConfiguration: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.HashSet: void <init>()>
<org.springframework.http.HttpHeaders: void <clinit>()>-><org.springframework.http.ReadOnlyHttpHeaders: void <init>(org.springframework.util.MultiValueMap)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<java.util.zip.ZipFile: void <init>(java.lang.String)>-><java.util.zip.ZipFile: void <init>(java.io.File,int)>
<com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl: java.util.Map getMemberPartitions(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<com.fasterxml.jackson.dataformat.cbor.CBORFactory: void <init>(com.fasterxml.jackson.dataformat.cbor.CBORFactory,com.fasterxml.jackson.core.ObjectCodec)>-><com.fasterxml.jackson.core.JsonFactory: void <init>(com.fasterxml.jackson.core.JsonFactory,com.fasterxml.jackson.core.ObjectCodec)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Character: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: void add(org.apache.shiro.authz.SimpleRole)>-><java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void debug(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.ViewResolverRegistry: void <init>(org.springframework.web.accept.ContentNegotiationManager,org.springframework.context.ApplicationContext)>-><java.util.ArrayList: void <init>(int)>
<java.io.PrintWriter: void <init>(java.io.File,java.lang.String)>-><java.io.PrintWriter: void <init>(java.nio.charset.Charset,java.io.File)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: void add(org.apache.shiro.authc.SimpleAccount)>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.Lock writeLock()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.ParamNameResolver: java.lang.String getActualParamName(java.lang.reflect.Method,int)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.networking.nio.NioThread: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.apache.shiro.config.Ini$Section: void <init>(org.apache.shiro.config.Ini$Section)>-><org.apache.shiro.config.Ini$Section: void putAll(java.util.Map)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.ext.beans.BeansWrapper: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromUrl(java.lang.String)>-><java.net.URL: java.io.InputStream openStream()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.util.ArrayList: java.lang.Object get(int)>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.LocalCache$Strength getKeyStrength()>-><com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<sun.security.jca.ProviderConfig$2: java.security.Provider run()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.springframework.http.HttpStatus: org.springframework.http.HttpStatus valueOf(int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache$Strength: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>-><com.google.common.cache.LocalCache$Strength: void <init>(java.lang.String,int)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.LinkedHashSet: void <init>(java.util.Collection)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.Iterable getCacheNames()>-><java.lang.String: java.lang.String substring(int)>
<register-finalize <org.springframework.http.HttpStatus$Series: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.mybatis.spring.MyBatisExceptionTranslator: org.springframework.jdbc.support.SQLExceptionTranslator lambda$new$0(javax.sql.DataSource)>-><org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: void <init>(javax.sql.DataSource)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<com.hazelcast.scheduledexecutor.impl.operations.ReplicationOperation: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doPUnsubscribe(boolean,byte[][])>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.nio.charset.Charset: java.lang.String toString()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <clinit>()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.logging.log4j.util.LoaderUtil: java.util.Collection findUrlResources(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: boolean hasMoreElements()>
<sun.util.locale.provider.LocaleServiceProviderPool: java.util.List findProviders(java.util.Locale)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><java.util.ArrayList$SubList: int size()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<register-finalize <org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromFile(java.lang.String)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerApplicationScope(javax.servlet.ServletContext)>-><java.lang.Class: java.lang.String getName()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.atomic.AtomicLongArray: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><java.util.LinkedHashMap: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.util.ArrayList: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: int size()>
<org.springframework.web.util.HierarchicalUriComponents$1: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.Collections$SynchronizedMap: void clear()>
<com.alibaba.druid.stat.DruidStatManagerFacade: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.stream.Stream lambda$null$1(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.cluster.api.sync.RedisClusterCommands getConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.cluster.api.sync.RedisClusterCommands getDedicatedConnection()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection$LettuceClusterNodeResourceProvider: void destroy()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider: void release(io.lettuce.core.api.StatefulConnection)>
<com.google.common.cache.LocalCache$2: void <init>()>-><java.util.AbstractQueue: void <init>()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set getRealmNames()>-><java.util.LinkedHashMap: java.util.Set keySet()>
<springfox.documentation.spring.web.readers.parameter.ParameterMultiplesReader: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.hazelcast.nio.IOUtil$ClassLoaderAwareObjectInputStream: void <init>(java.lang.ClassLoader,com.hazelcast.nio.ClassNameFilter,java.io.InputStream,com.hazelcast.nio.IOUtil$1)>-><com.hazelcast.nio.IOUtil$ClassLoaderAwareObjectInputStream: void <init>(java.lang.ClassLoader,com.hazelcast.nio.ClassNameFilter,java.io.InputStream)>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.util.HashMap: void <init>()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode$SlotRange parseSlotRange(java.lang.String[])>-><java.util.LinkedHashSet: void <init>()>
<com.google.common.base.Ticker: void <clinit>()>-><com.google.common.base.Ticker$1: void <init>()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: java.util.Properties getConfig(java.lang.String)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: java.util.Properties getConfig(java.lang.String)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: java.lang.String getErrorMessage(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.web.context.support.ContextExposingHttpServletRequest: void <init>(javax.servlet.http.HttpServletRequest,org.springframework.web.context.WebApplicationContext)>-><org.springframework.web.context.support.ContextExposingHttpServletRequest: void <init>(javax.servlet.http.HttpServletRequest,org.springframework.web.context.WebApplicationContext,java.util.Set)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><com.hazelcast.util.executor.CompletedFuture: boolean isCancelled()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.fasterxml.jackson.core.JsonFactory: void _checkInvalidCopy(java.lang.Class)>-><com.fasterxml.jackson.dataformat.cbor.CBORFactory: com.fasterxml.jackson.core.Version version()>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.OpaqueUriComponents: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: void setConfig(java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandOnAllNodes(org.springframework.data.redis.connection.lettuce.LettuceClusterConnection$LettuceClusterCommandCallback)>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void <clinit>()>-><org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter: void <init>()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<cn.hutool.core.map.MapProxy: java.util.Set keySet()>-><org.apache.shiro.config.Ini$Section: java.util.Set keySet()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void <init>(io.lettuce.core.api.StatefulConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,long,int)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.apache.ibatis.type.TypeHandlerRegistry: java.util.Map getJdbcHandlerMapForEnumInterfaces(java.lang.Class,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.springframework.web.bind.support.WebExchangeBindException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentSkipListMap: int cpr(java.util.Comparator,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache: boolean usesAccessQueue()>
<com.hazelcast.config.CacheSimpleConfig: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler pickSoleHandler(java.util.Map)>-><org.apache.shiro.config.Ini$Section: java.util.Collection values()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Log4jLog: boolean isDebugEnabled()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void checkSubscription()>
<java.util.Collections$SynchronizedMap: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.Object remove(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.operation.ApiOperationReader getApiOperationReader()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.classmate.TypeResolver: void <init>()>-><com.fasterxml.classmate.TypeResolver: void <init>(com.fasterxml.classmate.util.ResolvedTypeCache)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])>-><java.lang.String: int indexOf(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: int size()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: int hashCode()>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: java.lang.String getClientName()>-><org.springframework.data.redis.connection.jedis.DefaultJedisClientConfiguration: java.util.Optional getClientName()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream getInputStreamForPath(java.lang.String)>-><org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromUrl(java.lang.String)>
<org.springframework.web.util.UriComponents: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getChannels()>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<com.hazelcast.internal.partition.impl.MigrationManager$RepairPartitionTableTask: void logPromotionCommitFailure(com.hazelcast.internal.partition.PartitionReplica,java.util.Collection,java.lang.Throwable)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.BaseObjectPoolConfig: boolean getTestOnReturn()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: int size()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache$WriteQueue: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.lettuce.core.metrics.CommandMetrics: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>
<org.springframework.data.domain.Sort$NullHandling: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<sun.security.ssl.EngineInputRecord: void <clinit>()>-><java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>
<org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.cache.CacheBuilder: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.Set getBeanNames(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.apache.shiro.util.ClassUtils$1: java.lang.ClassLoader doGetClassLoader()>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.apache.commons.logging.Log access$000()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.util.ResourceLeakDetector$TraceRecord: java.lang.String toString()>
<register-finalize <org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><java.util.HashMap: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiListingReferenceScanner: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedCollection: int size()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.springframework.web.client.RestTemplate: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.juli.logging.DirectJDKLog: void fatal(java.lang.Object,java.lang.Throwable)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<com.google.common.cache.LocalCache$Strength$3: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$Strength: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><reactor.core.publisher.FluxHide$HideSubscriber: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder maximumSize(long)>-><com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>
<freemarker.ext.beans._BeansAPI: void removeClearedReferencesFromCache(java.util.Map,java.lang.ref.ReferenceQueue)>-><org.apache.shiro.config.Ini$Section: java.util.Collection values()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<reactor.core.publisher.Operators: void error(org.reactivestreams.Subscriber,java.lang.Throwable)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onError(java.lang.Throwable)>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(org.springframework.transaction.TransactionDefinition)>-><org.springframework.transaction.TransactionDefinition: boolean isReadOnly()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(java.lang.String[])>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>
<org.apache.shiro.util.PermissionUtils: java.util.Set resolveDelimitedPermissions(java.lang.String,org.apache.shiro.authz.permission.PermissionResolver)>-><org.apache.shiro.util.PermissionUtils: java.util.Set toPermissionStrings(java.lang.String)>
<org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.util.Collection)>-><java.util.LinkedHashSet: void <init>(int)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(org.springframework.data.redis.connection.RedisClusterNode)>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: java.lang.String toString()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.google.common.cache.CacheStats: void <init>(long,long,long,long,long,long)>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer: void <init>(com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer,com.fasterxml.jackson.databind.JsonDeserializer,java.lang.Boolean)>-><com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer: void <init>(com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer,com.fasterxml.jackson.databind.JsonDeserializer,com.fasterxml.jackson.databind.deser.NullValueProvider,java.lang.Boolean)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<com.fasterxml.jackson.dataformat.cbor.CBORFactory: void <init>(com.fasterxml.jackson.dataformat.cbor.CBORFactoryBuilder)>-><com.fasterxml.jackson.dataformat.cbor.CBORFactoryBuilder: int formatParserFeaturesMask()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.SingletonImmutableSet: java.util.Iterator iterator()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.YearMonth: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><java.lang.Object: void <init>()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.dao.DataAccessException convertLettuceAccessException(java.lang.Exception)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<javax.security.auth.Subject: void <init>()>-><java.lang.Object: void <init>()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><com.google.common.collect.SingletonImmutableSet: java.util.Iterator iterator()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.config.Ini$Section: void clear()>-><java.util.LinkedHashMap: void clear()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: boolean isClosed()>-><com.hazelcast.instance.HazelcastInstanceProxy: com.hazelcast.core.LifecycleService getLifecycleService()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<io.lettuce.core.ClientOptions: void <init>(io.lettuce.core.ClientOptions)>-><io.lettuce.core.ClientOptions: boolean isPublishOnScheduler()>
<java.util.logging.LogManager: java.util.logging.Formatter getFormatterProperty(java.lang.String,java.util.logging.Formatter)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.cluster.api.async.RedisClusterAsyncCommands getAsyncConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.cluster.api.async.RedisClusterAsyncCommands getAsyncDedicatedConnection()>
<org.springframework.security.authentication.CachingUserDetailsService: void <init>(org.springframework.security.core.userdetails.UserDetailsService)>-><org.springframework.security.core.userdetails.cache.NullUserCache: void <init>()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><org.springframework.beans.factory.support.AbstractBeanFactory: void registerScope(java.lang.String,org.springframework.beans.factory.config.Scope)>
<freemarker.ext.beans._BeansAPI: void removeClearedReferencesFromCache(java.util.Map,java.lang.ref.ReferenceQueue)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void info(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: redis.clients.jedis.util.Pool createRedisPool()>-><org.springframework.data.redis.connection.jedis.DefaultJedisClientConfiguration: java.util.Optional getSslParameters()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>-><java.util.ArrayList$SubList: void add(int,java.lang.Object)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.AbstractCollection: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<org.springframework.boot.autoconfigure.kafka.KafkaAnnotationDrivenConfiguration: void <init>(org.springframework.boot.autoconfigure.kafka.KafkaProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfUnique()>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings emptyBindings()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<com.hazelcast.spi.impl.operationservice.impl.operations.Backup: void run()>-><com.hazelcast.scheduledexecutor.impl.operations.CancelTaskBackupOperation: void run()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.lang.String getResourceDescription(java.lang.String,org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedHeader(java.lang.String)>-><java.util.ArrayList: void <init>(int)>
<org.springframework.boot.web.server.MimeMappings: void <clinit>()>-><org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void potentiallySelectDatabase(int)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.operationservice.impl.InvokeOnPartitions$1: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<org.springframework.web.cors.CorsConfiguration: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.apache.ibatis.type.TypeHandlerRegistry: void register(java.lang.reflect.Type,org.apache.ibatis.type.JdbcType,org.apache.ibatis.type.TypeHandler)>-><org.apache.shiro.config.Ini$Section: java.lang.Object put(java.lang.Object,java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><org.apache.shiro.realm.SimpleAccountRealm: org.apache.shiro.authc.SimpleAccount getUser(java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>-><java.lang.Object: void <init>()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.LoadingCache build(com.google.common.cache.CacheLoader)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer,boolean,int,boolean,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo)>-><java.lang.Object: void <init>()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.core.TemplateObject: java.lang.String toString()>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><org.apache.shiro.authz.SimpleRole: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.monitor.impl.LocalQueueStatsImpl: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object putValue(java.lang.Object,java.lang.Object)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties)>-><org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties: void <init>()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.Object lambda$destroy$0()>-><org.springframework.web.filter.GenericFilterBean: void destroy()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.apache.http.impl.nio.client.InternalRequestExecutor: void closed(org.apache.http.nio.NHttpClientConnection)>-><org.apache.http.impl.nio.client.InternalRequestExecutor: void closed(org.apache.http.nio.NHttpClientConnection)>
<org.apache.shiro.config.Ini: void load(java.io.Reader)>-><org.apache.logging.slf4j.Log4jLogger: void debug(java.lang.String,java.lang.Throwable)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration: void <init>()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.Collections$SynchronizedList: java.util.ListIterator listIterator(int)>-><java.util.ArrayList$SubList: java.util.ListIterator listIterator(int)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner: java.lang.String printDomain(java.security.ProtectionDomain)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.lettuce.core.masterslave.RedisMasterSlaveNode: java.lang.String toString()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration: void <init>()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void onRefresh()>-><org.springframework.web.context.support.GenericWebApplicationContext: void onRefresh()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader: void <init>()>-><org.apache.catalina.loader.ParallelWebappClassLoader: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object putValue(java.lang.Object,java.lang.Object)>-><java.lang.ref.WeakReference: void <init>(java.lang.Object)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.apache.shiro.config.Ini: void addSection(java.lang.String,java.lang.StringBuilder)>-><org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>-><java.lang.StringBuilder: void <init>()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.HashSet: boolean isEmpty()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.lang.String: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: void <init>(javax.security.auth.SubjectDomainCombiner$1)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.web.embedded.tomcat.TldPatterns: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<java.util.Vector: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
<org.springframework.jdbc.support.JdbcUtils: java.lang.Object extractDatabaseMetaData(javax.sql.DataSource,org.springframework.jdbc.support.DatabaseMetaDataCallback)>-><org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getConnection()>
<com.google.common.cache.LocalCache$AccessQueue$1: void <init>(com.google.common.cache.LocalCache$AccessQueue)>-><com.google.common.cache.LocalCache$AbstractReferenceEntry: void <init>()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyRegistrationConfiguration: void <init>()>
<com.google.common.cache.CacheBuilder: void <clinit>()>-><com.google.common.cache.CacheBuilder$2: void <init>()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection getPrincipalsLazy(java.lang.String)>
<net.sf.ehcache.pool.sizeof.AgentLoader: boolean agentIsAvailable()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<register-finalize <java.io.PrintWriter: void <init>(java.nio.charset.Charset,java.io.File)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.HashMap: java.util.Set entrySet()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.baomidou.mybatisplus.core.metadata.TableFieldInfo: java.lang.String toString()>
<org.apache.shiro.mgt.DefaultSecurityManager: void <init>(java.util.Collection)>-><org.apache.shiro.mgt.DefaultSecurityManager: void <init>()>
<org.apache.logging.log4j.spi.ThreadContextMapFactory: org.apache.logging.log4j.spi.ThreadContextMap createThreadContextMap()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.LinkedBlockingQueue: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<com.fasterxml.jackson.core.JsonLocation: void <clinit>()>-><com.fasterxml.jackson.core.JsonLocation: void <init>(java.lang.Object,long,long,int,int)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: void <init>()>-><com.fasterxml.classmate.util.ResolvedTypeCache: com.fasterxml.classmate.util.ResolvedTypeCache lruCache(int)>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(org.springframework.transaction.TransactionDefinition)>-><org.springframework.transaction.TransactionDefinition: int getTimeout()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<sun.security.ssl.SSLContextImpl$TLS12Context: void <clinit>()>-><sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList access$100(sun.security.ssl.ProtocolList,boolean)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.google.common.base.Predicates$ObjectPredicate$2: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<org.springframework.boot.web.context.WebServerInitializedEvent: void <init>(org.springframework.boot.web.server.WebServer)>-><org.springframework.context.ApplicationEvent: void <init>(java.lang.Object)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(java.lang.String[])>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void scan(java.lang.String[])>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><java.util.ArrayList: void <init>()>
<sun.nio.ch.SharedFileLockTable: void removeKeyIfEmpty(sun.nio.ch.FileKey,java.util.List)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.boot.web.embedded.tomcat.TldPatterns: void <clinit>()>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<com.hazelcast.cache.impl.operation.CacheGetConfigOperation: void run()>-><com.hazelcast.spi.Operation: java.lang.Object getService()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxMap$MapSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration: void <init>(org.springframework.mail.javamail.JavaMailSenderImpl)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.core.BooleanLiteral: java.lang.String toString()>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerOpaqueTokenConfiguration$WebSecurityConfiguration: void <init>()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.http.HttpHeaders: org.springframework.http.HttpHeaders readOnlyHttpHeaders(org.springframework.http.HttpHeaders)>-><org.springframework.http.ReadOnlyHttpHeaders: void <init>(org.springframework.util.MultiValueMap)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.apache.shiro.util.ClassUtils: java.io.InputStream getResourceAsStream(java.lang.String)>-><org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.io.InputStream getResourceStream(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.ResponseMessagesReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.TypeNameExtractor getTypeNameExtractor()>
<java.util.logging.LogManager$5: java.lang.Object run()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider: void release(io.lettuce.core.api.StatefulConnection)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<org.springframework.data.redis.connection.RedisClusterNode$LinkState: void <clinit>()>-><org.springframework.data.redis.connection.RedisClusterNode$LinkState: void <init>(java.lang.String,int)>
<reactor.util.function.Tuple3: int hashCode()>-><org.apache.shiro.config.Ini$Section: int hashCode()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.MonoZip$ZipInner: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.data.redis.connection.AbstractRedisConnection: void close()>-><java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$10: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.hazelcast.ringbuffer.impl.ReadResultSetImpl: int size()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.cache.impl.HazelcastServerCachingProvider: java.lang.String toString()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><java.lang.Integer: int intValue()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getDescription()>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.apache.catalina.core.ApplicationContext: java.util.Set getResourcePaths(java.lang.String)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<javax.servlet.DispatcherType: void <clinit>()>-><javax.servlet.DispatcherType: void <init>(java.lang.String,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.github.pagehelper.autoconfigure.PageHelperAutoConfiguration: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jms.activemq.ActiveMQConnectionFactoryConfiguration: void <init>()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.naming.NamingException: java.lang.String toString()>
<java.io.PrintWriter: void <init>(java.io.File)>-><java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: int hashCode()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration$DataSourceTransactionManagerConfiguration: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.rmi.server.UID: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.dao.InvalidDataAccessResourceUsageException: void <init>(java.lang.String)>-><org.springframework.dao.NonTransientDataAccessException: void <init>(java.lang.String)>
<org.apache.ibatis.mapping.CacheBuilder: void setCacheProperties(org.apache.ibatis.cache.Cache)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void finishRefresh()>-><org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent: void <init>(org.springframework.boot.web.server.WebServer,org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration: void <init>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.data.redis.connection.RedisSubscribedConnectionException: void <init>(java.lang.String)>-><org.springframework.dao.InvalidDataAccessApiUsageException: void <init>(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.ZoneId: java.lang.String toString()>
<freemarker.core._DelayedGetMessage: java.lang.String doConversion(java.lang.Object)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.Clock$SystemClock: java.lang.String toString()>
<java.io.PrintWriter: java.nio.charset.Charset toCharset(java.lang.String)>-><java.io.UnsupportedEncodingException: void <init>(java.lang.String)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor: java.lang.String toString()>
<com.google.common.base.Platform: void <clinit>()>-><java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><freemarker.template.Template$WrongEncodingException: java.lang.String getMessage()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.pubsub.StatefulRedisPubSubConnection switchToPubSub()>-><org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void close()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.apache.http.impl.nio.reactor.AbstractIOReactor: void closeSessions()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache$EntryFactory$8: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.util.StringUtils: java.lang.String capitalize(java.lang.String)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><org.springframework.data.redis.connection.ClusterCommandExecutor$NodeExecution: boolean isPositional()>
<org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: void access$000(org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult,org.springframework.data.redis.connection.ClusterCommandExecutor$PositionalKey,org.springframework.data.redis.connection.ClusterCommandExecutor$NodeResult)>-><org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: void add(org.springframework.data.redis.connection.ClusterCommandExecutor$PositionalKey,org.springframework.data.redis.connection.ClusterCommandExecutor$NodeResult)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><java.util.ArrayList: void clear()>
<com.hazelcast.cache.impl.HazelcastServerCacheManager: void createCacheConfig(java.lang.String,com.hazelcast.config.CacheConfig)>-><com.hazelcast.cache.impl.PreJoinCacheConfig: com.hazelcast.cache.impl.PreJoinCacheConfig of(com.hazelcast.config.CacheConfig)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder: void <init>()>-><org.springframework.data.redis.connection.RedisNode: void <init>()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getChannels()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.apache.shiro.authz.permission.WildcardPermission: void <init>(java.lang.String,boolean)>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: org.apache.shiro.authc.SimpleAccount getUser(java.lang.String)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.google.common.cache.LocalCache$Strength$1: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$Strength: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.embedded.tomcat.TldPatterns: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray(java.lang.Object[])>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.hazelcast.ringbuffer.impl.ReadResultSetImpl: int size()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.WeakHashMap: void clear()>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><javax.security.auth.Subject: java.util.Set getPrincipals()>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><com.hazelcast.config.JavaSerializationFilterConfig: int hashCode()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: void <init>(javax.servlet.MultipartConfigElement)>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.apache.ibatis.mapping.ResultMap$Builder: java.util.List getArgNames(java.lang.reflect.Constructor)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.convert.Converters: org.springframework.core.convert.converter.Converter mapToPropertiesConverter()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner: void onSubscribe(org.reactivestreams.Subscription)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.LocalCache$Strength getKeyStrength()>
<org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration: void <init>(org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.util.stream.Stream orderedStream()>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><com.google.common.base.Present: java.lang.String toString()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.monitor.impl.LocalMapStatsImpl: java.lang.String toString()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: long getExpireAfterAccessNanos()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.util.AbstractConstant: java.lang.String toString()>
<com.alibaba.druid.util.Utils: java.lang.Class loadClass(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.core.annotation.SynthesizingMethodParameter: void <init>(java.lang.reflect.Method,int)>-><org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>
<org.apache.shiro.config.Ini$Section: void <init>(java.lang.String,java.lang.String,org.apache.shiro.config.Ini$1)>-><org.apache.shiro.config.Ini$Section: void <init>(java.lang.String,java.lang.String)>
<io.lettuce.core.RedisConnectionException: io.lettuce.core.RedisConnectionException create(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.data.redis.serializer.ByteArrayRedisSerializer: void <clinit>()>-><org.springframework.data.redis.serializer.ByteArrayRedisSerializer: void <init>(java.lang.String,int)>
<redis.clients.jedis.JedisClusterInfoCache: java.util.List getAssignedSlotArray(java.util.List)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable: void asyncDestroyStores(java.util.Collection)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.text.ParsePosition: java.lang.String toString()>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.DurationFieldType: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.String toString()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.http.HttpHeaders: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.Operators$MultiSubscriptionSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<com.hazelcast.ringbuffer.impl.RingbufferService: void clearRingbuffersHavingLesserBackupCountThan(int,int)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>-><com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.Permissions: void <init>()>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.apache.juli.logging.DirectJDKLog: void fatal(java.lang.Object,java.lang.Throwable)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.convert.Converters$1: java.util.Set parseFlags(java.lang.String[])>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<register-finalize <org.springframework.data.redis.serializer.ByteArrayRedisSerializer: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><com.hazelcast.config.JavaSerializationFilterConfig: int hashCode()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.OffsetDateTime: java.lang.String toString()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>-><com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.apache.shiro.subject.support.DelegatingSubject: void <init>(org.apache.shiro.mgt.SecurityManager)>-><org.apache.shiro.subject.support.DelegatingSubject: void <init>(org.apache.shiro.subject.PrincipalCollection,boolean,java.lang.String,org.apache.shiro.session.Session,org.apache.shiro.mgt.SecurityManager)>
<com.hazelcast.ringbuffer.impl.RingbufferService: void clearRingbuffersHavingLesserBackupCountThan(int,int)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterTypeReader: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceResult newLettuceStatusResult(java.util.concurrent.Future)>-><org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder: org.springframework.data.redis.connection.lettuce.LettuceResult buildStatusResult()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.concurrent.ForkJoinTask: boolean isCancelled()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<com.hazelcast.nio.IOUtil: java.io.InputStream getFileFromResourcesAsStream(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.io.InputStream getResourceAsStream(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode$LinkState parseLinkState(java.lang.String[])>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.context.annotation.AnnotatedBeanDefinitionReader: void register(java.lang.Class[])>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.lettuce.core.event.metrics.CommandLatencyEvent: java.lang.String toString()>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.String: int length()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: int size()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder withId(java.lang.String)>-><org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder: org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder withId(java.lang.String)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><java.lang.String: java.lang.String valueOf(char)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: boolean isInfoEnabled()>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: java.lang.Object getCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<org.springframework.web.servlet.view.ContentNegotiatingViewResolver: void <clinit>()>-><org.springframework.web.servlet.view.ContentNegotiatingViewResolver$1: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.mail.MailSenderJndiConfiguration: void <init>(org.springframework.boot.autoconfigure.mail.MailProperties)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void add(java.util.Collection,byte[][])>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<org.apache.shiro.config.Ini: java.lang.String getSectionName(java.lang.String)>-><org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>
<com.hazelcast.internal.usercodedeployment.impl.ClassDataProvider: java.util.Map loadInnerClasses(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder withCacheConfiguration(java.lang.String,org.springframework.data.redis.cache.RedisCacheConfiguration)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<com.fasterxml.jackson.dataformat.cbor.CBORFactory: com.fasterxml.jackson.core.JsonFactory copy()>-><com.fasterxml.jackson.dataformat.cbor.CBORFactory: com.fasterxml.jackson.dataformat.cbor.CBORFactory copy()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.cluster.api.async.RedisClusterAsyncCommands getAsyncConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isQueueing()>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><com.alibaba.druid.support.profile.ProfileEntryKey: int hashCode()>
<com.fasterxml.jackson.core.io.UTF8Writer: void <init>(com.fasterxml.jackson.core.io.IOContext,java.io.OutputStream)>-><com.fasterxml.jackson.core.io.IOContext: byte[] allocWriteEncodingBuffer()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.stream.Stream lambda$new$0(java.util.List)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream sorted(java.util.Comparator)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.hazelcast.internal.partition.operation.PromotionCommitOperation: com.hazelcast.spi.CallStatus beforePromotion()>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.RedisStringCommands$SetOption: void <clinit>()>-><org.springframework.data.redis.connection.RedisStringCommands$SetOption: void <init>(java.lang.String,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiListingReader: void <init>()>
<com.hazelcast.instance.Node: java.util.Map findMemberAttributes(com.hazelcast.config.MemberAttributeConfig)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.Scanner: void <init>(java.lang.String)>-><java.io.StringReader: void <init>(java.lang.String)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.awt.image.ColorModel: java.lang.String toString()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.context.WebServerInitializedEvent: org.springframework.boot.web.server.WebServer getSource()>-><java.util.EventObject: java.lang.Object getSource()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.mgt.RealmSecurityManager: void applyCacheManagerToRealms()>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener)>-><org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: int hashCode()>
<com.hazelcast.config.ClassFilter: void <init>(com.hazelcast.config.ClassFilter)>-><java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration$WebSocketMessageConverterConfiguration: void <init>(com.fasterxml.jackson.databind.ObjectMapper)>-><com.fasterxml.jackson.databind.ObjectMapper: void <init>()>
<redis.clients.jedis.Connection: byte[] getBinaryBulkReply()>-><redis.clients.jedis.Connection: void flush()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.RegularEnumSet: boolean isEmpty()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.apache.shiro.authc.SimpleAccount: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.apache.shiro.util.PermissionUtils: java.util.Set resolveDelimitedPermissions(java.lang.String,org.apache.shiro.authz.permission.PermissionResolver)>-><org.apache.shiro.util.PermissionUtils: java.util.Set resolvePermissions(java.util.Collection,org.apache.shiro.authz.permission.PermissionResolver)>
<javax.security.auth.SubjectDomainCombiner: java.lang.String printDomain(java.security.ProtectionDomain)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<springfox.documentation.spring.web.plugins.PathAndParametersEquivalence: void <init>()>-><com.google.common.base.Equivalence: void <init>()>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask: com.hazelcast.spi.Operation prepareOperation()>-><com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation: void <init>(com.hazelcast.scheduledexecutor.ScheduledTaskHandler,boolean)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.apache.shiro.config.Ini: void load(java.io.InputStream)>-><org.apache.shiro.config.Ini: void load(java.io.Reader)>
<org.apache.shiro.web.servlet.ShiroHttpServletRequest: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.time.Duration getCommandTimeout()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.time.Duration getCommandTimeout()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.WeakHashMap: void clear()>
<springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><com.google.common.base.Absent: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream getInputStreamForPath(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode$SlotRange parseSlotRange(java.lang.String[])>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.data.redis.connection.lettuce.LettuceConverters: java.util.List partitionsToClusterNodes(io.lettuce.core.cluster.models.partitions.Partitions)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<org.apache.shiro.config.Ini$Section: void <init>(java.lang.String,java.lang.String)>-><org.apache.shiro.config.Ini$Section: java.util.Map toMapProps(java.lang.String)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.data.redis.serializer.ByteArrayRedisSerializer: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getValueEquivalence()>-><com.google.common.cache.LocalCache$Strength$1: com.google.common.base.Equivalence defaultEquivalence()>
<net.sf.ehcache.pool.impl.DefaultSizeOfEngine: net.sf.ehcache.pool.sizeof.filter.SizeOfFilter getUserFilter()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.net.URL getResource(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Integer: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.util.calendar.Era: java.lang.String toString()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Arrays$ArrayList: int size()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<com.hazelcast.instance.TerminatedLifecycleService: java.lang.String addLifecycleListener(com.hazelcast.core.LifecycleListener)>-><com.hazelcast.core.HazelcastInstanceNotActiveException: void <init>()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisClusterNode$LinkState: org.springframework.data.redis.connection.RedisClusterNode$LinkState valueOf(java.lang.String)>-><java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
<javax.xml.xpath.SecuritySupport$5: java.lang.Object run()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.net.URL getResource(java.lang.String)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.authz.SimpleRole: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.concurrent.lock.LockStoreImpl: java.lang.String toString()>
<com.google.common.cache.LocalCache: boolean usesAccessQueue()>-><com.google.common.cache.LocalCache: boolean expiresAfterAccess()>
<org.springframework.data.redis.connection.DefaultedRedisConnection: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: org.springframework.data.redis.connection.RedisServerCommands serverCommands()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerApplicationScope(javax.servlet.ServletContext)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.io.InputStream getResourceStream(java.lang.String)>-><java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<org.springframework.data.redis.ClusterRedirectException: void <init>(int,java.lang.String,int,java.lang.Throwable)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<org.springframework.data.redis.connection.RedisClusterNode$SlotRange: void <init>(java.util.Collection)>-><java.lang.Object: void <init>()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.client.impl.protocol.task.AbstractMessageTask: void interceptBefore(com.hazelcast.security.Credentials)>-><com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask: java.lang.String getDistributedObjectName()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.SubList: int size()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: boolean usesAccessEntries()>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<cn.hutool.core.map.MapProxy: java.util.Set entrySet()>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><io.netty.util.concurrent.DefaultPromise: boolean isDone()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.ArrayList$SubList: int size()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.Iterator iterator()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<javax.security.auth.SubjectDomainCombiner: void <clinit>()>-><javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.apache.shiro.util.ClassUtils$2: java.lang.ClassLoader doGetClassLoader()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>-><com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.boot.validation.MessageInterpolatorFactory: void <clinit>()>-><java.util.LinkedHashSet: void <init>()>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int access$100(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerOpaqueTokenConfiguration$OAuth2WebSecurityConfigurerAdapter: void <init>()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: boolean customWeigher()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void info(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><java.util.ArrayList$SubList: int size()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<com.hazelcast.spi.Operation: com.hazelcast.spi.CallStatus call()>-><com.hazelcast.cache.impl.operation.CacheGetConfigOperation: void run()>
<org.springframework.web.cors.CorsConfiguration: void setAllowedMethods(java.util.List)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.crypto.PermissionsEnumerator: boolean hasMoreElements()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><com.hazelcast.util.scheduler.ScheduledEntry: java.lang.Object getValue()>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress,int,java.lang.String)>-><org.apache.http.HttpHost: void <init>(java.net.InetAddress,java.lang.String,int,java.lang.String)>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag: void <clinit>()>-><org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag: void <init>(java.lang.String,int)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void <init>()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.http.HttpEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap)>-><org.springframework.http.HttpHeaders: void putAll(java.util.Map)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><com.google.common.base.Absent: java.lang.String toString()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.web.method.HandlerMethod: org.springframework.core.MethodParameter[] initMethodParameters()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(org.springframework.data.redis.connection.RedisClusterNode)>-><org.springframework.data.redis.ClusterStateFailureException: void <init>(java.lang.String)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.asm.Handle: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void closeConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void close()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><com.hazelcast.instance.HazelcastInstanceProxy: java.lang.String toString()>
<com.hazelcast.cache.impl.DeferredValue: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList: void <init>(int)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: java.util.Collection getServletContextInitializerBeans()>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>(java.lang.ClassLoader)>-><java.lang.ClassLoader: java.lang.ClassLoader getParent()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.http.ResponseEntity: void <init>(org.springframework.http.HttpStatus)>-><org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap,org.springframework.http.HttpStatus)>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiDescriptionLookup: void <init>()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration: void <init>()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void close()>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>-><org.springframework.data.redis.connection.RedisNode: java.lang.String getHost()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<com.hazelcast.spi.Operation: com.hazelcast.spi.CallStatus call()>-><com.hazelcast.scheduledexecutor.impl.operations.CancelTaskBackupOperation: void run()>
<org.apache.shiro.realm.SimpleAccountRealm: void add(org.apache.shiro.authz.SimpleRole)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.ssl.SupportedEllipticPointFormatsExtension: java.lang.String toString()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<com.hazelcast.config.ClassFilter: void <init>()>-><java.lang.Object: void <init>()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.cluster.impl.VectorClock: java.lang.String toString()>
<org.springframework.web.method.HandlerMethod: java.lang.annotation.Annotation getMethodAnnotation(java.lang.Class)>-><org.springframework.core.annotation.AnnotatedElementUtils: java.lang.annotation.Annotation findMergedAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<org.springframework.data.redis.connection.convert.Converters: java.util.Properties toProperties(java.util.Map)>-><org.springframework.data.redis.connection.convert.MapToPropertiesConverter: java.lang.Object convert(java.lang.Object)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.apache.shiro.authz.SimpleRole: java.lang.String toString()>
<org.apache.shiro.web.servlet.ShiroHttpSession: void <init>(org.apache.shiro.session.Session,javax.servlet.http.HttpServletRequest,javax.servlet.ServletContext)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: javax.servlet.FilterRegistration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: java.lang.String getOrDeduceName(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.monitor.impl.LocalTopicStatsImpl: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.MonthDay: java.lang.String toString()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean isReadable()>-><org.apache.catalina.webresources.war.WarURLConnection: long getContentLengthLong()>
<org.springframework.web.server.adapter.ForwardedHeaderTransformer: void <clinit>()>-><org.springframework.util.LinkedCaseInsensitiveMap: void <init>(int,java.util.Locale)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: int getOrder(java.lang.Object)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<com.google.common.cache.LocalCache: com.google.common.cache.LocalCache$Segment createSegment(int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>
<org.apache.shiro.io.ResourceUtils: java.lang.String stripPrefix(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.instance.HazelcastInstanceProxy: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisClusterNode: void <init>(java.lang.String,int,org.springframework.data.redis.connection.RedisClusterNode$SlotRange)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.catalina.loader.ParallelWebappClassLoader: void <init>(java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase: void <init>(java.lang.ClassLoader)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.security.PermissionCollection: java.lang.String toString()>
<com.fasterxml.jackson.dataformat.cbor.CBORParser$Feature: int collectDefaults()>-><com.fasterxml.jackson.dataformat.cbor.CBORParser$Feature: com.fasterxml.jackson.dataformat.cbor.CBORParser$Feature[] values()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.nio.channels.FileLock: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceResult: void <init>(java.util.concurrent.Future,boolean,org.springframework.core.convert.converter.Converter)>-><org.springframework.data.redis.connection.lettuce.LettuceResult: void <init>(java.util.concurrent.Future,java.util.function.Supplier,boolean,org.springframework.core.convert.converter.Converter)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: void setCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object,java.lang.Object)>-><java.util.ArrayList$SubList: java.lang.Object set(int,java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterTopology getClusterTopology()>-><org.springframework.data.redis.connection.lettuce.LettuceClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.web.context.support.ServletContextResource: boolean equals(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(org.springframework.util.MultiValueMap)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.crypto.CryptoPermissionCollection: java.util.Enumeration elements()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationParameterHeadersConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.springframework.boot.web.servlet.ServletRegistrationBean: void configure(javax.servlet.ServletRegistration$Dynamic)>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.boot.web.servlet.context.WebApplicationContextServletContextAwareProcessor: void <init>(org.springframework.web.context.ConfigurableWebApplicationContext)>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><com.google.common.base.Absent: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.quartz.xml.ValidationException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$ClassProxyingConfiguration: void <init>(org.springframework.beans.factory.BeanFactory)>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.LinkedHashMap: void clear()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Double: java.lang.String toString()>
<redis.clients.jedis.util.Pool: java.lang.Object getResource()>-><java.lang.Throwable: java.lang.Throwable getCause()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<com.hazelcast.nio.SerializationClassNameFilter: void <init>(com.hazelcast.config.JavaSerializationFilterConfig)>-><com.hazelcast.config.JavaSerializationFilterConfig: com.hazelcast.config.ClassFilter getWhitelist()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><org.apache.commons.logging.LogAdapter$Log4jLog: void info(java.lang.Object)>
<org.apache.shiro.web.servlet.ShiroHttpServletRequest: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>(org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$1)>-><org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>()>
<org.apache.shiro.config.Ini: void <init>(org.apache.shiro.config.Ini)>-><org.apache.shiro.config.Ini: void <init>()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<com.google.common.collect.SingletonImmutableSet: void <init>(java.lang.Object,int)>-><com.google.common.collect.ImmutableSet: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.util.Set doFindAllClassPathResources(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: java.lang.Object nextElement()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.hazelcast.cache.impl.HazelcastServerCacheManager: com.hazelcast.config.CacheConfig findCacheConfig(java.lang.String,java.lang.String)>-><java.lang.String: int lastIndexOf(java.lang.String)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration: void <init>(org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.redis.connection.AbstractRedisConnection: void close()>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.boot.web.server.MimeMappings: void <init>()>-><java.lang.Object: void <init>()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$null$4(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<com.hazelcast.util.ServiceLoader: java.util.Set collectFactoryUrls(java.lang.String,java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: boolean hasMoreElements()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<org.springframework.data.domain.Sort: org.springframework.data.domain.Sort$Order lambda$new$0(org.springframework.data.domain.Sort$Direction,java.lang.String)>-><org.springframework.data.domain.Sort$Order: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.hazelcast.spi.impl.eventservice.impl.EventServiceSegment: void removeRegistrations(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: void <init>(int)>
<org.apache.shiro.config.Ini: java.lang.String cleanName(java.lang.String)>-><org.apache.logging.slf4j.Log4jLogger: void trace(java.lang.String)>
<org.springframework.boot.jdbc.AbstractDataSourceInitializer: void initialize()>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource getResource(java.lang.String)>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><com.hazelcast.instance.HazelcastInstanceProxy: java.lang.String toString()>
<com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getValueEquivalence()>-><com.google.common.cache.CacheBuilder: com.google.common.cache.LocalCache$Strength getValueStrength()>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>-><java.util.Collections$EmptySet: int size()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.dao.DataAccessException convertLettuceAccessException(java.lang.Exception)>-><org.springframework.data.redis.FallbackExceptionTranslationStrategy: org.springframework.dao.DataAccessException translate(java.lang.Exception)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: boolean usesWriteEntries()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.core.HashLiteral$SequenceHash: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.field.BaseDateTimeField: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.util.Set getSupportedTypes()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isStartTls()>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>-><org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>
<reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber: void cancel()>-><reactor.core.publisher.FluxHide$HideSubscriber: void cancel()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.jar.Attributes: void clear()>
<reactor.core.publisher.FluxFlatMap$FlatMapMain: boolean checkTerminated(boolean,boolean,org.reactivestreams.Subscriber,java.lang.Object)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onError(java.lang.Throwable)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><org.apache.shiro.authc.SimpleAccount: void setCredentials(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterTopology getClusterTopology()>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder slaveOf(java.lang.String)>
<org.springframework.aop.config.AopConfigUtils: org.springframework.beans.factory.config.BeanDefinition registerOrEscalateApcAsRequired(java.lang.Class,org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: void <init>(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ListableBeanFactory,org.springframework.beans.factory.ObjectProvider)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><com.hazelcast.spi.impl.AbstractCompletableFuture: boolean isCancelled()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.Throwable: java.lang.String getMessage()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.cache.StringTemplateLoader$StringTemplateSource: java.lang.String toString()>
<springfox.documentation.spring.web.readers.parameter.ExpandedParameterBuilder: void <init>(com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: java.util.Collection getServletContextInitializerBeans()>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(org.springframework.data.redis.connection.RedisClusterNode)>-><org.springframework.data.redis.connection.RedisNode: java.lang.Integer getPort()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxPeek$PeekSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<com.hazelcast.scheduledexecutor.impl.operations.ReplicationOperation: void run()>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<org.apache.shiro.authz.ModularRealmAuthorizer: void applyRolePermissionResolverToRealms()>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>()>-><java.lang.ClassLoader: java.lang.ClassLoader getParent()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><org.apache.shiro.config.Ini$Section: java.lang.String toString()>
<org.springframework.data.redis.connection.convert.Converters$1: java.util.Set parseFlags(java.lang.String[])>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char,char,boolean,boolean)>-><java.lang.String: java.lang.String trim()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.apache.shiro.subject.support.DelegatingSubject: void <init>(org.apache.shiro.subject.PrincipalCollection,boolean,java.lang.String,org.apache.shiro.session.Session,boolean,org.apache.shiro.mgt.SecurityManager)>-><org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session decorate(org.apache.shiro.session.Session)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.stream.Stream lambda$new$0(java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder: org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder listeningAt(java.lang.String,int)>-><org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.cluster.impl.ClusterServiceImpl: java.lang.String toString()>
<com.hazelcast.spi.tenantcontrol.TenantControl: void <clinit>()>-><com.hazelcast.spi.impl.tenantcontrol.NoopTenantControl: void <init>()>
<com.google.common.collect.SingletonImmutableSet: void <init>(java.lang.Object)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.terracotta.context.MutableTreeNode: java.lang.String toString()>
<org.apache.shiro.config.Ini: boolean isSectionHeader(java.lang.String)>-><org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<org.mybatis.spring.boot.autoconfigure.MybatisProperties: void <clinit>()>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver: void <init>()>
<com.google.common.cache.LocalCache$EntryFactory$6: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.util.MultiValueMapAdapter: void putAll(java.util.Map)>-><java.util.Collections$UnmodifiableMap: void putAll(java.util.Map)>
<register-finalize <io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<com.hazelcast.spi.impl.eventservice.impl.EventServiceSegment: void removeRegistrations(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.http.nio.pool.RouteSpecificPool: java.lang.String toString()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$3: void <init>(java.lang.String,int)>
<org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow: void <clinit>()>-><org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow: void <init>(java.lang.String,int)>
<io.lettuce.core.ReadFromImpl$ReadFromReplicaPreferred: void <init>()>-><io.lettuce.core.ReadFromImpl: java.util.function.Predicate access$100()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><java.lang.Object: void <init>()>
<com.google.common.cache.CacheLoader: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.HashMap: void <init>()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.sql.Timestamp: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: boolean isTraceEnabled()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.cluster.ClusterClientOptions getClusterClientOptions(org.springframework.data.redis.connection.RedisConfiguration$ClusterConfiguration)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientOptions()>
<org.apache.shiro.config.Ini: void <init>(org.apache.shiro.config.Ini)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.PropertyMapper$Source: java.lang.Boolean lambda$as$0()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.Set getBeanNames(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,boolean,boolean)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.hazelcast.cache.impl.operation.CacheGetConfigOperation: void <init>(java.lang.String,java.lang.String)>-><com.hazelcast.spi.impl.AbstractNamedOperation: void <init>(java.lang.String)>
<org.apache.shiro.subject.SimplePrincipalCollection: void <init>()>-><java.lang.Object: void <init>()>
<com.hazelcast.cache.impl.operation.CacheGetConfigOperation: void run()>-><java.lang.String: java.lang.String substring(int,int)>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<sun.security.ssl.SSLContextImpl$TLS12Context: void <init>()>-><sun.security.ssl.SSLContextImpl$AbstractTLSContext: void <init>(sun.security.ssl.SSLContextImpl$1)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.hazelcast.instance.HazelcastInstanceProxy: com.hazelcast.instance.HazelcastInstanceImpl getOriginal()>-><com.hazelcast.core.HazelcastInstanceNotActiveException: void <init>()>
<com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer: boolean cancel(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.data.redis.connection.RedisClusterNode: boolean isMarkedAsFail()>-><java.util.HashSet: boolean contains(java.lang.Object)>
<org.springframework.http.HttpHeaders: void putAll(java.util.Map)>-><org.springframework.util.LinkedMultiValueMap: void putAll(java.util.Map)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.http.HttpStatus getStatus(javax.servlet.http.HttpServletRequest)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.quartz.xml.ValidationException: java.lang.String getMessage()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>-><org.springframework.web.context.support.GenericWebApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$1: void <init>(javax.security.auth.SubjectDomainCombiner,javax.security.auth.Subject)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool makeCommonPool()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.springframework.http.HttpStatus: org.springframework.http.HttpStatus valueOf(int)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceResult newLettuceStatusResult(java.util.concurrent.Future)>-><org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder: org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder forResponse(java.util.concurrent.Future)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.Collections$UnmodifiableMap: void clear()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.Permissions: java.util.Enumeration elements()>
<java.net.UnknownContentHandler: java.lang.Object getContent(java.net.URLConnection)>-><org.apache.catalina.webresources.war.WarURLConnection: java.io.InputStream getInputStream()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.Collections$SynchronizedCollection: int size()>
<com.fasterxml.classmate.util.ClassKey: void <init>(java.lang.Class)>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: int getConnectTimeout()>-><org.springframework.data.redis.connection.jedis.DefaultJedisClientConfiguration: java.time.Duration getConnectTimeout()>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.springframework.web.cors.CorsConfiguration: void setAllowedMethods(java.util.List)>-><org.springframework.http.HttpMethod: org.springframework.http.HttpMethod resolve(java.lang.String)>
<org.springframework.data.redis.connection.AbstractRedisConnection: void close()>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void info(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.config.AliasedDiscoveryConfig: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void register(java.lang.Class[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.lang.Object,int)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.util.EventListener,int)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.lang.Thread: void <init>(java.lang.Runnable,java.security.AccessControlContext)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.Registration$Dynamic)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processRoleDefinitions(java.util.Map)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><com.google.common.base.Present: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String getDescription()>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><springfox.documentation.spring.web.DocumentationCache: void <init>()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: javax.servlet.Registration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: javax.servlet.ServletRegistration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<springfox.documentation.spring.web.plugins.PathAndParametersEquivalence: void <clinit>()>-><springfox.documentation.spring.web.plugins.ResolvedMethodParameterEquivalence: void <init>()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.data.redis.connection.RedisClusterNode: void <init>(org.springframework.data.redis.connection.RedisClusterNode$SlotRange)>-><org.springframework.data.redis.connection.RedisNode: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void setConfig(java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: io.lettuce.core.cluster.api.sync.RedisClusterCommands getConnection()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$7: void <init>(java.lang.String,int)>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Short: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.data.redis.connection.RedisNode: java.lang.String toString()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void subscribePattern(byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char,char)>-><org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char,char,boolean,boolean)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<com.hazelcast.scheduledexecutor.StaleTaskException: void <init>(java.lang.String)>-><com.hazelcast.core.HazelcastException: void <init>(java.lang.String)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<org.springframework.scheduling.quartz.ResourceLoaderClassLoadHelper: java.net.URL getResource(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.net.URL getResource(java.lang.String)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromClassPath(java.lang.String)>-><org.apache.logging.slf4j.Log4jLogger: void debug(java.lang.String,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream getInputStreamForPath(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<reactor.util.function.Tuple3: int hashCode()>-><com.alibaba.druid.support.profile.ProfileEntryKey: int hashCode()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><com.google.common.collect.SingletonImmutableSet: java.util.Iterator iterator()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<com.fasterxml.jackson.dataformat.cbor.PackageVersion: void <clinit>()>-><com.fasterxml.jackson.core.util.VersionUtil: com.fasterxml.jackson.core.Version parseVersion(java.lang.String,java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <clinit>()>-><java.util.ArrayList: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: void <init>()>-><org.apache.shiro.realm.CachingRealm: void setCachingEnabled(boolean)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.beans.factory.support.AbstractBeanFactory: void addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<java.util.LinkedHashSet: void <init>(int,float)>-><java.util.HashSet: void <init>(int,float,boolean)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void createWebServer()>-><org.springframework.web.context.support.GenericWebApplicationContext: javax.servlet.ServletContext getServletContext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandOnAllNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback)>-><org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromUrl(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object)>
<com.hazelcast.cache.impl.DeferredValue: void <clinit>()>-><com.hazelcast.cache.impl.DeferredValue: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.web.servlet.handler.MappedInterceptor: void <init>(java.lang.String[],java.lang.String[],org.springframework.web.servlet.HandlerInterceptor)>-><java.lang.Object: void <init>()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.HashSet: void <init>(java.util.Collection)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: void lambda$initialCacheNames$0(java.lang.String)>-><org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder withCacheConfiguration(java.lang.String,org.springframework.data.redis.cache.RedisCacheConfiguration)>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: void <clinit>()>-><org.springframework.core.OrderComparator: java.util.Comparator withSourceProvider(org.springframework.core.OrderComparator$OrderSourceProvider)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>-><java.lang.Object: void <init>()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.util.LinkedMultiValueMap: java.lang.String toString()>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration: void <init>(org.mybatis.spring.boot.autoconfigure.MybatisProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.EngineWriter: void <init>()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.WeakHashMap: void clear()>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: java.lang.String toString()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.rmi.dgc.VMID: java.lang.String toString()>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.property.field.FieldProvider getFieldProvider()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.publisher.Flux: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.domain.Sort$Order: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String,boolean,org.springframework.data.domain.Sort$NullHandling)>-><java.lang.Object: void <init>()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: java.lang.String toString()>
<com.hazelcast.multimap.impl.MultiMapService: void insertMigratedData(int,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.SingletonImmutableSet: int size()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner$2: void <init>(javax.security.auth.SubjectDomainCombiner)>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.nio.ByteOrder: java.lang.String toString()>
<org.springframework.http.HttpStatus: org.springframework.http.HttpStatus valueOf(int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.ssl.SessionId: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$PatternSubscriptionTask: void run()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isSubscribed()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void refresh()>-><org.springframework.context.support.AbstractApplicationContext: void refresh()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.ext.beans.OverloadedNumberUtil$NumberWithFallbackType: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<java.io.PrintWriter: java.nio.charset.Charset toCharset(java.lang.String)>-><java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
<org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.util.Collection)>-><java.util.Collections: java.util.Set emptySet()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><freemarker.ext.beans.HashAdapter$1$1$1: java.lang.Object getKey()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$1: java.lang.Object convert(java.lang.Object)>-><org.springframework.data.redis.connection.lettuce.LettuceConverters$1: java.util.List convert(io.lettuce.core.cluster.models.partitions.Partitions)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.util.context.ContextN: java.lang.String toString()>
<com.hazelcast.client.impl.protocol.task.AbstractMessageTask: void interceptAfter(com.hazelcast.security.Credentials)>-><com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask: java.lang.String getDistributedObjectName()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilder(java.lang.String,java.lang.String,java.util.Map)>-><org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: java.lang.String getErrorMessage(java.lang.String,java.lang.String)>
<com.google.common.cache.CacheBuilder: void <clinit>()>-><com.google.common.cache.CacheStats: void <init>(long,long,long,long,long,long)>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromFile(java.lang.String)>-><org.apache.logging.slf4j.Log4jLogger: boolean isDebugEnabled()>
<freemarker.ext.beans.MemberSelectorListMemberAccessPolicy$MemberSelector: freemarker.ext.beans.MemberSelectorListMemberAccessPolicy$MemberSelector parse(java.lang.String,java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.apache.shiro.config.Ini: void load(java.util.Scanner)>-><org.apache.logging.slf4j.Log4jLogger: void debug(java.lang.String)>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.merge.AbstractMergingEntryImpl: java.lang.String toString()>
<org.apache.shiro.mgt.DefaultSecurityManager: void <init>(java.util.Collection)>-><org.apache.shiro.mgt.RealmSecurityManager: void setRealms(java.util.Collection)>
<org.apache.shiro.util.PermissionUtils: java.util.Set resolvePermissions(java.util.Collection,org.apache.shiro.authz.permission.PermissionResolver)>-><org.apache.shiro.authz.permission.WildcardPermissionResolver: org.apache.shiro.authz.Permission resolvePermission(java.lang.String)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.UnresolvedPermissionCollection: java.util.Enumeration elements()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<reactor.core.publisher.MonoFlatMap$FlatMapMain: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void request(long)>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(org.springframework.data.redis.connection.RedisClusterNode)>-><java.lang.Integer: int intValue()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache: boolean usesKeyReferences()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache$Segment: void initTable(java.util.concurrent.atomic.AtomicReferenceArray)>
<javax.security.auth.SubjectDomainCombiner: boolean cachePolicy()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int)>-><java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: org.springframework.dao.DataAccessException convertLettuceAccessException(java.lang.Exception)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.cache.FileTemplateLoader: java.lang.String toString()>
<com.baomidou.mybatisplus.core.toolkit.ReflectionKit: java.util.List lambda$getFieldList$3(java.lang.Class)>-><org.apache.shiro.config.Ini$Section: java.util.Collection values()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<com.alibaba.druid.stat.DruidStatService: void <clinit>()>-><com.alibaba.druid.stat.DruidStatService: void <init>()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.time.Duration getCommandTimeout()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><freemarker.core.TokenMgrError: java.lang.String getMessage()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.commons.pool2.impl.DefaultPooledObject: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><java.lang.Object: void <init>()>
<com.hazelcast.internal.partition.operation.MigrationRequestOperation$ServiceNamespacesContext: void addNamespaceToServiceMappings(java.util.Collection,java.lang.String)>-><java.util.ArrayList$SubList: int size()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>()>-><org.apache.catalina.loader.WebappClassLoaderBase: void refreshPolicy()>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><org.apache.shiro.authz.SimpleRole: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceMessageListener: void <init>(org.springframework.data.redis.connection.MessageListener)>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.hazelcast.instance.HazelcastInstanceProxy: java.lang.String toString()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.apache.shiro.authc.SimpleAccount: void setCredentials(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: void setCredentials(java.lang.Object)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void createWebServer()>-><org.springframework.context.ApplicationContextException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode build()>-><org.springframework.data.redis.connection.RedisClusterNode: void <init>(java.lang.String,int,org.springframework.data.redis.connection.RedisClusterNode$SlotRange)>
<com.sun.net.httpserver.Headers: java.lang.String getFirst(java.lang.String)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.types.ResolvedObjectType create(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>-><com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.Hashtable: void clear()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><org.apache.shiro.authc.SimpleAccount: void <init>(java.lang.Object,java.lang.Object,java.lang.String)>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><java.lang.Class: java.lang.String getSimpleName()>
<com.fasterxml.classmate.util.ResolvedTypeCache: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisConnection getConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.api.StatefulRedisConnection getSharedConnection()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void subscribePattern(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void pSubscribe(byte[][])>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromFile(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.ResourceBundle$RBClassLoader: java.lang.Class loadClass(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<reactor.core.publisher.FluxNever: void subscribe(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char,char,boolean,boolean)>-><java.lang.String: int length()>
<springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.TypeNameExtractor getTypeNameExtractor()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<org.apache.shiro.config.Ini: void load(java.io.InputStream)>-><java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode$SlotRange parseSlotRange(java.lang.String[])>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.config.Ini$Section: void <init>(java.lang.String)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<com.alibaba.druid.filter.FilterManager: void loadFilterConfig(java.util.Properties,java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.util.Enumeration getResources(java.lang.String)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.core.Constants: void lambda$getValues$0(java.lang.String,java.util.Set,java.lang.String,java.lang.Object)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.hazelcast.config.ClassFilter: void <init>(com.hazelcast.config.ClassFilter)>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.x509.RDN: java.lang.String toString()>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><org.apache.catalina.webresources.war.WarURLConnection: int getContentLength()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: java.lang.String toString()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.apache.shiro.config.Ini$Section: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.lang.ClassLoader getClassLoader()>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.lang.ClassLoader getClassLoader()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><java.lang.System: long currentTimeMillis()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration getClientRegistration(java.lang.String,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Registration,java.util.Map)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper alwaysApplyingWhenNonNull()>
<reactor.core.publisher.Operators$MultiSubscriptionSubscriber: void set(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void request(long)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.apache.ibatis.io.ResolverUtil: void addIfMatching(org.apache.ibatis.io.ResolverUtil$Test,java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.Object getPrimaryPrincipal()>
<org.springframework.web.util.HierarchicalUriComponents$Type$10: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<register-finalize <org.springframework.data.redis.connection.RedisStringCommands$SetOption: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<javax.security.auth.SubjectDomainCombiner: boolean cachePolicy()>-><java.lang.Boolean: boolean parseBoolean(java.lang.String)>
<com.github.pagehelper.autoconfigure.PageHelperProperties: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.DefaultedRedisConnection: void setConfig(java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: org.springframework.data.redis.connection.RedisServerCommands serverCommands()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray(java.lang.Object[])>-><com.google.common.collect.SingletonImmutableSet: int copyIntoArray(java.lang.Object[],int)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.google.common.base.Present: java.lang.String toString()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<java.time.format.DateTimeTextProvider$LocaleStore: java.util.Iterator getTextIterator(java.time.format.TextStyle)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.cluster.ClusterClientOptions getClusterClientOptions(org.springframework.data.redis.connection.RedisConfiguration$ClusterConfiguration)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientOptions()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(org.springframework.data.redis.connection.RedisClusterNode)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.security.AccessControlContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.cache.jcache.JCacheCacheManager: java.util.Collection loadCaches()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.apache.shiro.config.Ini$Section: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><org.apache.http.util.TextUtils: boolean containsBlanks(java.lang.CharSequence)>
<javax.activation.SecuritySupport$4: java.lang.Object run()>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: boolean hasMoreElements()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.Set lambda$new$2(java.lang.Class[],org.springframework.beans.factory.ListableBeanFactory)>-><java.util.stream.Collectors: java.util.stream.Collector toSet()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.apache.logging.log4j.util.LoaderUtil: java.util.Collection findUrlResources(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: java.lang.Object nextElement()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.WeakHashMap: void clear()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner)>-><java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner,boolean)>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void addAllowedHeader(java.lang.String)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: boolean isExistTableId(java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><java.util.HashSet: boolean isEmpty()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void removeListener(org.springframework.data.redis.connection.MessageListener,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><com.hazelcast.util.scheduler.ScheduledEntry: java.lang.Object getValue()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Byte: java.lang.String toString()>
<org.springframework.beans.factory.ObjectProvider: void ifUnique(java.util.function.Consumer)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfUnique()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.RemovalListener getRemovalListener()>-><com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: java.lang.String toString()>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.core.OutputFormat: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,io.lettuce.core.pubsub.StatefulRedisPubSubConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider)>-><org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void <init>(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.AbstractCollection: boolean add(java.lang.Object)>
<cn.hutool.core.map.MapProxy: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<io.lettuce.core.ReadFromImpl$ReadFromReplicaPreferred: void <init>()>-><io.lettuce.core.ReadFromImpl: java.util.function.Predicate access$000()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void debug(java.lang.Object)>
<com.hazelcast.client.impl.protocol.task.AbstractMessageTask: void interceptBefore(com.hazelcast.security.Credentials)>-><com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask: java.lang.String getMethodName()>
<org.apache.ibatis.reflection.ParamNameResolver: java.lang.String getActualParamName(java.lang.reflect.Method,int)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.google.common.base.Absent: int hashCode()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.http.protocol.ImmutableHttpProcessor: void <init>(java.util.List,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<javax.activation.SecuritySupport$3: java.lang.Object run()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.util.Enumeration getResources(java.lang.String)>
<io.lettuce.core.masterslave.AutodiscoveryConnector: java.util.Optional findFirst(java.util.List,java.util.function.Predicate)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture: boolean isCancelled()>
<com.alibaba.druid.util.JdbcUtils: void <clinit>()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.util.Enumeration getResources(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.SimpleMixInResolver: com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver copy()>-><com.fasterxml.jackson.databind.introspect.SimpleMixInResolver: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver copy()>
<org.springframework.web.context.support.WebApplicationObjectSupport: void initApplicationContext(org.springframework.context.ApplicationContext)>-><org.springframework.web.context.support.GenericWebApplicationContext: javax.servlet.ServletContext getServletContext()>
<reactor.core.publisher.Operators: boolean validate(org.reactivestreams.Subscription,org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void cancel()>
<javax.security.auth.SubjectDomainCombiner$4: void <init>()>-><java.lang.Object: void <init>()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<net.sf.ehcache.util.MergedEnumeration: void <init>(java.util.Enumeration[])>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: boolean hasMoreElements()>
<org.apache.shiro.config.Ini: java.lang.String getSectionName(java.lang.String)>-><org.apache.shiro.config.Ini: java.lang.String cleanName(java.lang.String)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.web.cors.CorsConfiguration: void addAllowedOrigin(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader: void <init>(java.lang.ClassLoader)>-><org.apache.catalina.loader.ParallelWebappClassLoader: void <init>(java.lang.ClassLoader)>
<org.springframework.data.util.Pair: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.DefaultOperationReader: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.cluster.api.async.RedisClusterAsyncCommands getAsyncDedicatedConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.api.StatefulConnection doGetAsyncDedicatedConnection()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>-><java.util.Collections$SynchronizedList: void add(int,java.lang.Object)>
<org.springframework.data.redis.core.StringRedisTemplate: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.core.RedisAccessor: void setConnectionFactory(org.springframework.data.redis.connection.RedisConnectionFactory)>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.AbstractCollection: boolean isEmpty()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><com.hazelcast.spi.impl.AbstractCompletableFuture: java.lang.Object get()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.util.AbstractCollection: boolean isEmpty()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode build()>-><org.springframework.data.redis.connection.RedisClusterNode: org.springframework.data.redis.connection.RedisClusterNode$LinkState access$102(org.springframework.data.redis.connection.RedisClusterNode,org.springframework.data.redis.connection.RedisClusterNode$LinkState)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.FilterRegistrationBean: javax.servlet.Filter getFilter()>
<org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>-><java.util.LinkedHashSet: void <init>(int)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.base.AbstractDateTime: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><org.springframework.data.redis.connection.convert.Converters$1: java.util.Set parseFlags(java.lang.String[])>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.util.Collections$SynchronizedList: void add(int,java.lang.Object)>-><java.util.ArrayList: void add(int,java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: java.lang.String toString()>
<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: void <clinit>()>-><java.util.Collections: java.util.Set emptySet()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.sql.Date: java.lang.String toString()>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.ZoneOffset: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.http.impl.nio.reactor.ExceptionEvent: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisClusterConnection getClusterConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: boolean getShareNativeConnection()>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask: void processMessage()>-><com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask: java.lang.String getServiceName()>
<sun.awt.DebugSettings: void loadSystemProperties()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.asm.Label: java.lang.String toString()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: java.util.Queue discardingQueue()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>-><java.util.LinkedHashSet: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.joda.time.IllegalFieldValueException: java.lang.String getMessage()>
<org.springframework.cglib.core.EmitUtils: void member_helper_type(org.springframework.cglib.core.CodeEmitter,java.util.List,org.springframework.cglib.core.ObjectSwitchCallback,org.springframework.cglib.core.EmitUtils$ParameterTyper,org.springframework.asm.Label,org.springframework.asm.Label,java.util.BitSet)>-><java.util.Collections$SynchronizedCollection: int size()>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation: void <init>(com.hazelcast.scheduledexecutor.ScheduledTaskHandler,boolean)>-><com.hazelcast.scheduledexecutor.impl.operations.AbstractBackupAwareSchedulerOperation: void <init>(java.lang.String)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.dao.DataAccessException convertToDataAccessException(java.lang.Exception)>-><org.springframework.data.redis.PassThroughExceptionTranslationStrategy: org.springframework.dao.DataAccessException translate(java.lang.Exception)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.config.Ini: boolean isSectionHeader(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getPatterns()>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>
<org.springframework.boot.context.properties.ConfigurationPropertiesJsr303Validator$Delegate: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: void setMessageInterpolator(javax.validation.MessageInterpolator)>
<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String toJavaUncached0(java.lang.String,boolean)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.dao.DataAccessException convertLettuceAccessException(java.lang.Exception)>
<reactor.util.function.Tuple3: int hashCode()>-><com.hazelcast.instance.HazelcastInstanceProxy: int hashCode()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><javax.net.ssl.SSLEngine: java.lang.String getPeerHost()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>()>-><java.util.ArrayList: void <init>()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.lang.ProcessEnvironment$StringKeySet: boolean isEmpty()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<io.lettuce.core.ClientOptions: void <init>(io.lettuce.core.ClientOptions)>-><io.lettuce.core.ClientOptions: io.lettuce.core.SocketOptions getSocketOptions()>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <clinit>()>-><springfox.documentation.spring.web.plugins.PathAndParametersEquivalence: void <init>()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$3: boolean hasMoreElements()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Map)>-><org.apache.shiro.config.Ini$Section: boolean isEmpty()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.base.AbstractPeriod: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void stringSwitchHelper(org.springframework.cglib.core.CodeEmitter,java.util.List,org.springframework.cglib.core.ObjectSwitchCallback,org.springframework.asm.Label,org.springframework.asm.Label,int)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration: void <init>()>
<org.springframework.boot.context.properties.ConfigurationPropertiesJsr303Validator$Delegate: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: void afterPropertiesSet()>
<com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask: java.security.Permission getRequiredPermission()>-><com.hazelcast.security.permission.ScheduledExecutorPermission: void <init>(java.lang.String,java.lang.String[])>
<com.fasterxml.jackson.dataformat.cbor.CBORFactoryBuilder: void <init>(com.fasterxml.jackson.dataformat.cbor.CBORFactory)>-><com.fasterxml.jackson.core.TSFBuilder: void <init>(com.fasterxml.jackson.core.JsonFactory)>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration getClientRegistration(java.lang.String,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Registration,java.util.Map)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source as(java.util.function.Function)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>
<org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char,char,boolean,boolean)>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.info.ProjectInfoProperties)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.hazelcast.config.HotRestartConfig: void <init>()>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration$HikariPoolDataSourceMetadataProviderConfiguration: void <init>()>
<org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.Set lambda$new$2(java.lang.Class[],org.springframework.beans.factory.ListableBeanFactory)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream flatMap(java.util.function.Function)>
<com.google.common.cache.CacheBuilder$OneWeigher: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.apache.shiro.util.LifecycleUtils: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.ArrayList: boolean isEmpty()>
<org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.util.Collection)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$1: void <init>()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.chrono.GregorianChronology: java.lang.String toString()>
<com.fasterxml.jackson.core.io.IOContext: com.fasterxml.jackson.core.util.TextBuffer constructTextBuffer()>-><com.fasterxml.jackson.core.util.TextBuffer: void <init>(com.fasterxml.jackson.core.util.BufferRecycler)>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void info(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.google.common.base.Present: int hashCode()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>-><org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.support.DelegatingSubject: void <init>(org.apache.shiro.subject.PrincipalCollection,boolean,java.lang.String,org.apache.shiro.session.Session,boolean,org.apache.shiro.mgt.SecurityManager)>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void destroy()>-><org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>
<com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation: void <init>(com.hazelcast.scheduledexecutor.ScheduledTaskHandler,boolean)>-><com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl: java.lang.String getTaskName()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<com.fasterxml.jackson.core.io.IOContext: byte[] allocWriteEncodingBuffer()>-><com.fasterxml.jackson.core.io.IOContext: void _verifyAlloc(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: long getClientTimeout()>-><java.time.Duration: long toMillis()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><com.hazelcast.util.scheduler.ScheduledEntry: java.lang.Object getValue()>
<javax.xml.ws.spi.FactoryFinder: java.lang.Class safeLoadClass(java.lang.String,java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><org.springframework.data.redis.connection.RedisClusterNode: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder newRedisClusterNode()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<reactor.core.publisher.MonoToCompletableFuture: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void request(long)>
<org.apache.shiro.util.ClassUtils$1: java.lang.ClassLoader doGetClassLoader()>-><java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.http.HttpStatus getStatus(javax.servlet.http.HttpServletRequest)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Vector$1: java.lang.Object nextElement()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.lang.Object,int)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Filter,int)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pSubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void add(java.util.Collection,byte[][])>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection getPrincipalsLazy(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.partition.impl.MigrationManager$MigrateTask: java.lang.String toString()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.String getCacheNameWithPrefix(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.EnumMap: void clear()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$SingletonList: int size()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void unsubscribeChannel(byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doUnsubscribe(boolean,byte[][])>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isUseSsl()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: int hashCode()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><com.hazelcast.ringbuffer.impl.ReadResultSetImpl: int size()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.config.Ini$Section: void putAll(java.util.Map)>-><java.util.HashMap: void putAll(java.util.Map)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$8: void <init>(java.lang.String,int)>
<cn.hutool.core.map.MapProxy: void clear()>-><java.util.HashMap: void clear()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><com.google.common.base.Absent: int hashCode()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.SSLContextImpl: sun.security.ssl.ProtocolList getDefaultProtocolList(boolean)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.io.ObjectStreamField: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.data.domain.Sort$Order: int hashCode()>
<org.apache.catalina.core.ApplicationContext: java.lang.String getRealPath(java.lang.String)>-><org.apache.catalina.core.ApplicationContext: java.lang.String validateResourcePath(java.lang.String,boolean)>
<com.hazelcast.client.impl.protocol.task.AbstractMessageTask: void interceptBefore(com.hazelcast.security.Credentials)>-><com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask: java.lang.Object[] getParameters()>
<org.springframework.security.core.userdetails.User$UserBuilder: java.lang.String lambda$roles$1(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer: boolean cancel(java.lang.String)>-><com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer: void log(java.util.logging.Level,java.lang.String,java.lang.String)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.PermissionsEnumerator: boolean hasMoreElements()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.lang.String)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask: void processMessage()>-><com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask: com.hazelcast.spi.Operation prepareOperation()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<cn.hutool.core.collection.CollUtil: java.lang.String join(java.lang.Iterable,java.lang.CharSequence,java.lang.String,java.lang.String)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.mail.MailSenderJndiConfiguration: void <init>(org.springframework.boot.autoconfigure.mail.MailProperties)>-><org.springframework.boot.autoconfigure.mail.MailProperties: void <init>()>
<org.springframework.core.SpringProperties: void <clinit>()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.net.URL getResource(java.lang.String)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.LoadingCache build(com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: void checkWeightWithWeigher()>
<org.springframework.web.cors.CorsConfiguration: void <clinit>()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.scheduler.DelegateServiceScheduler: java.lang.String toString()>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.config.Ini$Section: int size()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: void <init>(org.springframework.boot.autoconfigure.data.redis.RedisProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<com.fasterxml.jackson.dataformat.cbor.CBORGenerator$Feature: int collectDefaults()>-><com.fasterxml.jackson.dataformat.cbor.CBORGenerator$Feature: int getMask()>
<org.springframework.http.HttpEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap)>-><org.springframework.http.HttpHeaders: org.springframework.http.HttpHeaders readOnlyHttpHeaders(org.springframework.http.HttpHeaders)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.tomcat.util.ExceptionUtils: java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.apache.ibatis.mapping.ResultMap$Builder: java.util.List getArgNames(java.lang.reflect.Constructor)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.springframework.web.method.HandlerMethod: org.springframework.core.MethodParameter[] initMethodParameters()>-><org.springframework.web.method.HandlerMethod$HandlerMethodParameter: void <init>(org.springframework.web.method.HandlerMethod,int)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<redis.clients.jedis.Connection: byte[] getBinaryBulkReply()>-><redis.clients.jedis.Connection: java.lang.Object readProtocolWithCheckingBroken()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: void <init>()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.stream.Stream lambda$null$1(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<org.apache.ibatis.type.TypeHandlerRegistry: java.util.Map getJdbcHandlerMapForEnumInterfaces(java.lang.Class,java.lang.Class)>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<reactor.core.publisher.StrictSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<com.google.common.cache.LocalCache: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList: java.util.Iterator iterator()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: boolean isClosed()>-><com.hazelcast.instance.LifecycleServiceImpl: boolean isRunning()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<io.lettuce.core.masterslave.StaticMasterSlaveConnector: reactor.core.publisher.Mono lambda$connectAsync$0(io.lettuce.core.RedisURI,io.lettuce.core.masterslave.MasterSlaveConnectionProvider,java.util.List)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerOpaqueTokenConfiguration$OpaqueTokenIntrospectionClientConfiguration: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration: void <init>()>
<org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode: void <clinit>()>-><org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode: void <init>(java.lang.String,int)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration$WebSocketMessageConverterConfiguration: void <init>(com.fasterxml.jackson.databind.ObjectMapper)>
<org.apache.shiro.authc.SimpleAuthenticationInfo: void <init>(org.apache.shiro.subject.PrincipalCollection,java.lang.Object)>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.RedisNode: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: java.lang.String toString()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><org.springframework.data.redis.connection.ClusterCommandExecutor$NodeExecution: void <init>(org.springframework.data.redis.connection.RedisClusterNode)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><org.springframework.util.ClassUtils: java.util.Set findMethodCandidatesByName(java.lang.Class,java.lang.String)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><net.sf.ehcache.Status: java.lang.String toString()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.springframework.web.cors.CorsConfiguration: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object resolveMultipleBeans(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.networking.ChannelOption: java.lang.String toString()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>-><java.util.ArrayList: void <init>()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.alibaba.druid.support.http.StatViewServlet: void <clinit>()>-><com.alibaba.druid.support.logging.LogFactory: com.alibaba.druid.support.logging.Log getLog(java.lang.Class)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: boolean isExistTableLogic(java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$2: org.springframework.data.redis.connection.RedisClusterNode convert(io.lettuce.core.cluster.models.partitions.RedisClusterNode)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder slaveOf(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: org.apache.shiro.authc.SimpleAccount getUser(java.lang.String)>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.Lock readLock()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><net.sf.ehcache.util.WeakIdentityConcurrentMap$IdentityWeakReference: java.lang.String toString()>
<org.springframework.beans.factory.InjectionPoint: void <init>(java.lang.reflect.Field)>-><java.lang.Object: void <init>()>
<org.springframework.web.cors.CorsConfiguration: void setAllowedHeaders(java.util.List)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder serving(org.springframework.data.redis.connection.RedisClusterNode$SlotRange)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<redis.clients.jedis.BinaryJedisCluster: java.util.Map getClusterNodes()>-><redis.clients.jedis.JedisClusterConnectionHandler: java.util.Map getNodes()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.nio.Address: java.lang.String toString()>
<sun.security.ssl.EngineWriter: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void <init>(org.springframework.data.redis.connection.lettuce.LettuceConnection)>-><java.lang.Object: void <init>()>
<com.hazelcast.internal.partition.operation.PromotionCommitOperation: com.hazelcast.spi.CallStatus beforePromotion()>-><java.util.ArrayList$SubList: int size()>
<org.apache.shiro.config.Ini: boolean isEmpty()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<register-finalize <org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <clinit>()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><com.google.common.base.Absent: java.lang.String toString()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.springframework.web.context.support.GenericWebApplicationContext: void setServletContext(javax.servlet.ServletContext)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.apache.commons.logging.LogAdapter$Log4jLog: boolean isTraceEnabled()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.springframework.context.support.AbstractApplicationContext: long getStartupDate()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.pubsub.StatefulRedisPubSubConnection switchToPubSub()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<reactor.core.publisher.SerializedSubscriber: void onError(java.lang.Throwable)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onError(java.lang.Throwable)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: com.google.common.cache.LocalCache$Segment createSegment(int,long,com.google.common.cache.AbstractCache$StatsCounter)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.apache.catalina.core.StandardContext: java.lang.String getRealPath(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$2: org.springframework.data.redis.connection.RedisClusterNode convert(io.lettuce.core.cluster.models.partitions.RedisClusterNode)>-><org.springframework.data.redis.connection.RedisClusterNode: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder newRedisClusterNode()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.util.Collection)>-><org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$3: java.lang.Object nextElement()>
<com.alibaba.druid.support.logging.Resources: java.lang.Class classForName(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char)>-><org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char,char)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.SubList: java.lang.Object get(int)>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<com.hazelcast.cache.impl.operation.CacheGetConfigOperation: void run()>-><com.hazelcast.cache.impl.PreJoinCacheConfig: com.hazelcast.cache.impl.PreJoinCacheConfig of(com.hazelcast.config.CacheConfig)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl: java.lang.String toString()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.commons.pool2.impl.BaseGenericObjectPool$IdentityWrapper: java.lang.String toString()>
<io.lettuce.core.ReadFromImpl$OrderedPredicateReadFromAdapter: void <init>(java.util.function.Predicate[])>-><io.lettuce.core.ReadFrom: void <init>()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>
<com.hazelcast.nio.SerializationClassNameFilter: void <init>(com.hazelcast.config.JavaSerializationFilterConfig)>-><com.hazelcast.config.JavaSerializationFilterConfig: com.hazelcast.config.ClassFilter getBlacklist()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration: void setAllowedMethods(java.util.List)>
<org.springframework.validation.beanvalidation.SpringValidatorAdapter: void <clinit>()>-><java.util.HashSet: void <init>(int)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.springframework.dao.UncategorizedDataAccessException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.LocalDateTime: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>
<org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder customizers(java.util.Collection)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<com.google.common.cache.LocalCache$LocalLoadingCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache$LocalManualCache: void <init>(com.google.common.cache.LocalCache,com.google.common.cache.LocalCache$1)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.data.redis.FallbackExceptionTranslationStrategy: org.springframework.dao.DataAccessException translate(java.lang.Exception)>-><org.springframework.data.redis.PassThroughExceptionTranslationStrategy: org.springframework.dao.DataAccessException translate(java.lang.Exception)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.io.FilePermissionCollection: java.util.Enumeration elements()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<javax.security.auth.Subject: void <init>()>-><java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.google.common.base.Predicates$NotPredicate: java.lang.String toString()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void cancelRemainingTask(java.lang.Runnable)>-><com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture: boolean cancel(boolean)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: void <init>()>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getConnection()>-><org.springframework.jdbc.datasource.DelegatingDataSource: javax.sql.DataSource obtainTargetDataSource()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<com.hazelcast.cache.impl.HazelcastServerCacheManager: com.hazelcast.config.CacheConfig getCacheConfig(java.lang.String,java.lang.String)>-><com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl: int getPartitionId(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder slaveOf(java.lang.String)>-><org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder: org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder slaveOf(java.lang.String)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char,char,boolean,boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.http.HttpStatus)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.apache.http.HttpHost: void <init>(java.lang.String)>-><org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.math.BigInteger: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: boolean isAlive()>-><java.util.concurrent.atomic.AtomicBoolean: boolean get()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<redis.clients.jedis.JedisClusterInfoCache: void discoverClusterNodesAndSlots(redis.clients.jedis.Jedis)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.apache.shiro.config.Ini: void load(java.util.Scanner)>-><java.lang.StringBuilder: void <init>()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.springframework.util.MultiValueMapAdapter: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: void putAll(java.util.Map)>
<com.fasterxml.jackson.dataformat.cbor.CBORFactory: void <clinit>()>-><com.fasterxml.jackson.dataformat.cbor.CBORGenerator$Feature: int collectDefaults()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void awaitTerminationIfNecessary(java.util.concurrent.ExecutorService)>-><java.lang.Thread: void interrupt()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<sun.misc.URLClassPath$Loader$1: java.io.InputStream getInputStream()>-><org.apache.catalina.webresources.war.WarURLConnection: java.io.InputStream getInputStream()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<com.fasterxml.jackson.dataformat.cbor.CBORFactory: void <clinit>()>-><com.fasterxml.jackson.dataformat.cbor.CBORParser$Feature: int collectDefaults()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.IdentityHashMap: void clear()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<sun.security.ssl.EngineInputRecord: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.http.HttpStatus: int value()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.util.ClassUtils: java.io.InputStream getResourceAsStream(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.domain.Sort$Direction: org.springframework.data.domain.Sort$Direction[] values()>-><java.lang.Object: java.lang.Object clone()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<springfox.documentation.spring.web.readers.parameter.ParameterNameReader: void <init>()>-><java.lang.Object: void <init>()>
<reactor.core.publisher.SerializedSubscriber: void onComplete()>-><reactor.core.publisher.FluxHide$HideSubscriber: void onComplete()>
<java.io.PrintWriter: void <init>(java.lang.String)>-><java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.hazelcast.cache.impl.DeferredValue: com.hazelcast.cache.impl.DeferredValue withValue(java.lang.Object)>-><com.hazelcast.cache.impl.DeferredValue: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$CHMView: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.operationservice.impl.responses.CallTimeoutResponse: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.lang.Object,int)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<com.hazelcast.cache.impl.HazelcastServerCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>-><com.hazelcast.instance.HazelcastInstanceCacheManager: com.hazelcast.cache.ICache getCacheByFullName(java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<reactor.core.publisher.MonoZip: void subscribe(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.concurrent.CompletableFuture: java.lang.Object get()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void pSubscribe(byte[][])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.apache.catalina.core.ApplicationContext: java.util.Set getResourcePaths(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<sun.nio.ch.SharedFileLockTable: void removeStaleEntries()>-><java.util.Collections$SynchronizedCollection: boolean remove(java.lang.Object)>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$2: void <init>(java.lang.String,int)>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void close()>-><org.springframework.data.redis.connection.ClusterCommandExecutor: void destroy()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.google.common.cache.CacheStats: void <init>(long,long,long,long,long,long)>-><com.google.common.base.Preconditions: void checkArgument(boolean)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<reactor.core.publisher.FluxFlatMap$FlatMapMain: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.apache.http.util.TextUtils: boolean containsBlanks(java.lang.CharSequence)>-><java.lang.String: char charAt(int)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(java.lang.Class[])>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void refresh()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void request(long)>
<com.github.pagehelper.autoconfigure.PageHelperAutoConfiguration: void <init>()>-><com.github.pagehelper.autoconfigure.PageHelperProperties: void <init>()>
<org.apache.shiro.realm.text.IniRealm: void <init>(org.apache.shiro.config.Ini)>-><org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.util.Enumeration getResources(java.lang.String)>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder maximumSize(long)>-><com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<com.hazelcast.util.ServiceLoader$ClassIterator: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: redis.clients.jedis.util.Pool createRedisPool()>-><org.springframework.data.redis.connection.jedis.DefaultJedisClientConfiguration: java.util.Optional getHostnameVerifier()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$4: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.springframework.data.domain.Sort$Direction: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$2: org.springframework.data.redis.connection.RedisClusterNode convert(io.lettuce.core.cluster.models.partitions.RedisClusterNode)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder withId(java.lang.String)>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxFlatMap$FlatMapMain: void onSubscribe(org.reactivestreams.Subscription)>
<org.apache.shiro.config.Ini$Section: java.lang.String[] splitKeyValue(java.lang.String)>-><org.apache.shiro.config.Ini$Section: boolean isKeyValueSeparatorChar(char)>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$2: org.springframework.data.redis.connection.RedisClusterNode convert(io.lettuce.core.cluster.models.partitions.RedisClusterNode)>-><org.springframework.data.redis.connection.RedisClusterNode$SlotRange: void <init>(java.util.Collection)>
<java.util.Currency$1: java.lang.Void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Boolean: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<reactor.util.function.Tuple3: int hashCode()>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner$1: void <init>(javax.security.auth.SubjectDomainCombiner,javax.security.auth.Subject)>-><java.lang.Object: void <init>()>
<org.springframework.util.CollectionUtils: void lambda$unmodifiableMultiValueMap$0(java.util.Map,java.lang.Object,java.util.List)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.lang.String getResourceDescription(java.lang.String,org.springframework.beans.factory.ListableBeanFactory)>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress,int)>-><org.apache.http.HttpHost: void <init>(java.net.InetAddress,int,java.lang.String)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><java.util.Collections$SynchronizedList: int hashCode()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isStartTls()>
<org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer: void afterPropertiesSet()>-><org.flywaydb.core.Flyway: int migrate()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <clinit>()>-><java.util.LinkedHashSet: void <init>()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.apache.shiro.config.Ini$Section: void <init>(org.apache.shiro.config.Ini$Section)>-><org.apache.shiro.config.Ini$Section: void <init>(java.lang.String)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.TreeMap: void clear()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider doCreateConnectionProvider(io.lettuce.core.AbstractRedisClient,io.lettuce.core.codec.RedisCodec)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getReadFrom()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.publisher.FluxCreate$LatestAsyncSink: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest)>-><org.springframework.web.context.request.ServletRequestAttributes: void <init>(javax.servlet.http.HttpServletRequest)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$null$4(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.security.ssl.EngineWriter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.convert.Converters$1: java.util.Set parseFlags(java.lang.String[])>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.apache.shiro.authz.ModularRealmAuthorizer: void applyPermissionResolverToRealms()>-><com.google.common.collect.SingletonImmutableSet: java.util.Iterator iterator()>
<com.github.pagehelper.autoconfigure.PageHelperAutoConfiguration: void <init>()>-><org.apache.shiro.web.filter.mgt.SimpleNamedFilterList: void <init>(java.lang.String)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.google.common.cache.CacheBuilder$OneWeigher: void <clinit>()>-><com.google.common.cache.CacheBuilder$OneWeigher: void <init>(java.lang.String,int)>
<com.alibaba.druid.support.http.ResourceServlet: void <clinit>()>-><com.alibaba.druid.support.logging.LogFactory: com.alibaba.druid.support.logging.Log getLog(java.lang.Class)>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.lang.Iterable,java.lang.CharSequence,java.lang.String,java.lang.String)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.ibatis.parsing.XNode: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.hazelcast.HazelcastServerConfiguration: void <init>()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void cancel()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<cn.hutool.core.map.MapProxy: void clear()>-><java.util.Collections$UnmodifiableMap: void clear()>
<org.springframework.data.redis.serializer.RedisSerializerToSerializationPairAdapter: void <clinit>()>-><org.springframework.data.redis.serializer.RedisSerializerToSerializationPairAdapter: void <init>(org.springframework.data.redis.serializer.RedisSerializer)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.MonoFlatMap$FlatMapInner: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: java.util.Properties getConfig(java.lang.String)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<com.fasterxml.jackson.dataformat.cbor.CBORFactory: com.fasterxml.jackson.dataformat.cbor.CBORFactory copy()>-><com.fasterxml.jackson.dataformat.cbor.CBORFactory: void <init>(com.fasterxml.jackson.dataformat.cbor.CBORFactory,com.fasterxml.jackson.core.ObjectCodec)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.time.format.ZoneName: void <clinit>()>-><org.apache.shiro.config.Ini$Section: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: boolean isInfoEnabled()>
<org.apache.ibatis.builder.xml.XMLConfigBuilder: java.util.Properties settingsAsProperties(org.apache.ibatis.parsing.XNode)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.config.Ini$Section: java.util.Map toMapProps(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.redis.PassThroughExceptionTranslationStrategy: org.springframework.dao.DataAccessException translate(java.lang.Exception)>-><org.springframework.data.redis.connection.jedis.JedisExceptionConverter: java.lang.Object convert(java.lang.Object)>
<com.google.common.base.Equivalence$Equals: void <clinit>()>-><com.google.common.base.Equivalence$Equals: void <init>()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<cn.hutool.core.map.MapProxy: void clear()>-><java.util.AbstractMap: void clear()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.config.DiscoveryStrategyConfig: java.lang.String toString()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><java.lang.Enum: int ordinal()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.SpringfoxWebMvcConfiguration: void <init>()>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><org.apache.catalina.webresources.war.WarURLConnection: java.io.InputStream getInputStream()>
<java.util.IdentityHashMap: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void onRefresh()>-><org.springframework.context.ApplicationContextException: void <init>(java.lang.String,java.lang.Throwable)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.String toString()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.util.ClassKey: void <init>(java.lang.Class)>
<net.sf.ehcache.util.MergedEnumeration: void <init>(java.util.Enumeration[])>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: java.lang.Object nextElement()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.baomidou.mybatisplus.core.metadata.PageList: java.lang.String toString()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream getInputStreamForPath(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder customizers(java.util.Collection)>-><org.springframework.boot.web.client.RestTemplateBuilder: java.util.Set copiedSetOf(java.util.Collection)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void checkPulse()>-><org.springframework.data.redis.connection.util.AbstractSubscription: boolean isAlive()>
<freemarker.core._CoreAPI: void checkSettingValueItemsType(java.lang.String,java.lang.Class,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.instance.HazelcastInstanceCacheManager: com.hazelcast.cache.ICache getCacheByFullName(java.lang.String)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>-><java.lang.String: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<com.baomidou.mybatisplus.core.injector.AbstractSqlInjector: void inspectInject(org.apache.ibatis.builder.MapperBuilderAssistant,java.lang.Class)>-><java.util.Collections$SynchronizedCollection: void forEach(java.util.function.Consumer)>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><org.springframework.security.core.authority.SimpleGrantedAuthority: int hashCode()>
<springfox.documentation.spring.web.readers.parameter.ParameterTypeReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.web.cors.CorsConfiguration: void setAllowedMethods(java.util.List)>-><java.util.ArrayList: void <init>(int)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<register-finalize <org.springframework.data.domain.Sort$NullHandling: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromClassPath(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object)>
<org.apache.shiro.config.Ini: void addSection(java.lang.String,java.lang.StringBuilder)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.ibatis.mapping.ResultMap$Builder: java.util.List getArgNames(java.lang.reflect.Constructor)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.lang.String)>-><org.springframework.util.StringUtils: boolean isEmpty(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean isEmpty()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void ignoreDependencyInterface(java.lang.Class)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <clinit>()>-><org.springframework.web.bind.annotation.RequestMethod: org.springframework.web.bind.annotation.RequestMethod[] values()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.hazelcast.internal.partition.operation.PromotionCommitOperation: com.hazelcast.spi.CallStatus beforePromotion()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.text.IniRealm: void <init>(java.lang.String)>-><org.apache.shiro.config.Ini: org.apache.shiro.config.Ini fromResourcePath(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><net.sf.ehcache.Cache: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.context.annotation.MBeanExportConfiguration: void <init>()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: long getExpireAfterWriteNanos()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: void lambda$getClientRegistrations$0(java.util.Map,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties,java.lang.String,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Registration)>-><org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration getClientRegistration(java.lang.String,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Registration,java.util.Map)>
<net.sf.ehcache.pool.sizeof.AgentLoader$1: java.lang.Class run()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.apache.shiro.web.servlet.OncePerRequestFilter: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.config.Ini: void <init>(org.apache.shiro.config.Ini)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<springfox.documentation.spring.web.scanners.ApiListingReferenceScanner: void <init>()>-><java.lang.Object: void <init>()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.apache.shiro.config.Ini$Section: java.util.Map toMapProps(java.lang.String)>-><java.util.LinkedHashMap: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void <init>(io.lettuce.core.api.StatefulConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,long,int)>-><org.springframework.data.redis.connection.AbstractRedisConnection: void <init>()>
<org.apache.shiro.util.ClassUtils$3: void <init>()>-><org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: void <init>(org.apache.shiro.util.ClassUtils$1)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$PatternSubscriptionTask: void run()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<org.apache.http.HttpHost: void <init>(org.apache.http.HttpHost)>-><org.apache.http.util.Args: java.lang.Object notNull(java.lang.Object,java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.publisher.FluxOnAssembly: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.api.StatefulConnection doGetAsyncDedicatedConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider: io.lettuce.core.api.StatefulConnection getConnection(java.lang.Class)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.replicatedmap.impl.record.ReplicatedRecord: java.lang.String toString()>
<org.apache.ibatis.io.ClassLoaderWrapper: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.ClassLoader[])>-><org.apache.catalina.loader.WebappClassLoaderBase: java.io.InputStream getResourceAsStream(java.lang.String)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.ringbuffer.impl.RingbufferService: void addRingbuffer(int,com.hazelcast.ringbuffer.impl.RingbufferContainer,com.hazelcast.config.RingbufferConfig)>-><org.apache.shiro.config.Ini$Section: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: java.lang.String toString()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.TimeUnit$3: long convert(long,java.util.concurrent.TimeUnit)>-><java.util.concurrent.TimeUnit$1: long toMillis(long)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.security.MessageDigest: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration getClientRegistration(java.lang.String,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Registration,java.util.Map)>-><org.springframework.boot.context.properties.PropertyMapper$Source: void to(java.util.function.Consumer)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.quartz.xml.XMLSchedulingDataProcessor: java.util.Map buildTriggersByFQJobNameMap(java.util.List)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.util.ArrayList: boolean isEmpty()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientName()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.StrictSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider: void release(io.lettuce.core.api.StatefulConnection)>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void cancelRemainingTask(java.lang.Runnable)>-><com.hazelcast.spi.impl.AbstractCompletableFuture: boolean cancel(boolean)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.apache.shiro.web.servlet.ShiroHttpServletRequest: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>-><org.springframework.context.annotation.ClassPathBeanDefinitionScanner: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.config.Ini: void load(java.util.Scanner)>-><org.apache.shiro.config.Ini: void addSection(java.lang.String,java.lang.StringBuilder)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.ClusterRedirectException: void <init>(int,java.lang.String,int,java.lang.Throwable)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void debug(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><java.util.Collections: java.util.Set emptySet()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Object: java.lang.String toString()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><org.apache.shiro.realm.SimpleAccountRealm: org.apache.shiro.authz.SimpleRole getRole(java.lang.String)>
<org.apache.shiro.config.Ini: void load(java.util.Scanner)>-><java.util.Scanner: java.lang.String nextLine()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.data.util.ClassTypeInformation: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.google.common.cache.LocalCache$Segment: void initTable(java.util.concurrent.atomic.AtomicReferenceArray)>-><com.google.common.cache.LocalCache: boolean customWeigher()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.http.converter.AbstractHttpMessageConverter: boolean canWrite(java.lang.Class,org.springframework.http.MediaType)>-><org.springframework.http.converter.feed.RssChannelHttpMessageConverter: boolean supports(java.lang.Class)>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean add(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer: void <init>(javax.servlet.ServletContext)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<reactor.core.publisher.FluxFlatMap: boolean trySubscribeScalarMap(org.reactivestreams.Publisher,reactor.core.CoreSubscriber,java.util.function.Function,boolean,boolean)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: void <init>()>
<springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: boolean isUseSsl()>-><org.springframework.data.redis.connection.jedis.DefaultJedisClientConfiguration: boolean isUseSsl()>
<org.apache.shiro.util.CollectionUtils: java.util.List asList(java.lang.Object[])>-><java.util.Collections: java.util.List emptyList()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<com.google.common.collect.Platform: java.lang.Object[] newArray(java.lang.Object[],int)>-><java.lang.Object: java.lang.Class getClass()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.chrono.GJChronology: java.lang.String toString()>
<org.springframework.web.servlet.ModelAndView: org.springframework.ui.ModelMap getModelMap()>-><org.springframework.ui.ModelMap: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: void destroy()>-><org.springframework.data.redis.connection.lettuce.LettuceClusterConnection$LettuceClusterNodeResourceProvider: void destroy()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.AbstractMap: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<org.apache.shiro.config.Ini: void load(java.util.Scanner)>-><org.apache.shiro.config.Ini: java.lang.String getSectionName(java.lang.String)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisClusterConnection getClusterConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection getOrCreateSharedConnection()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void refresh()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void stopAndReleaseWebServer()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: int size()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void subscribeChannel(byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedCollection: int size()>
<org.apache.shiro.util.ClassUtils: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<com.hazelcast.config.EvictionConfig: void <init>()>-><java.lang.Object: void <init>()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <clinit>()>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$2: void <init>(java.lang.String,int,java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.http.HttpHeaders: void <clinit>()>-><java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisClusterConnection getClusterConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$MutableLettuceClientConfiguration: java.time.Duration getCommandTimeout()>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<org.springframework.boot.web.context.WebServerInitializedEvent: java.lang.Object getSource()>-><org.springframework.boot.web.context.WebServerInitializedEvent: org.springframework.boot.web.server.WebServer getSource()>
<org.apache.shiro.config.Ini: void addSection(java.lang.String,java.lang.StringBuilder)>-><org.apache.shiro.config.Ini$Section: void <init>(java.lang.String,java.lang.String,org.apache.shiro.config.Ini$1)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void awaitTerminationIfNecessary(java.util.concurrent.ExecutorService)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: void <init>()>-><org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(org.springframework.data.redis.connection.RedisClusterNode)>-><java.util.Collections$EmptySet: boolean contains(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: int hashCode()>-><com.google.common.base.Present: int hashCode()>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber,java.util.Iterator,boolean,java.lang.Runnable)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<com.hazelcast.cache.CacheUtil: java.lang.String getPrefix(java.net.URI,java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<redis.clients.jedis.JedisPool: redis.clients.jedis.Jedis getResource()>-><redis.clients.jedis.util.Pool: java.lang.Object getResource()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.String toString()>
<com.hazelcast.nio.SerializationClassNameFilter: void <init>(com.hazelcast.config.JavaSerializationFilterConfig)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean isDefaultsDisabled()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.PathMappingDecorator: void <init>()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream getInputStreamForPath(java.lang.String)>-><java.io.IOException: void <init>(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$2: org.springframework.data.redis.connection.RedisClusterNode convert(io.lettuce.core.cluster.models.partitions.RedisClusterNode)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder withFlags(java.util.Set)>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.apache.shiro.session.ProxiedSession: void <init>(org.apache.shiro.session.Session)>-><java.lang.Object: void <init>()>
<org.apache.shiro.util.ClassUtils: java.io.InputStream getResourceAsStream(java.lang.String)>-><org.apache.logging.slf4j.Log4jLogger: void trace(java.lang.String)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner$3: void <init>(javax.security.auth.SubjectDomainCombiner,javax.security.auth.Subject,java.security.CodeSource)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.apache.catalina.core.StandardContext: java.lang.String getRealPath(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.RedisClusterNode$SlotRange: void <init>(java.util.Collection)>-><java.util.LinkedHashSet: void <init>(java.util.Collection)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean customizedDatabaseIndex()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayList$SubList: int size()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.ServerProperties$ForwardHeadersStrategy: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.eventservice.impl.EventProcessor: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.cache.CacheProperties: java.lang.String lambda$resolveConfigLocation$0(org.springframework.core.io.Resource)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><redis.clients.jedis.HostAndPort: int getPort()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.ArrayList$SubList: int size()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.util.CollectionUtils: java.util.Set asSet(java.lang.Object[])>-><java.util.Collections: java.util.Set emptySet()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceSubscription doCreateSubscription(org.springframework.data.redis.connection.MessageListener,io.lettuce.core.pubsub.StatefulRedisPubSubConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider)>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,io.lettuce.core.pubsub.StatefulRedisPubSubConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$4: void processCase(int,org.springframework.asm.Label)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.ArrayList$SubList: int size()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.monitor.impl.LocalExecutorStatsImpl: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Arrays$ArrayList: int size()>
<org.springframework.ui.ModelMap: org.springframework.ui.ModelMap addAllAttributes(java.util.Map)>-><java.util.HashMap: void putAll(java.util.Map)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void error(java.lang.Object,java.lang.Throwable)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientRegistrationRepositoryConfiguration: void <init>()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.joda.time.IllegalFieldValueException: java.lang.String getMessage()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void setConfig(java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: io.lettuce.core.cluster.api.async.RedisClusterAsyncCommands getAsyncConnection()>
<com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask: java.lang.Object[] getParameters()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><cn.hutool.core.date.DateTime: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor$NodeExecution: void <init>(org.springframework.data.redis.connection.RedisClusterNode,org.springframework.data.redis.connection.ClusterCommandExecutor$PositionalKey)>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceStatusResult: void <init>(java.util.concurrent.Future)>-><org.springframework.data.redis.connection.lettuce.LettuceResult: void <init>(java.util.concurrent.Future)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.wrapper.MapWrapper: java.lang.Class getSetterType(java.lang.String)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.hazelcast.config.JavaSerializationFilterConfig: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.HashSet: void <init>()>
<org.springframework.data.domain.Sort$Order: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String)>-><org.springframework.data.domain.Sort$Order: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String,boolean,org.springframework.data.domain.Sort$NullHandling)>
<springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiListingScanner getApiListingScanner()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<reactor.core.publisher.SerializedSubscriber: void serDrainLoop(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onNext(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.http.HttpStatus: org.springframework.http.HttpStatus valueOf(int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.http.HttpEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap)>-><java.lang.Object: void <init>()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void close()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>
<org.springframework.data.redis.TooManyClusterRedirectionsException: void <init>(java.lang.String,java.lang.Throwable)>-><org.springframework.dao.DataRetrievalFailureException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: boolean isFIPSModeActive()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedOrigin(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration: void setAllowedOrigins(java.util.List)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.io.InputStream run()>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: boolean hasMoreElements()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void <init>()>-><org.apache.shiro.realm.SimpleAccountRealm: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: java.util.List getResults()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: void <init>()>-><java.lang.Object: void <init>()>
<freemarker.ext.servlet.IncludePage$1: void <init>(freemarker.ext.servlet.IncludePage,javax.servlet.http.HttpServletResponse,java.io.PrintWriter)>-><javax.servlet.http.HttpServletResponseWrapper: void <init>(javax.servlet.http.HttpServletResponse)>
<sun.security.ssl.SSLContextImpl$TLS12Context: void <clinit>()>-><sun.security.ssl.SSLContextImpl: java.lang.String[] access$000(sun.security.ssl.ProtocolVersion[])>
<org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.util.stream.Stream orderedStream()>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.util.stream.Stream resolveStream(boolean)>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.partition.impl.ReplicaFragmentSyncInfo: java.lang.String toString()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.io.InputStream run()>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: java.lang.Object nextElement()>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation: void <init>(com.hazelcast.scheduledexecutor.ScheduledTaskHandler,boolean)>-><com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl: java.lang.String getSchedulerName()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.Collection: java.util.stream.Stream stream()>
<java.util.zip.ZipFile: void <init>(java.io.File,java.nio.charset.Charset)>-><java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isSubscribed()>-><org.springframework.data.redis.connection.util.AbstractSubscription: boolean isAlive()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><com.google.common.base.Present: java.lang.String toString()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<com.google.common.base.Platform$JdkPatternCompiler: void <init>(com.google.common.base.Platform$1)>-><com.google.common.base.Platform$JdkPatternCompiler: void <init>()>
<org.apache.shiro.config.Ini$Section: boolean isCharEscaped(java.lang.CharSequence,int)>-><java.lang.String: char charAt(int)>
<org.apache.shiro.authc.SimpleAuthenticationInfo: void <init>(org.apache.shiro.subject.PrincipalCollection,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: void <init>(org.apache.shiro.subject.PrincipalCollection)>
<com.hazelcast.config.JavaSerializationFilterConfig: com.hazelcast.config.ClassFilter getWhitelist()>-><com.hazelcast.config.ClassFilter: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.io.InvalidClassException: java.lang.String getMessage()>
<com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask: void <init>(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.instance.Node,com.hazelcast.nio.Connection)>-><com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask: void <init>(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.instance.Node,com.hazelcast.nio.Connection)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: void <init>()>-><java.lang.Object: void <init>()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>-><java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.boot.autoconfigure.quartz.JobStoreType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.RegularEnumSet: boolean addAll(java.util.Collection)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxIterable: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><java.util.ArrayList$SubList: int size()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.Year: java.lang.String toString()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<reactor.core.publisher.MonoCompletionStage: void subscribe(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.web.socket.config.annotation.DelegatingWebSocketConfiguration: void <init>()>-><org.apache.shiro.web.filter.mgt.SimpleNamedFilterList: void <init>(java.lang.String)>
<org.apache.ibatis.mapping.CacheBuilder: void setCacheProperties(org.apache.ibatis.cache.Cache)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <clinit>()>-><java.lang.ClassLoader: boolean registerAsParallelCapable()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.freemarker.FreeMarkerReactiveWebConfiguration: void <init>(org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties)>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.Registration$Dynamic)>
<cn.hutool.core.map.MapProxy: void clear()>-><java.security.Provider: void clear()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<java.util.Collections$SynchronizedList: void add(int,java.lang.Object)>-><java.util.Collections$SynchronizedList: void add(int,java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getConnection()>-><org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getTransactionAwareConnectionProxy(javax.sql.DataSource)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromFile(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.hazelcast.config.ClassFilter: void <clinit>()>-><java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>
<com.hazelcast.ringbuffer.impl.RingbufferContainerCollector: java.util.Iterator containerIterator(int)>-><org.apache.shiro.config.Ini$Section: java.util.Collection values()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(org.springframework.data.redis.connection.RedisClusterNode)>-><org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$ResourceChainCustomizerConfiguration: void <init>()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: boolean isPipelined()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isPipelined()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<sun.awt.DebugSettings: void loadSystemProperties()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: void <init>()>-><java.util.ArrayList: void <init>()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: boolean shouldUseCachedValue()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$11: void <init>(java.lang.String,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration: void <init>()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<sun.security.ssl.SSLEngineImpl: void <init>(sun.security.ssl.SSLContextImpl)>-><java.util.Collections: java.util.List emptyList()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration: void <init>()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.util.Collections$SynchronizedList: int hashCode()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.jar.Attributes: void clear()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<com.fasterxml.jackson.module.paramnames.ParameterExtractor: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.io.InputStream getResourceStream(java.lang.String)>-><java.util.ResourceBundle$RBClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<com.google.common.base.Preconditions: void checkArgument(boolean)>-><java.lang.IllegalArgumentException: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isStartTls()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.boot.context.properties.ConfigurationPropertiesJsr303Validator$Delegate: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.apache.shiro.authz.ModularRealmAuthorizer: void applyPermissionResolverToRealms()>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<com.fasterxml.jackson.dataformat.cbor.CBORGenerator$Feature: int collectDefaults()>-><com.fasterxml.jackson.dataformat.cbor.CBORGenerator$Feature: boolean enabledByDefault()>
<com.hazelcast.config.JavaSerializationFilterConfig: void <init>()>-><java.lang.Object: void <init>()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode$SlotRange parseSlotRange(java.lang.String[])>-><java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.util.LockGuard: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache: void <clinit>()>-><java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: void <init>()>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><com.alibaba.druid.support.profile.ProfileEntryKey: int hashCode()>
<register-finalize <org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>-><org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>
<com.fasterxml.jackson.core.JsonParser: void <init>(int)>-><java.lang.Object: void <init>()>
<java.nio.DirectByteBuffer: void <init>(int,long,java.io.FileDescriptor,java.lang.Runnable)>-><java.nio.MappedByteBuffer: void <init>(int,int,int,int,java.io.FileDescriptor)>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: javax.servlet.Registration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.AbstractCollection: boolean isEmpty()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><java.lang.String: int length()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$2: void <init>(javax.security.auth.SubjectDomainCombiner)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.springframework.web.accept.ContentNegotiationManagerFactoryBean: void addMediaType(java.lang.String,org.springframework.http.MediaType)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void add(java.util.Collection,byte[][])>-><org.springframework.data.redis.connection.util.ByteArrayWrapper: void <init>(byte[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char,char,boolean,boolean)>-><org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>
<com.google.common.base.Suppliers$SupplierOfInstance: void <init>(java.lang.Object)>-><java.lang.Object: void <init>()>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.apache.shiro.authz.ModularRealmAuthorizer: void applyPermissionResolverToRealms()>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.apache.shiro.config.Ini: void load(java.io.Reader)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Throwable)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void prepareRefresh()>-><org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: void clearCache()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.web.cors.CorsConfiguration: void setAllowedMethods(java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.apache.shiro.spring.LifecycleBeanPostProcessor: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.lang.String getResourceDescription(java.lang.String,org.springframework.beans.factory.ListableBeanFactory)>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><com.hazelcast.config.JavaSerializationFilterConfig: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration: void <init>()>
<com.hazelcast.config.CacheConfig: void <init>()>-><com.hazelcast.config.CacheEvictionConfig: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.TreeSet: boolean add(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.baomidou.mybatisplus.core.plugins.InterceptorIgnoreHelper$InterceptorIgnoreCache: java.lang.String toString()>
<org.apache.http.impl.nio.client.InternalRequestExecutor: void connected(org.apache.http.nio.NHttpClientConnection,java.lang.Object)>-><org.apache.http.impl.nio.client.InternalRequestExecutor: void connected(org.apache.http.nio.NHttpClientConnection,java.lang.Object)>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: boolean isInfoEnabled()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.MonoToCompletableFuture: void onSubscribe(org.reactivestreams.Subscription)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void setAllowCredentials(java.lang.Boolean)>
<org.springframework.data.redis.connection.ReturnType: org.springframework.data.redis.connection.ReturnType[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: boolean isQueueing()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isQueueing()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.beans.factory.InjectionPoint: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.lang.Throwable: java.lang.Throwable getCause()>
<java.util.Collections$SynchronizedList: void sort(java.util.Comparator)>-><java.util.ArrayList: void sort(java.util.Comparator)>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><org.springframework.data.redis.connection.lettuce.LettuceClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>
<org.springframework.boot.context.properties.ConfigurationPropertiesJsr303Validator$Delegate: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.boot.validation.MessageInterpolatorFactory: javax.validation.MessageInterpolator getObject()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer: void checkNotStaleTask(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.JumboEnumSet: boolean addAll(java.util.Collection)>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<io.lettuce.core.ClientOptions: void <init>(io.lettuce.core.ClientOptions)>-><io.lettuce.core.ClientOptions: io.lettuce.core.ClientOptions$DisconnectedBehavior getDisconnectedBehavior()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: com.hazelcast.cache.impl.ICacheInternal getCacheUnchecked(java.lang.String)>-><com.hazelcast.cache.impl.HazelcastServerCacheManager: void addCacheConfigIfAbsent(com.hazelcast.config.CacheConfig)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.cluster.api.sync.RedisClusterCommands getDedicatedConnection()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.template.SimpleHash: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.config.Ini: void loadFromPath(java.lang.String)>-><org.apache.shiro.config.Ini: void load(java.io.InputStream)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void pipeline(org.springframework.data.redis.connection.lettuce.LettuceResult)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<javax.net.ssl.SSLEngine: void <init>()>-><java.lang.Object: void <init>()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask: com.hazelcast.spi.Operation prepareOperation()>-><com.hazelcast.client.impl.protocol.ClientMessage: int getPartitionId()>
<com.google.common.cache.LocalCache: boolean recordsTime()>-><com.google.common.cache.LocalCache: boolean recordsAccess()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber: void doError(long,java.lang.Throwable)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onError(java.lang.Throwable)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisConnection getConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: int getDatabase()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<io.netty.util.internal.NativeLibraryLoader: void load(java.lang.String,java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.net.URL getResource(java.lang.String)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.security.provider.PolicyFile: void refresh()>-><sun.security.provider.PolicyFile: void init(java.net.URL)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress)>-><org.apache.http.HttpHost: void <init>(java.net.InetAddress,int,java.lang.String)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<java.lang.Thread: void <init>(java.lang.Runnable,java.security.AccessControlContext)>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceSubscription initSubscription(org.springframework.data.redis.connection.MessageListener)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.pubsub.StatefulRedisPubSubConnection switchToPubSub()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.boot.autoconfigure.web.ErrorProperties getErrorProperties()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.eventservice.impl.Registration: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<register-finalize <com.fasterxml.jackson.dataformat.cbor.CBORGenerator$Feature: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.CachingRealm: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.springframework.data.redis.ClusterRedirectException: void <init>(int,java.lang.String,int,java.lang.Throwable)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration: void <init>()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$1: int getOrder(java.lang.Object)>-><org.springframework.core.OrderComparator: int getOrder(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.networking.nio.NioOutboundPipeline: java.lang.String toString()>
<org.apache.catalina.webresources.war.WarURLConnection: int getContentLength()>-><org.apache.catalina.webresources.war.WarURLConnection: int getContentLength()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.PropertyPermissionCollection: java.util.Enumeration elements()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.text.IniRealm: void <init>(java.lang.String)>-><org.apache.shiro.realm.text.IniRealm: void <init>()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.String toString()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<com.google.common.cache.CacheBuilder$1: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.ArrayList: java.lang.Object get(int)>
<com.google.common.cache.LocalCache: boolean recordsWrite()>-><com.google.common.cache.LocalCache: boolean refreshes()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$1: java.util.List convert(io.lettuce.core.cluster.models.partitions.Partitions)>-><org.springframework.data.redis.connection.lettuce.LettuceConverters: org.springframework.core.convert.converter.Converter access$000()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Log4jLog: void info(java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<org.apache.shiro.config.Ini: org.apache.shiro.config.Ini fromResourcePath(java.lang.String)>-><org.apache.shiro.config.Ini: void loadFromPath(java.lang.String)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<register-finalize <com.google.common.cache.CacheBuilder$OneWeigher: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.ibatis.io.Resources: java.io.InputStream getUrlAsStream(java.lang.String)>-><org.apache.catalina.webresources.war.WarURLConnection: java.io.InputStream getInputStream()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromClassPath(java.lang.String)>-><org.apache.shiro.util.ClassUtils: java.io.InputStream getResourceAsStream(java.lang.String)>
<org.apache.shiro.config.Ini: void load(java.util.Scanner)>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<com.google.common.base.Equivalence$Equals: void <init>()>-><com.google.common.base.Equivalence: void <init>()>
<org.apache.shiro.subject.support.DelegatingSubject: void <init>(org.apache.shiro.subject.PrincipalCollection,boolean,java.lang.String,org.apache.shiro.session.Session,org.apache.shiro.mgt.SecurityManager)>-><org.apache.shiro.subject.support.DelegatingSubject: void <init>(org.apache.shiro.subject.PrincipalCollection,boolean,java.lang.String,org.apache.shiro.session.Session,boolean,org.apache.shiro.mgt.SecurityManager)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.partition.impl.MigrationStats: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.rmi.transport.ObjectEndpoint: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<com.hazelcast.scheduledexecutor.impl.operations.CancelTaskBackupOperation: void run()>-><com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer: boolean cancel(java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object)>
<cn.hutool.core.map.MapProxy: void clear()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap: void clear()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<register-finalize <com.google.common.cache.LocalCache$Strength: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.web.util.UriComponentsBuilder: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.springframework.web.method.HandlerMethod: org.springframework.core.MethodParameter[] initMethodParameters()>-><java.lang.reflect.Method: int getParameterCount()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration: void <init>()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void addClassIfExists(java.util.List,java.lang.String)>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandOnAllNodes(org.springframework.data.redis.connection.lettuce.LettuceClusterConnection$LettuceClusterCommandCallback)>-><org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandOnAllNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.LinkedHashMap: void clear()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><com.hazelcast.instance.HazelcastInstanceProxy: java.lang.String toString()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.zip.ZipFile: void <init>(java.lang.String,java.nio.charset.Charset)>-><java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.google.common.base.Platform: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>
<reactor.core.publisher.Operators: void complete(org.reactivestreams.Subscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onComplete()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceConnection doCreateLettuceConnection(io.lettuce.core.api.StatefulRedisConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,long,int)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void <init>(io.lettuce.core.api.StatefulRedisConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,long,int)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.util.EventListener,int)>-><org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void <init>(java.util.EventListener)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: int size()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilder(org.springframework.security.oauth2.client.registration.ClientRegistration$Builder,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Provider)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper$Source from(java.util.function.Supplier)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: boolean isInfoEnabled()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<com.google.common.cache.LocalCache: boolean usesAccessEntries()>-><com.google.common.cache.LocalCache: boolean recordsAccess()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><org.springframework.core.io.ClassPathResource: void <init>(java.lang.String,java.lang.Class)>
<com.fasterxml.jackson.databind.deser.DataFormatReaders: void <init>(java.util.Collection)>-><com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><com.google.common.collect.SingletonImmutableSet: java.util.Iterator iterator()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.apache.shiro.authc.SimpleAccount: void <init>(java.lang.Object,java.lang.Object,java.lang.String)>-><org.apache.shiro.authc.SimpleAccount: void <init>(org.apache.shiro.subject.PrincipalCollection,java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.data.util.TypeVariableTypeInformation: java.lang.String toString()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Throwable)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(java.lang.Class[])>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void register(java.lang.Class[])>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: long getClientTimeout()>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.time.Duration getCommandTimeout()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode build()>-><org.springframework.data.redis.connection.RedisClusterNode: void <init>(org.springframework.data.redis.connection.RedisClusterNode$SlotRange)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.LocalDate: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<reactor.core.publisher.FluxDoFinally$DoFinallySubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.apache.shiro.config.Ini$Section: void <init>(java.lang.String,java.lang.String)>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.lang.Object,int)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.dao.InvalidDataAccessApiUsageException: void <init>(java.lang.String)>-><org.springframework.dao.NonTransientDataAccessException: void <init>(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$DefaultNodeGroup: java.lang.String toString()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.base.Suppliers$SupplierOfInstance: java.lang.Object get()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><org.apache.shiro.config.Ini$Section: int hashCode()>
<com.google.common.cache.CacheBuilder$NullListener: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: boolean isQueueing()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>-><org.springframework.context.annotation.ClassPathBeanDefinitionScanner: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.LinkedHashSet: void <init>()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.RegistrationBean: boolean isEnabled()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void awaitTerminationIfNecessary(java.util.concurrent.ExecutorService)>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.LinkedList: int size()>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><java.util.HashSet: int size()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterDefaultReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void add(java.util.Collection,byte[][])>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.commons.pool2.BaseObject: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.apache.shiro.config.Ini$Section: java.util.Map toMapProps(java.lang.String)>-><org.apache.shiro.config.Ini$Section: boolean isContinued(java.lang.String)>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.joda.time.IllegalFieldValueException: java.lang.String getMessage()>
<com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation: void run()>-><com.hazelcast.scheduledexecutor.impl.operations.AbstractSchedulerOperation: com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer getContainer()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.awt.Toolkit$2: java.lang.Void run()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isClosed()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isSubscribed()>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.partition.impl.PartitionReplicaFragmentVersions: java.lang.String toString()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: java.util.Properties getConfig(java.lang.String)>-><java.util.Properties: void <init>()>
<org.springframework.data.redis.connection.AbstractRedisConnection: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>(java.lang.ClassLoader)>-><java.util.ArrayList: void <init>()>
<org.apache.shiro.config.Ini: void <init>(org.apache.shiro.config.Ini)>-><org.apache.shiro.config.Ini: java.util.Collection getSections()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.hazelcast.client.impl.protocol.task.AbstractMessageTask: void checkPermissions(com.hazelcast.client.impl.ClientEndpoint)>-><com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask: java.security.Permission getRequiredPermission()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.dataformat.cbor.CBORGenerator$Feature: void <init>(java.lang.String,int,boolean)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.String toString()>
<com.hazelcast.nio.SerializationClassNameFilter: void <init>(com.hazelcast.config.JavaSerializationFilterConfig)>-><java.lang.Object: void <init>()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><freemarker.template.Template$WrongEncodingException: java.lang.String getMessage()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.io.InputStream getResourceStream(java.lang.String)>-><net.sf.ehcache.management.DevModeClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void <init>(io.lettuce.core.api.StatefulRedisConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,long,int)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void <init>(io.lettuce.core.api.StatefulConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,long,int)>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder promotedAs(org.springframework.data.redis.connection.RedisNode$NodeType)>-><org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder: org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder promotedAs(org.springframework.data.redis.connection.RedisNode$NodeType)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture: java.lang.Object get()>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.security.Provider$UString: java.lang.String toString()>
<springfox.documentation.schema.TypeNameExtractor: void <init>(com.fasterxml.classmate.TypeResolver,org.springframework.plugin.core.PluginRegistry,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream getInputStreamForPath(java.lang.String)>-><org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromFile(java.lang.String)>
<redis.clients.jedis.util.Pool: java.lang.Object getResource()>-><redis.clients.jedis.exceptions.JedisConnectionException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.context.annotation.ClassPathBeanDefinitionScanner: int scan(java.lang.String[])>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.schema.property.field.FieldProvider: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.lang.Throwable: java.lang.String getMessage()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerWebApplicationScopes()>
<java.io.PrintWriter: void <init>(java.lang.String,java.lang.String)>-><java.io.PrintWriter: void <init>(java.nio.charset.Charset,java.io.File)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromFile(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: java.util.List getAllFields(java.lang.Class)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: com.hazelcast.cache.impl.ICacheInternal getCacheUnchecked(java.lang.String)>-><com.hazelcast.cache.impl.HazelcastServerCacheManager: com.hazelcast.config.CacheConfig findCacheConfig(java.lang.String,java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.core.io.IOContext: byte[] allocWriteEncodingBuffer()>-><com.fasterxml.jackson.core.util.BufferRecycler: byte[] allocByteBuffer(int)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterTopology: void <init>(java.util.Set)>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void close()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isClosed()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void unsubscribeChannel(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<redis.clients.jedis.util.Pool: java.lang.Object getResource()>-><redis.clients.jedis.exceptions.JedisExhaustedPoolException: void <init>(java.lang.String,java.lang.Throwable)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<register-finalize <org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: com.hazelcast.cache.impl.ICacheInternal getCacheUnchecked(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<cn.hutool.core.map.MapProxy: void clear()>-><java.util.IdentityHashMap: void clear()>
<springfox.documentation.spring.web.readers.operation.OperationParameterHeadersConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>-><springfox.documentation.spring.web.readers.operation.AbstractOperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.springframework.core.env.ReadOnlySystemAttributesMap: void clear()>-><java.lang.UnsupportedOperationException: void <init>()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.util.context.Context0: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processRoleDefinitions(java.util.Map)>-><org.apache.shiro.config.Ini$Section: boolean isEmpty()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><org.apache.commons.logging.LogAdapter$Log4jLog: boolean isInfoEnabled()>
<java.util.ResourceBundle$Control$1: java.io.InputStream run()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.net.URL getResource(java.lang.String)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl: com.hazelcast.internal.partition.PartitionRuntimeState createPromotionCommitPartitionState(java.util.Collection)>-><java.util.ArrayList$SubList: int size()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilder(org.springframework.security.oauth2.client.registration.ClientRegistration$Builder,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Provider)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper alwaysApplyingWhenNonNull()>
<org.springframework.beans.factory.support.SimpleAutowireCandidateResolver: boolean isRequired(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider$3: boolean isRequired()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.core.io.buffer.LimitedDataBufferList: void lambda$addAll$1(org.springframework.core.io.buffer.DataBuffer)>-><org.springframework.core.io.buffer.LimitedDataBufferList: void updateCount(int)>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.util.HashSet: boolean isEmpty()>
<com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl: com.hazelcast.internal.partition.PartitionRuntimeState createPromotionCommitPartitionState(java.util.Collection)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.Permissions: void add(java.security.Permission)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Long: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker: org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer getDataSourceInitializer()>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfUnique()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void restore()>-><java.util.HashMap: void forEach(java.util.function.BiConsumer)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.DefaultedRedisConnection: void setConfig(java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void setConfig(java.lang.String,java.lang.String)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.concurrent.ForkJoinTask: boolean isDone()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: void access$000(org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult,org.springframework.data.redis.connection.ClusterCommandExecutor$PositionalKey,org.springframework.data.redis.connection.ClusterCommandExecutor$NodeResult)>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilder(org.springframework.security.oauth2.client.registration.ClientRegistration$Builder,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Provider)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper get()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<org.apache.catalina.core.ApplicationContext: void <clinit>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pSubscribe(byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doPsubscribe(byte[][])>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<org.springframework.boot.web.server.MimeMappings: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String,java.util.Locale)>-><java.time.format.DateTimeFormatterBuilder: void <init>()>
<org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration$EnableWebFluxConfiguration: void <init>(org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfUnique()>
<org.springframework.http.HttpHeaders: void <clinit>()>-><java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withZone(java.time.ZoneId)>
<org.springframework.beans.factory.config.DependencyDescriptor: void <init>(java.lang.reflect.Field,boolean,boolean)>-><java.lang.reflect.Field: java.lang.String getName()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><java.util.concurrent.locks.ReentrantLock: void <init>()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Filter,int)>-><org.springframework.boot.web.servlet.FilterRegistrationBean: void <init>(javax.servlet.Filter,org.springframework.boot.web.servlet.ServletRegistrationBean[])>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.LoadingCache build(com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache$LocalLoadingCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.net.InetSocketAddress: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder: org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder slaveOf(java.lang.String)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder replicaOf(java.lang.String)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$PatternSubscriptionPresentCondition: boolean passes()>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getPatterns()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.config.Ini$Section: java.util.Map toMapProps(java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource getResource(java.lang.String)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource getResource(java.lang.String)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><java.lang.Object: void <init>()>
<org.apache.shiro.mgt.DefaultSecurityManager: void <init>(org.apache.shiro.realm.Realm)>-><org.apache.shiro.mgt.RealmSecurityManager: void setRealm(org.apache.shiro.realm.Realm)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: void <init>(javax.security.auth.Subject,int)>-><java.util.AbstractSet: void <init>()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.Object getPrimaryPrincipal()>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean isEmpty()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: com.hazelcast.cache.impl.ICacheInternal getCacheUnchecked(java.lang.String)>-><com.hazelcast.cache.impl.AbstractHazelcastCacheManager: void registerListeners(com.hazelcast.config.CacheConfig,com.hazelcast.cache.ICache)>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder promotedAs(org.springframework.data.redis.connection.RedisNode$NodeType)>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><org.springframework.boot.web.servlet.support.ErrorPageFilter: void addClassIfPresent(java.util.Collection,java.lang.String)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.core.base.ParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int)>-><com.fasterxml.jackson.core.json.DupDetector: com.fasterxml.jackson.core.json.DupDetector rootDetector(com.fasterxml.jackson.core.JsonParser)>
<org.apache.shiro.util.ClassUtils: void <clinit>()>-><org.apache.shiro.util.ClassUtils$1: void <init>()>
<register-finalize <com.google.common.cache.CacheBuilder$NullListener: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><sun.security.util.Debug: void println(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void scan(java.lang.String[])>-><org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.Debug: boolean isOn(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void info(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<com.hazelcast.internal.partition.operation.PromotionCommitOperation: com.hazelcast.spi.CallStatus beforePromotion()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.apache.shiro.subject.SimplePrincipalCollection: void <init>(java.lang.Object,java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: void <init>(com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: void <init>(com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.shiro.realm.CachingRealm: boolean isEmpty(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean isEmpty()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.util.ClassUtils: java.lang.Class[] toClassArray(java.util.Collection)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.ArrayList$SubList: int size()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerWebApplicationScopes()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<reactor.core.publisher.FluxFlatMap$FlatMapMain: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void request(long)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void unsubscribePattern(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromFile(java.lang.String)>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.Iterable getCacheNames()>-><java.lang.String: int indexOf(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.stream.Stream lambda$null$1(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><java.util.Collection: java.util.stream.Stream stream()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection getPrincipalsLazy(java.lang.String)>-><java.util.LinkedHashMap: void <init>()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getValueEquivalence()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: void add(org.springframework.data.redis.connection.ClusterCommandExecutor$PositionalKey,org.springframework.data.redis.connection.ClusterCommandExecutor$NodeResult)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceSubscription initSubscription(org.springframework.data.redis.connection.MessageListener)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceSubscription doCreateSubscription(org.springframework.data.redis.connection.MessageListener,io.lettuce.core.pubsub.StatefulRedisPubSubConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.nio.DirectByteBuffer: void <init>(int,long,java.io.FileDescriptor,java.lang.Runnable)>-><sun.misc.Cleaner: sun.misc.Cleaner create(java.lang.Object,java.lang.Runnable)>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>-><com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])>
<java.security.ProtectionDomain$2: boolean getStaticPermissionsField(java.security.ProtectionDomain)>-><java.security.ProtectionDomain: boolean access$200(java.security.ProtectionDomain)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(java.lang.Class[])>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>
<com.google.common.cache.LocalCache: boolean usesAccessQueue()>-><com.google.common.cache.LocalCache: boolean evictsBySize()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: boolean recordsTime()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: void setMultipartConfig(javax.servlet.MultipartConfigElement)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: javax.servlet.Servlet getServlet()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><org.springframework.security.core.authority.SimpleGrantedAuthority: int hashCode()>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><org.apache.shiro.config.Ini$Section: int hashCode()>
<reactor.util.function.Tuple3: int hashCode()>-><com.google.common.base.Absent: int hashCode()>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler pickSoleHandler(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList: java.util.Iterator iterator()>
<freemarker.cache.URLTemplateSource: void close()>-><org.apache.catalina.webresources.war.WarURLConnection: java.io.InputStream getInputStream()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<reactor.core.publisher.MonoDelay: void subscribe(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object putValue(java.lang.Object,java.lang.Object)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.Collections$SynchronizedCollection: int size()>
<reactor.core.publisher.FluxIterable: boolean checkFinite(java.lang.Iterable)>-><java.util.ArrayList$SubList: java.util.Spliterator spliterator()>
<org.springframework.web.server.adapter.ForwardedHeaderTransformer: void <clinit>()>-><java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.authc.SimpleAccount)>-><org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>
<org.springframework.data.redis.connection.RedisClusterNode: void <init>(org.springframework.data.redis.connection.RedisClusterNode$SlotRange)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder maximumSize(long)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.apache.catalina.core.StandardContext: java.lang.String getRealPath(java.lang.String)>-><java.lang.String: boolean endsWith(java.lang.String)>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<reactor.core.publisher.DirectProcessor: void subscribe(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onComplete()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><org.springframework.data.domain.Sort$Order: int hashCode()>
<org.apache.http.util.TextUtils: boolean containsBlanks(java.lang.CharSequence)>-><java.lang.String: int length()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.partition.MigrationInfo: java.lang.String toString()>
<com.hazelcast.internal.partition.operation.PromotionCommitOperation: void finalizePromotion()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void trace(java.lang.Object)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.base.Ticker getTicker(boolean)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter: java.lang.Object convert(java.lang.Object)>-><org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void checkPulse()>-><org.springframework.data.redis.connection.RedisInvalidSubscriptionException: void <init>(java.lang.String)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>-><java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: javax.cache.Cache getCache(java.lang.String)>-><com.hazelcast.cache.impl.AbstractHazelcastCacheManager: com.hazelcast.cache.ICache getCache(java.lang.String)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void finishRefresh()>-><org.springframework.context.support.AbstractApplicationContext: void finishRefresh()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><com.hazelcast.util.scheduler.ScheduledEntry: java.lang.Object getKey()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.RedisClusterNode: boolean isConnected()>-><java.lang.Enum: boolean equals(java.lang.Object)>
<org.springframework.web.filter.ForwardedHeaderFilter: void <clinit>()>-><java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.PropertyName _findParamName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter,com.fasterxml.jackson.databind.AnnotationIntrospector)>-><com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: java.lang.String findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.jni.SSL: int fipsModeGet()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: void add(java.lang.Object,java.lang.Object)>
<com.google.common.collect.Platform: java.lang.Object[] newArray(java.lang.Object[],int)>-><java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.data.redis.PassThroughExceptionTranslationStrategy: org.springframework.dao.DataAccessException translate(java.lang.Exception)>-><org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter: java.lang.Object convert(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void prepareRefresh()>-><org.springframework.context.support.AbstractApplicationContext: void prepareRefresh()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache: boolean recordsAccess()>-><com.google.common.cache.LocalCache: boolean expiresAfterAccess()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <clinit>()>-><java.util.ArrayList: void <init>()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String)>-><org.springframework.data.redis.connection.RedisNode: java.lang.String getId()>
<org.springframework.data.redis.connection.lettuce.LettuceResult: void <init>(java.util.concurrent.Future,java.util.function.Supplier,boolean,org.springframework.core.convert.converter.Converter)>-><org.springframework.data.redis.connection.FutureResult: void <init>(java.lang.Object,org.springframework.core.convert.converter.Converter,java.util.function.Supplier)>
<com.hazelcast.cache.impl.HazelcastServerCacheManager: com.hazelcast.config.CacheConfig findCacheConfig(java.lang.String,java.lang.String)>-><com.hazelcast.cache.impl.HazelcastServerCacheManager: com.hazelcast.config.CacheConfig getCacheConfig(java.lang.String,java.lang.String)>
<com.hazelcast.nio.IOUtil$1: void <init>(java.nio.ByteBuffer)>-><java.io.OutputStream: void <init>()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<com.alibaba.druid.stat.DruidStatService: void <clinit>()>-><com.alibaba.druid.stat.DruidStatManagerFacade: com.alibaba.druid.stat.DruidStatManagerFacade getInstance()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.Map getErrorAttributes(javax.servlet.http.HttpServletRequest,boolean)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><freemarker.core.ParseException: java.lang.String getMessage()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getServletName()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: long getClientTimeout()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$MutableLettuceClientConfiguration: java.time.Duration getCommandTimeout()>
<com.alibaba.druid.filter.FilterManager: void loadFilterConfig(java.util.Properties,java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: java.lang.Object nextElement()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<javax.security.auth.SubjectDomainCombiner: void <clinit>()>-><javax.security.auth.SubjectDomainCombiner: boolean cachePolicy()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.AbstractMap: void clear()>
<java.util.Collections$UnmodifiableMap: void clear()>-><java.lang.UnsupportedOperationException: void <init>()>
<org.springframework.http.converter.AbstractHttpMessageConverter: boolean canWrite(java.lang.Class,org.springframework.http.MediaType)>-><org.springframework.http.converter.feed.AtomFeedHttpMessageConverter: boolean supports(java.lang.Class)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.http.HttpHeaders: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.springframework.cache.support.AbstractCacheManager: void initializeCaches()>-><org.springframework.cache.concurrent.ConcurrentMapCache: java.lang.String getName()>
<register-finalize <org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.aop.config.AopConfigUtils: void forceAutoProxyCreatorToUseClassProxying(org.springframework.beans.factory.support.BeanDefinitionRegistry)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration: void <init>()>
<org.springframework.security.core.userdetails.User$UserBuilder: java.lang.String lambda$roles$1(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.validation.MessageInterpolatorFactory: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.hazelcast.spi.impl.operationservice.impl.Invocation: java.lang.Exception newTargetNullException()>-><com.hazelcast.cache.impl.operation.CacheGetConfigOperation: java.lang.String getServiceName()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.apache.shiro.config.Ini: java.lang.String getSectionName(java.lang.String)>-><java.lang.String: int length()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><com.hazelcast.ringbuffer.impl.ReadResultSetImpl: java.lang.Object get(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void awaitTerminationIfNecessary(java.util.concurrent.ExecutorService)>-><java.util.concurrent.ThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void error(java.lang.Object,java.lang.Throwable)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$MapperScannerRegistrarNotFoundConfiguration: void <init>()>
<org.springframework.data.redis.connection.convert.Converters$1: java.util.Set parseFlags(java.lang.String[])>-><java.util.LinkedHashSet: void <init>(int,float)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap: void clear()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.util.MimeType: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void transaction(org.springframework.data.redis.connection.lettuce.LettuceResult)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void transaction(org.springframework.data.redis.connection.FutureResult)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.rmi.RemoteException: java.lang.String getMessage()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<register-finalize <org.springframework.data.redis.connection.ReturnType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<com.hazelcast.cache.impl.PreJoinCacheConfig: com.hazelcast.cache.impl.PreJoinCacheConfig of(com.hazelcast.config.CacheConfig)>-><com.hazelcast.cache.impl.PreJoinCacheConfig: void <init>(com.hazelcast.config.CacheConfig,boolean)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber: void handleTimeout()>-><reactor.core.publisher.FluxHide$HideSubscriber: void onError(java.lang.Throwable)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: java.lang.String toString()>
<com.google.common.cache.LocalCache$LocalLoadingCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<org.springframework.http.HttpHeaders: void <clinit>()>-><java.time.ZoneId: java.time.ZoneId of(java.lang.String)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.misc.Signal: java.lang.String toString()>
<org.apache.shiro.util.ClassUtils$1: java.lang.ClassLoader doGetClassLoader()>-><java.util.concurrent.ForkJoinWorkerThread$InnocuousForkJoinWorkerThread: java.lang.ClassLoader getContextClassLoader()>
<reactor.core.publisher.MonoCollectList$MonoCollectListSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><javax.xml.transform.TransformerFactoryConfigurationError: java.lang.String getMessage()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(org.springframework.util.MultiValueMap)>-><org.apache.commons.logging.LogAdapter$Log4jLog: boolean isDebugEnabled()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$1: void <init>(java.lang.String,int)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<springfox.documentation.spring.web.paths.PathMappingDecorator: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><freemarker.ext.beans.HashAdapter$1$1$1: java.lang.Object getValue()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.RedisStringCommands$SetOption: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.io.InputStream getResourceAsStream(java.lang.String)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<com.hazelcast.cache.impl.operation.CacheGetConfigOperation: void run()>-><com.hazelcast.cache.impl.operation.CacheGetConfigOperation$1: void <init>(com.hazelcast.cache.impl.operation.CacheGetConfigOperation)>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><org.apache.shiro.authz.SimpleRole: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.apache.shiro.authc.SimpleAccount: java.lang.String toString()>
<org.springframework.cache.jcache.JCacheCacheManager: java.util.Collection loadCaches()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.util.locale.Extension: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void awaitTerminationIfNecessary(java.util.concurrent.ExecutorService)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void warn(java.lang.Object)>
<org.apache.shiro.web.servlet.ShiroHttpServletRequest: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.HashMap$Node: java.lang.Object getValue()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.google.common.base.Absent: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertiesUtil$Environment$2: void accept(java.lang.String,java.lang.String)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.ArrayList$SubList: int size()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.Collections$SynchronizedCollection: int size()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.google.common.cache.CacheBuilder$NullListener: void <clinit>()>-><com.google.common.cache.CacheBuilder$NullListener: void <init>(java.lang.String,int)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.cluster.fd.ClusterFailureDetectorType: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.WebApplicationContextServletContextAwareProcessor: void <init>(org.springframework.web.context.ConfigurableWebApplicationContext)>-><org.springframework.web.context.support.ServletContextAwareProcessor: void <init>()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientName()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void trace(java.lang.Object)>
<org.springframework.http.HttpStatus: org.springframework.http.HttpStatus[] values()>-><java.lang.Object: java.lang.Object clone()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: int hashCode()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiListingReferenceScanner getApiListingReferenceScanner()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void reportThrowInSubscribe(reactor.core.CoreSubscriber,java.lang.Throwable)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.apache.shiro.config.Ini: boolean isEmpty()>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void trace(java.lang.Object)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><com.hazelcast.config.JavaSerializationFilterConfig: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$PooledDataSourceConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.text.AttributeEntry: java.lang.Object getKey()>
<cn.hutool.core.map.MapProxy: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.Object remove(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char,char,boolean,boolean)>-><java.lang.StringBuilder: void <init>()>
<reactor.core.publisher.FluxMap$MapSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.hazelcast.nio.SerializationClassNameFilter: void <init>(com.hazelcast.config.JavaSerializationFilterConfig)>-><com.hazelcast.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.TreeSet: boolean isEmpty()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.scheduledexecutor.impl.ScheduledTaskResult: java.lang.String toString()>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><com.google.common.base.Absent: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>
<reactor.core.publisher.FluxPeek$PeekSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><org.apache.commons.logging.LogAdapter$Log4jLog: boolean isInfoEnabled()>
<com.google.common.cache.CacheBuilder$2: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void <init>(io.lettuce.core.cluster.api.StatefulRedisClusterConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,org.springframework.data.redis.connection.ClusterTopologyProvider,org.springframework.data.redis.connection.ClusterCommandExecutor,java.time.Duration)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void <init>(io.lettuce.core.cluster.api.StatefulRedisClusterConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,org.springframework.data.redis.connection.ClusterTopologyProvider,org.springframework.data.redis.connection.ClusterCommandExecutor,java.time.Duration)>-><java.time.Duration: long toMillis()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder replicaOf(java.lang.String)>-><org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder: org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder replicaOf(java.lang.String)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.fasterxml.jackson.module.paramnames.PackageVersion: void <clinit>()>-><com.fasterxml.jackson.core.util.VersionUtil: com.fasterxml.jackson.core.Version parseVersion(java.lang.String,java.lang.String,java.lang.String)>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><com.google.common.base.Present: int hashCode()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.HashSet: int size()>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: boolean isInfoEnabled()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<reactor.core.publisher.MonoFlatMap$FlatMapInner: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void request(long)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.cache.ClassTemplateLoader: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.data.redis.connection.ClusterTopology: void <init>(java.util.Set)>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map retrieveMetrics()>-><org.apache.shiro.config.Ini$Section: java.util.Collection values()>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.lang.String: boolean isEmpty()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><org.springframework.web.context.support.WebApplicationContextUtils: void registerEnvironmentBeans(org.springframework.beans.factory.config.ConfigurableListableBeanFactory,javax.servlet.ServletContext)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><org.apache.shiro.util.CollectionUtils: java.util.List asList(java.lang.Object[])>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor: void <init>()>-><java.lang.Object: void <init>()>
<javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>-><javax.security.auth.Policy$4: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.web.method.HandlerMethod$HandlerMethodParameter: void <init>(org.springframework.web.method.HandlerMethod,int)>-><org.springframework.web.method.HandlerMethod: java.lang.reflect.Method access$000(org.springframework.web.method.HandlerMethod)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.ArrayList: int size()>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<org.springframework.data.redis.connection.AbstractRedisConnection: void close()>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: java.lang.String lambda$encodeTemplate$1(java.nio.charset.Charset,java.lang.String)>-><org.springframework.web.util.HierarchicalUriComponents: java.lang.String encodeUriComponent(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration: void <init>()>
<javax.security.auth.Subject$SecureSet: void <init>(javax.security.auth.Subject,int)>-><java.util.LinkedList: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceResult newLettuceResult(java.util.concurrent.Future,org.springframework.core.convert.converter.Converter)>-><org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder: org.springframework.data.redis.connection.lettuce.LettuceResult build()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void pipeline(org.springframework.data.redis.connection.lettuce.LettuceResult)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void pipeline(org.springframework.data.redis.connection.lettuce.LettuceResult)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isUseSsl()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceResult newLettuceResult(java.util.concurrent.Future,org.springframework.core.convert.converter.Converter)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.apache.shiro.io.ResourceUtils: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure: void <init>()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>-><org.springframework.data.redis.connection.RedisNode: java.lang.Integer getPort()>
<javax.mail.Session$6: java.net.URL[] run()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.util.Enumeration getResources(java.lang.String)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void remove(java.util.Collection,byte[][])>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<com.hazelcast.client.impl.protocol.task.AbstractMessageTask: void interceptAfter(com.hazelcast.security.Credentials)>-><com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask: java.lang.String getMethodName()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: void ensureOpen()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void checkPulse()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.config.Ini$Section: java.lang.String[] splitKeyValue(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettucePoolingConnectionProvider: void <init>(org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: org.apache.commons.pool2.impl.GenericObjectPoolConfig getPoolConfig()>
<reactor.core.publisher.MonoIgnoreThen$ThenIgnoreInner: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void request(long)>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$2: java.lang.Object convert(java.lang.Object)>-><org.springframework.data.redis.connection.lettuce.LettuceConverters$2: org.springframework.data.redis.connection.RedisClusterNode convert(io.lettuce.core.cluster.models.partitions.RedisClusterNode)>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.web.filter.FormContentFilter: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.partition.PartitionReplica: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$CHMView: boolean isEmpty()>
<com.fasterxml.classmate.util.LRUTypeCache$CacheMap: void <init>(int)>-><java.util.LinkedHashMap: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.YearMonth: java.lang.String toString()>
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.util.Set doFindAllClassPathResources(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.util.Enumeration getResources(java.lang.String)>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.quartz.impl.triggers.AbstractTrigger: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.networking.nio.AdvancedNetworkStats: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationDeprecatedReader: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: void <init>()>
<register-finalize <org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder: void <init>()>-><java.lang.Object: void <init>()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<io.lettuce.core.ClientOptions: void <init>(io.lettuce.core.ClientOptions)>-><io.lettuce.core.ClientOptions: io.lettuce.core.SslOptions getSslOptions()>
<org.apache.shiro.config.Ini: org.apache.shiro.config.Ini fromResourcePath(java.lang.String)>-><org.apache.shiro.config.Ini: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: void add(org.springframework.data.redis.connection.ClusterCommandExecutor$PositionalKey,org.springframework.data.redis.connection.ClusterCommandExecutor$NodeResult)>-><org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: void add(org.springframework.data.redis.connection.ClusterCommandExecutor$NodeResult)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<reactor.core.publisher.Operators: void complete(org.reactivestreams.Subscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration: void <init>()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.shiro.config.Ini$Section: void <init>(java.lang.String,java.lang.String)>-><java.util.LinkedHashMap: void <init>()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.convert.MapToPropertiesConverter: java.util.Properties convert(java.util.Map)>-><java.util.Properties: void <init>()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.Set getBeanNames(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>
<org.apache.shiro.config.Ini$Section: java.lang.String[] splitKeyValue(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>-><org.springframework.web.method.HandlerMethod: java.lang.Class getBeanType()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void awaitTerminationIfNecessary(java.util.concurrent.ExecutorService)>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><java.security.AccessController: java.security.AccessControlContext getContext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<com.hazelcast.util.ServiceLoader: java.util.Set collectFactoryUrls(java.lang.String,java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.util.Enumeration getResources(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: org.apache.shiro.authz.SimpleRole getRole(java.lang.String)>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.RemovalListener getRemovalListener()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.AbstractRedisConnection: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void run()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisConnection getConnection()>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.springframework.core.task.SimpleAsyncTaskExecutor: void <init>(java.lang.String)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.apache.shiro.io.ResourceUtils: java.lang.String stripPrefix(java.lang.String)>-><java.lang.String: int indexOf(java.lang.String)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void createWebServer()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>
<org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.hazelcast.config.AbstractCacheConfig: void <init>()>-><com.hazelcast.cache.impl.DeferredValue: com.hazelcast.cache.impl.DeferredValue withValue(java.lang.Object)>
<io.lettuce.core.ClientOptions: void <init>(io.lettuce.core.ClientOptions)>-><io.lettuce.core.ClientOptions: boolean isPingBeforeActivateConnection()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.apache.shiro.util.PermissionUtils: java.util.Set resolvePermissions(java.util.Collection,org.apache.shiro.authz.permission.PermissionResolver)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int access$200(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<com.fasterxml.jackson.dataformat.cbor.CBORGenerator$Feature: com.fasterxml.jackson.dataformat.cbor.CBORGenerator$Feature[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.config.Ini$Section: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<com.sun.naming.internal.VersionHelper12$5: java.util.Enumeration run()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.util.Enumeration getResources(java.lang.String)>
<freemarker.core.Configurable: void validateFormatNames(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromFile(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.catalina.core.StandardContext: java.lang.String getRealPath(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.template.SimpleDate: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: void afterPropertiesSet()>-><org.springframework.data.redis.connection.jedis.DefaultJedisClientConfiguration: java.util.Optional getHostnameVerifier()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.Collections$UnmodifiableMap: void clear()>
<com.hazelcast.cache.impl.HazelcastServerCacheManager: com.hazelcast.config.CacheConfig getCacheConfig(java.lang.String,java.lang.String)>-><com.hazelcast.spi.impl.AbstractInvocationFuture: java.lang.Object join()>
<org.springframework.data.domain.Sort$Order: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String,boolean,org.springframework.data.domain.Sort$NullHandling)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.hazelcast.internal.partition.impl.MigrationManager$RepairPartitionTableTask: void logPromotionCommitFailure(com.hazelcast.internal.partition.PartitionReplica,java.util.Collection,java.lang.Throwable)>-><java.util.ArrayList$SubList: int size()>
<springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander getModelAttributeParameterExpander()>
<java.util.Collections$SynchronizedMap: void clear()>-><org.springframework.util.LinkedMultiValueMap: void clear()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.authc.SimpleAccount)>-><org.apache.shiro.authc.SimpleAccount: org.apache.shiro.subject.PrincipalCollection getPrincipals()>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.lang.String: java.lang.String toLowerCase()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.util.function.Tuple2: java.lang.String toString()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.apache.shiro.subject.support.DelegatingSubject$StoppingAwareProxiedSession: void <init>(org.apache.shiro.subject.support.DelegatingSubject,org.apache.shiro.session.Session,org.apache.shiro.subject.support.DelegatingSubject)>-><org.apache.shiro.session.ProxiedSession: void <init>(org.apache.shiro.session.Session)>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: io.lettuce.core.cluster.api.sync.RedisClusterCommands getConnection()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayList$SubList: int size()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.springframework.web.util.HierarchicalUriComponents: void verifyUriComponent(java.lang.String,org.springframework.web.util.HierarchicalUriComponents$Type)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.ssl.RenegotiationInfoExtension: java.lang.String toString()>
<org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Locale)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: void <init>()>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.cache.impl.operation.CacheGetConfigOperation: void run()>-><java.lang.String: int lastIndexOf(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: org.apache.shiro.authz.SimpleRole getRole(java.lang.String)>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.Lock readLock()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void trace(java.lang.Object)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.AliasedIterableConfigurationPropertySource: java.util.stream.Stream addAliases(org.springframework.boot.context.properties.source.ConfigurationPropertyName)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><com.hazelcast.instance.HazelcastInstanceProxy: int hashCode()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<redis.clients.jedis.util.Pool: java.lang.Object getResource()>-><redis.clients.jedis.exceptions.JedisException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void <init>(io.lettuce.core.cluster.api.StatefulRedisClusterConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,org.springframework.data.redis.connection.ClusterTopologyProvider,org.springframework.data.redis.connection.ClusterCommandExecutor,java.time.Duration)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<cn.hutool.core.map.MapProxy: void clear()>-><java.util.TreeMap: void clear()>
<springfox.documentation.spring.web.scanners.ApiDescriptionLookup: void <init>()>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void close()>-><org.apache.commons.logging.LogAdapter$Log4jLog: void warn(java.lang.Object,java.lang.Throwable)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.ResolvedType: java.lang.Class getErasedType()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><com.hazelcast.util.scheduler.ScheduledEntry: java.lang.Object getKey()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<freemarker.core.Configurable: void validateFormatNames(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.LocalDateTime: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.HashMap: java.util.Collection values()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.HashMap: void <init>(int)>
<org.apache.shiro.config.Ini: void <init>(org.apache.shiro.config.Ini)>-><org.apache.shiro.config.Ini$Section: void <init>(org.apache.shiro.config.Ini$Section,org.apache.shiro.config.Ini$1)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.context.support.AbstractApplicationContext: void refresh()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void finishRefresh()>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><com.hazelcast.util.scheduler.ScheduledEntry: java.lang.Object getKey()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerApplicationScope(javax.servlet.ServletContext)>-><org.springframework.web.context.support.ServletContextScope: void <init>(javax.servlet.ServletContext)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterTopology: void <init>(java.util.Set)>-><java.util.Collections: java.util.Set emptySet()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void transaction(org.springframework.data.redis.connection.FutureResult)>-><java.util.LinkedList: boolean add(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerOpaqueTokenConfiguration$OpaqueTokenIntrospectionClientConfiguration: void <init>()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisClusterNode$SlotRange: void <init>(java.util.Collection)>-><java.util.Collections: java.util.Set emptySet()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: boolean hasMoreElements()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.publisher.FluxCreate$IgnoreSink: java.lang.String toString()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<com.fasterxml.jackson.core.base.ParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int)>-><com.fasterxml.jackson.core.base.ParserMinimalBase: void <init>(int)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: void <init>()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.core.CoroutinesUtils$monoToDeferred$1: void <init>(reactor.core.publisher.Mono,kotlin.coroutines.Continuation)>-><kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session decorate(org.apache.shiro.session.Session)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.data.redis.listener.KeyspaceEventMessageListener: void init()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisConnection getConnection()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>-><org.springframework.data.redis.ClusterStateFailureException: void <init>(java.lang.String)>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxDoFinally$DoFinallySubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Character$Subset: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.crdt.CRDTReplicationMigrationService: java.lang.String toString()>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterMultiplesReader: void <init>()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><java.lang.ref.ReferenceQueue: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.lang.Object,int)>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.apache.http.HttpHost: void <init>(org.apache.http.HttpHost)>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: void <init>()>-><org.apache.shiro.realm.AuthorizingRealm: void <init>()>
<java.util.Collections$SynchronizedList: java.util.ListIterator listIterator(int)>-><java.util.Collections$SynchronizedList: java.util.ListIterator listIterator(int)>
<cn.hutool.core.map.MapProxy: int size()>-><org.apache.shiro.config.Ini$Section: int size()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.Set lambda$new$2(java.lang.Class[],org.springframework.beans.factory.ListableBeanFactory)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.util.List)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: java.util.Collection getServletContextInitializerBeans()>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisConnection getConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void setConvertPipelineAndTxResults(boolean)>
<com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<redis.clients.jedis.JedisClusterConnectionHandler: java.util.Map getNodes()>-><redis.clients.jedis.JedisClusterInfoCache: java.util.Map getNodes()>
<reactor.core.publisher.Operators: boolean replace(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void cancel()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.Collection: java.util.stream.Stream stream()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$2: org.springframework.data.redis.connection.RedisClusterNode convert(io.lettuce.core.cluster.models.partitions.RedisClusterNode)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.data.domain.Sort$Order: int hashCode()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.mail.Provider: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.apache.shiro.spring.config.ShiroConfiguration: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.monitor.impl.LocalPNCounterStatsImpl: java.lang.String toString()>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress,java.lang.String,int,java.lang.String)>-><java.lang.Object: void <init>()>
<com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer: boolean cancel(java.lang.String)>-><com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer: void checkNotStaleTask(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisClusterConnection getClusterConnection()>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.time.Duration getCommandTimeout()>
<org.apache.shiro.authz.permission.WildcardPermission: void <init>(java.lang.String,boolean)>-><org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.HashMap$Node: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<reactor.core.publisher.Operators$MultiSubscriptionSubscriber: void set(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void cancel()>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object putValue(java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: int hashCode()>
<reactor.core.publisher.LambdaMonoSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void request(long)>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set getRealmNames()>
<org.springframework.web.cors.CorsConfiguration: void setAllowedMethods(java.util.List)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void closeIfUnsubscribed()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void createWebServer()>-><org.springframework.web.context.support.GenericWebApplicationContext: void initPropertySources()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><redis.clients.jedis.Jedis: void close()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilder(java.lang.String,java.lang.String,java.util.Map)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.NoOpReactiveSessionConfiguration: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.data.util.Pair: java.lang.String toString()>
<org.apache.shiro.authz.ModularRealmAuthorizer: void applyRolePermissionResolverToRealms()>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.authc.SimpleAccount: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><java.util.LinkedHashMap: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.config.JavaSerializationFilterConfig: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><freemarker.template.Template$WrongEncodingException: java.lang.String getMessage()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: javax.servlet.Registration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(org.springframework.transaction.TransactionDefinition)>-><org.springframework.transaction.TransactionDefinition: int getPropagationBehavior()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Log4jLog: void info(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.apache.shiro.config.Ini: void <init>(org.apache.shiro.config.Ini)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.rmi.server.UnicastServerRef: void dispatch(java.rmi.Remote,java.rmi.server.RemoteCall)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.http.HttpStatus: org.springframework.http.HttpStatus valueOf(int)>-><org.springframework.http.HttpStatus: org.springframework.http.HttpStatus resolve(int)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><java.util.HashSet: boolean add(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisSocketURIAndApplySettings(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.time.Duration getCommandTimeout()>
<java.util.Collections$SynchronizedList: int indexOf(java.lang.Object)>-><java.util.Collections$SynchronizedList: int indexOf(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: com.hazelcast.cache.impl.ICacheInternal getCacheUnchecked(java.lang.String)>-><com.hazelcast.cache.impl.HazelcastServerCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><cn.hutool.core.map.MapProxy: void clear()>
<org.springframework.boot.web.server.MimeMappings: org.springframework.boot.web.server.MimeMappings unmodifiableMappings(org.springframework.boot.web.server.MimeMappings)>-><org.springframework.boot.web.server.MimeMappings: void <init>(org.springframework.boot.web.server.MimeMappings,boolean)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<com.hazelcast.ringbuffer.impl.RingbufferService: void clearRingbuffersHavingLesserBackupCountThan(int,int)>-><org.apache.shiro.config.Ini$Section: boolean isEmpty()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder linkState(org.springframework.data.redis.connection.RedisClusterNode$LinkState)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceClusterConnection doCreateLettuceClusterConnection(io.lettuce.core.cluster.api.StatefulRedisClusterConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,org.springframework.data.redis.connection.ClusterTopologyProvider,org.springframework.data.redis.connection.ClusterCommandExecutor,java.time.Duration)>-><org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void <init>(io.lettuce.core.cluster.api.StatefulRedisClusterConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,org.springframework.data.redis.connection.ClusterTopologyProvider,org.springframework.data.redis.connection.ClusterCommandExecutor,java.time.Duration)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getTraceParameter(javax.servlet.http.HttpServletRequest)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents$Type$3: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void addClassIfPresent(java.util.Collection,java.lang.String)>-><org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisClusterConnection getClusterConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: boolean isClusterAware()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.io.InputStream getResourceStream(java.lang.String)>-><java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache$EntryFactory$3: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisConnection getConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: boolean isClusterAware()>
<com.google.common.base.Ticker: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><java.lang.Object: void <init>()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void createWebServer()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.ServletContextInitializer getSelfInitializer()>
<sun.security.ssl.SSLContextImpl$TLS12Context: void <clinit>()>-><sun.security.ssl.SunJSSE: boolean isFIPS()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.data.util.ParameterizedTypeInformation: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.classmate.TypeResolver: void <init>(com.fasterxml.classmate.util.ResolvedTypeCache)>-><java.lang.Object: void <init>()>
<redis.clients.jedis.JedisClusterInfoCache: java.util.List getAssignedSlotArray(java.util.List)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.apache.shiro.realm.SimpleAccountRealm: org.apache.shiro.authc.SimpleAccount getUser(java.lang.String)>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<springfox.documentation.spring.web.readers.operation.OperationTagsReader: void <init>(springfox.documentation.spring.web.readers.operation.DefaultTagsProvider)>-><java.lang.Object: void <init>()>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration: void <init>()>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.google.common.cache.LocalCache$WriteQueue: void <init>()>-><java.util.AbstractQueue: void <init>()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.config.oauth2.client.CommonOAuth2Provider getCommonProvider(java.lang.String)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.Object convert(java.lang.Object,java.lang.Class)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.apache.shiro.config.Ini: boolean isEmpty()>-><java.util.AbstractCollection: boolean isEmpty()>
<org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.convert.Converters: java.util.Properties toProperties(java.util.Map)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.apache.shiro.config.Ini: java.util.Collection getSections()>-><java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>
<sun.misc.Launcher: void <init>()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandOnAllNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback)>-><org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char,char,boolean,boolean)>-><java.util.ArrayList: void <init>()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.operationservice.impl.Invocation: java.lang.String toString()>
<springfox.documentation.spring.web.paths.OperationPathDecorator: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.CachingRealm: java.lang.String getName()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Optional: java.lang.String toString()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.jdbc.datasource.DataSourceUtils: java.sql.Connection fetchConnection(javax.sql.DataSource)>-><org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getConnection()>
<java.io.PrintWriter: void <init>(java.nio.charset.Charset,java.io.File)>-><java.io.BufferedWriter: void <init>(java.io.Writer)>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>-><com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>
<reactor.core.publisher.Operators: void error(org.reactivestreams.Subscriber,java.lang.Throwable)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<java.util.zip.ZipFile: void <init>(java.lang.String,java.nio.charset.Charset)>-><java.io.File: void <init>(java.lang.String)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.github.pagehelper.PageSerializable: void <init>(java.util.List)>-><java.util.Collections$SingletonList: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration: void <init>()>
<io.lettuce.core.ClientOptions: void <init>(io.lettuce.core.ClientOptions)>-><io.lettuce.core.ClientOptions: boolean isCancelCommandsOnReconnectFailure()>
<org.apache.shiro.config.Ini: java.util.Collection getSections()>-><java.util.LinkedHashMap: java.util.Collection values()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.config.oauth2.client.CommonOAuth2Provider getCommonProvider(java.lang.String)>-><org.springframework.boot.convert.ApplicationConversionService: org.springframework.core.convert.ConversionService getSharedInstance()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.shiro.config.Ini: void load(java.io.InputStream)>-><org.apache.shiro.config.ConfigurationException: void <init>(java.lang.Throwable)>
<org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.stream.Stream lambda$null$1(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><java.util.Collections$SetFromMap: java.util.stream.Stream stream()>
<com.hazelcast.config.CacheEvictionConfig: void <init>()>-><com.hazelcast.config.EvictionConfig: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.Weigher getWeigher()>
<java.util.Collections$SynchronizedList: void add(int,java.lang.Object)>-><java.util.SubList: void add(int,java.lang.Object)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.apache.shiro.authc.SimpleAccount: void addObjectPermissions(java.util.Collection)>-><org.apache.shiro.authz.SimpleAuthorizationInfo: void addObjectPermissions(java.util.Collection)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.Collections$SynchronizedCollection: int size()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()>
<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><org.springframework.aop.scope.ScopedProxyUtils: boolean isScopedTarget(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientName()>
<org.springframework.web.servlet.function.RouterFunctionDsl$filter$1: void <init>(kotlin.jvm.functions.Function2)>-><java.lang.Object: void <init>()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.ArrayList$SubList: int size()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Vector: java.lang.String toString()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.Collections$SynchronizedList: int indexOf(java.lang.Object)>-><java.util.ArrayList: int indexOf(java.lang.Object)>
<org.apache.shiro.config.Ini: void <init>()>-><java.lang.Object: void <init>()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.redis.connection.convert.Converters: java.util.Properties toProperties(java.util.Map)>-><java.util.Properties: void <init>()>
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping: void <clinit>()>-><java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<cn.hutool.core.lang.reflect.ActualTypeMapperPool: java.lang.reflect.Type getActualType(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$2: org.springframework.data.redis.connection.RedisClusterNode convert(io.lettuce.core.cluster.models.partitions.RedisClusterNode)>-><org.springframework.data.redis.connection.lettuce.LettuceConverters$2: java.util.Set parseFlags(java.util.Set)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.lettuce.core.RedisURI: java.lang.String toString()>
<java.nio.MappedByteBuffer: void <init>(int,int,int,int,java.io.FileDescriptor)>-><java.nio.ByteBuffer: void <init>(int,int,int,int)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.lettuce.core.protocol.CommandArgs$CharArrayArgument: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.ApiListingReferenceScanner: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void setConfig(java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: boolean isQueueing()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void _addDeserializerConstructors(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,java.util.Map)>-><com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: com.fasterxml.jackson.annotation.JsonCreator$Mode findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: void <init>(org.springframework.data.redis.connection.lettuce.LettuceClusterConnection)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void <init>(org.springframework.data.redis.connection.lettuce.LettuceConnection)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.config.Scope getRegisteredScope(java.lang.String)>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration getClientRegistration(java.lang.String,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Registration,java.util.Map)>-><org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilder(java.lang.String,java.lang.String,java.util.Map)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Log4jLog: void error(java.lang.Object,java.lang.Throwable)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>-><com.google.common.cache.CacheBuilder: void <init>()>
<register-finalize <org.springframework.data.redis.connection.RedisNode$NodeType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy$TransactionAwareInvocationHandler: void <init>(org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy,javax.sql.DataSource)>-><java.lang.Object: void <init>()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: void destroy()>-><org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void destroy()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.net.SocketPermissionCollection: java.util.Enumeration elements()>
<org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>-><org.apache.shiro.config.Ini: org.apache.shiro.config.Ini$Section getSection(java.lang.String)>
<org.apache.shiro.util.ClassUtils$1: void <init>()>-><org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: void <init>(org.apache.shiro.util.ClassUtils$1)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: java.lang.String toString()>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.util.executor.CompletableFutureTask: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.concurrent.FutureTask: boolean isDone()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.Collections: java.util.List emptyList()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<io.lettuce.core.ClientOptions: void <init>(io.lettuce.core.ClientOptions)>-><io.lettuce.core.ClientOptions: boolean isSuspendReconnectOnProtocolFailure()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.net.URI: java.lang.String toString()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.HashSet: boolean isEmpty()>
<com.google.common.cache.LocalCache: boolean recordsWrite()>-><com.google.common.cache.LocalCache: boolean expiresAfterWrite()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><org.apache.commons.logging.LogAdapter$Log4jLog: void info(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandOnAllNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback)>-><org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterTopology getClusterTopology()>
<com.google.common.cache.CacheBuilder: void checkWeightWithWeigher()>-><java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void info(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void info(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>-><java.util.concurrent.TimeUnit$6: long toNanos(long)>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>
<org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent: void <init>(org.springframework.boot.web.server.WebServer,org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext)>-><org.springframework.boot.web.context.WebServerInitializedEvent: void <init>(org.springframework.boot.web.server.WebServer)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>-><java.util.ArrayList$Itr: boolean hasNext()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.ArrayList$SubList: int size()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><java.lang.reflect.Field: int hashCode()>
<com.hazelcast.cache.impl.HazelcastServerCacheManager: com.hazelcast.config.CacheConfig getCacheConfig(java.lang.String,java.lang.String)>-><com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl: com.hazelcast.spi.InternalCompletableFuture invokeOnPartition(java.lang.String,com.hazelcast.spi.Operation,int)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void addAllowedOrigin(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><java.util.ArrayList: void sort(java.util.Comparator)>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.util.DerValue: java.lang.String toString()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.publisher.MonoOnAssembly: java.lang.String toString()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><org.springframework.core.OrderComparator: int compare(java.lang.Object,java.lang.Object)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: void access$100(org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult,org.springframework.data.redis.connection.ClusterCommandExecutor$NodeResult)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.security.CodeSource: java.lang.String toString()>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache: boolean usesWriteQueue()>
<io.lettuce.core.ClientOptions: void <init>(io.lettuce.core.ClientOptions)>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: java.lang.Object convert(java.lang.Object)>-><org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><org.springframework.web.servlet.handler.MappedInterceptor: void <init>(java.lang.String[],java.lang.String[],org.springframework.web.servlet.HandlerInterceptor)>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><com.google.common.base.Present: java.lang.String toString()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode build()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.lang.StringBuilder: void <init>()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore: void putRecords(java.util.Collection,long)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration$ReactiveUserDetailsServiceCondition$ReactiveWebApplicationCondition: void <init>()>-><java.lang.Object: void <init>()>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>
<org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Locale)>-><org.apache.shiro.config.Ini$Section: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.lang.Error: void <init>(java.lang.String)>
<org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration$CacheManagerValidator: void afterPropertiesSet()>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfAvailable()>
<org.apache.shiro.util.PermissionUtils: java.util.Set resolvePermissions(java.util.Collection,org.apache.shiro.authz.permission.PermissionResolver)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.http.converter.ResourceRegionHttpMessageConverter: boolean canWrite(java.lang.reflect.Type,java.lang.Class,org.springframework.http.MediaType)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isQueueing()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: int getMaxTotal()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.Collections$SynchronizedCollection: int size()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.LinkedHashMap: void <init>()>
<reactor.core.publisher.MonoSwitchIfEmpty: reactor.core.CoreSubscriber subscribeOrReturn(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<com.hazelcast.nio.IOUtil$ClassLoaderAwareObjectInputStream: void <init>(java.lang.ClassLoader,com.hazelcast.nio.ClassNameFilter,java.io.InputStream)>-><java.io.ObjectInputStream: void <init>(java.io.InputStream)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$5: void <init>(java.lang.String,int)>
<org.apache.ibatis.type.TypeHandlerRegistry: java.util.Map getJdbcHandlerMapForEnumInterfaces(java.lang.Class,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.HashSet: boolean add(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object)>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>(java.lang.ClassLoader)>-><java.util.HashMap: void <init>()>
<org.springframework.data.redis.cache.CacheKeyPrefix: java.lang.String lambda$simple$0(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.google.common.cache.CacheBuilder: void <clinit>()>-><com.google.common.cache.CacheBuilder$1: void <init>()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.text.AttributeEntry: java.lang.Object getValue()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>(java.lang.ClassLoader)>-><java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: int hashCode()>
<com.fasterxml.jackson.dataformat.cbor.CBORGenerator$Feature: void <init>(java.lang.String,int,boolean)>-><java.lang.Enum: int ordinal()>
<org.apache.shiro.config.Ini: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl: com.hazelcast.internal.partition.PartitionRuntimeState createPromotionCommitPartitionState(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type$7: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<org.springframework.context.event.AbstractApplicationEventMulticaster: java.util.Collection getApplicationListeners(org.springframework.context.ApplicationEvent,org.springframework.core.ResolvableType)>-><org.springframework.boot.web.context.WebServerInitializedEvent: java.lang.Object getSource()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>()>-><java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><java.util.HashSet: void <init>()>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$1: void <init>(java.lang.String,int)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void info(java.lang.Object)>
<com.google.common.cache.LocalCache$EntryFactory$2: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.springframework.data.redis.connection.convert.Converters$1: java.lang.Object convert(java.lang.Object)>-><org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<springfox.documentation.spring.web.DescriptionResolver: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.DependencyDescriptor: boolean isRequired()>-><java.lang.reflect.Field: java.lang.Class getType()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><org.apache.shiro.authc.SimpleAccount: void addRole(java.lang.String)>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><org.springframework.http.HttpMethod: org.springframework.http.HttpMethod resolve(java.lang.String)>
<reactor.core.publisher.FluxMap$MapConditionalSubscriber: void request(long)>-><reactor.core.publisher.FluxHide$HideSubscriber: void request(long)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.json.JsonValue: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.boot.validation.MessageInterpolatorFactory: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isVerifyPeer()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings$Mapping: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceSubscription initSubscription(org.springframework.data.redis.connection.MessageListener)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisClusterConnection getClusterConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceClusterConnection doCreateLettuceClusterConnection(io.lettuce.core.cluster.api.StatefulRedisClusterConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,org.springframework.data.redis.connection.ClusterTopologyProvider,org.springframework.data.redis.connection.ClusterCommandExecutor,java.time.Duration)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<redis.clients.jedis.JedisClusterInfoCache: java.util.Map getNodes()>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.couchbase.CouchbaseConfiguration: void <init>(org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><org.springframework.util.StringUtils: java.lang.String arrayToCommaDelimitedString(java.lang.Object[])>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.config.JavaSerializationFilterConfig: com.hazelcast.config.ClassFilter getBlacklist()>-><com.hazelcast.config.ClassFilter: void <init>()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><com.hazelcast.spi.impl.AbstractInvocationFuture: java.lang.Object get()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.AllPermissionCollection$1: boolean hasMoreElements()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><freemarker.ext.beans.SequenceAdapter: int size()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void <init>(io.lettuce.core.api.StatefulConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,long,int)>-><java.util.LinkedList: void <init>()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<javax.xml.ws.spi.Provider: javax.xml.ws.spi.Provider provider()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.net.URL getResource(java.lang.String)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.security.AccessControlContext)>-><java.lang.Thread: int nextThreadNum()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<org.springframework.web.context.support.ServletContextResourcePatternResolver: void doRetrieveMatchingServletContextResources(javax.servlet.ServletContext,java.lang.String,java.lang.String,java.util.Set)>-><org.apache.catalina.core.ApplicationContext: java.util.Set getResourcePaths(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><java.util.Collections$EmptySet: boolean contains(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>-><springfox.documentation.spring.web.readers.operation.AbstractOperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration: void <init>()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void stringSwitchHelper(org.springframework.cglib.core.CodeEmitter,java.util.List,org.springframework.cglib.core.ObjectSwitchCallback,org.springframework.asm.Label,org.springframework.asm.Label,int)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<register-finalize <org.springframework.data.redis.connection.RedisClusterNode$LinkState: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<com.alibaba.druid.filter.FilterManager: void <clinit>()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<java.io.PrintWriter: void <init>(java.lang.String)>-><java.io.BufferedWriter: void <init>(java.io.Writer)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.net.URL getResource(java.lang.String)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration: void <init>()>
<org.springframework.web.servlet.view.ContentNegotiatingViewResolver$1: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>-><org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Map)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder: org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder forResponse(java.util.concurrent.Future)>-><org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder: void <init>(java.util.concurrent.Future)>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.lang.Iterable)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<cn.hutool.core.collection.IterUtil: java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterNameReader: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <init>()>-><java.lang.Object: void <init>()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><org.springframework.data.domain.Sort$Direction: org.springframework.data.domain.Sort$Direction[] values()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isVerifyPeer()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<reactor.core.publisher.StrictSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void request(long)>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.apache.shiro.web.filter.mgt.SimpleNamedFilterList: void <init>(java.lang.String)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: int getConcurrencyLevel()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.google.common.base.Predicates$AndPredicate: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.OffsetTime: java.lang.String toString()>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: int getMinIdle()>
<org.apache.http.util.TextUtils: boolean containsBlanks(java.lang.CharSequence)>-><java.lang.Character: boolean isWhitespace(char)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <clinit>()>-><java.util.LinkedHashSet: void <init>(java.util.Collection)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.http.ResponseEntity: void <init>(org.springframework.http.HttpStatus)>
<java.io.PrintWriter: void <init>(java.lang.String,java.lang.String)>-><java.io.File: void <init>(java.lang.String)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String)>-><java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode$SlotRange parseSlotRange(java.lang.String[])>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void configure(javax.servlet.Registration$Dynamic)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<io.lettuce.core.ClientOptions: void <init>(io.lettuce.core.ClientOptions)>-><io.lettuce.core.ClientOptions: io.lettuce.core.TimeoutOptions getTimeoutOptions()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration: void <init>()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.apache.shiro.authz.SimpleRole: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.String getCacheNameWithPrefix(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><io.lettuce.core.DefaultConnectionFuture: java.lang.Object get()>
<org.springframework.dao.DataRetrievalFailureException: void <init>(java.lang.String,java.lang.Throwable)>-><org.springframework.dao.NonTransientDataAccessException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder listeningAt(java.lang.String,int)>
<com.hazelcast.config.JavaSerializationFilterConfig: void <init>(com.hazelcast.config.JavaSerializationFilterConfig)>-><java.lang.Object: void <init>()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.apache.shiro.config.Ini: void load(java.io.Reader)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Throwable)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><java.lang.StringBuilder: void <init>()>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><java.util.ArrayList$SubList: int size()>
<java.util.logging.LogManager: void readConfiguration()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><org.apache.shiro.authc.SimpleAccount: int hashCode()>
<com.hazelcast.cache.impl.HazelcastServerCacheManager: com.hazelcast.config.CacheConfig findCacheConfig(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode$SlotRange parseSlotRange(java.lang.String[])>-><org.springframework.data.redis.connection.RedisClusterNode$SlotRange: void <init>(java.util.Collection)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><io.lettuce.core.DefaultConnectionFuture: boolean isDone()>
<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.lang.Class: java.lang.Object cast(java.lang.Object)>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.Class: java.lang.String getName()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><java.util.ArrayList: void clear()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<reactor.core.publisher.FluxFlatMap$FlatMapInner: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void request(long)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><redis.clients.jedis.exceptions.JedisRedirectionException: redis.clients.jedis.HostAndPort getTargetNode()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><com.google.common.base.Present: java.lang.String toString()>
<com.hazelcast.ringbuffer.impl.RingbufferService: void destroyContainer(int,com.hazelcast.spi.ObjectNamespace)>-><org.apache.shiro.config.Ini$Section: java.lang.Object remove(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.Parsed: java.lang.String toString()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.dao.DataAccessException convertLettuceAccessException(java.lang.Exception)>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.Iterable getCacheNames()>-><java.util.concurrent.ConcurrentHashMap: int size()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<springfox.documentation.spring.web.readers.operation.AbstractOperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.fasterxml.jackson.core.base.ParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int)>-><com.fasterxml.jackson.core.JsonParser$Feature: boolean enabledIn(int)>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><org.apache.shiro.config.Ini$Section: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Locale: java.lang.String toString()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>-><org.springframework.data.redis.connection.RedisNode: boolean isMaster()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.apache.shiro.config.Ini: boolean isEmpty()>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean _hasNullKey(java.util.Map)>-><org.apache.shiro.config.Ini$Section: boolean containsKey(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.apache.shiro.config.Ini: org.apache.shiro.config.Ini fromResourcePath(java.lang.String)>-><org.apache.shiro.util.StringUtils: boolean hasLength(java.lang.String)>
<org.springframework.boot.autoconfigure.session.SessionAutoConfiguration$AbstractSessionRepositoryValidator: void afterPropertiesSet()>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfAvailable()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>
<org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag: org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.apache.shiro.config.Ini: java.lang.String getSectionName(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.beans.factory.config.DependencyDescriptor: void <init>(java.lang.reflect.Field,boolean,boolean)>-><org.springframework.beans.factory.InjectionPoint: void <init>(java.lang.reflect.Field)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><com.hazelcast.util.scheduler.ScheduledEntry: java.lang.Object getValue()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void awaitTerminationIfNecessary(java.util.concurrent.ExecutorService)>-><org.apache.commons.logging.LogAdapter$Log4jLog: boolean isWarnEnabled()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.partition.NonFragmentedServiceNamespace: java.lang.String toString()>
<com.google.common.cache.LocalCache$Strength$1: com.google.common.base.Equivalence defaultEquivalence()>-><com.google.common.base.Equivalence: com.google.common.base.Equivalence equals()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<sun.security.ssl.SSLEngineImpl: void <init>(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.util.EventListener getListener()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: int size()>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><org.apache.shiro.authc.SimpleAccount: java.lang.String toString()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.EngineOutputRecord: void <init>(byte,sun.security.ssl.SSLEngineImpl)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.google.common.base.Present: int hashCode()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.Iterable getCacheNames()>-><java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>
<org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Object)>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.sql.Time: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisClusterNode$SlotRange: void <init>(java.util.Collection)>-><org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: long getTimeout()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: long getClientTimeout()>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromUrl(java.lang.String)>-><java.net.URL: void <init>(java.lang.String)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache$EntryFactory: com.google.common.cache.LocalCache$EntryFactory getFactory(com.google.common.cache.LocalCache$Strength,boolean,boolean)>
<java.util.Scanner: void <init>(java.lang.Readable)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><redis.clients.jedis.HostAndPort: java.lang.String getHost()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.subject.SimplePrincipalCollection: void <init>(java.lang.Object,java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><java.lang.Object: void <init>()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.property.bean.AccessorsProvider getAccessorsProvider()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
<reactor.core.publisher.MonoFlatMap: reactor.core.CoreSubscriber subscribeOrReturn(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])>-><java.lang.StringBuilder: void <init>(int)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration: void <init>()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.ArrayList$SubList: int size()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.springframework.util.StringUtils: java.lang.String capitalize(java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><freemarker.ext.beans.HashAdapter$1$1$1: java.lang.Object getKey()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.partition.PartitionServiceProxy$PartitionProxy: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.apache.shiro.mgt.DefaultSecurityManager: void <init>(org.apache.shiro.realm.Realm)>-><org.apache.shiro.mgt.DefaultSecurityManager: void <init>()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<com.google.common.cache.LocalCache: boolean usesWriteEntries()>-><com.google.common.cache.LocalCache: boolean usesWriteQueue()>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.logging.LogManager$1: java.util.logging.LogManager run()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents$Type$9: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><org.apache.shiro.util.CollectionUtils: java.util.Set asSet(java.lang.Object[])>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.publisher.FluxCreate$BufferAsyncSink: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.ext.beans.SimpleMethodModel: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.web.ResourceProperties)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<register-finalize <javax.servlet.DispatcherType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.http.HttpHeaders: void putAll(java.util.Map)>-><org.springframework.util.MultiValueMapAdapter: void putAll(java.util.Map)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(java.lang.String[])>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void refresh()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>()>-><java.lang.Object: void <init>()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><org.apache.shiro.authc.SimpleAccount: void setRoles(java.util.Set)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.data.redis.cache.RedisCacheConfiguration: byte[] lambda$registerDefaultConverters$2(java.lang.String)>-><java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<com.hazelcast.instance.LifecycleServiceImpl: boolean isRunning()>-><com.hazelcast.instance.Node: boolean isRunning()>
<org.springframework.web.util.HierarchicalUriComponents$Type$6: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><com.google.common.base.Absent: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.json.JsonNumber: java.lang.String toString()>
<org.apache.shiro.util.PermissionUtils: java.util.Set resolvePermissions(java.util.Collection,org.apache.shiro.authz.permission.PermissionResolver)>-><java.util.HashSet: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.AbstractRedisClient createClient()>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientResources()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><springfox.documentation.spring.web.plugins.DefaultConfiguration: void <init>(springfox.documentation.spi.service.contexts.Defaults,com.fasterxml.classmate.TypeResolver,javax.servlet.ServletContext)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo fromMap(java.lang.String,java.util.Map,java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.springframework.data.domain.Sort: void <clinit>()>-><org.springframework.data.domain.Sort: org.springframework.data.domain.Sort by(org.springframework.data.domain.Sort$Order[])>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Log4jLog: void debug(java.lang.Object)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.LocalCache$Strength getValueStrength()>-><com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getDefaultCipherSuiteList(boolean)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<javax.security.auth.Policy$4: void <init>()>-><java.lang.Object: void <init>()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<java.io.Reader: int read(java.nio.CharBuffer)>-><java.io.InputStreamReader: int read(char[],int,int)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.terracotta.statistics.jsr166e.LongAdder: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.StackTraceElement: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<redis.clients.jedis.JedisClusterInfoCache: redis.clients.jedis.HostAndPort generateHostAndPort(java.util.List)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void closeIfUnsubscribed()>-><java.util.ArrayList: boolean isEmpty()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<com.alibaba.druid.stat.DruidStatManagerFacade: void <clinit>()>-><com.alibaba.druid.stat.DruidStatManagerFacade: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.PathSanitizer: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler$Builder: void _addPropertyIndex(java.lang.String,java.lang.Integer)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode build()>-><org.springframework.data.redis.connection.RedisClusterNode: java.util.Set access$002(org.springframework.data.redis.connection.RedisClusterNode,java.util.Set)>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder listeningAt(java.lang.String,int)>-><org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder: org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder listeningAt(java.lang.String,int)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.String getCacheNameWithPrefix(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.Iterable getCacheNames()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.apache.shiro.util.ClassUtils$3: java.lang.ClassLoader doGetClassLoader()>
<springfox.documentation.spring.web.scanners.ApiDescriptionLookup: void <init>()>-><java.lang.Object: void <init>()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.security.core.userdetails.User: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.shiro.config.Ini: java.lang.String cleanName(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration: void <init>(org.springframework.mail.javamail.JavaMailSenderImpl)>-><org.springframework.mail.javamail.JavaMailSenderImpl: void <init>()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromUrl(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object)>
<javax.activation.SecuritySupport$3: java.lang.Object run()>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: boolean hasMoreElements()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>(java.lang.ClassLoader)>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.cache.StringTemplateLoader: java.lang.String toString()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<cn.hutool.core.map.MapProxy: void clear()>-><java.util.Hashtable: void clear()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<com.hazelcast.spi.discovery.impl.DefaultDiscoveryService: com.hazelcast.spi.discovery.NodeFilter getNodeFilter(com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>-><org.springframework.data.redis.connection.AbstractRedisConnection: void close()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<com.hazelcast.config.ClassFilter: void <clinit>()>-><java.lang.Integer: int intValue()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.DefaultedRedisConnection: void setConfig(java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.RedisServerCommands serverCommands()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<register-finalize <org.springframework.boot.autoconfigure.http.HttpProperties$Encoding$Type: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<freemarker.core.Configurable: void setSettings(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: void afterPropertiesSet()>-><org.springframework.data.redis.connection.jedis.DefaultJedisClientConfiguration: java.util.Optional getSslSocketFactory()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>(java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase: void refreshPolicy()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$SubscriptionPresentCondition eventuallyPerformSubscription()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><java.util.ArrayList: int size()>
<springfox.documentation.schema.property.bean.AccessorsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<com.alibaba.druid.util.JdbcUtils: void <clinit>()>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: boolean hasMoreElements()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<javax.activation.SecuritySupport$4: java.lang.Object run()>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: java.lang.Object nextElement()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><org.apache.commons.logging.LogAdapter$Log4jLog: boolean isTraceEnabled()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.Object getPrimaryPrincipal()>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><java.lang.String: int indexOf(int)>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilder(java.lang.String,java.lang.String,java.util.Map)>-><org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilder(org.springframework.security.oauth2.client.registration.ClientRegistration$Builder,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Provider)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.hazelcast.config.JavaSerializationFilterConfig: int hashCode()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$1: void <init>(java.lang.String,int,java.lang.String)>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String,org.springframework.context.annotation.MBeanExportConfiguration$1)>
<redis.clients.jedis.Jedis: java.lang.String clusterNodes()>-><redis.clients.jedis.Connection: java.lang.String getBulkReply()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<com.fasterxml.classmate.util.ClassKey: void <init>(java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<java.io.PrintWriter: void <init>(java.io.File)>-><java.io.FileOutputStream: void <init>(java.io.File)>
<org.apache.shiro.config.Ini: void load(java.util.Scanner)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Throwable)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.awt.DebugSettings: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents$Type$8: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerWebApplicationScopes()>-><org.springframework.web.context.support.WebApplicationContextUtils: void registerWebApplicationScopes(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getTransactionAwareConnectionProxy(javax.sql.DataSource)>-><java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<org.apache.shiro.realm.SimpleAccountRealm: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<com.hazelcast.config.ClassFilter: void <init>(com.hazelcast.config.ClassFilter)>-><java.util.concurrent.atomic.AtomicBoolean: void <init>()>
<org.springframework.data.redis.listener.KeyspaceEventMessageListener: void init()>-><org.springframework.data.redis.connection.DefaultedRedisConnection: java.util.Properties getConfig(java.lang.String)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsManager: void <init>()>-><java.lang.Object: void <init>()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: boolean isClosed()>-><com.hazelcast.instance.TerminatedLifecycleService: boolean isRunning()>
<com.hazelcast.config.CacheConfig: void <init>()>-><com.hazelcast.config.AbstractCacheConfig: void <init>()>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void cancelRemainingTask(java.lang.Runnable)>-><org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void cancelRemainingTask(java.lang.Runnable)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.apache.shiro.authz.ModularRealmAuthorizer: void applyPermissionResolverToRealms()>-><java.util.AbstractCollection: boolean isEmpty()>
<java.util.Scanner: void close()>-><java.io.InputStreamReader: void close()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.MonoIgnoreThen$ThenIgnoreInner: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.security.Provider$Service: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>-><java.lang.Object: void <init>()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><org.apache.commons.logging.LogAdapter$Log4jLog: void trace(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<org.springframework.data.redis.listener.KeyspaceEventMessageListener: void init()>-><org.springframework.data.redis.connection.DefaultedRedisConnection: void setConfig(java.lang.String,java.lang.String)>
<org.springframework.core.io.VfsUtils: void <clinit>()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.core.Environment$LazilyInitializedNamespace: java.lang.String toString()>
<org.springframework.context.support.AbstractApplicationContext: void refresh()>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>
<com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer: void checkNotStaleTask(java.lang.String)>-><com.hazelcast.scheduledexecutor.StaleTaskException: void <init>(java.lang.String)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents$Type$4: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.template.SimpleSequence: java.lang.String toString()>
<org.springframework.boot.web.embedded.tomcat.TldPatterns: void <clinit>()>-><java.util.LinkedHashSet: void <init>()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getKeyEquivalence()>-><com.google.common.cache.LocalCache$Strength$1: com.google.common.base.Equivalence defaultEquivalence()>
<java.util.jar.Attributes: void clear()>-><java.util.HashMap: void clear()>
<org.apache.shiro.subject.SimplePrincipalCollection: void <init>(java.lang.Object,java.lang.String)>-><java.lang.Object: void <init>()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.ArrayList: int size()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(org.springframework.data.redis.connection.RedisClusterNode)>-><org.springframework.data.redis.connection.RedisNode: java.lang.String getId()>
<org.apache.http.impl.nio.reactor.AbstractIOReactor: void closeSessions()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isUseSsl()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Hashtable: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder: java.util.Optional getAnnotationWrapper(java.lang.reflect.Method,boolean,java.util.Collection)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.IdentityHashMap: void clear()>
<org.apache.shiro.config.Ini$Section: java.lang.String[] splitKeyValue(java.lang.String)>-><java.lang.StringBuilder: int length()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.apache.shiro.util.PermissionUtils: java.util.Set toPermissionStrings(java.lang.String)>-><java.util.LinkedHashSet: void <init>(java.util.Collection)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>-><java.lang.StringBuilder: void <init>()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiDocumentationScanner getApiDocumentationScanner()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<com.google.common.cache.LocalCache$LocalManualCache: void <init>(com.google.common.cache.LocalCache)>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.UriComponentsBuilder: java.lang.Object lambda$buildInternal$0(java.lang.String)>-><java.util.HashMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress,java.lang.String,int,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>-><java.lang.String: java.lang.String valueOf(char)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.apache.shiro.config.Ini: void load(java.util.Scanner)>-><org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><java.lang.Object: void <init>()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<reactor.core.publisher.MonoHide: void <init>(reactor.core.publisher.Mono)>-><reactor.core.publisher.InternalMonoOperator: void <init>(reactor.core.publisher.Mono)>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.ProtocolList getDefaultProtocolList(boolean)>-><sun.security.ssl.SSLContextImpl$TLS12Context: sun.security.ssl.ProtocolList getClientDefaultProtocolList()>
<com.fasterxml.jackson.core.json.JsonReadContext: void <init>(com.fasterxml.jackson.core.json.JsonReadContext,com.fasterxml.jackson.core.json.DupDetector,int,int,int)>-><com.fasterxml.jackson.core.JsonStreamContext: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: boolean cachePolicy()>-><javax.security.auth.SubjectDomainCombiner$4: void <init>()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.apache.shiro.config.Ini: void <init>(org.apache.shiro.config.Ini)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<freemarker.ext.servlet.IncludePage: void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.lang.Object: void <init>()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode$LinkState parseLinkState(java.lang.String[])>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.client.RestTemplate: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>-><org.apache.catalina.webresources.war.WarURLConnection: java.io.InputStream getInputStream()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.lang.Object,int)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<javax.security.auth.SubjectDomainCombiner: void <clinit>()>-><sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String,java.lang.String)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.apache.http.impl.conn.SystemDefaultRoutePlanner: void <init>(java.net.ProxySelector)>-><org.apache.http.impl.conn.SystemDefaultRoutePlanner: void <init>(org.apache.http.conn.SchemePortResolver,java.net.ProxySelector)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void trace(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: void add(org.springframework.data.redis.connection.ClusterCommandExecutor$NodeResult)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isVerifyPeer()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: void <init>(javax.servlet.Servlet,java.lang.String[])>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.Collections$SynchronizedList: void add(int,java.lang.Object)>-><java.util.ArrayList$SubList: void add(int,java.lang.Object)>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.ArrayList: void <init>(java.util.Collection)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>-><java.lang.Integer: int intValue()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.Scannable$Attr$2: java.lang.String toString()>
<reactor.core.publisher.FluxFlatMap$FlatMapMain: boolean checkTerminated(boolean,boolean,org.reactivestreams.Subscriber,java.lang.Object)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onComplete()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.shiro.authz.SimpleAuthorizationInfo: void addObjectPermissions(java.util.Collection)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: boolean isEmpty()>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode build()>-><org.springframework.data.redis.connection.RedisNode: java.lang.String getHost()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.ssl.UnknownExtension: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<com.hazelcast.instance.BuildInfoProvider: com.hazelcast.instance.BuildInfo getBuildInfoInternalVersion(com.hazelcast.instance.BuildInfoProvider$Overrides)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap,org.springframework.http.HttpStatus)>-><org.springframework.http.HttpEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<com.google.common.cache.CacheBuilder$3: void <init>()>-><com.google.common.base.Ticker: void <init>()>
<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String)>-><java.util.logging.Logger: void <init>(java.lang.String,java.lang.String,java.lang.Class,java.util.logging.LogManager,boolean)>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<java.io.PrintWriter: void <init>(java.lang.String)>-><java.io.FileOutputStream: void <init>(java.lang.String)>
<cn.hutool.core.map.MapUtil: boolean isNotEmpty(java.util.Map)>-><org.apache.shiro.config.Ini$Section: boolean isEmpty()>
<org.springframework.context.support.AbstractApplicationContext: void refresh()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void onRefresh()>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientName()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientName()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.buffer.AbstractByteBufAllocator: java.lang.String toString()>
<com.hazelcast.instance.HazelcastInstanceCacheManager: com.hazelcast.cache.ICache getCacheByFullName(java.lang.String)>-><com.hazelcast.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$SuppressFuseableSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><com.google.common.base.Absent: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.hazelcast.config.AbstractCacheConfig: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<org.springframework.web.servlet.resource.ResourceUrlEncodingFilter: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration: void <init>()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<cn.hutool.core.map.MapProxy: void clear()>-><cn.hutool.core.map.MapProxy: void clear()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: void <init>(org.springframework.boot.web.servlet.ServletContextInitializerBeans$1)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.cluster.api.async.RedisClusterAsyncCommands getAsyncDedicatedConnection()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.Iterable getCacheNames()>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$1: java.util.List convert(io.lettuce.core.cluster.models.partitions.Partitions)>-><java.util.ArrayList: void <init>()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.plugins.DocumentationPluginsManager: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isUseSsl()>
<springfox.documentation.schema.property.bean.AccessorsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.LocalTime: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.cluster.api.async.RedisClusterAsyncCommands getAsyncDedicatedConnection()>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><java.lang.StringBuilder: void <init>()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<java.util.Scanner: void close()>-><java.io.StringReader: void close()>
<org.springframework.boot.autoconfigure.session.SessionAutoConfiguration$AbstractSessionRepositoryImplementationValidator: void addCandidateIfAvailable(java.util.List,java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.util.Enumeration getResources(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: void <init>()>
<org.apache.shiro.config.Ini: void load(java.util.Scanner)>-><java.lang.String: boolean startsWith(java.lang.String)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<com.fasterxml.jackson.databind.introspect.SimpleMixInResolver: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver copy()>-><com.fasterxml.jackson.databind.introspect.SimpleMixInResolver: com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver copy()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration: void <init>()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilder(org.springframework.security.oauth2.client.registration.ClientRegistration$Builder,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Provider)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source as(java.util.function.Function)>
<org.apache.shiro.config.Ini: org.apache.shiro.config.Ini$Section getSection(java.lang.String)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.web.filter.GenericFilterBean: void destroy()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<com.alibaba.druid.support.http.stat.WebRequestStat: void <clinit>()>-><java.lang.ThreadLocal: void <init>()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.AbstractCollection: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.baomidou.mybatisplus.core.toolkit.support.ColumnCache: java.lang.String toString()>
<freemarker.cache.URLTemplateSource: java.io.InputStream getInputStream()>-><org.apache.catalina.webresources.war.WarURLConnection: java.io.InputStream getInputStream()>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode build()>-><org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder: org.springframework.data.redis.connection.RedisNode build()>
<com.hazelcast.client.impl.protocol.task.AbstractMessageTask: java.lang.String getDistributedObjectType()>-><com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask: java.lang.String getServiceName()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.google.common.base.Predicates$ObjectPredicate$4: java.lang.String toString()>
<reactor.core.publisher.DirectProcessor: void subscribe(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onError(java.lang.Throwable)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.LocalCache$Strength getValueStrength()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.instance.DefaultAddressPicker$InterfaceDefinition: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.config.Ini: java.lang.String cleanName(java.lang.String)>-><org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: void add(org.apache.shiro.authz.SimpleRole)>-><org.apache.shiro.authz.SimpleRole: java.lang.String getName()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.concurrent.ConcurrentHashMap: void clear()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<java.util.Collections$SynchronizedList: void sort(java.util.Comparator)>-><java.util.Collections$SynchronizedList: void sort(java.util.Comparator)>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: boolean isClosed()>-><java.util.concurrent.atomic.AtomicBoolean: boolean get()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$SynchronizedCollection: int size()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<reactor.util.function.Tuple3: int hashCode()>-><org.apache.shiro.authz.SimpleRole: int hashCode()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<cn.hutool.core.map.MapProxy: void clear()>-><org.apache.shiro.config.Ini$Section: void clear()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.chrono.ISOChronology: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<org.springframework.http.HttpStatus: org.springframework.http.HttpStatus resolve(int)>-><org.springframework.http.HttpStatus: org.springframework.http.HttpStatus[] values()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.Object getPrimaryPrincipal()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$JdkDynamicAutoProxyConfiguration: void <init>()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection getPrincipalsLazy(java.lang.String)>-><java.util.LinkedHashSet: void <init>()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void finishRefresh()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.server.WebServer startWebServer()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.field.UnsupportedDateTimeField: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.apache.shiro.config.Ini$Section: java.lang.String[] splitKeyValue(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.StringBuilder: void <init>(int)>
<org.springframework.context.support.AbstractApplicationContext: void refresh()>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void prepareRefresh()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration: void <init>()>
<com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getValueEquivalence()>-><com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.apache.catalina.loader.WebappClassLoaderBase: void refreshPolicy()>-><sun.security.provider.PolicyFile: void refresh()>
<com.google.common.collect.SingletonImmutableSet: void <init>(java.lang.Object)>-><com.google.common.collect.ImmutableSet: void <init>()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: boolean isFactoryMethod(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>-><com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: com.fasterxml.jackson.annotation.JsonCreator$Mode findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: int size()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: void afterPropertiesSet()>-><org.springframework.context.support.GenericApplicationContext: java.lang.ClassLoader getClassLoader()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,int)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.apache.shiro.authc.SimpleAccount: java.lang.String toString()>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><java.util.Collections$SynchronizedList: int hashCode()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><java.util.concurrent.ConcurrentLinkedQueue: void <init>()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.AbstractMap$1: boolean isEmpty()>
<org.apache.shiro.util.ClassUtils$3: java.lang.ClassLoader doGetClassLoader()>-><java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.google.common.base.Present: java.lang.String toString()>
<org.apache.shiro.config.Ini$Section: java.lang.String[] splitKeyValue(java.lang.String)>-><java.lang.String: char charAt(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><org.apache.shiro.authc.SimpleAccount: java.lang.String toString()>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.LambdaMonoSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.web.servlet.config.annotation.ViewResolverRegistry: void <init>(org.springframework.web.accept.ContentNegotiationManager,org.springframework.context.ApplicationContext)>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.publisher.ConnectableFluxOnAssembly: java.lang.String toString()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.hazelcast.instance.HazelcastInstanceProxy: int hashCode()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<register-finalize <java.io.PrintWriter: void <init>(java.lang.String)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isVerifyPeer()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: java.lang.String lambda$setDatabase$0(int)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.springframework.http.converter.feed.AtomFeedHttpMessageConverter: boolean supports(java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.http.HttpStatus: org.springframework.http.HttpStatus valueOf(int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int getOrder(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$1: int getOrder(java.lang.Object)>
<javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>-><java.lang.StringBuilder: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.net.InetAddress: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$9: void <init>(java.lang.String,int)>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache$Strength$2: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$Strength: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.lang.StringBuilder: void <init>()>
<org.apache.ibatis.reflection.wrapper.MapWrapper: java.lang.Object get(org.apache.ibatis.reflection.property.PropertyTokenizer)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable: void asyncDestroyStores(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<io.lettuce.core.ClientOptions: void <init>(io.lettuce.core.ClientOptions)>-><io.lettuce.core.ClientOptions: boolean isAutoReconnect()>
<org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.http.HttpStatus)>-><org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap,org.springframework.http.HttpStatus)>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.Iterable getCacheNames()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.springframework.data.redis.RedisConnectionFailureException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag: io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.google.common.base.Present: java.lang.String toString()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processRoleDefinitions(java.util.Map)>-><org.apache.shiro.util.PermissionUtils: java.util.Set resolveDelimitedPermissions(java.lang.String,org.apache.shiro.authz.permission.PermissionResolver)>
<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getName()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.Subject: java.util.Set getPrincipals()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.awt.AppContext: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.publisher.MonoCallableOnAssembly: java.lang.String toString()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.util.ResourceBundle$Control$1: java.io.InputStream run()>-><org.apache.catalina.webresources.war.WarURLConnection: java.io.InputStream getInputStream()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><java.util.HashSet: java.util.Iterator iterator()>
<sun.security.ssl.EngineInputRecord: void <init>(sun.security.ssl.SSLEngineImpl)>-><sun.security.ssl.InputRecord: void <init>()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void addClassIfPresent(java.util.Collection,java.lang.String)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.AbstractRedisClient createClient()>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientOptions()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.ssl.SSLSocketImpl: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><com.google.common.base.Absent: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<cn.hutool.core.map.MapProxy: void clear()>-><java.util.jar.Attributes: void clear()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.ZonedDateTime: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.networking.nio.NioChannel: java.lang.String toString()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<cn.hutool.core.map.MapProxy: boolean containsKey(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean containsKey(java.lang.Object)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.EventObject: java.lang.String toString()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.hazelcast.internal.partition.operation.MigrationOperation: void runMigrationOperation(com.hazelcast.spi.Operation)>-><com.hazelcast.scheduledexecutor.impl.operations.CancelTaskBackupOperation: void run()>
<com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl: com.hazelcast.internal.partition.PartitionRuntimeState createPromotionCommitPartitionState(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents$Type$2: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.core.base.ParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int)>-><com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext createRootContext(com.fasterxml.jackson.core.json.DupDetector)>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode$SlotRange parseSlotRange(java.lang.String[])>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><org.apache.commons.logging.LogAdapter$Log4jLog: void debug(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void subscribeChannel(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandOnAllNodes(org.springframework.data.redis.connection.lettuce.LettuceClusterConnection$LettuceClusterCommandCallback)>-><org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: org.springframework.data.redis.connection.ClusterCommandExecutor getClusterCommandExecutor()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void <init>(io.lettuce.core.cluster.api.StatefulRedisClusterConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,org.springframework.data.redis.connection.ClusterTopologyProvider,org.springframework.data.redis.connection.ClusterCommandExecutor,java.time.Duration)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache$EntryFactory$7: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: void <init>(org.springframework.boot.autoconfigure.orm.jpa.JpaProperties)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.cors.CorsConfiguration: void setAllowedMethods(java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.springframework.boot.web.servlet.ServletRegistrationBean: void configure(javax.servlet.ServletRegistration$Dynamic)>-><org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceResult newLettuceResult(java.util.concurrent.Future,org.springframework.core.convert.converter.Converter)>-><org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder: org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder convertPipelineAndTxResults(boolean)>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.rmi.RemoteException: java.lang.String getMessage()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.stream.Stream lambda$new$0(java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.security.CodeSigner: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: java.lang.String toString()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.concurrent.CompletableFuture: boolean isCancelled()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><freemarker.ext.beans.HashAdapter$1$1$1: java.lang.Object getValue()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><org.springframework.util.ObjectUtils: java.lang.String getIdentityHexString(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<sun.security.ssl.SSLEngineImpl: void <init>(sun.security.ssl.SSLContextImpl,java.lang.String,int)>-><javax.net.ssl.SSLEngine: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<springfox.documentation.spring.web.readers.parameter.ParameterRequiredReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.http.HttpStatus getStatus(javax.servlet.http.HttpServletRequest)>-><org.springframework.http.HttpStatus: org.springframework.http.HttpStatus valueOf(int)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.ArrayList$SubList: int size()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.http.impl.nio.reactor.IOSessionImpl: java.lang.String toString()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.partition.PartitionRuntimeState: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<cn.hutool.core.map.MapProxy: java.util.Collection values()>-><org.apache.shiro.config.Ini$Section: java.util.Collection values()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.hazelcast.instance.HazelcastInstanceProxy: void <init>(com.hazelcast.instance.HazelcastInstanceImpl)>-><com.hazelcast.instance.HazelcastInstanceImpl: java.lang.String getName()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.util.StringJoiner: java.lang.String toString()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void checkSubscription()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isSubscribed()>
<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>-><org.springframework.ui.ModelMap: org.springframework.ui.ModelMap addAllAttributes(java.util.Map)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.config.Ini$Section: java.lang.String[] splitKeyValue(java.lang.String)>-><org.apache.shiro.config.Ini$Section: boolean isCharEscaped(java.lang.CharSequence,int)>
<com.google.common.cache.LocalCache: boolean usesWriteEntries()>-><com.google.common.cache.LocalCache: boolean recordsWrite()>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.shiro.config.Ini: void load(java.io.InputStream)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<freemarker.ext.beans.DefaultMemberAccessPolicy: void <init>()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.springframework.boot.web.servlet.ServletRegistrationBean: void configure(javax.servlet.Registration$Dynamic)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: void configure(javax.servlet.ServletRegistration$Dynamic)>
<reactor.core.publisher.MonoZip$ZipInner: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void request(long)>
<reactor.core.publisher.FluxFlatMap$FlatMapMain: boolean checkTerminated(boolean,boolean,org.reactivestreams.Subscriber,java.lang.Object)>-><reactor.core.publisher.FluxHide$HideSubscriber: void cancel()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.apache.shiro.config.Ini$Section: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<reactor.core.publisher.MonoIgnoreThen: void subscribe(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.lang.Class: java.lang.String getSimpleName()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void addClassIfExists(java.util.List,java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.springframework.core.io.AbstractFileResolvingResource: long lastModified()>-><org.apache.catalina.webresources.war.WarURLConnection: long getLastModified()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<com.hazelcast.security.permission.ScheduledExecutorPermission: int initMask(java.lang.String[])>-><java.lang.String: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.MonoFlatMap$FlatMapMain: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: boolean isTraceEnabled()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.buffer.WrappedByteBuf: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><freemarker.ext.beans.SequenceAdapter: int size()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean isEmpty()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<net.sf.ehcache.management.ResourceClassLoader: java.util.Enumeration findResources(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: java.lang.Object nextElement()>
<org.apache.catalina.loader.WebappClassLoaderBase: void refreshPolicy()>-><java.security.Policy: java.security.Policy getPolicy()>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getReadFrom()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getReadFrom()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Generic: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.stream.ReferencePipeline: java.util.stream.Stream flatMap(java.util.function.Function)>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.internal.CustomizerRegistry: void add(org.springframework.cglib.core.KeyFactoryCustomizer)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: void ensureOpen()>-><java.lang.StringBuilder: java.lang.String toString()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <init>()>
<org.springframework.security.core.userdetails.User$UserBuilder: java.lang.String lambda$roles$1(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><redis.clients.jedis.JedisPool: redis.clients.jedis.Jedis getResource()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.ringbuffer.impl.RingbufferWaitNotifyKey: java.lang.String toString()>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void <init>(int)>-><com.fasterxml.jackson.core.JsonParser: void <init>(int)>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><java.lang.Object: java.lang.Class getClass()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.apache.juli.logging.DirectJDKLog: void fatal(java.lang.Object,java.lang.Throwable)>-><org.apache.juli.logging.DirectJDKLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Throwable: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: void <init>(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Object: void <init>()>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><com.google.common.base.Present: java.lang.String toString()>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.Collections: void shuffle(java.util.List)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.partition.membergroup.DefaultMemberGroup: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: int size()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiModelReader getApiModelReader()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<reactor.util.function.Tuple3: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientOptions()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientOptions()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.operationservice.impl.operations.PartitionIteratingOperation$1: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.apache.shiro.config.Ini$Section: java.util.Map toMapProps(java.lang.String)>-><java.util.Scanner: java.lang.String nextLine()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: org.springframework.dao.DataAccessException convertLettuceAccessException(java.lang.Exception)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.dao.DataAccessException convertLettuceAccessException(java.lang.Exception)>
<org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.Set getBeanNames(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><java.util.stream.Collectors: java.util.stream.Collector toSet()>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfAvailable()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.springframework.web.util.WebUtils: java.lang.String getRealPath(javax.servlet.ServletContext,java.lang.String)>-><org.apache.catalina.core.ApplicationContext: java.lang.String getRealPath(java.lang.String)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<net.sf.ehcache.management.ResourceClassLoader: java.util.Enumeration findResources(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: boolean hasMoreElements()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.slf4j.event.Level: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: com.hazelcast.cache.ICache getCache(java.lang.String)>-><com.hazelcast.cache.impl.AbstractHazelcastCacheManager: com.hazelcast.cache.impl.ICacheInternal getCacheUnchecked(java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.apache.shiro.realm.text.IniRealm: void <init>(java.lang.String)>-><org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.concurrent.FutureTask: boolean isCancelled()>
<com.hazelcast.internal.usercodedeployment.impl.ClassDataProvider: byte[] loadBytecodeFromParent(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.io.InputStream getResourceAsStream(java.lang.String)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.zip.ZipFile: void <init>(java.lang.String)>-><java.io.File: void <init>(java.lang.String)>
<org.springframework.data.redis.connection.AbstractRedisConnection: void close()>-><org.springframework.data.redis.RedisSystemException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.hazelcast.config.ClassFilter: void <clinit>()>-><com.hazelcast.logging.Logger: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>
<freemarker.ext.beans.MapModel: freemarker.template.TemplateModel invokeGenericGet(java.util.Map,java.lang.Class,java.lang.String)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.util.LinkedMultiValueMap: void putAll(java.util.Map)>-><java.util.HashMap: void putAll(java.util.Map)>
<reactor.core.publisher.SerializedSubscriber: void serDrainLoop(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onComplete()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilder(java.lang.String,java.lang.String,java.util.Map)>-><org.springframework.security.oauth2.client.registration.ClientRegistration: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder withRegistrationId(java.lang.String)>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.nio.Packet: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(org.springframework.data.redis.connection.RedisClusterNode)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.LinkedList: java.lang.Object get(int)>
<reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.Hashtable$EntrySet: boolean add(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: java.lang.String lambda$setDatabase$0(int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$1: java.util.List convert(io.lettuce.core.cluster.models.partitions.Partitions)>-><java.util.Collections: java.util.List emptyList()>
<com.fasterxml.classmate.TypeBindings: void <clinit>()>-><com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>
<org.springframework.data.redis.connection.RedisClusterNode: void <init>(java.lang.String,int,org.springframework.data.redis.connection.RedisClusterNode$SlotRange)>-><java.util.Collections: java.util.Set emptySet()>
<com.alibaba.druid.support.profile.Profiler: void <clinit>()>-><java.lang.ThreadLocal: void <init>()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$1: void <init>(org.springframework.boot.web.servlet.ServletContextInitializerBeans)>-><org.springframework.core.annotation.AnnotationAwareOrderComparator: void <init>()>
<org.springframework.data.redis.FallbackExceptionTranslationStrategy: org.springframework.dao.DataAccessException translate(java.lang.Exception)>-><org.springframework.data.redis.FallbackExceptionTranslationStrategy: org.springframework.data.redis.RedisSystemException getFallback(java.lang.Exception)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<com.hazelcast.internal.cluster.impl.MembershipManager: void removeAllMissingMembers()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.concurrent.CopyOnWriteArraySet: boolean addAll(java.util.Collection)>
<redis.clients.jedis.JedisClusterInfoCache: java.util.Map getNodes()>-><java.util.HashMap: void <init>(java.util.Map)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<com.fasterxml.jackson.dataformat.cbor.CBORGenerator$Feature: int collectDefaults()>-><com.fasterxml.jackson.dataformat.cbor.CBORGenerator$Feature: com.fasterxml.jackson.dataformat.cbor.CBORGenerator$Feature[] values()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.publisher.FluxCreate$ErrorAsyncSink: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><com.hazelcast.util.executor.CompletedFuture: boolean isDone()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.nio.ByteBuffer: java.lang.String toString()>
<org.apache.catalina.core.ApplicationContext: java.util.Set getResourcePaths(java.lang.String)>-><org.apache.catalina.core.StandardContext: org.apache.catalina.WebResourceRoot getResources()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.dao.DataAccessException convertToDataAccessException(java.lang.Exception)>
<register-finalize <com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.Collections$UnmodifiableMap: void putAll(java.util.Map)>-><java.lang.UnsupportedOperationException: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.networking.nio.NioInboundPipeline: java.lang.String toString()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode build()>-><java.lang.Integer: int intValue()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.config.Ini: void addSection(java.lang.String,java.lang.StringBuilder)>-><java.lang.StringBuilder: int length()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<org.springframework.data.redis.cache.CacheKeyPrefix: java.lang.String lambda$simple$0(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<cn.hutool.core.map.CaseInsensitiveMap: void <init>(float,java.util.Map)>-><org.apache.shiro.config.Ini$Section: int size()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromFile(java.lang.String)>-><java.io.FileInputStream: void <init>(java.lang.String)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<com.google.common.cache.CacheBuilder: void <clinit>()>-><com.google.common.cache.CacheBuilder$3: void <init>()>
<com.hazelcast.client.impl.protocol.task.scheduledexecutor.ScheduledExecutorTaskCancelFromPartitionMessageTask: com.hazelcast.spi.Operation prepareOperation()>-><com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl: com.hazelcast.scheduledexecutor.ScheduledTaskHandler of(int,java.lang.String,java.lang.String)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getName()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<sun.security.ssl.SSLEngineImpl: void <init>(sun.security.ssl.SSLContextImpl,java.lang.String,int)>-><java.util.Collections: java.util.List emptyList()>
<org.springframework.boot.context.properties.ConfigurationPropertiesJsr303Validator$Delegate: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.boot.validation.MessageInterpolatorFactory: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceSubscription initSubscription(org.springframework.data.redis.connection.MessageListener)>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag: org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag[] values()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.regex.Pattern: java.lang.String toString()>
<com.hazelcast.instance.BuildInfoProvider: java.util.Properties loadPropertiesFromResource(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.io.InputStream getResourceAsStream(java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processRoleDefinitions(java.util.Map)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object getValue(java.lang.Object)>-><java.lang.ref.Reference: java.lang.Object get()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void awaitTerminationIfNecessary(java.util.concurrent.ExecutorService)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.ssl.ExtensionType: java.lang.String toString()>
<org.springframework.context.index.CandidateComponentsIndex: java.util.Set getCandidateTypes(java.lang.String,java.lang.String)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream parallelStream()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void info(java.lang.Object)>
<org.apache.shiro.util.ClassUtils: java.io.InputStream getResourceAsStream(java.lang.String)>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>-><springfox.documentation.spring.web.readers.operation.HandlerMethodResolver: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.HashMap: boolean isEmpty()>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><com.google.common.base.Absent: java.lang.String toString()>
<org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char,char,boolean,boolean)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.io.InputStream getResourceStream(java.lang.String)>-><org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<com.hazelcast.scheduledexecutor.impl.operations.CancelTaskBackupOperation: void <init>(java.lang.String,java.lang.String)>-><com.hazelcast.scheduledexecutor.impl.operations.AbstractSchedulerOperation: void <init>(java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.RedisNode$NodeType: void <clinit>()>-><org.springframework.data.redis.connection.RedisNode$NodeType: void <init>(java.lang.String,int)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void onRefresh()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void createWebServer()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getPatterns()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.config.Ini: void load(java.util.Scanner)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.AbstractMap: void clear()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<cn.hutool.core.map.MapProxy: void clear()>-><org.springframework.core.env.ReadOnlySystemAttributesMap: void clear()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.apache.shiro.authz.SimpleAuthorizationInfo: void addRole(java.lang.String)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.nio.tcp.MemberViewUnifiedEndpointManager: java.lang.String toString()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.apache.shiro.util.PermissionUtils: java.util.Set resolvePermissions(java.util.Collection,org.apache.shiro.authz.permission.PermissionResolver)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList: int size()>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.util.AbstractList: java.util.Iterator iterator()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(org.springframework.data.redis.connection.RedisClusterNode)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.HashSet: int size()>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.data.redis.core.StringRedisTemplate: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.core.StringRedisTemplate: void <init>()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<java.net.URLConnection: java.lang.Object getContent()>-><org.apache.catalina.webresources.war.WarURLConnection: java.io.InputStream getInputStream()>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String,java.util.Locale)>-><java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendPattern(java.lang.String)>
<com.google.common.cache.LocalCache$AccessQueue: void <init>()>-><java.util.AbstractQueue: void <init>()>
<com.hazelcast.config.ClassFilter: void <init>()>-><java.util.concurrent.atomic.AtomicBoolean: void <init>()>
<com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer: void checkNotStaleTask(java.lang.String)>-><com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer: boolean has(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><freemarker.ext.beans.SequenceAdapter: int size()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: java.util.List getResults()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><org.apache.commons.logging.LogAdapter$Slf4jLog: boolean isInfoEnabled()>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties)>-><org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>()>
<com.hazelcast.instance.Node: java.util.Map findMemberAttributes(com.hazelcast.config.MemberAttributeConfig)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache: boolean usesWriteQueue()>-><com.google.common.cache.LocalCache: boolean expiresAfterWrite()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>-><org.apache.logging.slf4j.Log4jLogger: void debug(java.lang.String,java.lang.Object)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><java.lang.Math: int min(int,int)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<com.hazelcast.util.ServiceLoader: java.util.Set collectFactoryUrls(java.lang.String,java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: java.lang.Object nextElement()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<com.hazelcast.cache.impl.HazelcastServerCacheManager: com.hazelcast.config.CacheConfig getCacheConfig(java.lang.String,java.lang.String)>-><com.hazelcast.cache.impl.operation.CacheGetConfigOperation: void <init>(java.lang.String,java.lang.String)>
<org.apache.shiro.authz.ModularRealmAuthorizer: void applyRolePermissionResolverToRealms()>-><java.util.AbstractCollection: boolean isEmpty()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void cancelRemainingTask(java.lang.Runnable)>-><io.netty.util.concurrent.PromiseTask: boolean cancel(boolean)>
<cn.hutool.core.map.MapProxy: void clear()>-><java.util.LinkedHashMap: void clear()>
<com.google.common.cache.LocalCache$Strength: void <clinit>()>-><com.google.common.cache.LocalCache$Strength$1: void <init>(java.lang.String,int)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.RegistrationBean: void setOrder(int)>
<org.springframework.web.cors.CorsConfiguration: void addAllowedOrigin(java.lang.String)>-><java.util.ArrayList: void <init>(int)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.BasicPermissionCollection: java.util.Enumeration elements()>
<com.fasterxml.classmate.util.LRUTypeCache: void <init>(int)>-><com.fasterxml.classmate.util.LRUTypeCache$CacheMap: void <init>(int)>
<com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer: void checkNotStaleTask(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.LocalTime: java.lang.String toString()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.apache.shiro.util.ClassUtils: org.slf4j.Logger access$100()>
<reactor.core.publisher.MonoDelay: void subscribe(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onError(java.lang.Throwable)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><net.sf.ehcache.transaction.SoftLockID: java.lang.String toString()>
<com.google.common.cache.LocalCache$AccessQueue: void <init>()>-><com.google.common.cache.LocalCache$AccessQueue$1: void <init>(com.google.common.cache.LocalCache$AccessQueue)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><org.springframework.data.redis.connection.ClusterCommandExecutor$NodeExecution: org.springframework.data.redis.connection.RedisClusterNode getNode()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ParameterTypeReader: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress,java.lang.String,int,java.lang.String)>-><org.apache.http.util.Args: java.lang.Object notNull(java.lang.Object,java.lang.String)>
<org.apache.ibatis.reflection.factory.DefaultObjectFactory: java.lang.Object instantiateClass(java.lang.Class,java.util.List,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.EnumMap: void clear()>
<com.hazelcast.internal.partition.operation.PromotionCommitOperation: void finalizePromotion()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.domain.Sort: org.springframework.data.domain.Sort by(org.springframework.data.domain.Sort$Order[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<reactor.core.publisher.SerializedSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: void <init>()>-><org.springframework.data.redis.connection.RedisClusterNode$SlotRange: org.springframework.data.redis.connection.RedisClusterNode$SlotRange empty()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <clinit>()>-><org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <init>(java.lang.String,int)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ExpandedParameterBuilder: void <init>(com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: java.util.Properties getConfig(java.lang.String)>-><org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>
<springfox.documentation.schema.TypeNameExtractor: void <init>(com.fasterxml.classmate.TypeResolver,org.springframework.plugin.core.PluginRegistry,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>-><org.apache.shiro.realm.text.TextConfigurationRealm: void processRoleDefinitions(java.util.Map)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.security.core.authority.SimpleGrantedAuthority: int hashCode()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void setConfig(java.lang.String,java.lang.String)>-><org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>
<org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.util.Collection)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <clinit>()>-><java.util.EnumMap: void <init>(java.lang.Class)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: int getMaxIdle()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<springfox.documentation.spring.web.scanners.CachingOperationReader$1: void <init>(springfox.documentation.spring.web.scanners.CachingOperationReader,springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheLoader: void <init>()>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration: void <init>()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void awaitTerminationIfNecessary(java.util.concurrent.ExecutorService)>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void warn(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.net.SocketImpl: java.lang.String toString()>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.apache.shiro.config.Ini$Section: java.lang.String[] splitKeyValue(java.lang.String)>-><org.apache.logging.slf4j.Log4jLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: org.springframework.data.redis.connection.RedisClusterServerCommands serverCommands()>-><org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: void <init>(org.springframework.data.redis.connection.lettuce.LettuceClusterConnection)>
<cn.hutool.core.map.MapUtil: java.lang.Object get(java.util.Map,java.lang.Object,java.lang.Class,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: int getInitialCapacity()>
<org.apache.catalina.core.StandardContext: java.lang.String getRealPath(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$2: void <init>(java.lang.String,int)>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<com.hazelcast.config.AbstractCacheConfig: void <init>()>-><javax.cache.expiry.EternalExpiryPolicy: javax.cache.configuration.Factory factoryOf()>
<org.apache.logging.log4j.spi.Provider: java.lang.Class loadThreadContextMap()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<com.hazelcast.config.AbstractCacheConfig: void <init>()>-><com.hazelcast.config.HotRestartConfig: void <init>()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void cancelRemainingTask(java.lang.Runnable)>
<springfox.documentation.spring.web.readers.parameter.ParameterDefaultReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><springfox.documentation.spring.web.DescriptionResolver: void <init>(org.springframework.core.env.Environment)>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: java.lang.String toString()>
<org.springframework.data.elasticsearch.client.ClusterNodes: java.util.Iterator iterator()>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.PropertyName _findParamName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter,com.fasterxml.jackson.databind.AnnotationIntrospector)>-><java.lang.String: boolean isEmpty()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getDefaultCipherSuiteList(boolean)>-><sun.security.ssl.SSLContextImpl$TLS12Context: sun.security.ssl.CipherSuiteList getClientDefaultCipherSuiteList()>
<com.google.common.cache.LocalCache$LocalLoadingCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerOpaqueTokenConfiguration: void <init>()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void closeConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<org.apache.shiro.authz.SimpleAuthorizationInfo: void addRole(java.lang.String)>-><java.util.HashSet: void <init>()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.partition.membergroup.SingleMemberGroup: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain$2: boolean getStaticPermissionsField(java.security.ProtectionDomain)>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <clinit>()>-><org.apache.tomcat.util.compat.JreCompat: boolean isGraalAvailable()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>-><java.util.LinkedHashSet: void <init>()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<springfox.documentation.schema.property.field.FieldProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedHeader(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration: void setAllowedHeaders(java.util.List)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void setConfig(java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: org.springframework.dao.DataAccessException convertLettuceAccessException(java.lang.Exception)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: boolean isDebugEnabled()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pipeline(org.springframework.data.redis.connection.lettuce.LettuceResult)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isQueueing()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.core.BuiltinVariable: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.PermissionsEnumerator: java.lang.Object nextElement()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner,boolean)>-><java.lang.Object: void <init>()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.apache.shiro.authc.SimpleAccount: int hashCode()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper$Source whenNonNull(org.springframework.boot.context.properties.PropertyMapper$Source)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source whenNonNull()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: int hashCode()>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String,java.util.Locale)>-><java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatter toFormatter(java.util.Locale)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.executionservice.impl.DelegateAndSkipOnConcurrentExecutionDecorator$DelegateDecorator: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void remove(java.util.Collection,byte[][])>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.text.FieldPosition: java.lang.String toString()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.Iterable getCacheNames()>-><com.hazelcast.util.SetUtil: java.util.Set createLinkedHashSet(int)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><org.apache.shiro.web.filter.mgt.SimpleNamedFilterList: void <init>(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.core.io.AbstractFileResolvingResource: long lastModified()>-><org.apache.catalina.webresources.war.WarURLConnection: long getContentLengthLong()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.data.redis.connection.convert.MapToPropertiesConverter: java.util.Properties convert(java.util.Map)>-><java.util.Hashtable: void putAll(java.util.Map)>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler getTypeHandler(java.lang.reflect.Type,org.apache.ibatis.type.JdbcType)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<org.springframework.data.redis.connection.RedisStringCommands$SetOption: org.springframework.data.redis.connection.RedisStringCommands$SetOption[] values()>-><java.lang.Object: java.lang.Object clone()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: int hashCode()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<redis.clients.jedis.Jedis: java.lang.String clusterNodes()>-><redis.clients.jedis.Client: void clusterNodes()>
<org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.util.Collection)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(org.springframework.data.redis.connection.RedisClusterNode)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder maximumSize(long)>-><com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<redis.clients.jedis.Client: void clusterNodes()>-><redis.clients.jedis.Client: void cluster(java.lang.String)>
<com.fasterxml.jackson.databind.type.ReferenceType: void <init>(com.fasterxml.jackson.databind.type.TypeBase,com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.SimpleType: void <init>(com.fasterxml.jackson.databind.type.TypeBase)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.http.pool.RouteSpecificPool: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<freemarker.ext.beans._BeansAPI: void removeClearedReferencesFromCache(java.util.Map,java.lang.ref.ReferenceQueue)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void register(java.lang.Class[])>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><freemarker.core.ParseException: java.lang.String getMessage()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.String toString()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Object: void <init>()>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.apache.shiro.util.PermissionUtils: java.util.Set resolvePermissions(java.util.Collection,org.apache.shiro.authz.permission.PermissionResolver)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] optimize(java.security.ProtectionDomain[])>
<org.springframework.web.context.support.ServletContextResourcePatternResolver: void doRetrieveMatchingServletContextResources(javax.servlet.ServletContext,java.lang.String,java.lang.String,java.util.Set)>-><org.apache.catalina.core.ApplicationContext: java.lang.String getRealPath(java.lang.String)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.apache.shiro.authz.SimpleRole: java.lang.String toString()>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: java.lang.String toString()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.apache.shiro.config.Ini$Section: java.util.Map toMapProps(java.lang.String)>-><java.lang.String: int length()>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.hazelcast.cache.impl.HazelcastServerCacheManager: com.hazelcast.config.CacheConfig getCacheConfig(java.lang.String,java.lang.String)>-><com.hazelcast.spi.impl.NodeEngineImpl: com.hazelcast.spi.partition.IPartitionService getPartitionService()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void transaction(org.springframework.data.redis.connection.lettuce.LettuceResult)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.apache.shiro.realm.text.IniRealm: void <init>()>-><org.apache.shiro.realm.text.TextConfigurationRealm: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><com.hazelcast.spi.impl.AbstractInvocationFuture: boolean isCancelled()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><redis.clients.jedis.exceptions.JedisRedirectionException: int getSlot()>
<org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: void <init>()>-><java.lang.Object: void <init>()>
<com.sun.naming.internal.ResourceManager: java.lang.Object getFactory(java.lang.String,java.util.Hashtable,javax.naming.Context,java.lang.String,java.lang.String)>-><org.apache.shiro.config.Ini$Section: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.domain.Sort$Order: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String,boolean,org.springframework.data.domain.Sort$NullHandling)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.apache.shiro.authz.SimpleRole: java.lang.String toString()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.apache.shiro.mgt.RealmSecurityManager: void applyCacheManagerToRealms()>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.apache.shiro.authz.SimpleRole: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>(java.lang.ClassLoader)>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: boolean shouldUseCachedValue()>-><java.lang.System: long currentTimeMillis()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doUnsubscribe(boolean,byte[][])>
<com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray(java.lang.Object[])>-><com.google.common.collect.SingletonImmutableSet: int size()>
<org.springframework.data.redis.connection.RedisNode: boolean isMaster()>-><org.springframework.data.redis.connection.RedisNode: org.springframework.data.redis.connection.RedisNode$NodeType getType()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>()>-><java.net.URLClassLoader: void <init>(java.net.URL[])>
<com.hazelcast.internal.partition.operation.MigrationOperation: void runMigrationOperation(com.hazelcast.spi.Operation)>-><com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation: void run()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.apache.logging.slf4j.Log4jLogger: boolean isDebugEnabled()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.text.DigitList: java.lang.String toString()>
<org.springframework.data.redis.connection.convert.Converters: org.springframework.data.redis.connection.RedisClusterNode toClusterNode(java.lang.String)>-><org.springframework.data.redis.connection.convert.Converters$1: java.lang.Object convert(java.lang.Object)>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: redis.clients.jedis.util.Pool createRedisPool()>-><org.springframework.data.redis.connection.jedis.DefaultJedisClientConfiguration: java.util.Optional getSslSocketFactory()>
<com.hazelcast.spi.impl.operationservice.impl.InvokeOnPartitions: void <init>(com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl,java.lang.String,com.hazelcast.spi.OperationFactory,java.util.Map)>-><java.util.ArrayList$SubList: int size()>
<org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>-><org.springframework.data.redis.connection.RedisClusterNode: boolean isMarkedAsFail()>
<org.springframework.web.context.support.ContextExposingHttpServletRequest: void <init>(javax.servlet.http.HttpServletRequest,org.springframework.web.context.WebApplicationContext,java.util.Set)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.shiro.config.Ini$Section: java.lang.String[] splitKeyValue(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.shiro.config.Ini$Section: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<com.hazelcast.spi.impl.operationservice.impl.OperationBackupHandler: com.hazelcast.spi.Operation getBackupOperation(com.hazelcast.spi.BackupAwareOperation)>-><com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation: com.hazelcast.spi.Operation getBackupOperation()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.nio.DirectByteBuffer: void <init>(long,int)>-><java.nio.MappedByteBuffer: void <init>(int,int,int,int)>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<io.lettuce.core.ClientOptions: void <init>(io.lettuce.core.ClientOptions)>-><io.lettuce.core.ClientOptions: int getRequestQueueSize()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.io.File: java.lang.String toString()>
<org.apache.shiro.config.Ini: boolean isEmpty()>-><java.util.LinkedHashMap: java.util.Collection values()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfAvailable()>
<freemarker.ext.beans._BeansAPI: void removeClearedReferencesFromCache(java.util.Map,java.lang.ref.ReferenceQueue)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<org.apache.catalina.core.ApplicationContext: void <clinit>()>-><java.lang.Boolean: boolean parseBoolean(java.lang.String)>
<org.springframework.data.redis.connection.convert.Converters$1: java.util.Set parseFlags(java.lang.String[])>-><org.springframework.data.redis.connection.convert.Converters: java.util.Map access$000()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: redis.clients.jedis.JedisCluster createCluster(org.springframework.data.redis.connection.RedisClusterConfiguration,org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.springframework.data.redis.connection.jedis.DefaultJedisClientConfiguration: java.util.Optional getSslParameters()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilderFromIssuerIfPossible(java.lang.String,java.lang.String,java.util.Map)>-><org.springframework.security.oauth2.client.registration.ClientRegistrations: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder fromIssuerLocation(java.lang.String)>
<org.apache.shiro.config.Ini$Section: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner,boolean)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Log4jLog: void info(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.apache.shiro.subject.support.DelegatingSubject: org.apache.shiro.session.Session decorate(org.apache.shiro.session.Session)>-><org.apache.shiro.subject.support.DelegatingSubject$StoppingAwareProxiedSession: void <init>(org.apache.shiro.subject.support.DelegatingSubject,org.apache.shiro.session.Session,org.apache.shiro.subject.support.DelegatingSubject,org.apache.shiro.subject.support.DelegatingSubject$1)>
<com.hazelcast.config.JavaSerializationFilterConfig: void <init>(com.hazelcast.config.JavaSerializationFilterConfig)>-><com.hazelcast.config.ClassFilter: void <init>(com.hazelcast.config.ClassFilter)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.google.common.base.Predicates$ObjectPredicate$1: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: long getClientTimeout()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.time.Duration getCommandTimeout()>
<org.springframework.http.HttpStatus$Series: void <init>(java.lang.String,int,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void debug(java.lang.Object)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer: void checkNotStaleTask(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,int)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.springframework.data.redis.connection.AbstractRedisConnection: void close()>-><java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String getMimeType()>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<org.apache.shiro.web.servlet.AbstractFilter: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(org.springframework.transaction.TransactionDefinition)>-><org.springframework.transaction.TransactionDefinition: java.lang.String getName()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.buffer.EmptyByteBuf: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: com.hazelcast.cache.ICache getCache(java.lang.String)>-><com.hazelcast.cache.impl.AbstractHazelcastCacheManager: com.hazelcast.cache.impl.ICacheInternal ensureOpenIfAvailable(com.hazelcast.cache.impl.ICacheInternal)>
<io.netty.util.internal.PlatformDependent0$6: java.lang.Object run()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.ibatis.mapping.ParameterMapping: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$12: void <init>(java.lang.String,int)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.function.RouterFunctions$FilteredRouterFunction: void <init>(org.springframework.web.servlet.function.RouterFunction,org.springframework.web.servlet.function.HandlerFilterFunction)>-><java.lang.Object: void <init>()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<com.hazelcast.internal.cluster.impl.MembershipManager: void removeAllMissingMembers()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$PatternSubscriptionPresentCondition: boolean passes()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<org.apache.tomcat.jni.SSL: void <clinit>()>-><org.apache.tomcat.jni.SSL: int version()>
<org.apache.shiro.authz.ModularRealmAuthorizer: void applyRolePermissionResolverToRealms()>-><com.google.common.collect.SingletonImmutableSet: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void closeIfUnsubscribed()>-><java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: boolean isAlive()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.TreeMap: java.util.TreeMap$Entry getEntryUsingComparator(java.lang.Object)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: long getMaximumWeight()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.util.ClassUtils: java.lang.Class getUserClass(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.schema.TypeNameExtractor: void <init>(com.fasterxml.classmate.TypeResolver,org.springframework.plugin.core.PluginRegistry,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode$SlotRange parseSlotRange(java.lang.String[])>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.util.scheduler.ScheduledEntry: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterCommandExecutor$NodeExecution: void <init>(org.springframework.data.redis.connection.RedisClusterNode)>-><org.springframework.data.redis.connection.ClusterCommandExecutor$NodeExecution: void <init>(org.springframework.data.redis.connection.RedisClusterNode,org.springframework.data.redis.connection.ClusterCommandExecutor$PositionalKey)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.web.cors.CorsConfiguration: void setAllowedMethods(java.util.List)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.net.URL getResource(java.lang.String)>
<org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo loadVersionInfo(java.lang.String,java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.io.InputStream getResourceAsStream(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.RedisServerCommands serverCommands()>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void <init>(org.springframework.data.redis.connection.lettuce.LettuceConnection)>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><org.springframework.data.redis.connection.RedisStringCommands$SetOption: org.springframework.data.redis.connection.RedisStringCommands$SetOption[] values()>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><redis.clients.jedis.Jedis: java.lang.String clusterNodes()>
<javax.security.auth.SubjectDomainCombiner: void <clinit>()>-><sun.misc.SharedSecrets: sun.misc.JavaSecurityProtectionDomainAccess getJavaSecurityProtectionDomainAccess()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration: void <init>()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: void ensureOpen()>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.ssl.SupportedEllipticCurvesExtension: java.lang.String toString()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String getDescription()>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: java.lang.String getOrDeduceName(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.session.ProxiedSession: void <init>(org.apache.shiro.session.Session)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.data.redis.connection.RedisNode$NodeType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.springframework.core.env.CommandLineArgs: void addOptionArg(java.lang.String,java.lang.String)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$2: java.util.Set parseFlags(java.util.Set)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration getClientRegistration(java.lang.String,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Registration,java.util.Map)>-><org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilderFromIssuerIfPossible(java.lang.String,java.lang.String,java.util.Map)>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void cancelRemainingTask(java.lang.Runnable)>-><java.util.concurrent.FutureTask: boolean cancel(boolean)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.DependencyDescriptor: boolean isRequired()>-><java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: int size()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String getDescription()>-><org.springframework.boot.web.servlet.FilterRegistrationBean: javax.servlet.Filter getFilter()>
<org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>-><java.util.HashSet: int size()>
<java.util.zip.ZipFile: void <init>(java.io.File)>-><java.util.zip.ZipFile: void <init>(java.io.File,int)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.text.IniRealm: void <init>(org.apache.shiro.config.Ini)>-><org.apache.shiro.realm.text.IniRealm: void <init>()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache$AccessQueue: void <init>()>
<cn.hutool.core.map.MapProxy: void clear()>-><java.util.WeakHashMap: void clear()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.math.BigDecimal: java.lang.String toString()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.Permissions: boolean implies(java.security.Permission)>
<org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char,char,boolean,boolean)>-><java.util.ArrayList: int size()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.management.ObjectName: java.lang.String toString()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.druid.stat.DruidStatManagerFacade: void <init>()>-><java.util.concurrent.atomic.AtomicLong: void <init>()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><com.hazelcast.config.JavaSerializationFilterConfig: java.lang.String toString()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.cors.CorsConfiguration: void setAllowedMethods(java.util.List)>-><java.util.Collections$UnmodifiableCollection: int size()>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getKeyEquivalence()>-><com.google.common.cache.CacheBuilder: com.google.common.cache.LocalCache$Strength getKeyStrength()>
<org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: int accept(java.lang.reflect.Method)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<java.io.PrintWriter: void <init>(java.nio.charset.Charset,java.io.File)>-><java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>
<org.apache.shiro.util.ClassUtils: java.io.InputStream getResourceAsStream(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterRequiredReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>
<org.springframework.boot.autoconfigure.quartz.JobStoreType: void <clinit>()>-><org.springframework.boot.autoconfigure.quartz.JobStoreType: void <init>(java.lang.String,int)>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.boot.autoconfigure.template.TemplateLocation: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<springfox.documentation.spring.web.readers.operation.OperationTagsReader: void <init>(springfox.documentation.spring.web.readers.operation.DefaultTagsProvider)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.operation.DefaultTagsProvider getDefaultTagsProvider()>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.web.util.UriComponents: java.lang.String expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration$ReactiveUserDetailsServiceCondition$ReactiveWebApplicationCondition: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.field.MillisDurationField: java.lang.String toString()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.partition.impl.PartitionStateGeneratorImpl$SingleNodeGroup: java.lang.String toString()>
<com.alibaba.druid.stat.DruidStatService: void <clinit>()>-><com.alibaba.druid.support.logging.LogFactory: com.alibaba.druid.support.logging.Log getLog(java.lang.Class)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.awt.Toolkit: void loadAssistiveTechnologies()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<com.google.common.cache.LocalCache$EntryFactory$4: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents$Type$5: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: java.lang.String getErrorMessage(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object resolveMultipleBeans(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)>-><java.util.ArrayList$SubList: int size()>
<reactor.util.function.Tuple3: int hashCode()>-><java.util.Collections$SynchronizedList: int hashCode()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: boolean isPipelined()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.ssl.ServerNameExtension: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$SubscriptionPresentCondition: boolean passes()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isSubscribed()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.scheduling.quartz.ResourceLoaderClassLoadHelper: java.io.InputStream getResourceAsStream(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.io.InputStream getResourceAsStream(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<org.apache.shiro.config.Ini$Section: java.lang.String[] splitKeyValue(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisConnection getConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: long getTimeout()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: javax.servlet.FilterRegistration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.FilterRegistrationBean: javax.servlet.Filter getFilter()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: java.lang.String toString()>
<org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.util.List)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.text.IniRealm: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.context.index.CandidateComponentsIndexLoader: org.springframework.context.index.CandidateComponentsIndex doLoadIndex(java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: boolean hasMoreElements()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.DateTimeFieldType: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<com.google.common.cache.CacheBuilder: void checkWeightWithWeigher()>-><com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.CompletableFuture: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><org.apache.shiro.config.Ini$Section: java.util.Set keySet()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.atomic.AtomicIntegerArray: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.Hashtable: void clear()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.apache.shiro.config.Ini$Section: java.lang.String[] splitKeyValue(java.lang.String)>-><org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.security.Provider: void clear()>
<org.apache.shiro.util.CollectionUtils: java.util.Set asSet(java.lang.Object[])>-><java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<org.apache.shiro.config.Ini$Section: java.util.Map toMapProps(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<sun.security.ssl.SSLEngineImpl: void <init>(sun.security.ssl.SSLContextImpl,java.lang.String,int)>-><sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>
<org.springframework.boot.context.properties.ConfigurationPropertiesJsr303Validator$Delegate: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: void <init>()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<io.lettuce.core.ReadFrom: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><com.hazelcast.instance.HazelcastInstanceProxy: int hashCode()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.http.HttpEntity: void <init>()>-><org.springframework.http.HttpEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap)>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: com.hazelcast.cache.impl.ICacheInternal getCacheUnchecked(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation: void run()>-><com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer: boolean cancel(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.io.PrintWriter: void <init>(java.lang.String)>-><java.io.PrintWriter: void <init>(java.io.Writer,boolean)>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>
<org.springframework.security.authentication.CachingUserDetailsService: void <init>(org.springframework.security.core.userdetails.UserDetailsService)>-><java.lang.Object: void <init>()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<com.hazelcast.util.SetUtil: java.util.Set createLinkedHashSet(int)>-><java.util.LinkedHashSet: void <init>(int,float)>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.TreeMap: void clear()>
<springfox.documentation.spring.web.readers.parameter.ParameterRequiredReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><springfox.documentation.spring.web.DescriptionResolver: void <init>(org.springframework.core.env.Environment)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.util.MultiValueMapAdapter: java.util.List lambda$add$0(java.lang.Object)>-><java.util.LinkedList: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceResult newLettuceResult(java.util.concurrent.Future,org.springframework.core.convert.converter.Converter)>-><org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder: org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder mappedWith(org.springframework.core.convert.converter.Converter)>
<org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<javax.xml.ws.spi.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.io.InputStream getResourceAsStream(java.lang.String)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration: void <init>()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object,java.lang.Throwable)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode$SlotRange parseSlotRange(java.lang.String[])>-><java.lang.Integer: int intValue()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.security.Permission: java.lang.String toString()>
<springfox.documentation.spring.web.paths.QueryStringUriTemplateDecorator: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.fasterxml.jackson.dataformat.cbor.CBORFactory: com.fasterxml.jackson.dataformat.cbor.CBORFactory copy()>-><com.fasterxml.jackson.core.JsonFactory: void _checkInvalidCopy(java.lang.Class)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.ResponseMessagesReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: org.apache.shiro.authz.SimpleRole getRole(java.lang.String)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.mail.MessagingException: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.lang.String printDomain(java.security.ProtectionDomain)>-><javax.security.auth.SubjectDomainCombiner$5: void <init>(java.security.ProtectionDomain)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.io.PrintWriter: void <init>(java.io.File)>-><java.io.PrintWriter: void <init>(java.io.Writer,boolean)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<sun.security.ssl.SSLEngineImpl: void <init>(sun.security.ssl.SSLContextImpl)>-><javax.net.ssl.SSLEngine: void <init>()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<sun.security.ssl.SSLContextImpl$TLS12Context: void <clinit>()>-><sun.security.ssl.ProtocolList: void <init>(java.lang.String[])>
<reactor.util.function.Tuple3: int hashCode()>-><com.hazelcast.config.JavaSerializationFilterConfig: int hashCode()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.x509.Extension: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$null$4(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<redis.clients.jedis.exceptions.JedisExhaustedPoolException: void <init>(java.lang.String,java.lang.Throwable)>-><redis.clients.jedis.exceptions.JedisException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <init>(java.lang.String,int)>
<com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.jmx.export.MBeanExporter: void <clinit>()>-><org.springframework.core.Constants: void <init>(java.lang.Class)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.apache.shiro.realm.SimpleAccountRealm: void add(org.apache.shiro.authc.SimpleAccount)>-><java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.StringBuilder: java.lang.String toString()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse: java.lang.String toString()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>
<java.util.Collections$SynchronizedMap: boolean isEmpty()>-><org.apache.shiro.config.Ini$Section: boolean isEmpty()>
<org.apache.http.protocol.ImmutableHttpProcessor: void <init>(java.util.List,java.util.List)>-><java.util.Collections$SynchronizedCollection: int size()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getKeyEquivalence()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.AllPermissionCollection$1: java.lang.Object nextElement()>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object getValue(java.lang.Object)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.awt.Point: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><freemarker.template.TemplateException: java.lang.String getMessage()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><java.util.ArrayList: int size()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>-><sun.security.util.Debug: void println(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceStatusResult: void <init>(java.util.concurrent.Future)>-><org.springframework.data.redis.connection.FutureResult: void setStatus(boolean)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<com.hazelcast.internal.partition.operation.PromotionCommitOperation: void finalizePromotion()>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ListableBeanFactory)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.springframework.web.context.request.async.CallableProcessingInterceptor: void <clinit>()>-><java.lang.Object: void <init>()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>()>-><java.util.HashMap: void <init>()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.config.Ini: void addSection(java.lang.String,java.lang.StringBuilder)>-><org.apache.shiro.config.Ini$Section: boolean isEmpty()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceResult: void <init>(java.util.concurrent.Future)>-><org.springframework.data.redis.connection.lettuce.LettuceResult: void <init>(java.util.concurrent.Future,boolean,org.springframework.core.convert.converter.Converter)>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder withFlags(java.util.Set)>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>-><org.springframework.core.annotation.AnnotatedElementUtils: java.lang.annotation.Annotation findMergedAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><freemarker.ext.beans.HashAdapter$1$1$1: java.lang.Object getValue()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.io.PrintWriter: void <init>(java.nio.charset.Charset,java.io.File)>-><java.io.FileOutputStream: void <init>(java.io.File)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.util.ClassUtils: void <clinit>()>-><org.apache.shiro.util.ClassUtils$2: void <init>()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><io.lettuce.core.DefaultConnectionFuture: boolean isCancelled()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.web.method.HandlerMethod$HandlerMethodParameter: void <init>(org.springframework.web.method.HandlerMethod,int)>-><org.springframework.core.annotation.SynthesizingMethodParameter: void <init>(java.lang.reflect.Method,int)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,io.lettuce.core.pubsub.StatefulRedisPubSubConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider)>-><org.springframework.data.redis.connection.lettuce.LettuceMessageListener: void <init>(org.springframework.data.redis.connection.MessageListener)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<springfox.documentation.spring.web.readers.operation.OperationDeprecatedReader: void <init>()>-><java.lang.Object: void <init>()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.google.common.base.Absent: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.springframework.web.context.support.ContextExposingHttpServletRequest: void <init>(javax.servlet.http.HttpServletRequest,org.springframework.web.context.WebApplicationContext,java.util.Set)>-><javax.servlet.http.HttpServletRequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>
<org.springframework.web.cors.CorsConfiguration: void setAllowedOrigins(java.util.List)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<org.springframework.util.CollectionUtils: void lambda$unmodifiableMultiValueMap$0(java.util.Map,java.lang.Object,java.util.List)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>-><java.lang.Object: void <init>()>
<reactor.core.publisher.MonoCollectList$MonoCollectListSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void request(long)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<reactor.core.publisher.MonoZip$ZipInner: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void cancel()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerWebApplicationScopes()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void restore()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><cn.hutool.core.lang.Tuple: java.lang.String toString()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedMap: void clear()>-><cn.hutool.core.map.MapProxy: void clear()>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: void afterPropertiesSet()>-><org.springframework.data.redis.connection.jedis.DefaultJedisClientConfiguration: java.util.Optional getSslParameters()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.EmbeddedDataSourceConfiguration: void <init>()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder withId(java.lang.String)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.bootstrap.AbstractBootstrap: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<freemarker.core.Configurable: void setCustomNumberFormats(java.util.Map)>-><org.apache.shiro.config.Ini$Section: java.util.Set keySet()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
<redis.clients.jedis.JedisPool: redis.clients.jedis.Jedis getResource()>-><redis.clients.jedis.Jedis: void setDataSource(redis.clients.jedis.JedisPoolAbstract)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiDescriptionLookup getApiDescriptionLookup()>
<org.apache.catalina.core.StandardContext: java.lang.String getRealPath(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Date: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: java.lang.Object get(int)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><com.hazelcast.util.scheduler.ScheduledEntry: java.lang.Object getValue()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.data.domain.Sort: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.baomidou.mybatisplus.core.config.GlobalConfig: java.lang.String toString()>
<org.apache.http.client.config.RequestConfig: void <init>()>-><org.apache.http.client.config.RequestConfig: void <init>(boolean,org.apache.http.HttpHost,java.net.InetAddress,boolean,java.lang.String,boolean,boolean,boolean,int,boolean,java.util.Collection,java.util.Collection,int,int,int,boolean,boolean)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<com.sun.net.httpserver.Headers: java.lang.String getFirst(java.lang.String)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int access$000(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.apache.shiro.mgt.RealmSecurityManager: void applyCacheManagerToRealms()>-><java.util.AbstractCollection: boolean isEmpty()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.base.AbstractInstant: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><java.lang.Class: java.lang.String getSimpleName()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.web.cors.CorsConfiguration: void setAllowedMethods(java.util.List)>-><org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer: void <init>(javax.servlet.ServletContext)>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processRoleDefinitions(java.util.Map)>-><org.apache.shiro.authz.SimpleRole: void setPermissions(java.util.Set)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.rmi.server.RemoteObject: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void close()>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void warn(java.lang.Object,java.lang.Throwable)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getChannels()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.apache.shiro.spring.web.config.ShiroWebConfiguration: void <init>()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.terracotta.statistics.GeneralOperationStatistic: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Thread: java.lang.String toString()>
<com.fasterxml.jackson.dataformat.cbor.CBORFactory: void <init>(com.fasterxml.jackson.dataformat.cbor.CBORFactoryBuilder)>-><com.fasterxml.jackson.dataformat.cbor.CBORFactoryBuilder: int formatGeneratorFeaturesMask()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<com.hazelcast.config.AbstractCacheConfig: java.util.Set createConcurrentSet()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><java.util.concurrent.ConcurrentLinkedQueue: void <init>()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration getClientRegistration(java.lang.String,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Registration,java.util.Map)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper$Source from(java.util.function.Supplier)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><io.netty.util.concurrent.DefaultPromise: java.lang.Object get()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><com.hazelcast.instance.HazelcastInstanceProxy: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.util.Scanner: void <init>(java.lang.Readable)>-><java.util.Scanner: void <init>(java.lang.Readable,java.util.regex.Pattern)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor$JsonPropertySource: void <init>(org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor$JsonPropertyValue,java.util.Map)>-><org.springframework.core.env.MapPropertySource: void <init>(java.lang.String,java.util.Map)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void <init>(io.lettuce.core.cluster.api.StatefulRedisClusterConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,org.springframework.data.redis.connection.ClusterTopologyProvider,org.springframework.data.redis.connection.ClusterCommandExecutor,java.time.Duration)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void <init>(io.lettuce.core.api.StatefulConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,long,int)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.data.redis.connection.DefaultedRedisConnection: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: java.util.Properties getConfig(java.lang.String)>
<org.apache.shiro.config.Ini$Section: boolean isContinued(java.lang.String)>-><java.lang.String: char charAt(int)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.lang.String getDescription()>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<com.hazelcast.spi.impl.operationservice.impl.OperationBackupHandler: int sendBackups(com.hazelcast.spi.Operation)>-><com.hazelcast.scheduledexecutor.impl.operations.AbstractBackupAwareSchedulerOperation: boolean shouldBackup()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.lang.reflect.Field: java.util.Map declaredAnnotations()>
<org.apache.shiro.authc.SimpleAccount: void <init>(java.lang.Object,java.lang.Object,java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: void <init>(java.lang.Object,java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.shiro.authz.permission.WildcardPermission: void setParts(java.lang.String,boolean)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>-><org.apache.logging.slf4j.Log4jLogger: void warn(java.lang.String,java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isVerifyPeer()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isVerifyPeer()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><org.apache.shiro.realm.CachingRealm: java.lang.String getName()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: int hashCode()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.hateoas.HypermediaHttpMessageConverterConfiguration: void <init>()>
<com.fasterxml.classmate.util.LRUTypeCache: void <init>(int)>-><com.fasterxml.classmate.util.ResolvedTypeCache: void <init>()>
<org.apache.shiro.util.PermissionUtils: java.util.Set resolvePermissions(java.util.Collection,org.apache.shiro.authz.permission.PermissionResolver)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration$JdbcStoreTypeConfiguration: void <init>()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processRoleDefinitions(java.util.Map)>-><org.apache.shiro.realm.SimpleAccountRealm: org.apache.shiro.authz.SimpleRole getRole(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.OperationPathDecorator: void <init>()>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.apache.shiro.mgt.RealmSecurityManager: void setRealms(java.util.Collection)>-><java.util.AbstractCollection: boolean isEmpty()>
<redis.clients.jedis.JedisClusterInfoCache: void discoverClusterNodesAndSlots(redis.clients.jedis.Jedis)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[],java.security.AccessControlContext)>-><java.lang.Object: void <init>()>
<reactor.core.publisher.SerializedSubscriber: void serDrainLoop(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onError(java.lang.Throwable)>
<org.springframework.web.util.HierarchicalUriComponents$Type$1: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.google.common.base.Present: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getDescription()>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getServletName()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><freemarker.template.TemplateException: java.lang.String getMessage()>
<cn.hutool.core.map.MapProxy: boolean isEmpty()>-><org.apache.shiro.config.Ini$Section: boolean isEmpty()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.x509.AVA: java.lang.String toString()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor getThreadPoolExecutor()>-><org.springframework.util.Assert: void state(boolean,java.lang.String)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.apache.shiro.config.Ini: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.context.index.CandidateComponentsIndexLoader: org.springframework.context.index.CandidateComponentsIndex doLoadIndex(java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.util.Enumeration getResources(java.lang.String)>
<com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$SubscriptionPresentCondition eventuallyPerformSubscription()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>
<com.google.common.base.Platform: com.google.common.base.PatternCompiler loadPatternCompiler()>-><com.google.common.base.Platform$JdkPatternCompiler: void <init>(com.google.common.base.Platform$1)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler: java.util.List initSseConverters(java.util.List)>-><org.springframework.http.converter.ResourceRegionHttpMessageConverter: boolean canWrite(java.lang.Class,org.springframework.http.MediaType)>
<org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.Set getBeanNames(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.apache.shiro.util.ClassUtils$1: java.lang.ClassLoader doGetClassLoader()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.lang.String toString()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: boolean _hasCreatorAnnotation(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.introspect.Annotated)>-><com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: com.fasterxml.jackson.annotation.JsonCreator$Mode findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<com.google.common.base.Equivalence: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><freemarker.template.TemplateException: java.lang.String getMessage()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter: void logWarningIfNecessary(java.lang.reflect.Type,java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: com.hazelcast.cache.ICache getCache(java.lang.String)>-><com.hazelcast.cache.impl.AbstractHazelcastCacheManager: void ensureOpen()>
<com.hazelcast.internal.partition.operation.PromotionCommitOperation: void finalizePromotion()>-><java.util.ArrayList$SubList: int size()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.data.redis.connection.DefaultedRedisConnection: void setConfig(java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: void setConfig(java.lang.String,java.lang.String)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$2: void <init>(java.lang.String,int,java.lang.String)>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String,org.springframework.context.annotation.MBeanExportConfiguration$1)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: boolean isTraceEnabled()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.Scannable$Attr$1: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$6: void <init>(java.lang.String,int)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.channel.ReflectiveChannelFactory: java.lang.String toString()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.HashMap$Node: java.lang.Object getKey()>
<com.hazelcast.cache.impl.PreJoinCacheConfig: void <init>(com.hazelcast.config.CacheConfig,boolean)>-><com.hazelcast.config.CacheConfig: void <init>()>
<com.google.common.cache.LocalCache$WriteQueue$1: void <init>(com.google.common.cache.LocalCache$WriteQueue)>-><com.google.common.cache.LocalCache$AbstractReferenceEntry: void <init>()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>-><java.util.ArrayList: boolean isEmpty()>
<cn.hutool.core.map.MapProxy: void clear()>-><org.springframework.util.LinkedMultiValueMap: void clear()>
<com.sun.net.httpserver.Headers: void add(java.lang.String,java.lang.String)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerApplicationScope(javax.servlet.ServletContext)>-><org.springframework.beans.factory.support.AbstractBeanFactory: void registerScope(java.lang.String,org.springframework.beans.factory.config.Scope)>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.apache.shiro.config.Ini: java.lang.String getSectionName(java.lang.String)>-><org.apache.shiro.config.Ini: boolean isSectionHeader(java.lang.String)>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><com.google.common.base.Present: int hashCode()>
<org.springframework.data.redis.connection.AbstractRedisConnection: void close()>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiDescriptionReader getApiDescriptionReader()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.http.HttpHeaders: void <clinit>()>-><java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String,java.util.Locale)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.springframework.web.context.request.async.TimeoutDeferredResultProcessingInterceptor: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.net.ssl.SNIServerName: java.lang.String toString()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache$LocalManualCache: void <init>(com.google.common.cache.LocalCache,com.google.common.cache.LocalCache$1)>-><com.google.common.cache.LocalCache$LocalManualCache: void <init>(com.google.common.cache.LocalCache)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.google.common.base.Platform$JdkPatternCompiler: void <init>()>-><java.lang.Object: void <init>()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><org.apache.shiro.authc.SimpleAccount: int hashCode()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String getDescription()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.security.ProtectionDomain: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.base.AbstractDuration: java.lang.String toString()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void run()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isSubscribed()>
<io.lettuce.core.ReadFromImpl$ReadFromReplicaPreferred: void <init>()>-><io.lettuce.core.ReadFromImpl$OrderedPredicateReadFromAdapter: void <init>(java.util.function.Predicate[])>
<springfox.documentation.spring.web.scanners.ApiListingReader: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>-><java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String,java.lang.Throwable)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: void <init>(javax.servlet.MultipartConfigElement)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.google.common.base.Predicates$ObjectPredicate$3: java.lang.String toString()>
<org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<com.google.common.base.Platform: void <clinit>()>-><com.google.common.base.Platform: com.google.common.base.PatternCompiler loadPatternCompiler()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void cancelRemainingTask(java.lang.Runnable)>-><java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: boolean cancel(boolean)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.cluster.impl.MembersView: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.Class: java.lang.String getName()>
<org.apache.shiro.config.Ini: void load(java.util.Scanner)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.apache.catalina.core.ApplicationContext: java.lang.String getRealPath(java.lang.String)>-><org.apache.catalina.core.StandardContext: java.lang.String getRealPath(java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: void setCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedList: java.lang.Object set(int,java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: io.lettuce.core.cluster.api.async.RedisClusterAsyncCommands getAsyncConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.cluster.api.async.RedisClusterAsyncCommands getAsyncConnection()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.atomic.LongAdder: java.lang.String toString()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<java.util.Collections$SynchronizedMap: void clear()>-><org.springframework.core.env.ReadOnlySystemAttributesMap: void clear()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: long getRefreshNanos()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilder(java.lang.String,java.lang.String,java.util.Map)>-><org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.config.oauth2.client.CommonOAuth2Provider getCommonProvider(java.lang.String)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: int size()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisClusterConnection getClusterConnection()>-><org.springframework.dao.InvalidDataAccessApiUsageException: void <init>(java.lang.String)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.apache.shiro.util.CollectionUtils: java.util.List asList(java.lang.Object[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.google.common.base.Present: java.lang.String toString()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><javax.xml.parsers.FactoryConfigurationError: java.lang.String getMessage()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.ErrorProperties: org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeStacktrace getIncludeStacktrace()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<redis.clients.jedis.JedisClusterInfoCache: redis.clients.jedis.HostAndPort generateHostAndPort(java.util.List)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.scheduler.DelegateServiceScheduler$UnsupportedScheduledExecutorService: java.lang.String toString()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.Iterable getCacheNames()>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.nio.tcp.TcpIpConnection: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object resolveMultipleBeans(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)>-><java.util.Collections$SynchronizedList: void sort(java.util.Comparator)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><net.sf.ehcache.CacheManager: java.lang.String toString()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void <clinit>()>-><org.springframework.data.redis.PassThroughExceptionTranslationStrategy: void <init>(org.springframework.core.convert.converter.Converter)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.core.Token: java.lang.String toString()>
<org.apache.shiro.web.servlet.AbstractShiroFilter: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap,org.springframework.http.HttpStatus)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type$12: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<com.hazelcast.config.AbstractCacheConfig: java.util.Set createConcurrentSet()>-><java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<sun.security.ssl.SSLEngineImpl: void <clinit>()>-><sun.security.ssl.Debug: sun.security.ssl.Debug getInstance(java.lang.String)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream getInputStreamForPath(java.lang.String)>-><org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromClassPath(java.lang.String)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.AbstractMap$1$1: boolean hasNext()>
<com.google.common.cache.CacheBuilder: com.google.common.base.Ticker getTicker(boolean)>-><com.google.common.base.Ticker: com.google.common.base.Ticker systemTicker()>
<org.springframework.data.redis.core.StringRedisTemplate: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.core.RedisTemplate: void afterPropertiesSet()>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: void addAllClassLoaderJarRoots(java.lang.ClassLoader,java.util.Set)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.net.URL[] getURLs()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: void <init>(org.springframework.boot.web.servlet.ServletContextInitializerBeans$1)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: void <init>()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.JumboEnumSet: boolean isEmpty()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.misc.GC$LatencyRequest: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<springfox.documentation.spring.web.paths.PathSanitizer: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<org.springframework.context.index.CandidateComponentsIndexLoader: org.springframework.context.index.CandidateComponentsIndex doLoadIndex(java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: java.lang.Object nextElement()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: java.lang.String toString()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<com.hazelcast.cache.impl.HazelcastServerCacheManager: void <init>(com.hazelcast.cache.impl.HazelcastServerCachingProvider,com.hazelcast.core.HazelcastInstance,java.net.URI,java.lang.ClassLoader,java.util.Properties)>-><com.hazelcast.instance.HazelcastInstanceProxy: com.hazelcast.instance.HazelcastInstanceImpl getOriginal()>
<org.springframework.web.filter.ForwardedHeaderFilter: void <clinit>()>-><java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<cn.hutool.core.io.resource.ResourceUtil: java.net.URL getResource(java.lang.String,java.lang.Class)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.net.URL getResource(java.lang.String)>
<com.hazelcast.ringbuffer.impl.RingbufferService: void clearRingbuffersHavingLesserBackupCountThan(int,int)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.util.ClassUtils$2: java.lang.ClassLoader doGetClassLoader()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.apache.shiro.config.Ini$Section: void <init>(org.apache.shiro.config.Ini$Section)>-><org.apache.shiro.config.Ini$Section: java.lang.String getName()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void add(java.util.Collection,byte[][])>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.servicemanager.ServiceInfo: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.apache.shiro.util.PermissionUtils: java.util.Set resolvePermissions(java.util.Collection,org.apache.shiro.authz.permission.PermissionResolver)>-><java.util.HashSet: java.util.Iterator iterator()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.DataFormatReaders: void <init>(java.util.Collection)>-><com.google.common.collect.SingletonImmutableSet: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: boolean evictsBySize()>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromUrl(java.lang.String)>-><org.apache.logging.slf4j.Log4jLogger: void debug(java.lang.String,java.lang.Object)>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler pickSoleHandler(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><freemarker.ext.beans.HashAdapter$1$1$1: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: int size()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.apache.shiro.config.Ini$Section: java.lang.String toString()>
<java.util.Collections$SynchronizedList: java.util.ListIterator listIterator(int)>-><java.util.ArrayList: java.util.ListIterator listIterator(int)>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromFile(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: int size()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.listener.KeyspaceEventMessageListener: void init()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters: void addClassIfExists(java.util.List,java.lang.String)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<reactor.core.publisher.MonoJust: void subscribe(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><com.google.common.collect.SingletonImmutableSet: java.util.Iterator iterator()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.apache.shiro.config.Ini$Section: boolean isContinued(java.lang.String)>-><java.lang.String: int length()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.apache.shiro.spring.config.ShiroBeanConfiguration: void <init>()>
<org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest: javax.servlet.http.HttpServletRequest lambda$new$0()>-><javax.servlet.ServletRequestWrapper: javax.servlet.ServletRequest getRequest()>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: java.lang.Class[] getArgTypes(java.util.Map,java.lang.reflect.Method)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.apache.shiro.config.Ini$Section: boolean isKeyValueSeparatorChar(char)>-><java.lang.Character: boolean isWhitespace(char)>
<com.fasterxml.jackson.dataformat.cbor.CBORParser$Feature: com.fasterxml.jackson.dataformat.cbor.CBORParser$Feature[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.apache.logging.log4j.util.LoaderUtil: java.util.Collection findUrlResources(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.util.Enumeration getResources(java.lang.String)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache$Segment: java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisClusterConnection getClusterConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection: io.lettuce.core.api.StatefulConnection getConnection()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void setConfig(java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceResult newLettuceStatusResult(java.util.concurrent.Future)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer: boolean cancel(java.lang.String)>-><com.hazelcast.scheduledexecutor.impl.ScheduledTaskDescriptor: boolean cancel(boolean)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.springframework.web.bind.support.WebExchangeBindException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.apache.shiro.subject.support.DelegatingSubject: void <init>(org.apache.shiro.subject.PrincipalCollection,boolean,java.lang.String,org.apache.shiro.session.Session,boolean,org.apache.shiro.mgt.SecurityManager)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: void <init>(org.springframework.boot.web.servlet.ServletContextInitializerBeans$1)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisSocketURIAndApplySettings(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.time.Duration getCommandTimeout()>
<org.springframework.boot.autoconfigure.cache.CacheProperties: java.lang.String lambda$resolveConfigLocation$0(org.springframework.core.io.Resource)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><org.springframework.util.LinkedMultiValueMap: void clear()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<sun.misc.URLClassPath$Loader$1: int getContentLength()>-><org.apache.catalina.webresources.war.WarURLConnection: int getContentLength()>
<org.apache.shiro.config.Ini$Section: void <init>(org.apache.shiro.config.Ini$Section,org.apache.shiro.config.Ini$1)>-><org.apache.shiro.config.Ini$Section: void <init>(org.apache.shiro.config.Ini$Section)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.time.Duration getCommandTimeout()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: void addPropertyDescriptorToClassIntrospectionData(java.util.Map,java.beans.PropertyDescriptor,java.util.Map,freemarker.ext.beans.ClassMemberAccessPolicy)>-><org.apache.shiro.config.Ini$Section: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.core.io.UTF8Writer: void <init>(com.fasterxml.jackson.core.io.IOContext,java.io.OutputStream)>-><java.io.Writer: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.apache.shiro.util.ClassUtils: void <clinit>()>-><org.apache.shiro.util.ClassUtils$3: void <init>()>
<reactor.core.publisher.MonoCallable: void subscribe(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onError(java.lang.Throwable)>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceInitializationConfiguration: void <init>()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder: void <init>(java.util.concurrent.Future)>-><java.lang.Object: void <init>()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>-><java.util.TreeSet: boolean addAll(java.util.Collection)>
<com.hazelcast.config.AbstractCacheConfig: void <init>()>-><com.hazelcast.cache.impl.DeferredValue: com.hazelcast.cache.impl.DeferredValue withNullValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String)>-><org.springframework.data.redis.ClusterStateFailureException: void <init>(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void close()>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void warn(java.lang.Object,java.lang.Throwable)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow: org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow[] values()>-><java.lang.Object: java.lang.Object clone()>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: com.fasterxml.classmate.types.ResolvedPrimitiveType voidType()>
<org.apache.shiro.util.PermissionUtils: java.util.Set toPermissionStrings(java.lang.String)>-><org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<org.springframework.boot.autoconfigure.validation.ValidatorAdapter: void afterPropertiesSet()>-><org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: void afterPropertiesSet()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<com.hazelcast.internal.partition.impl.MigrationManager$RepairPartitionTableTask: void logPromotionCommitFailure(com.hazelcast.internal.partition.PartitionReplica,java.util.Collection,java.lang.Throwable)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration$BaseConfiguration: void <init>()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxTimeout$TimeoutOtherSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><com.hazelcast.spi.impl.AbstractCompletableFuture: boolean isDone()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: java.lang.Object get(int)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner: java.lang.String printDomain(java.security.ProtectionDomain)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.DateTimeZone: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.text.AttributeEntry: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: void access$100(org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult,org.springframework.data.redis.connection.ClusterCommandExecutor$NodeResult)>-><org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: void add(org.springframework.data.redis.connection.ClusterCommandExecutor$NodeResult)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.StringBuffer: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void setConfig(java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void transaction(org.springframework.data.redis.connection.lettuce.LettuceResult)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><com.hazelcast.util.scheduler.ScheduledEntry: java.lang.Object getValue()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$PatternSubscriptionTask: void run()>-><org.springframework.data.redis.connection.util.AbstractSubscription: void pSubscribe(byte[][])>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.schema.property.bean.AccessorsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.version.Version: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] values()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.baomidou.mybatisplus.core.metadata.TableInfo: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.data.redis.connection.ReturnType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><com.google.common.collect.SingletonImmutableSet: java.util.Iterator iterator()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void awaitTerminationIfNecessary(java.util.concurrent.ExecutorService)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: boolean isWarnEnabled()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.Subject: java.util.Set getPrincipals()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getTraceParameter(javax.servlet.http.HttpServletRequest)>
<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] values()>-><java.lang.Object: java.lang.Object clone()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationTagsReader: void <init>(springfox.documentation.spring.web.readers.operation.DefaultTagsProvider)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<org.springframework.web.filter.ForwardedHeaderFilter: void <clinit>()>-><org.springframework.util.LinkedCaseInsensitiveMap: void <init>(int,java.util.Locale)>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.lang.Object: java.lang.Object clone()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration: void <init>()>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><java.lang.String: boolean isEmpty()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<net.sf.ehcache.management.ResourceClassLoader: void <init>(java.lang.String,java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.net.URL getResource(java.lang.String)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: freemarker.template.TemplateModel invokeGenericGet(java.util.Map,java.lang.Class,java.lang.String)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.LocalDate: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: void <init>(int)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.springframework.data.domain.Sort: org.springframework.data.domain.Sort by(org.springframework.data.domain.Sort$Order[])>-><org.springframework.data.domain.Sort: void <init>(java.util.List)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.StringJoiner: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><cn.hutool.core.date.format.FastDateFormat: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.stream.Stream lambda$null$1(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<org.springframework.cache.transaction.TransactionAwareCacheDecorator: java.lang.String getName()>-><org.springframework.cache.concurrent.ConcurrentMapCache: java.lang.String getName()>
<org.apache.http.HttpHost: void <init>(java.net.InetAddress,int,java.lang.String)>-><java.net.InetAddress: java.lang.String getHostName()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.data.redis.connection.ClusterTopology: void <init>(java.util.Set)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.pubsub.StatefulRedisPubSubConnection switchToPubSub()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider: io.lettuce.core.api.StatefulConnection getConnection(java.lang.Class)>
<org.springframework.data.elasticsearch.client.TransportClientFactoryBean: void buildClient()>-><org.elasticsearch.client.transport.TransportClient: java.util.List connectedNodes()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<com.hazelcast.instance.HazelcastInstanceCacheManager: com.hazelcast.cache.ICache getCacheByFullName(java.lang.String)>-><com.hazelcast.instance.HazelcastInstanceImpl: com.hazelcast.core.DistributedObject getDistributedObject(java.lang.String,java.lang.String)>
<com.google.common.collect.ObjectArrays: java.lang.Object[] newArray(java.lang.Object[],int)>-><com.google.common.collect.Platform: java.lang.Object[] newArray(java.lang.Object[],int)>
<com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation: void <init>(com.hazelcast.scheduledexecutor.ScheduledTaskHandler,boolean)>-><com.hazelcast.scheduledexecutor.impl.ScheduledTaskHandlerImpl: int getPartitionId()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<com.google.common.cache.LocalCache: boolean recordsTime()>-><com.google.common.cache.LocalCache: boolean recordsWrite()>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><net.sf.ehcache.transaction.ReadCommittedSoftLockImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.Period: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation: void <init>(com.hazelcast.scheduledexecutor.ScheduledTaskHandler,boolean)>-><com.hazelcast.spi.Operation: com.hazelcast.spi.Operation setPartitionId(int)>
<springfox.documentation.spring.web.plugins.ResolvedMethodParameterEquivalence: void <init>()>-><com.google.common.base.Equivalence: void <init>()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String)>-><org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char)>
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: void <init>()>-><org.springframework.jdbc.datasource.DelegatingDataSource: void <init>()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.ibatis.type.TypeReference: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>-><java.lang.Object: void <init>()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.boot.autoconfigure.cache.CacheProperties: java.lang.String lambda$resolveConfigLocation$0(org.springframework.core.io.Resource)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration: void <init>()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.nio.DirectByteBuffer: void <init>(long,int,java.lang.Object)>-><java.nio.MappedByteBuffer: void <init>(int,int,int,int)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.lang.String getResourceDescription(java.lang.String,org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getResourceDescription()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><java.util.concurrent.ThreadPoolExecutor: void shutdown()>
<org.apache.shiro.authc.SimpleAccount: void addRole(java.lang.String)>-><org.apache.shiro.authz.SimpleAuthorizationInfo: void addRole(java.lang.String)>
<reactor.core.publisher.FluxHide$SuppressFuseableSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.google.common.base.Absent: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.crypto.PermissionsEnumerator: java.lang.Object nextElement()>
<sun.security.ssl.EngineWriter: void <clinit>()>-><sun.security.ssl.Debug: sun.security.ssl.Debug getInstance(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.monitor.impl.LocalReplicatedMapStatsImpl: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object lambda$invokeInitMethods$5(java.lang.Object)>-><org.springframework.web.filter.GenericFilterBean: void afterPropertiesSet()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.slf4j.helpers.BasicMarker: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <clinit>()>-><org.springframework.core.Constants: void <init>(java.lang.Class)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.merge.ReplicatedMapMergingEntryImpl: java.lang.String toString()>
<springfox.documentation.spring.web.readers.parameter.ExpandedParameterBuilder: void <init>(com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Float: java.lang.String toString()>
<com.google.common.cache.LocalCache$EntryFactory$5: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: void <init>()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: void configure(javax.servlet.Registration$Dynamic)>
<io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag: void <clinit>()>-><io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag: void <init>(java.lang.String,int)>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: void clearCache()>-><org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromClassPath(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getDescription()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.data.redis.connection.RedisClusterNode$SlotRange: org.springframework.data.redis.connection.RedisClusterNode$SlotRange empty()>-><org.springframework.data.redis.connection.RedisClusterNode$SlotRange: void <init>(java.util.Collection)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>-><org.springframework.context.annotation.AnnotatedBeanDefinitionReader: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>-><org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor getThreadPoolExecutor()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void checkSubscription()>
<org.apache.ibatis.reflection.wrapper.MapWrapper: void set(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.Object put(java.lang.Object,java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.alibaba.druid.spring.boot.autoconfigure.stat.DruidWebStatFilterConfiguration: void <init>()>
<com.fasterxml.jackson.databind.ObjectMapper: void <init>(com.fasterxml.jackson.databind.ObjectMapper)>-><com.fasterxml.jackson.dataformat.cbor.CBORFactory: com.fasterxml.jackson.core.JsonFactory copy()>
<org.springframework.beans.factory.config.DependencyDescriptor: void <init>(java.lang.reflect.Field,boolean,boolean)>-><java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<org.apache.shiro.authz.permission.WildcardPermissionResolver: org.apache.shiro.authz.Permission resolvePermission(java.lang.String)>-><org.apache.shiro.authz.permission.WildcardPermission: void <init>(java.lang.String,boolean)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int access$600(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>
<com.google.common.collect.ImmutableCollection: void <init>()>-><java.util.AbstractCollection: void <init>()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void _addDeserializerFactoryMethods(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,java.util.Map)>-><com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: com.fasterxml.jackson.annotation.JsonCreator$Mode findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><java.lang.Object: void <init>()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<com.baomidou.mybatisplus.core.toolkit.ReflectionKit: java.lang.Object getFieldValue(java.lang.Object,java.lang.String)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.springframework.beans.factory.InjectionPoint: void <init>(java.lang.reflect.Field)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: void <init>(com.fasterxml.jackson.annotation.JsonCreator$Mode,com.fasterxml.jackson.module.paramnames.ParameterExtractor)>-><com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector: void <init>()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.io.InputStream getResourceStream(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.io.InputStream getResourceAsStream(java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.apache.logging.log4j.spi.Provider: java.lang.Class loadLoggerContextFactory()>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void debug(java.lang.Object)>
<sun.security.ssl.SSLEngineImpl: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.apache.shiro.config.Ini$Section: boolean isContinued(java.lang.String)>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisNode$RedisNodeBuilder replicaOf(java.lang.String)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder replicaOf(java.lang.String)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void info(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.Class: int getModifiers()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><com.google.common.base.Present: int hashCode()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.util.MapUtil: boolean isNullOrEmpty(java.util.Map)>-><org.apache.shiro.config.Ini$Section: boolean isEmpty()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.cache.jcache.JCacheCacheManager: java.util.Collection loadCaches()>-><com.hazelcast.cache.impl.AbstractHazelcastCacheManager: javax.cache.Cache getCache(java.lang.String)>
<org.springframework.web.bind.annotation.RequestMethod: org.springframework.web.bind.annotation.RequestMethod[] values()>-><java.lang.Object: java.lang.Object clone()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.Iterable getCacheNames()>-><java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><freemarker.ext.beans.HashAdapter$1$1$1: java.lang.Object getValue()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><javax.xml.stream.FactoryConfigurationError: java.lang.String getMessage()>
<com.google.common.collect.ImmutableSet: void <init>()>-><com.google.common.collect.ImmutableCollection: void <init>()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.http.converter.ResourceRegionHttpMessageConverter: boolean canWrite(java.lang.Class,org.springframework.http.MediaType)>-><org.springframework.http.converter.ResourceRegionHttpMessageConverter: boolean canWrite(java.lang.reflect.Type,java.lang.Class,org.springframework.http.MediaType)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: int hashCode()>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.BaseObjectPoolConfig: boolean getTestOnBorrow()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: redis.clients.jedis.JedisCluster createCluster(org.springframework.data.redis.connection.RedisClusterConfiguration,org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.springframework.data.redis.connection.jedis.DefaultJedisClientConfiguration: java.util.Optional getSslSocketFactory()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.template.SimpleNumber: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.data.redis.connection.RedisClusterNode: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder newRedisClusterNode()>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: void <init>()>
<springfox.documentation.schema.property.field.FieldProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<com.google.common.cache.LocalCache$EntryFactory: void <clinit>()>-><com.google.common.cache.LocalCache$EntryFactory$8: void <init>(java.lang.String,int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxMap$MapConditionalSubscriber: void cancel()>-><reactor.core.publisher.FluxHide$HideSubscriber: void cancel()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilderFromIssuerIfPossible(java.lang.String,java.lang.String,java.util.Map)>-><org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilder(org.springframework.security.oauth2.client.registration.ClientRegistration$Builder,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Provider)>
<org.apache.shiro.util.ClassUtils: java.io.InputStream getResourceAsStream(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><redis.clients.jedis.BinaryJedisCluster: java.util.Map getClusterNodes()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.apache.catalina.core.ApplicationContext: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$3: void <init>(javax.security.auth.SubjectDomainCombiner,javax.security.auth.Subject,java.security.CodeSource)>
<org.springframework.boot.autoconfigure.http.HttpProperties$Encoding$Type: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.apache.shiro.util.PermissionUtils: java.util.Set toPermissionStrings(java.lang.String)>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><redis.clients.jedis.HostAndPort: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode convert(java.lang.String)>-><org.springframework.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.security.Provider: void clear()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<reactor.core.publisher.MonoToCompletableFuture: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void cancel()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration: void <init>()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><io.lettuce.core.internal.AbstractInvocationHandler: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.apache.shiro.spring.web.config.ShiroWebFilterConfiguration: void <init>()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.apache.shiro.config.Ini: void <init>(org.apache.shiro.config.Ini)>-><org.apache.shiro.config.Ini$Section: java.lang.String getName()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.apache.shiro.authc.SimpleAccount: void <init>(org.apache.shiro.subject.PrincipalCollection,java.lang.Object)>-><org.apache.shiro.authz.SimpleAuthorizationInfo: void <init>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<org.springframework.data.redis.connection.RedisInvalidSubscriptionException: void <init>(java.lang.String)>-><org.springframework.dao.InvalidDataAccessResourceUsageException: void <init>(java.lang.String)>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.apache.shiro.authz.SimpleRole: void <init>(java.lang.String)>-><org.apache.shiro.authz.SimpleRole: void setName(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientName()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: com.google.common.base.Supplier getStatsCounterSupplier()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>-><org.springframework.web.servlet.ModelAndView: org.springframework.ui.ModelMap getModelMap()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><java.util.AbstractMap: void <init>()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.lang.String)>-><org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.util.Collection)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.google.common.base.Absent: java.lang.String toString()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromFile(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Currency: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream getInputStreamForPath(java.lang.String)>-><org.apache.shiro.io.ResourceUtils: java.lang.String stripPrefix(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.util.List)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.web.servlet.MultipartProperties)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: com.hazelcast.cache.impl.ICacheInternal getCacheUnchecked(java.lang.String)>-><com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.String getCacheNameWithPrefix(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.publisher.FluxCallableOnAssembly: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.ArrayList: void <init>()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><org.springframework.dao.InvalidDataAccessApiUsageException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.BitSet: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<cn.hutool.core.map.MapProxy: void clear()>-><java.util.Collections$SynchronizedMap: void clear()>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.apache.logging.log4j.core.net.ssl.LaxHostnameVerifier: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><org.apache.shiro.realm.SimpleAccountRealm: void add(org.apache.shiro.authc.SimpleAccount)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.apache.shiro.spring.config.ShiroAnnotationProcessorConfiguration: void <init>()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void info(java.lang.Object)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.Weigher getWeigher()>-><com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>
<org.springframework.aop.config.AopConfigUtils: void forceAutoProxyCreatorToUseClassProxying(org.springframework.beans.factory.support.BeanDefinitionRegistry)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean containsBeanDefinition(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$2: org.springframework.data.redis.connection.RedisClusterNode convert(io.lettuce.core.cluster.models.partitions.RedisClusterNode)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder listeningAt(java.lang.String,int)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ReturnType: void <clinit>()>-><org.springframework.data.redis.connection.ReturnType: void <init>(java.lang.String,int)>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><org.apache.shiro.authc.SimpleAccount: void addObjectPermissions(java.util.Collection)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.PermissionsHash: java.util.Enumeration elements()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.apache.shiro.config.Ini$Section: int hashCode()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.rmi.transport.tcp.TCPEndpoint: java.lang.String toString()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><java.util.concurrent.atomic.AtomicInteger: void <init>()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.config.Ini$Section: void <init>(java.lang.String,java.lang.String)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.config.Ini: boolean isEmpty()>-><org.apache.shiro.config.Ini$Section: boolean isEmpty()>
<com.hazelcast.ringbuffer.impl.RingbufferService: void clearRingbuffersHavingLesserBackupCountThan(int,int)>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>-><java.lang.Object: void <init>()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><sun.security.util.Debug: void println(java.lang.String)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><org.springframework.core.env.ReadOnlySystemAttributesMap: void clear()>
<com.hazelcast.cache.impl.HazelcastServerCacheManager: com.hazelcast.config.CacheConfig getCacheConfig(java.lang.String,java.lang.String)>-><com.hazelcast.spi.impl.NodeEngineImpl: com.hazelcast.spi.OperationService getOperationService()>
<org.apache.shiro.authc.SimpleAccount: void <init>(org.apache.shiro.subject.PrincipalCollection,java.lang.Object)>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.MediaTypeReader: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>-><org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isUseSsl()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isUseSsl()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processRoleDefinitions(java.util.Map)>-><org.apache.shiro.realm.SimpleAccountRealm: void add(org.apache.shiro.authz.SimpleRole)>
<java.io.PrintWriter: void <init>(java.nio.charset.Charset,java.io.File)>-><java.io.PrintWriter: void <init>(java.io.Writer,boolean)>
<com.hazelcast.instance.HazelcastInstanceCacheManager: com.hazelcast.cache.ICache getCacheByFullName(java.lang.String)>-><java.lang.Throwable: java.lang.Throwable getCause()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void awaitTerminationIfNecessary(java.util.concurrent.ExecutorService)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: boolean isWarnEnabled()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processRoleDefinitions(java.util.Map)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class)>
<org.springframework.boot.web.server.MimeMappings: void <clinit>()>-><org.springframework.boot.web.server.MimeMappings: void <init>()>
<org.springframework.data.redis.listener.KeyspaceEventMessageListener: void init()>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<com.hazelcast.internal.usercodedeployment.impl.ClassDataProvider: java.util.Map loadAnonymousClasses(java.lang.String,java.util.Map)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: com.google.common.cache.LocalCache$Segment[] newSegmentArray(int)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><org.apache.shiro.authz.SimpleRole: int hashCode()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.TreeMap$KeySet: boolean isEmpty()>
<reactor.util.function.Tuple3: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxMap$MapConditionalSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: void <init>()>-><java.util.WeakHashMap: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray(java.lang.Object[])>-><com.google.common.collect.ObjectArrays: java.lang.Object[] newArray(java.lang.Object[],int)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<org.springframework.aop.config.AopConfigUtils: org.springframework.beans.factory.config.BeanDefinition registerOrEscalateApcAsRequired(java.lang.Class,org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: void registerBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>
<com.alibaba.druid.filter.FilterManager: void loadFilterConfig(java.util.Properties,java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: boolean hasMoreElements()>
<org.springframework.boot.web.servlet.context.WebApplicationContextServletContextAwareProcessor: void <init>(org.springframework.web.context.ConfigurableWebApplicationContext)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.util.executor.NamedThreadPoolExecutor: java.lang.String toString()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.util.Set doFindAllClassPathResources(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: boolean hasMoreElements()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: void add(org.apache.shiro.authc.SimpleAccount)>-><org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.authc.SimpleAccount)>
<com.hazelcast.scheduledexecutor.impl.operations.CancelTaskBackupOperation: void run()>-><com.hazelcast.scheduledexecutor.impl.operations.AbstractSchedulerOperation: com.hazelcast.scheduledexecutor.impl.ScheduledExecutorContainer getContainer()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<reactor.core.publisher.InternalMonoOperator: void subscribe(reactor.core.CoreSubscriber)>-><reactor.core.publisher.MonoHide: reactor.core.CoreSubscriber subscribeOrReturn(reactor.core.CoreSubscriber)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><freemarker.core.ParseException: java.lang.String getMessage()>
<org.apache.shiro.realm.CachingRealm: java.lang.Object getAvailablePrincipal(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><org.springframework.web.context.support.StandardServletEnvironment: void <init>()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isPipelined()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum findEnum(java.lang.String)>-><java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>
<com.hazelcast.spi.Operation: com.hazelcast.spi.CallStatus call()>-><com.hazelcast.cache.impl.operation.CacheGetConfigOperation: boolean returnsResponse()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<com.baomidou.mybatisplus.core.toolkit.ReflectionKit: java.util.Map getFieldMap(java.lang.Class)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: java.lang.String toString()>
<org.apache.shiro.web.servlet.ShiroHttpSession: void <init>(org.apache.shiro.session.Session,javax.servlet.http.HttpServletRequest,javax.servlet.ServletContext)>-><java.lang.Object: void <init>()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode$LinkState parseLinkState(java.lang.String[])>-><java.lang.String: java.lang.String toUpperCase()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.StringBuilder: void <init>()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.DefaultObjectNamespace: java.lang.String toString()>
<com.fasterxml.jackson.core.json.DupDetector: com.fasterxml.jackson.core.json.DupDetector rootDetector(com.fasterxml.jackson.core.JsonParser)>-><com.fasterxml.jackson.core.json.DupDetector: void <init>(java.lang.Object)>
<redis.clients.jedis.JedisClusterInfoCache: void discoverClusterNodesAndSlots(redis.clients.jedis.Jedis)>-><java.util.ArrayList$SubList: int size()>
<com.google.common.cache.CacheBuilder: com.google.common.base.Equivalence getKeyEquivalence()>-><com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.DefaultOperationReader: void <init>()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.LifecycleEvent: java.lang.String getType()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Vector$1: boolean hasMoreElements()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><org.springframework.data.domain.Sort$Order: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>
<org.apache.shiro.config.Ini: org.apache.shiro.config.Ini$Section getSection(java.lang.String)>-><org.apache.shiro.config.Ini: java.lang.String cleanName(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.RegularEnumSet: boolean add(java.lang.Object)>
<java.io.PrintWriter: void <init>(java.io.File,java.lang.String)>-><java.io.PrintWriter: java.nio.charset.Charset toCharset(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.cluster.MemberInfo: java.lang.String toString()>
<org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.util.Collection)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: void ensureOpen()>-><com.hazelcast.cache.impl.AbstractHazelcastCacheManager: boolean isClosed()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Vector: java.lang.Object get(int)>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.data.redis.cache.CacheKeyPrefix: java.lang.String lambda$simple$0(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.util.CollectionUtils: java.util.Set asSet(java.lang.Object[])>-><java.util.LinkedHashSet: void <init>(int)>
<org.springframework.web.util.HierarchicalUriComponents$Type$11: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.beans.factory.support.SimpleAutowireCandidateResolver: boolean isRequired(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider$2: boolean isRequired()>
<org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable: void asyncDestroyStores(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain$2: boolean getStaticPermissionsField(java.security.ProtectionDomain)>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$EmbeddedDatabaseConfiguration: void <init>()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: void <init>(java.util.Collection,java.lang.String)>-><java.lang.Object: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><net.sf.ehcache.event.RegisteredEventListeners: java.lang.String toString()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><java.util.ArrayList: java.util.Iterator iterator()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<com.hazelcast.internal.partition.operation.MigrationOperation: void runMigrationOperation(com.hazelcast.spi.Operation)>-><com.hazelcast.cache.impl.operation.CacheGetConfigOperation: void run()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisClusterNode: void <init>(org.springframework.data.redis.connection.RedisClusterNode$SlotRange)>-><java.util.Collections: java.util.Set emptySet()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.apache.shiro.realm.SimpleAccountRealm: void <init>()>-><java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><java.util.Collections$SynchronizedList: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: void terminateAPR()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$2: org.springframework.data.redis.connection.RedisClusterNode convert(io.lettuce.core.cluster.models.partitions.RedisClusterNode)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode build()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: java.lang.String toString()>
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping: void <clinit>()>-><java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<com.hazelcast.cache.impl.HazelcastServerCacheManager: com.hazelcast.config.CacheConfig findCacheConfig(java.lang.String,java.lang.String)>-><com.hazelcast.cache.impl.HazelcastServerCacheManager: void createCacheConfig(java.lang.String,com.hazelcast.config.CacheConfig)>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.util.List)>-><java.lang.Object: void <init>()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <clinit>()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.web.util.NestedServletException: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><java.util.ArrayList: void <init>(int)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.web.bind.support.WebExchangeBindException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.RedisNode: boolean isMaster()>-><org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Map)>-><org.apache.shiro.config.Ini: boolean isEmpty()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Filter,int)>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void setName(java.lang.String)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.lettuce.LettuceResult newLettuceResult(java.util.concurrent.Future,org.springframework.core.convert.converter.Converter)>-><org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder: org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder forResponse(java.util.concurrent.Future)>
<javax.management.NotificationBroadcasterSupport$WildcardListenerInfo: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.data.domain.Sort: org.springframework.data.domain.Sort by(org.springframework.data.domain.Sort$Order[])>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object)>
<org.apache.shiro.authc.SimpleAccount: void setRoles(java.util.Set)>-><org.apache.shiro.authz.SimpleAuthorizationInfo: void setRoles(java.util.Set)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.google.common.base.Absent: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection getPrincipalsLazy(java.lang.String)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<freemarker.core._CoreAPI: void checkSettingValueItemsType(java.lang.String,java.lang.Class,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider doCreateConnectionProvider(io.lettuce.core.AbstractRedisClient,io.lettuce.core.codec.RedisCodec)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getReadFrom()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<freemarker.cache.MultiTemplateLoader$MultiSource: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void unsubscribePattern(byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.stream.Stream lambda$null$1(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.Set getBeanNames(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerJwtConfiguration$OAuth2WebSecurityConfigurerAdapter: void <init>()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.security.permission.InstancePermission: void <init>(java.lang.String,java.lang.String[])>-><com.hazelcast.security.permission.ScheduledExecutorPermission: int initMask(java.lang.String[])>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow: org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow[] values()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.validation.beanvalidation.LocalValidatorFactoryBean: void afterPropertiesSet()>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.AutowireCapableBeanFactory getAutowireCapableBeanFactory()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void close()>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void warn(java.lang.Object,java.lang.Throwable)>
<cn.hutool.core.util.StrUtil: java.lang.String toString(java.lang.Object)>-><com.google.common.base.Present: java.lang.String toString()>
<cn.hutool.core.map.MapProxy: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><org.springframework.web.servlet.handler.MappedInterceptor: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(org.springframework.util.MultiValueMap)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<sun.security.ssl.EngineWriter: void <init>()>-><java.util.LinkedList: void <init>()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.data.redis.connection.convert.MapToPropertiesConverter: java.lang.Object convert(java.lang.Object)>-><org.springframework.data.redis.connection.convert.MapToPropertiesConverter: java.util.Properties convert(java.util.Map)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: int size()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>-><org.springframework.data.redis.connection.RedisClusterNode: boolean isConnected()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Vector: int size()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><javax.security.auth.Subject$SecureSet: boolean add(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.springframework.data.redis.ClusterStateFailureException: void <init>(java.lang.String)>-><org.springframework.dao.DataAccessResourceFailureException: void <init>(java.lang.String)>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void register(java.lang.Class[])>-><org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>
<org.apache.http.impl.nio.client.InternalRequestExecutor: void timeout(org.apache.http.nio.NHttpClientConnection)>-><org.apache.http.impl.nio.client.InternalRequestExecutor: void timeout(org.apache.http.nio.NHttpClientConnection)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void closeIfUnsubscribed()>
<springfox.documentation.spring.web.scanners.MediaTypeReader: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases: boolean lambda$getNameForAlias$1(org.springframework.boot.context.properties.source.ConfigurationPropertyName,java.util.Map$Entry)>-><java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.apache.catalina.webresources.war.Handler: void <init>()>-><java.net.URLStreamHandler: void <init>()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int getOrder(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$1: void <init>(org.springframework.boot.web.servlet.ServletContextInitializerBeans)>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.client.impl.operations.ClientDisconnectionOperation: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.HashMap: boolean isEmpty()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>()>-><java.util.concurrent.CopyOnWriteArrayList: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<com.github.pagehelper.autoconfigure.PageHelperProperties: void <init>()>-><java.util.Properties: void <init>()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream getInputStreamForPath(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.internal.json.JsonLiteral: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void member_helper_type(org.springframework.cglib.core.CodeEmitter,java.util.List,org.springframework.cglib.core.ObjectSwitchCallback,org.springframework.cglib.core.EmitUtils$ParameterTyper,org.springframework.asm.Label,org.springframework.asm.Label,java.util.BitSet)>-><java.util.ArrayList$SubList: int size()>
<com.google.common.cache.CacheBuilder: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.config.cp.CPSemaphoreConfig: java.lang.String toString()>
<com.google.common.cache.LocalCache: void <clinit>()>-><com.google.common.cache.LocalCache$2: void <init>()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Package: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration: void <init>()>
<com.hazelcast.config.ClassFilter: void <init>(com.hazelcast.config.ClassFilter)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: javax.servlet.Registration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: javax.servlet.FilterRegistration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>
<org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.util.List)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.data.redis.connection.RedisClusterNode$SlotRange: org.springframework.data.redis.connection.RedisClusterNode$SlotRange empty()>-><java.util.Collections: java.util.Set emptySet()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<redis.clients.jedis.JedisClusterInfoCache: void discoverClusterNodesAndSlots(redis.clients.jedis.Jedis)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.instance.AbstractMember: java.lang.String toString()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: java.lang.Object nextElement()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: void <init>(javax.sql.DataSource)>-><org.springframework.jdbc.datasource.DelegatingDataSource: void <init>(javax.sql.DataSource)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void cancelRemainingTask(java.lang.Runnable)>-><io.netty.util.concurrent.ScheduledFutureTask: boolean cancel(boolean)>
<reactor.core.publisher.SerializedSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onNext(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.util.LinkedMultiValueMap: void add(java.lang.Object,java.lang.Object)>
<com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings emptyBindings()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.data.redis.listener.PatternTopic: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.wrapper.MapWrapper: java.lang.Class getGetterType(java.lang.String)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<freemarker.core.Configurable: void setSettings(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.authz.SimpleAuthorizationInfo: void addObjectPermissions(java.util.Collection)>-><java.util.HashSet: void <init>()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: java.util.Set keySet()>-><org.apache.shiro.config.Ini$Section: java.util.Set keySet()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.ArrayList$SubList: int size()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.data.redis.connection.DefaultedRedisConnection: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: java.util.Properties getConfig(java.lang.String)>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String,org.springframework.context.annotation.MBeanExportConfiguration$1)>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String)>
<org.springframework.web.context.support.GenericWebApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>-><org.springframework.context.support.GenericApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.Collections$SynchronizedMap: void clear()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$4: void <init>(java.lang.String,int)>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: void ensureOpen()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.springframework.boot.autoconfigure.web.ServerProperties$ForwardHeadersStrategy: void <clinit>()>-><org.springframework.boot.autoconfigure.web.ServerProperties$ForwardHeadersStrategy: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.lang.reflect.Field: void <init>(java.lang.Class,java.lang.String,java.lang.Class,int,int,java.lang.String,byte[])>-><java.lang.reflect.AccessibleObject: void <init>()>
<com.alibaba.druid.filter.FilterManager: void <clinit>()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<javax.security.auth.Subject: void <init>()>-><javax.security.auth.Subject$SecureSet: void <init>(javax.security.auth.Subject,int)>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.jni.SSL: int fipsModeSet(int)>
<org.springframework.core.annotation.TypeMappedAnnotation: java.lang.Object extractFromMap(java.lang.reflect.Method,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.web.socket.config.annotation.DelegatingWebSocketConfiguration: void <init>()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.lang.Thread: void interrupt()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>
<springfox.documentation.spring.web.plugins.DefaultConfiguration: void <init>(springfox.documentation.spi.service.contexts.Defaults,com.fasterxml.classmate.TypeResolver,javax.servlet.ServletContext)>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration: void <init>()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void info(java.lang.Object)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><com.hazelcast.spi.impl.AbstractInvocationFuture: boolean isDone()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: boolean isTraceEnabled()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.beans.propertyeditors.CustomMapEditor: void setValue(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: int size()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<sun.security.provider.PolicyFile: boolean wildcardPrincipalNameImplies(java.lang.String,java.security.Principal[])>-><java.lang.Object: java.lang.Class getClass()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cache.jcache.JCacheCacheManager: java.util.Collection loadCaches()>-><com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.Iterable getCacheNames()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.util.logging.LogManager: java.util.logging.Filter getFilterProperty(java.lang.String,java.util.logging.Filter)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.AbstractRedisClient createClient()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientResources()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.fasterxml.jackson.dataformat.cbor.CBORFactoryBuilder: void <init>()>-><com.fasterxml.jackson.core.TSFBuilder: void <init>()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: io.lettuce.core.cluster.api.async.RedisClusterAsyncCommands getAsyncConnection()>
<io.lettuce.core.protocol.CommandExpiryWriter: void setTimeout(java.time.Duration)>-><java.util.concurrent.TimeUnit$3: long convert(long,java.util.concurrent.TimeUnit)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerJwtConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><org.springframework.util.CollectionUtils: org.springframework.util.MultiValueMap unmodifiableMultiValueMap(org.springframework.util.MultiValueMap)>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isStartTls()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isStartTls()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation: com.hazelcast.spi.Operation getBackupOperation()>-><com.hazelcast.scheduledexecutor.impl.operations.CancelTaskBackupOperation: void <init>(java.lang.String,java.lang.String)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><com.hazelcast.util.executor.LoggingScheduledExecutor$RemoveOnCancelFuture: boolean isDone()>
<org.apache.shiro.config.Ini$Section: java.lang.String[] splitKeyValue(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.convert.Converters$1: java.util.Set parseFlags(java.lang.String[])>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration: void <init>()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$2: org.springframework.data.redis.connection.RedisClusterNode convert(io.lettuce.core.cluster.models.partitions.RedisClusterNode)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder linkState(org.springframework.data.redis.connection.RedisClusterNode$LinkState)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.security.AccessControlContext)>-><java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long,java.security.AccessControlContext)>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><org.springframework.core.io.support.PropertiesLoaderUtils: java.util.Properties loadProperties(org.springframework.core.io.Resource)>
<com.hazelcast.config.ClassFilter: void <init>()>-><java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandOnAllNodes(org.springframework.data.redis.connection.lettuce.LettuceClusterConnection$LettuceClusterCommandCallback)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<com.hazelcast.config.ClassFilter: void <init>(com.hazelcast.config.ClassFilter)>-><java.util.concurrent.atomic.AtomicBoolean: boolean get()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder withCacheConfiguration(java.lang.String,org.springframework.data.redis.cache.RedisCacheConfiguration)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<com.google.common.cache.LocalCache$Strength: void <clinit>()>-><com.google.common.cache.LocalCache$Strength$3: void <init>(java.lang.String,int)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<javax.net.ssl.SSLEngine: void <init>(java.lang.String,int)>-><java.lang.Object: void <init>()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.mail.MailSenderPropertiesConfiguration: void <init>()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.hazelcast.internal.partition.operation.PartitionReplicaSyncResponse: void executeOperations()>-><com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation: void run()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<org.apache.shiro.ShiroException: void <init>(java.lang.Throwable)>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>-><java.util.HashSet: java.util.Iterator iterator()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.crypto.CryptoPermissions: java.util.Enumeration elements()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<com.sun.naming.internal.ResourceManager: java.lang.Object getFactory(java.lang.String,java.util.Hashtable,javax.naming.Context,java.lang.String,java.lang.String)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.HashMap: void clear()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: int size()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: int hashCode()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void info(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: void add(org.apache.shiro.authc.SimpleAccount)>-><java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: int size()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: java.lang.String toString()>
<java.io.PrintWriter: void <init>(java.lang.String,java.lang.String)>-><java.io.PrintWriter: java.nio.charset.Charset toCharset(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.lang.String)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<redis.clients.jedis.Connection: java.lang.String getBulkReply()>-><redis.clients.jedis.util.SafeEncoder: java.lang.String encode(byte[])>
<io.lettuce.core.protocol.CommandExpiryWriter: void <init>(io.lettuce.core.RedisChannelWriter,io.lettuce.core.ClientOptions,io.lettuce.core.resource.ClientResources)>-><io.lettuce.core.TimeoutOptions$TimeoutSource: java.util.concurrent.TimeUnit getTimeUnit()>
<org.apache.shiro.config.Ini: boolean isSectionHeader(java.lang.String)>-><java.lang.String: boolean endsWith(java.lang.String)>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.net.URL getResource(java.lang.String)>
<org.springframework.boot.web.server.MimeMappings: void <clinit>()>-><org.springframework.boot.web.server.MimeMappings: org.springframework.boot.web.server.MimeMappings unmodifiableMappings(org.springframework.boot.web.server.MimeMappings)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: boolean isDebugEnabled()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.asm.Type: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.Map getErrorAttributes(javax.servlet.http.HttpServletRequest,boolean)>-><org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.template.SimpleScalar: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList: int size()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters: java.util.List partitionsToClusterNodes(io.lettuce.core.cluster.models.partitions.Partitions)>-><org.springframework.data.redis.connection.lettuce.LettuceConverters$1: java.lang.Object convert(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>-><org.springframework.web.method.HandlerMethod: java.lang.annotation.Annotation getMethodAnnotation(java.lang.Class)>
<org.apache.shiro.realm.SimpleAccountRealm: void add(org.apache.shiro.authz.SimpleRole)>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.Lock writeLock()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.web.cors.CorsConfiguration: void setAllowedMethods(java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.hazelcast.multimap.impl.MultiMapService: void insertMigratedData(int,java.util.Map)>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.lang.System: long currentTimeMillis()>
<java.util.Currency$1: java.lang.Void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.context.support.WebApplicationContextUtils: void registerWebApplicationScopes(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.web.context.support.WebApplicationContextUtils: void registerWebApplicationScopes(org.springframework.beans.factory.config.ConfigurableListableBeanFactory,javax.servlet.ServletContext)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.apache.shiro.config.Ini: void load(java.util.Scanner)>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><java.util.ArrayList$SubList: int size()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><reactor.core.publisher.SignalType: java.lang.String toString()>
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource[] getResources(java.lang.String)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource getResource(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.rmi.server.LoaderHandler$Loader: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.AbstractInvocationFuture: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.String toString()>
<com.hazelcast.cache.impl.DeferredValue: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: void <init>(org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.data.domain.Sort$NullHandling: void <clinit>()>-><org.springframework.data.domain.Sort$NullHandling: void <init>(java.lang.String,int)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.apache.logging.slf4j.Log4jLogger: void debug(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.Subject: boolean isReadOnly()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getTransactionAwareConnectionProxy(javax.sql.DataSource)>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.hazelcast.cache.impl.operation.CacheGetConfigOperation$1: void <init>(com.hazelcast.cache.impl.operation.CacheGetConfigOperation)>-><java.lang.Object: void <init>()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.hazelcast.config.JavaSerializationFilterConfig: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisConnection getConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceConnection doCreateLettuceConnection(io.lettuce.core.api.StatefulRedisConnection,org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,long,int)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.apache.shiro.util.ClassUtils: java.io.InputStream getResourceAsStream(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.config.Ini$Section: java.util.Map toMapProps(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.util.ClassUtils: java.io.InputStream getResourceAsStream(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pipeline(org.springframework.data.redis.connection.lettuce.LettuceResult)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: void transaction(org.springframework.data.redis.connection.FutureResult)>
<com.hazelcast.config.ClassFilter: void <init>(com.hazelcast.config.ClassFilter)>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<com.google.common.cache.LocalCache$Segment: void initTable(java.util.concurrent.atomic.AtomicReferenceArray)>-><java.util.concurrent.atomic.AtomicReferenceArray: int length()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.net.URL: java.lang.String toString()>
<org.apache.shiro.config.Ini$Section: java.lang.String[] splitKeyValue(java.lang.String)>-><java.lang.String: int length()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>
<org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor: void execute(org.apache.http.nio.reactor.IOEventDispatch)>-><org.springframework.scheduling.concurrent.CustomizableThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><io.netty.util.concurrent.DefaultPromise: boolean isCancelled()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void cancelRemainingTask(java.lang.Runnable)>-><org.springframework.util.ConcurrentReferenceHashMap: java.lang.Object get(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object putValue(java.lang.Object,java.lang.Object)>-><java.lang.ref.Reference: java.lang.Object get()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.util.Set entrySet()>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><sun.security.util.Debug: void println(java.lang.String)>
<java.io.Reader: int read(java.nio.CharBuffer)>-><java.io.StringReader: int read(char[],int,int)>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void configure(javax.servlet.Registration$Dynamic)>-><java.util.HashMap: boolean isEmpty()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.NoOpSessionConfiguration: void <init>()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.ArrayList: java.lang.Object get(int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode getTreeNode(int,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration: void <init>()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.Duration: java.lang.String toString()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.String toString()>
<net.sf.ehcache.management.ResourceClassLoader: java.util.Enumeration findResources(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.util.Enumeration getResources(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.AllPermissionCollection: java.util.Enumeration elements()>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.ext.beans.BeanModel: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.RedisClusterNode: boolean isMarkedAsFail()>-><org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<com.alibaba.druid.spring.boot.autoconfigure.stat.DruidWebStatFilterConfiguration: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.security.AlgorithmParameters: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.cache.jcache.JCacheCacheManager: java.util.Collection loadCaches()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: org.apache.commons.pool2.impl.GenericObjectPoolConfig getPoolConfig()>-><org.springframework.data.redis.connection.jedis.DefaultJedisClientConfiguration: java.util.Optional getPoolConfig()>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.validation.beanvalidation.SpringValidatorAdapter: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.apache.shiro.config.Ini: void loadFromPath(java.lang.String)>-><org.apache.shiro.io.ResourceUtils: java.io.InputStream getInputStreamForPath(java.lang.String)>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<cn.hutool.core.map.MapProxy: void clear()>-><java.util.concurrent.ConcurrentHashMap: void clear()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><net.sf.ehcache.Element: java.lang.String toString()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void <init>(com.fasterxml.jackson.core.io.IOContext,int,java.io.DataInput,com.fasterxml.jackson.core.ObjectCodec,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer,int)>-><com.fasterxml.jackson.core.base.ParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int)>
<org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration: void checkConfigFileExists()>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource getResource(java.lang.String)>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>
<com.hazelcast.spi.impl.tenantcontrol.NoopTenantControl: void <init>()>-><java.lang.Object: void <init>()>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.data.redis.connection.convert.Converters$1: org.springframework.data.redis.connection.RedisClusterNode$LinkState parseLinkState(java.lang.String[])>-><org.springframework.data.redis.connection.RedisClusterNode$LinkState: org.springframework.data.redis.connection.RedisClusterNode$LinkState valueOf(java.lang.String)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: org.apache.shiro.authz.SimpleRole getRole(java.lang.String)>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>
<org.apache.shiro.realm.SimpleAccountRealm: org.apache.shiro.authc.SimpleAccount getUser(java.lang.String)>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.config.Ini$Section: java.util.Map toMapProps(java.lang.String)>-><java.util.Scanner: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: com.fasterxml.jackson.databind.PropertyName findImplicitParamName(int)>-><java.lang.String: boolean isEmpty()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.apache.commons.logging.LogAdapter$Log4jLog: void trace(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.BaseObjectPoolConfig: boolean getTestOnCreate()>
<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain,java.security.DomainCombiner,java.security.AccessControlContext,java.security.AccessControlContext,java.security.Permission[])>-><javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><java.io.PrintStream: void println(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.hazelcast.spi.impl.operationservice.impl.InvokeOnPartitions: void <init>(com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl,java.lang.String,com.hazelcast.spi.OperationFactory,java.util.Map)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>-><org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(org.springframework.transaction.TransactionDefinition)>-><org.springframework.transaction.TransactionDefinition: int getIsolationLevel()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<freemarker.ext.beans.HashAdapter$1$1$1: boolean equals(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$5: void <init>(java.lang.String,int)>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><org.springframework.data.redis.connection.ReturnType: org.springframework.data.redis.connection.ReturnType[] values()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processRoleDefinitions(java.util.Map)>-><org.apache.shiro.authz.SimpleRole: void <init>(java.lang.String)>
<org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder customizers(java.util.Collection)>-><org.springframework.boot.web.client.RestTemplateBuilder: void <init>(org.springframework.boot.web.client.RestTemplateBuilder$RequestFactoryCustomizer,boolean,java.lang.String,java.util.Set,java.util.Set,java.util.function.Supplier,org.springframework.web.util.UriTemplateHandler,org.springframework.web.client.ResponseErrorHandler,org.springframework.boot.web.client.BasicAuthentication,java.util.Map,java.util.Set,java.util.Set)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.MonthDay: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.instance.EndpointQualifier: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.core.CommonTemplateMarkupOutputModel: java.lang.String toString()>
<org.springframework.data.redis.listener.KeyspaceEventMessageListener: void init()>-><org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: void close()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.SimpleRole: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: int getOrder(java.lang.Object)>
<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext createRootContext(com.fasterxml.jackson.core.json.DupDetector)>-><com.fasterxml.jackson.core.json.JsonReadContext: void <init>(com.fasterxml.jackson.core.json.JsonReadContext,com.fasterxml.jackson.core.json.DupDetector,int,int,int)>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration getClientRegistration(java.lang.String,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Registration,java.util.Map)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper get()>
<org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor$JsonPropertyValue: void <init>(org.springframework.core.env.PropertySource,java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<freemarker.ext.beans.MapModel: freemarker.template.TemplateModel invokeGenericGet(java.util.Map,java.lang.Class,java.lang.String)>-><org.apache.shiro.config.Ini$Section: boolean containsKey(java.lang.Object)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(org.springframework.data.redis.connection.RedisClusterNode)>-><org.springframework.data.redis.connection.RedisNode: java.lang.String getHost()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: com.fasterxml.jackson.databind.PropertyName findImplicitParamName(int)>-><com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: java.lang.String findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.hazelcast.instance.Node: void mergeEnvironmentProvidedMemberMetadata()>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><freemarker.ext.beans.HashAdapter$1$1$1: java.lang.Object getValue()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.util.stream.Stream orderedStream()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.api.StatefulConnection doGetAsyncDedicatedConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean customizedDatabaseIndex()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void trace(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.data.domain.Sort$Direction: void <clinit>()>-><org.springframework.data.domain.Sort$Direction: void <init>(java.lang.String,int)>
<com.hazelcast.scheduledexecutor.impl.operations.ReplicationOperation: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.concurrent.ConcurrentHashMap: void clear()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<register-finalize <java.io.PrintWriter: void <init>(java.io.File)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<com.alibaba.druid.stat.DruidStatService: void <init>()>-><java.lang.Object: void <init>()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.apache.shiro.config.Ini$Section: java.util.Map toMapProps(java.lang.String)>-><org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$2: org.springframework.data.redis.connection.RedisClusterNode convert(io.lettuce.core.cluster.models.partitions.RedisClusterNode)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder serving(org.springframework.data.redis.connection.RedisClusterNode$SlotRange)>
<org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.util.Collection)>-><org.springframework.data.redis.connection.convert.Converters: org.springframework.data.redis.connection.RedisClusterNode toClusterNode(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: org.springframework.data.redis.connection.RedisServerCommands serverCommands()>-><org.springframework.data.redis.connection.lettuce.LettuceClusterConnection: org.springframework.data.redis.connection.RedisClusterServerCommands serverCommands()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.nio.tcp.ClientViewUnifiedEndpointManager: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void closeIfUnsubscribed()>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.RedisClusterNode$LinkState: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processRoleDefinitions(java.util.Map)>-><org.apache.shiro.realm.AuthorizingRealm: org.apache.shiro.authz.permission.PermissionResolver getPermissionResolver()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<reactor.core.publisher.DirectProcessor: void subscribe(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>-><java.lang.String: java.lang.String trim()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char)>-><org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><springfox.documentation.spring.web.scanners.CachingOperationReader$1: void <init>(springfox.documentation.spring.web.scanners.CachingOperationReader,springfox.documentation.spring.web.readers.operation.OperationReader)>
<com.hazelcast.spi.Operation: com.hazelcast.spi.CallStatus call()>-><com.hazelcast.scheduledexecutor.impl.operations.CancelTaskOperation: void run()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.operationexecutor.impl.OperationQueueImpl$1: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.DefaultTagsProvider: void <init>()>
<javax.security.auth.SubjectDomainCombiner$5: void <init>(java.security.ProtectionDomain)>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.cluster.api.sync.RedisClusterCommands getConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isQueueing()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.apache.catalina.core.ApplicationContext: java.util.Set getResourcePaths(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.Enum: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.Iterable getCacheNames()>-><java.lang.String: int length()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$2: java.util.Set parseFlags(java.util.Set)>-><java.util.LinkedHashSet: void <init>(int,float)>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.EngineInputRecord: void <init>(sun.security.ssl.SSLEngineImpl)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.quorum.impl.QuorumImpl: java.lang.String toString()>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: void setCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object,java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.http.converter.feed.RssChannelHttpMessageConverter: boolean supports(java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: java.lang.Object getCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: void add(org.apache.shiro.authc.SimpleAccount)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.jersey.JerseyProperties,org.glassfish.jersey.server.ResourceConfig,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.util.stream.Stream orderedStream()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<java.util.Scanner: void <init>(java.lang.String)>-><java.util.Scanner: void <init>(java.lang.Readable,java.util.regex.Pattern)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><org.springframework.util.LinkedMultiValueMap: java.util.Collection values()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.batch.BatchConfigurerConfiguration: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<com.fasterxml.jackson.core.base.ParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int)>-><com.fasterxml.jackson.core.io.IOContext: com.fasterxml.jackson.core.util.TextBuffer constructTextBuffer()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.nio.tcp.TextViewUnifiedEndpointManager: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.AbstractRedisClient createClient()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientOptions()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><java.util.ArrayList: boolean isEmpty()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<com.google.common.cache.LocalCache$EntryFactory$1: void <init>(java.lang.String,int)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache$Segment: void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)>-><com.google.common.cache.LocalCache: boolean usesValueReferences()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void <init>(org.springframework.data.redis.connection.lettuce.LettuceConnection)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<org.apache.shiro.config.Ini$Section: java.lang.String[] splitKeyValue(java.lang.String)>-><org.apache.shiro.config.Ini: org.slf4j.Logger access$300()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$2: org.springframework.data.redis.connection.RedisClusterNode convert(io.lettuce.core.cluster.models.partitions.RedisClusterNode)>-><org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder promotedAs(org.springframework.data.redis.connection.RedisNode$NodeType)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterTopology: java.util.Set getActiveMasterNodes()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<org.springframework.web.context.request.async.TimeoutDeferredResultProcessingInterceptor: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void awaitTerminationIfNecessary(java.util.concurrent.ExecutorService)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void warn(java.lang.Object)>
<org.springframework.security.authentication.ProviderManager: void checkState()>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.util.List)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.ibatis.mapping.ResultMapping: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisClusterNode: void <init>(java.lang.String,int,org.springframework.data.redis.connection.RedisClusterNode$SlotRange)>-><org.springframework.data.redis.connection.RedisNode: void <init>(java.lang.String,int)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.QueryStringUriTemplateDecorator: void <init>()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: int size()>
<freemarker.cache.URLTemplateSource: long lastModified()>-><org.apache.catalina.webresources.war.WarURLConnection: long getLastModified()>
<org.springframework.web.context.support.ServletContextResource: boolean isReadable()>-><org.apache.catalina.core.ApplicationContext: java.io.InputStream getResourceAsStream(java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.apache.ibatis.mapping.ResultMap$Builder: java.util.List getArgNames(java.lang.reflect.Constructor)>-><java.util.ArrayList$SubList: int size()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.Iterator iterator()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.management.MBeanInfo: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object getValue(java.lang.Object)>
<javax.servlet.DispatcherType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String toJava(java.lang.String,java.lang.String)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientResources()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientResources()>
<springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <init>()>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<com.hazelcast.instance.HazelcastInstanceProxy: void <init>(com.hazelcast.instance.HazelcastInstanceImpl)>-><java.lang.Object: void <init>()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.InputRecord: void enableFormatChecks()>
<reactor.core.publisher.LambdaMonoSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void cancel()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration: void <init>()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.String registerLifecycleListener()>-><com.hazelcast.instance.HazelcastInstanceProxy: com.hazelcast.core.LifecycleService getLifecycleService()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration$JdbcStoreTypeConfiguration$QuartzSchedulerDependencyConfiguration: void <init>()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.hazelcast.instance.HazelcastInstanceProxy: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.elasticsearch.client.ClusterNodes: java.util.Iterator iterator()>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.http.HttpEntity: void <clinit>()>-><org.springframework.http.HttpEntity: void <init>()>
<com.google.common.cache.LocalCache$WriteQueue: void <init>()>-><com.google.common.cache.LocalCache$WriteQueue$1: void <init>(com.google.common.cache.LocalCache$WriteQueue)>
<org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder: org.springframework.data.redis.connection.lettuce.LettuceResult build()>-><org.springframework.data.redis.connection.lettuce.LettuceResult: void <init>(java.util.concurrent.Future,java.util.function.Supplier,boolean,org.springframework.core.convert.converter.Converter)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.concurrent.semaphore.SemaphoreContainer: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.springframework.data.mapping.model.SimpleTypeHolder: void <init>(java.util.Set,boolean)>-><com.google.common.collect.SingletonImmutableSet: int size()>
<org.apache.shiro.authz.SimpleAuthorizationInfo: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.hazelcast.config.AbstractCacheConfig: void <init>()>-><com.hazelcast.config.AbstractCacheConfig: java.util.Set createConcurrentSet()>
<org.springframework.web.cors.CorsConfiguration: void setAllowedMethods(java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.apache.tomcat.util.buf.UriUtil: void <clinit>()>-><java.util.regex.Pattern: java.lang.String quote(java.lang.String)>
<org.apache.shiro.config.Ini$Section: void <init>(java.lang.String)>-><java.util.LinkedHashMap: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.google.common.cache.LocalCache$1: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isQueueing()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.hazelcast.cache.impl.HazelcastServerCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>-><com.hazelcast.instance.HazelcastInstanceImpl: com.hazelcast.instance.HazelcastInstanceCacheManager getCacheManager()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.google.common.cache.CacheBuilder: void <clinit>()>-><java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Log4jLog: boolean isInfoEnabled()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <init>()>
<com.google.common.cache.LocalCache$Segment: java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int)>-><java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.apache.shiro.util.ClassUtils: java.io.InputStream getResourceAsStream(java.lang.String)>-><org.apache.logging.slf4j.Log4jLogger: boolean isTraceEnabled()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.net.URLConnection: java.net.ContentHandler lookupContentHandlerClassFor(java.lang.String)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$6: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList: int size()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>(java.lang.ClassLoader)>-><java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor: java.util.Set lambda$new$2(java.lang.Class[],org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.atomic.DoubleAdder: java.lang.String toString()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.joda.time.chrono.JulianChronology: java.lang.String toString()>
<com.google.common.cache.LocalCache: void <clinit>()>-><com.google.common.cache.LocalCache$1: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceResultBuilder: org.springframework.data.redis.connection.lettuce.LettuceResult buildStatusResult()>-><org.springframework.data.redis.connection.lettuce.LettuceResult$LettuceStatusResult: void <init>(java.util.concurrent.Future)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.data.redis.connection.FutureResult: void <init>(java.lang.Object,org.springframework.core.convert.converter.Converter,java.util.function.Supplier)>-><java.lang.Object: void <init>()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.google.common.cache.LocalCache$Strength: void <clinit>()>-><com.google.common.cache.LocalCache$Strength$2: void <init>(java.lang.String,int)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.freemarker.FreeMarkerNonWebConfiguration: void <init>(org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties)>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag: io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag[] values()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.apache.shiro.config.Ini: void load(java.io.Reader)>-><org.apache.shiro.config.Ini: void load(java.util.Scanner)>
<freemarker.cache.MultiTemplateLoader$MultiSource: java.lang.String toString()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<org.apache.shiro.util.ClassUtils: java.io.InputStream getResourceAsStream(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: java.lang.String toString()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: void setConfig(java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceServerCommands: boolean isPipelined()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: boolean isPipelined()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doPUnsubscribe(boolean,byte[][])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] access$400(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>
<freemarker.core.Configurable: void setCustomDateFormats(java.util.Map)>-><org.apache.shiro.config.Ini$Section: java.util.Set keySet()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration$EmbeddedTomcat: void <init>()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: boolean isEmpty()>-><java.util.HashMap: boolean isEmpty()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList: void clear()>
<register-finalize <org.springframework.data.domain.Sort$Direction: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.google.common.base.Absent: int hashCode()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.HashMap: void clear()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Object getValue(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.time.Duration getCommandTimeout()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.HashSet: boolean add(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.hazelcast.config.JavaSerializationFilterConfig: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.Class loadClass(java.lang.String)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.fasterxml.jackson.dataformat.cbor.CBORGenerator$Feature: void <clinit>()>-><com.fasterxml.jackson.dataformat.cbor.CBORGenerator$Feature: void <init>(java.lang.String,int,boolean)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.apache.shiro.subject.support.DelegatingSubject$StoppingAwareProxiedSession: void <init>(org.apache.shiro.subject.support.DelegatingSubject,org.apache.shiro.session.Session,org.apache.shiro.subject.support.DelegatingSubject,org.apache.shiro.subject.support.DelegatingSubject$1)>-><org.apache.shiro.subject.support.DelegatingSubject$StoppingAwareProxiedSession: void <init>(org.apache.shiro.subject.support.DelegatingSubject,org.apache.shiro.session.Session,org.apache.shiro.subject.support.DelegatingSubject)>
<java.util.Collections$SynchronizedMap: void clear()>-><org.apache.shiro.config.Ini$Section: void clear()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<org.springframework.data.redis.connection.lettuce.LettuceServerCommands: io.lettuce.core.cluster.api.sync.RedisClusterCommands getConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.cluster.api.sync.RedisClusterCommands getConnection()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void member_helper_type(org.springframework.cglib.core.CodeEmitter,java.util.List,org.springframework.cglib.core.ObjectSwitchCallback,org.springframework.cglib.core.EmitUtils$ParameterTyper,org.springframework.asm.Label,org.springframework.asm.Label,java.util.BitSet)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><org.springframework.core.type.classreading.CachingMetadataReaderFactory: void setCacheLimit(int)>
<com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl: java.util.Map getMemberPartitionsMap()>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>-><java.util.ArrayList: void <init>(int)>
<com.hazelcast.config.ClassFilter: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration: void <init>()>
<org.springframework.http.ReadOnlyHttpHeaders: void <init>(org.springframework.util.MultiValueMap)>-><org.springframework.http.HttpHeaders: void <init>(org.springframework.util.MultiValueMap)>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.MonoCollectList$MonoCollectListSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.Class: java.lang.String getName()>
<org.apache.shiro.config.Ini: void load(java.io.Reader)>-><java.util.Scanner: void close()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorConfiguration: void <init>()>
<org.springframework.data.redis.serializer.RedisSerializerToSerializationPairAdapter: void <clinit>()>-><org.springframework.data.redis.serializer.RedisSerializer: org.springframework.data.redis.serializer.RedisSerializer byteArray()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.hazelcast.transaction.impl.xa.XAService: void putTransaction(com.hazelcast.transaction.impl.xa.XATransaction)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><com.google.common.base.Present: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.mgt.RealmSecurityManager: void applyCacheManagerToRealms()>-><com.google.common.collect.SingletonImmutableSet: java.util.Iterator iterator()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.Subject: boolean isReadOnly()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: org.springframework.security.oauth2.client.registration.ClientRegistration$Builder getBuilder(org.springframework.security.oauth2.client.registration.ClientRegistration$Builder,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties$Provider)>-><org.springframework.boot.context.properties.PropertyMapper$Source: void to(java.util.function.Consumer)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashSet: boolean isEmpty()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>-><org.apache.shiro.web.filter.mgt.SimpleNamedFilterList: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<freemarker.cache.MultiTemplateLoader$MultiSource: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void reportThrowInSubscribe(reactor.core.CoreSubscriber,java.lang.Throwable)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onError(java.lang.Throwable)>
<org.springframework.data.redis.connection.ClusterCommandExecutionFailureException: void <init>(java.util.List)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.util.MutableLong: java.lang.String toString()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.String: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.quartz.utils.Key: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: io.lettuce.core.cluster.api.sync.RedisClusterCommands getDedicatedConnection()>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<javax.activation.SecuritySupport$3: java.lang.Object run()>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: java.lang.Object nextElement()>
<org.apache.shiro.config.Ini: void load(java.util.Scanner)>-><java.util.Scanner: boolean hasNextLine()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<reactor.core.publisher.MonoCallable: void subscribe(reactor.core.CoreSubscriber)>-><reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.http.HttpHeaders: org.springframework.http.HttpHeaders readOnlyHttpHeaders(org.springframework.http.HttpHeaders)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.lang.Thread: void sleep(long)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><com.hazelcast.util.scheduler.ScheduledEntry: java.lang.Object getKey()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object getValue(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void cancel()>-><org.springframework.data.redis.connection.util.AbstractSubscription: void close()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashSet: int size()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.shiro.config.Ini: void load(java.util.Scanner)>-><org.apache.logging.slf4j.Log4jLogger: boolean isDebugEnabled()>
<org.apache.catalina.loader.ParallelWebappClassLoader: void <init>()>-><org.apache.catalina.loader.WebappClassLoaderBase: void <init>()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: void <init>(java.lang.String,java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.stream.Stream lambda$new$0(java.util.List)>-><java.util.Collection: java.util.stream.Stream stream()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.concurrent.CompletableFuture: boolean isDone()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$2: void <init>()>-><org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: void <init>(org.apache.shiro.util.ClassUtils$1)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisClusterNode: boolean isMarkedAsFail()>-><java.util.Collections$EmptySet: boolean contains(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><org.springframework.data.redis.connection.util.ByteArrayWrapper: byte[] getArray()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.apache.shiro.authc.SimpleAccount: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.redis.JedisConnectionConfiguration: void <init>(org.springframework.boot.autoconfigure.data.redis.RedisProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.spi.impl.operationservice.impl.responses.NormalResponse: java.lang.String toString()>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(org.springframework.data.redis.connection.RedisClusterNode)>-><org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.apache.shiro.util.PermissionUtils: java.util.Set resolvePermissions(java.util.Collection,org.apache.shiro.authz.permission.PermissionResolver)>-><java.util.LinkedHashSet: void <init>(int)>
<org.springframework.http.HttpStatus$Series: void <clinit>()>-><org.springframework.http.HttpStatus$Series: void <init>(java.lang.String,int,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: void init()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<freemarker.template.utility.StringUtil: java.lang.String jQuoteNoXSS(java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.Instant: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.google.common.base.Absent: java.lang.String toString()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.Iterable getCacheNames()>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.types.ResolvedObjectType create(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>(org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$1)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void info(java.lang.Object)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.ObjectProvider: java.lang.Object getIfUnique(java.util.function.Supplier)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfUnique()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<register-finalize <org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisConnection getConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisClusterConnection getClusterConnection()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.rmi.RemoteException: java.lang.String getMessage()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.apache.shiro.config.Ini: void loadFromPath(java.lang.String)>-><org.apache.shiro.config.ConfigurationException: void <init>(java.lang.Throwable)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber,java.util.Iterator,boolean,java.lang.Runnable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.nio.ch.ServerSocketChannelImpl: java.lang.String toString()>
<springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection fromRealm(java.lang.String)>-><java.util.concurrent.CopyOnWriteArraySet: boolean isEmpty()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processRoleDefinitions(java.util.Map)>-><org.apache.shiro.config.Ini$Section: java.util.Set keySet()>
<java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: boolean isAlive()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.String getDependencyName()>-><java.lang.reflect.Field: java.lang.String getName()>
<register-finalize <org.springframework.boot.autoconfigure.web.ServerProperties$ForwardHeadersStrategy: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.http.HttpProperties)>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeySetView: boolean add(java.lang.Object)>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <clinit>()>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$1: void <init>(java.lang.String,int,java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void checkSubscription()>-><org.springframework.data.redis.connection.RedisSubscribedConnectionException: void <init>(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisClusterConnection getClusterConnection()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.time.Duration getCommandTimeout()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><org.apache.shiro.config.Ini$Section: void clear()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Calendar: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.apache.http.impl.nio.client.CloseableHttpAsyncClientBase: void <init>(org.apache.http.nio.conn.NHttpClientConnectionManager,java.util.concurrent.ThreadFactory,org.apache.http.nio.NHttpClientEventHandler)>-><org.springframework.scheduling.concurrent.CustomizableThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.web.context.support.ServletContextAwareProcessor: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat: void <init>()>
<java.io.PrintWriter: void <init>(java.io.File)>-><java.io.BufferedWriter: void <init>(java.io.Writer)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: boolean setOnce(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHide$HideSubscriber: void cancel()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.apache.ibatis.builder.xml.XMLConfigBuilder: java.util.Properties settingsAsProperties(org.apache.ibatis.parsing.XNode)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.catalina.loader.WebappClassLoaderBase: void <init>(java.lang.ClassLoader)>-><java.util.concurrent.CopyOnWriteArrayList: void <init>()>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: void addAll(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><freemarker.template.Version: java.lang.String toString()>
<org.apache.shiro.config.Ini$Section: java.util.Map toMapProps(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<cn.hutool.core.map.MapProxy: void clear()>-><java.util.EnumMap: void clear()>
<org.apache.shiro.subject.SimplePrincipalCollection: void <init>(java.util.Collection,java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: void addAll(java.util.Collection,java.lang.String)>
<com.hazelcast.util.CollectionUtil: int[] toIntArray(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.data.redis.connection.jedis.JedisExceptionConverter: org.springframework.dao.DataAccessException convert(java.lang.Exception)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<com.hazelcast.spi.impl.eventservice.impl.EventServiceSegment: void removeRegistrations(java.lang.String)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.couchbase.SpringBootCouchbaseDataConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider: java.lang.Object getIfAvailable()>
<com.google.common.cache.LocalCache: boolean usesAccessEntries()>-><com.google.common.cache.LocalCache: boolean usesAccessQueue()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: int hashCode()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.apache.catalina.loader.WebappClassLoaderBase: java.lang.String toString()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processUserDefinitions(java.util.Map)>-><org.apache.shiro.config.Ini$Section: boolean isEmpty()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.lang.reflect.Method: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] optimize(java.security.ProtectionDomain[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<springfox.documentation.spring.web.readers.operation.ResponseMessagesReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><java.lang.Object: void <init>()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><java.lang.Object: void <init>()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <init>()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Arrays$ArrayList: int size()>
<org.springframework.data.redis.connection.RedisClusterNode$RedisClusterNodeBuilder: org.springframework.data.redis.connection.RedisClusterNode build()>-><org.springframework.data.redis.connection.RedisNode: java.lang.Integer getPort()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<freemarker.core._DelayedAOrAn: java.lang.String doConversion(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>-><org.springframework.context.annotation.AnnotatedBeanDefinitionReader: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.time.Duration getCommandTimeout()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><freemarker.ext.beans.SequenceAdapter: java.lang.Object get(int)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] access$300(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.transaction.impl.TransactionManagerServiceImpl$TxBackupLog: java.lang.String toString()>
<java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner,boolean)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isStartTls()>
<io.lettuce.core.ClientOptions: void <init>(io.lettuce.core.ClientOptions)>-><io.lettuce.core.ClientOptions: int getBufferUsageRatio()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.springframework.http.HttpMethod: org.springframework.http.HttpMethod resolve(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.security.Provider: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><java.util.ArrayList: boolean isEmpty()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.crypto.CryptoAllPermissionCollection: java.util.Enumeration elements()>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: boolean getUsePool()>-><org.springframework.data.redis.connection.jedis.DefaultJedisClientConfiguration: boolean isUsePooling()>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: int getReadTimeout()>-><org.springframework.data.redis.connection.jedis.DefaultJedisClientConfiguration: java.time.Duration getReadTimeout()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<springfox.documentation.spring.web.readers.parameter.ParameterDefaultReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(org.springframework.util.MultiValueMap)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: boolean isDebugEnabled()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.UUID: java.lang.String toString()>
<org.apache.shiro.io.ResourceUtils: java.io.InputStream loadFromFile(java.lang.String)>-><org.apache.logging.slf4j.Log4jLogger: void debug(java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.lang.String)>-><java.util.Collections: java.util.Set emptySet()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.apache.shiro.authc.SimpleAccount: void <init>(org.apache.shiro.subject.PrincipalCollection,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: void <init>(org.apache.shiro.subject.PrincipalCollection,java.lang.Object)>
<org.springframework.http.HttpEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap)>-><org.springframework.http.HttpHeaders: void <init>()>
<reactor.core.publisher.FluxHide$HideSubscriber: void onSubscribe(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxFlatMap$FlatMapInner: void onSubscribe(org.reactivestreams.Subscription)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void debug(java.lang.Object)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.apache.catalina.core.ApplicationContext: void <clinit>()>-><java.util.Collections: java.util.List emptyList()>
<java.time.format.DateTimeTextProvider$LocaleStore: java.util.Iterator getTextIterator(java.time.format.TextStyle)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration: void <init>()>-><org.apache.shiro.web.filter.mgt.SimpleNamedFilterList: void <init>(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.authc.SimpleAccount: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>-><com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<com.google.common.cache.LocalCache$Strength: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.dataformat.cbor.CBORFactory: void <init>(com.fasterxml.jackson.dataformat.cbor.CBORFactoryBuilder)>-><com.fasterxml.jackson.core.JsonFactory: void <init>(com.fasterxml.jackson.core.TSFBuilder,boolean)>
<freemarker.ext.beans.ClassIntrospector: java.util.List getMethodDescriptors(java.beans.BeanInfo,java.lang.Class)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.shiro.realm.text.IniRealm: void processDefinitions(org.apache.shiro.config.Ini)>-><org.apache.logging.slf4j.Log4jLogger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void error(java.lang.Object,java.lang.Throwable)>
<org.apache.shiro.subject.SimplePrincipalCollection: void add(java.lang.Object,java.lang.String)>-><java.util.JumboEnumSet: boolean add(java.lang.Object)>
<org.springframework.scheduling.concurrent.CustomizableThreadFactory: void <init>(java.lang.String)>-><org.springframework.util.CustomizableThreadCreator: void <init>(java.lang.String)>
<org.springframework.data.redis.connection.DefaultedRedisConnection: java.util.Properties getConfig(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceConnection: org.springframework.data.redis.connection.RedisServerCommands serverCommands()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<com.hazelcast.config.ClassFilter: void <init>(com.hazelcast.config.ClassFilter)>-><java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><java.util.ArrayList: void <init>(int)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><net.sf.ehcache.event.RegisteredEventListeners$ListenerWrapper: java.lang.String toString()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<org.apache.shiro.config.Ini$Section: java.util.Map toMapProps(java.lang.String)>-><org.apache.shiro.config.Ini$Section: java.lang.String[] splitKeyValue(java.lang.String)>
<org.springframework.cglib.core.EmitUtils: void member_helper_type(org.springframework.cglib.core.CodeEmitter,java.util.List,org.springframework.cglib.core.ObjectSwitchCallback,org.springframework.cglib.core.EmitUtils$ParameterTyper,org.springframework.asm.Label,org.springframework.asm.Label,java.util.BitSet)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pSubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void checkPulse()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<com.google.common.cache.CacheBuilder: void <clinit>()>-><com.google.common.base.Suppliers: com.google.common.base.Supplier ofInstance(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doClose()>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getPatterns()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: void <init>(org.apache.shiro.util.ClassUtils$1)>-><org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: void <init>()>
<freemarker.template.Configuration: void setRegisteredCustomOutputFormats(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><com.hazelcast.util.executor.CompletedFuture: java.lang.Object get()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Collection getPrincipalsLazy(java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<com.hazelcast.multimap.impl.MultiMapRecord: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceClusterServerCommands: java.util.Properties getConfig(java.lang.String)>-><org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.util.concurrent.ForkJoinTask: java.lang.Object get()>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.TypeNameExtractor getTypeNameExtractor()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.jni.SSL: java.lang.String versionString()>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.hazelcast.multimap.impl.MultiMapService: void insertMigratedData(int,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>-><org.springframework.data.redis.connection.lettuce.LettuceSubscription: void doSubscribe(byte[][])>
<org.springframework.web.cors.CorsConfiguration: void <clinit>()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void awaitTerminationIfNecessary(java.util.concurrent.ExecutorService)>-><org.apache.commons.logging.LogAdapter$Log4jLog: void warn(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: void <init>(org.springframework.boot.web.servlet.ServletContextInitializerBeans$1)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: void <init>()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<io.lettuce.core.RedisConnectionException: io.lettuce.core.RedisConnectionException create(java.lang.String,java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.apache.http.HttpHost: void <init>(java.lang.String,int)>-><org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.apache.shiro.authz.permission.WildcardPermission: int hashCode()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: void <init>(javax.security.auth.SubjectDomainCombiner$1)>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: void <init>()>
<org.apache.ibatis.reflection.wrapper.MapWrapper: boolean hasGetter(java.lang.String)>-><org.apache.shiro.config.Ini$Section: boolean containsKey(java.lang.Object)>
<com.google.common.base.Suppliers: com.google.common.base.Supplier ofInstance(java.lang.Object)>-><com.google.common.base.Suppliers$SupplierOfInstance: void <init>(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeBin: net.sf.ehcache.util.concurrent.ConcurrentHashMap$TreeNode putTreeNode(int,java.lang.Object,java.lang.Object,int)>-><org.apache.shiro.config.Ini$Section: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: redis.clients.jedis.JedisCluster createCluster(org.springframework.data.redis.connection.RedisClusterConfiguration,org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.springframework.data.redis.connection.jedis.DefaultJedisClientConfiguration: java.util.Optional getHostnameVerifier()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.data.mapping.model.Property: java.lang.String toString()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><org.springframework.context.ApplicationContextException: void <init>(java.lang.String)>
<com.baomidou.mybatisplus.core.metadata.TableInfoHelper: void initTableFields(java.lang.Class,com.baomidou.mybatisplus.core.config.GlobalConfig,com.baomidou.mybatisplus.core.metadata.TableInfo,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.lang.Thread: void <init>(java.lang.Runnable,java.security.AccessControlContext)>-><java.lang.StringBuilder: java.lang.String toString()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: java.lang.String getErrorMessage(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.config.Ini: void load(java.io.Reader)>-><java.util.Scanner: void <init>(java.lang.Readable)>
<org.springframework.data.redis.connection.lettuce.LettuceConnection: void close()>-><org.springframework.data.redis.connection.util.AbstractSubscription: boolean isAlive()>
<freemarker.ext.beans.ClassIntrospector: boolean containsMethodWithSameParameterTypes(java.util.List,java.lang.reflect.Method)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.quartz.impl.JobDetailImpl: java.lang.String toString()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><com.hazelcast.config.JavaSerializationFilterConfig: java.lang.String toString()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.hazelcast.internal.partition.operation.PartitionReplicaSyncResponse: void executeOperations()>-><com.hazelcast.scheduledexecutor.impl.operations.CancelTaskBackupOperation: void run()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.text.PatternEntry: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<redis.clients.jedis.Jedis: java.lang.String clusterNodes()>-><redis.clients.jedis.BinaryJedis: void checkIsInMultiOrPipeline()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])>-><java.lang.String: int length()>
<io.lettuce.core.masterslave.SentinelConnector: reactor.core.publisher.Mono lambda$connectAsync$0(io.lettuce.core.masterslave.SentinelTopologyRefresh,io.lettuce.core.masterslave.MasterSlaveConnectionProvider,java.lang.Runnable,java.util.List)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.quartz.SchedulerException: java.lang.String toString()>
<org.apache.shiro.config.Ini: void <init>(org.apache.shiro.config.Ini)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<com.fasterxml.classmate.util.ResolvedTypeCache: com.fasterxml.classmate.util.ResolvedTypeCache lruCache(int)>-><com.fasterxml.classmate.util.LRUTypeCache: void <init>(int)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><com.google.common.base.Present: java.lang.String toString()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.apache.shiro.config.Ini$Section: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: javax.servlet.ServletRegistration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getServletName()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String,int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><java.util.ArrayList: boolean isEmpty()>
<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.apache.shiro.authz.SimpleRole: int hashCode()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.Iterable getCacheNames()>-><com.hazelcast.cache.impl.AbstractHazelcastCacheManager: void ensureOpen()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.springframework.data.redis.ClusterRedirectException: void <init>(int,java.lang.String,int,java.lang.Throwable)>-><org.springframework.dao.DataRetrievalFailureException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator getCachingOperationNameGenerator()>
<org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <clinit>()>-><java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1)>-><com.google.common.cache.LocalCache$EntryFactory: void <init>(java.lang.String,int)>
<org.apache.shiro.config.Ini$Section: java.util.Map toMapProps(java.lang.String)>-><java.util.Scanner: boolean hasNextLine()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<com.hazelcast.cache.impl.AbstractHazelcastCacheManager: java.lang.String registerLifecycleListener()>-><com.hazelcast.instance.TerminatedLifecycleService: java.lang.String addLifecycleListener(com.hazelcast.core.LifecycleListener)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.HashSet: void <init>(java.util.Collection)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult executeCommandAsyncOnNodes(org.springframework.data.redis.connection.ClusterCommandExecutor$ClusterCommandCallback,java.lang.Iterable)>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void awaitTerminationIfNecessary(java.util.concurrent.ExecutorService)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.Map getErrorAttributes(javax.servlet.http.HttpServletRequest,boolean)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<com.hazelcast.multimap.impl.MultiMapRecord: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void removeListener(org.springframework.data.redis.connection.MessageListener,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.convert.Converters: java.util.Set toSetOfRedisClusterNodes(java.util.Collection)>-><java.util.Arrays$ArrayList: int size()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.apache.shiro.config.Ini$Section: java.lang.String toString()>
<freemarker.template.Configuration: void setSetting(java.lang.String,java.lang.String)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore: void putRecords(java.util.Collection,long)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void sendBatch(java.lang.String,java.util.List,java.util.List[],com.hazelcast.spi.merge.SplitBrainMergePolicy)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: void setPoolSize(int)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.ClusterCommandExecutor: org.springframework.data.redis.connection.ClusterCommandExecutor$MultiNodeResult collectResults(java.util.Map)>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.apache.shiro.realm.text.TextConfigurationRealm: void processRoleDefinitions(java.util.Map)>-><org.apache.shiro.config.Ini$Section: java.lang.Object get(java.lang.Object)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$WebSecurityConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void setName(java.lang.String)>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><com.hazelcast.concurrent.lock.LockResourceImpl: java.lang.String toString()>
<freemarker.ext.beans.ClassIntrospector: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.reflect.Method,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.alibaba.druid.util.JdbcUtils: void <clinit>()>-><org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration: java.lang.Object nextElement()>
<org.apache.http.impl.nio.client.InternalRequestExecutor: void exception(org.apache.http.nio.NHttpClientConnection,java.lang.Exception)>-><org.apache.http.impl.nio.client.InternalRequestExecutor: void exception(org.apache.http.nio.NHttpClientConnection,java.lang.Exception)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.hazelcast.instance.HazelcastInstanceProxy: java.lang.String toString()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$1: java.util.List convert(io.lettuce.core.cluster.models.partitions.Partitions)>-><org.springframework.data.redis.connection.lettuce.LettuceConverters$2: java.lang.Object convert(java.lang.Object)>
<org.quartz.xml.XMLSchedulingDataProcessor: void scheduleJobs(org.quartz.Scheduler)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.RedisClusterConnection getClusterConnection()>-><org.springframework.data.redis.connection.lettuce.LettuceClusterTopologyProvider: void <init>(io.lettuce.core.cluster.RedisClusterClient)>
<java.rmi.server.RemoteObject: boolean equals(java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.hazelcast.HazelcastServerConfiguration$HazelcastServerConfigConfiguration: void <init>()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection$JedisClusterTopologyProvider: org.springframework.data.redis.connection.ClusterTopology getTopology()>-><org.springframework.data.redis.ClusterStateFailureException: void <init>(java.lang.String)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.apache.shiro.util.StringUtils: java.lang.String[] split(java.lang.String,char,char,char,boolean,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<com.hazelcast.spi.impl.merge.AbstractMergeRunnable$MergingItemBiConsumer: void init()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprStatus: boolean isAprAvailable()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.server.MimeMappings$Mapping: void <init>(java.lang.String,java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void remove(java.util.Collection,byte[][])>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><sun.security.ssl.SignatureAlgorithmsExtension: java.lang.String toString()>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void add(java.util.Collection,byte[][])>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.aop.config.AopConfigUtils: org.springframework.beans.factory.config.BeanDefinition registerOrEscalateApcAsRequired(java.lang.Class,org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean containsBeanDefinition(java.lang.String)>
<sun.awt.DebugSettings: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.alibaba.druid.support.profile.ProfileEntryKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.apache.shiro.realm.SimpleAccountRealm: java.lang.String getUsername(org.apache.shiro.subject.PrincipalCollection)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<org.springframework.data.redis.connection.ClusterTopology: org.springframework.data.redis.connection.RedisClusterNode lookup(java.lang.String)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration: void <init>()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
