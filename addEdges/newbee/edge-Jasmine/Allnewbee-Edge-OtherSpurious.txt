<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.Duration: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.util.MultiValueMapAdapter: boolean equals(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(org.springframework.core.annotation.TypeMappedAnnotations$Aggregate,java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void accept(java.lang.Object)>
<org.springframework.util.LinkedCaseInsensitiveMap: void clear()>-><java.util.LinkedHashMap: void clear()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.TreeMap$KeySpliterator: int characteristics()>
<java.util.AbstractMap: java.lang.String toString()>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<java.util.TreeMap$Entry: int hashCode()>-><java.lang.reflect.Method: int hashCode()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: void init()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.String: java.lang.String valueOf(char[])>
<java.util.stream.Streams$StreamBuilderImpl: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><java.lang.reflect.Parameter: int hashCode()>
<org.springframework.context.support.AbstractRefreshableConfigApplicationContext: void setBeanName(java.lang.String)>-><org.springframework.context.support.AbstractApplicationContext: void setId(java.lang.String)>
<ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.String applicable(java.lang.reflect.Method[])>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.Short: boolean equals(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.RegularEnumSet: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.lang.reflect.Constructor: void handleParameterNumberMismatch(int,int)>-><java.lang.Class: int getModifiers()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.crypto.CryptoPermission: boolean equals(java.lang.Object)>
<ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] synthesizeAllParams()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: long estimateSize()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.lang.reflect.Parameter: boolean isImplicit()>-><java.lang.reflect.Modifier: boolean isMandated(int)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.Collections$2: long estimateSize()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.Vector$VectorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<ltd.newbee.mall.util.PageQueryUtil: void <init>(java.util.Map)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.annotation.AnnotationsScanner: boolean hasPlainJavaAnnotationsOnly(java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<sun.reflect.misc.ReflectUtil: void conservativeCheckMemberAccess(java.lang.reflect.Member)>-><java.lang.reflect.Method: int getModifiers()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.management.MBeanInfo: java.lang.String toString()>
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] synthesizeAllParams()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.IntPipeline: java.util.Spliterator wrap(java.util.stream.PipelineHelper,java.util.function.Supplier,boolean)>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: void <init>(java.util.stream.PipelineHelper,java.util.function.Supplier,boolean)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.util.MultiValueMapAdapter: boolean containsKey(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: boolean containsKey(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><java.text.DateFormat: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: boolean equals(java.lang.Object)>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.Spliterator trySplit()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.LocalTime: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: int characteristics()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>-><org.springframework.web.util.pattern.PatternParseException$PatternMessage: java.lang.String formatMessage(java.lang.Object[])>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.ibatis.executor.ErrorContext: java.lang.String toString()>
<java.lang.reflect.Method: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: char getSeparator()>
<java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.Nodes: java.util.stream.Node node(java.util.Collection)>-><java.util.stream.Nodes$CollectionNode: void <init>(java.util.Collection)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.IdentityHashMap$EntrySpliterator: int characteristics()>
<sun.reflect.annotation.AnnotationType: void <init>(java.lang.Class)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<org.springframework.cglib.core.ReflectUtils: org.springframework.asm.Type[] getExceptionTypes(java.lang.reflect.Member)>-><java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>
<ltd.newbee.mall.util.PageQueryUtil: void <init>(java.util.Map)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<java.lang.reflect.Parameter: java.lang.String getName()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.FunctionReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><java.lang.reflect.Constructor: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>
<sun.reflect.misc.ReflectUtil: void conservativeCheckMemberAccess(java.lang.reflect.Member)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.Year: java.lang.String toString()>
<java.util.stream.DistinctOps$1$2: void end()>-><java.util.stream.Nodes$IntFixedNodeBuilder: void end()>
<java.util.stream.SortedOps$RefSortingSink: void end()>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<org.springframework.expression.spel.CodeFlow: java.lang.String toJvmDescriptor(java.lang.Class)>-><java.lang.Class: boolean isArray()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: void <init>(java.util.stream.PipelineHelper,java.util.function.Supplier,boolean)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: void <init>(java.util.stream.PipelineHelper,java.util.function.Supplier,boolean)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><java.lang.reflect.Constructor: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: java.lang.Class getPropertyType()>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.AbstractMap: java.lang.String toString()>
<org.springframework.expression.spel.ast.MethodReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.MethodWrapper: java.lang.Object create(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.lang.reflect.Executable: java.lang.annotation.Annotation[][] sharedGetParameterAnnotations(java.lang.Class[],byte[])>-><java.lang.reflect.Method: void handleParameterNumberMismatch(int,int)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: long estimateSize()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeAwareMethods(java.lang.String,java.lang.Object)>-><org.springframework.context.support.DefaultLifecycleProcessor: void setBeanFactory(org.springframework.beans.factory.BeanFactory)>
<ch.qos.logback.core.joran.util.beans.BeanDescriptionFactory: ch.qos.logback.core.joran.util.beans.BeanDescription create(java.lang.Class)>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Locale: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: int characteristics()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.web.servlet.FrameworkServlet: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.net.URL: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.TreeMap$TreeMapSpliterator: long estimateSize()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.servlet.function.RouterFunctions$AbstractRouterFunction: java.lang.String toString()>
<javax.security.auth.PrivateCredentialPermission: void <init>(java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.Spliterators$EmptySpliterator: long estimateSize()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.ReferencePipeline$2$1: void begin(long)>
<org.thymeleaf.standard.serializer.StandardJavaScriptSerializer$JacksonThymeleafISO8601DateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>-><java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.MethodReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.reflect.Method: int getModifiers()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.text.DecimalFormat: boolean equals(java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.ReferencePipeline$7$1: void begin(long)>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Class getTypeForFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: java.util.stream.StreamSpliterators$AbstractWrappingSpliterator wrap(java.util.Spliterator)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: java.util.stream.StreamSpliterators$WrappingSpliterator wrap(java.util.Spliterator)>
<java.lang.reflect.Method: boolean isVarArgs()>-><java.lang.reflect.Executable: boolean isVarArgs()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.core.convert.support.ObjectToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Method: int getModifiers()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.Vector: java.lang.String toString()>
<java.lang.reflect.Parameter: boolean equals(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.lang.String[] doGetParameterNames(java.lang.reflect.Executable)>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Parameter: int hashCode()>-><java.lang.reflect.Constructor: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<javax.management.MBeanOperationInfo: void <init>(java.lang.String,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<java.util.stream.AbstractPipeline: java.util.Spliterator wrapSpliterator(java.util.Spliterator)>-><java.util.stream.IntPipeline: java.util.Spliterator wrap(java.util.stream.PipelineHelper,java.util.function.Supplier,boolean)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: int characteristics()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<java.util.stream.Sink$ChainedInt: void begin(long)>-><java.util.stream.ReduceOps$4ReducingSink: void begin(long)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.imageio.ImageTypeSpecifier: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.Sink$ChainedReference: void begin(long)>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getInterfaceMethodIfPossible(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><org.springframework.beans.factory.support.ManagedList: void <init>()>
<org.springframework.expression.spel.support.ReflectiveMethodResolver: org.springframework.expression.MethodExecutor resolve(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String,java.util.List)>-><java.lang.reflect.Method: boolean isVarArgs()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: int characteristics()>
<org.springframework.expression.spel.ast.FunctionReference: boolean isCompilable()>-><java.lang.Class: int getModifiers()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.util.MultiValueMapAdapter: void clear()>-><java.util.Collections$UnmodifiableMap: void clear()>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.catalina.valves.ValveBase: java.lang.String toString()>-><org.apache.catalina.util.ToStringUtil: java.lang.String toString(org.apache.catalina.Contained)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.reflect.Method findMethodForProperty(java.lang.String[],java.lang.String,java.lang.Class,boolean,int,java.util.Set)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>
<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.IdentityHashMap$ValueSpliterator: int characteristics()>
<org.apache.catalina.util.ToStringUtil: java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: void generateCode(java.lang.String,org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.Class: java.lang.String getName()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><java.lang.reflect.Method: int hashCode()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.core.annotation.TypeMappedAnnotation: java.lang.ClassLoader getClassLoader()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,java.util.stream.Sink)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.TreeMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.text.DigitList: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.AnnotationsScanner: boolean isWithoutHierarchy(java.lang.reflect.AnnotatedElement,org.springframework.core.annotation.MergedAnnotations$SearchStrategy)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<sun.util.locale.provider.LocaleProviderAdapter: boolean isSupportedLocale(java.util.Locale,sun.util.locale.provider.LocaleProviderAdapter$Type,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.Enhancer: void emitMethods(org.springframework.cglib.core.ClassEmitter,java.util.List,java.util.List)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean remove(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Method: java.lang.String toString()>
<org.springframework.expression.spel.ast.MethodReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.Class: boolean isInterface()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.math.BigInteger: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.MonthDay: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.IdentityHashMap$IdentityHashMapSpliterator: long estimateSize()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.beans.PropertyDescriptor: void setReadMethod(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: boolean isSynthetic()>-><java.lang.reflect.Method: int getModifiers()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.text.DateFormat: int hashCode()>
<java.util.stream.Nodes$CollectionNode: java.util.Spliterator spliterator()>-><java.util.Collection: java.util.stream.Stream stream()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.management.MBeanAttributeInfo: boolean isIs(java.lang.reflect.Method)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$EntrySpliterator: java.util.Spliterator trySplit()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.text.FieldPosition: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: long estimateSize()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.management.MBeanAttributeInfo: boolean isIs(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] privateGetParameters()>-><java.lang.reflect.MalformedParametersException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: int characteristics()>
<java.lang.reflect.Executable: java.util.Map declaredAnnotations()>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<java.util.Spliterators$ArraySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.Object: java.lang.String toString()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.lang.reflect.Constructor: boolean equals(java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.Vector$VectorSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.ComparableTimSort: int countRunAndMakeAscending(java.lang.Object[],int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long getExactSizeIfKnown()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: void init()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.TreeMap$ValueSpliterator: int characteristics()>
<org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.Long: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.stream.Sink$ChainedInt: void end()>-><java.util.stream.DistinctOps$1$2: void end()>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.StreamOpFlag: boolean isKnown(int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.Sink$ChainedInt: void begin(long)>
<java.lang.reflect.Executable: void verifyParameters(java.lang.reflect.Parameter[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.SortedOps$RefSortingSink: void end()>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.text.DateFormat: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.invoke.LambdaFormEditor$Transform: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.ZoneId: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator trySplit()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.lang.reflect.Executable: void verifyParameters(java.lang.reflect.Parameter[])>-><java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.management.MBeanAttributeInfo: java.lang.String attributeType(java.lang.reflect.Method,java.lang.reflect.Method)>-><java.lang.Class: java.lang.String getName()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations(byte[],sun.reflect.ConstantPool,java.lang.Class)>-><sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations2(byte[],sun.reflect.ConstantPool,java.lang.Class)>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Class getTypeForFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])>-><java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>
<javax.management.MBeanOperationInfo: void <init>(java.lang.String,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.lang.reflect.Constructor: boolean isVarArgs()>-><java.lang.reflect.Executable: boolean isVarArgs()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.beans.PropertyValue: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.MethodWrapper: java.lang.Object create(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.IdentityHashMap$ValueSpliterator: int characteristics()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: int characteristics()>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>-><java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.TreeMap$Entry: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.String typeName(java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.reflect.Type getGenericComponentType()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.autoconfigure.template.TemplateLocation: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedList: boolean isMergeEnabled()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: java.util.Spliterator trySplit()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.security.Provider: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void begin(long)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<java.lang.reflect.Parameter: void <init>(java.lang.String,int,java.lang.reflect.Executable,int)>-><java.lang.Object: void <init>()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.stream.SpinedBuffer$OfInt: int get(long)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.Throwable: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DelegatingSpliterator: int characteristics()>-><java.util.Spliterators$IntIteratorSpliterator: int characteristics()>
<java.util.Collections$SynchronizedCollection: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>-><sun.reflect.generics.repository.GenericDeclRepository: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>-><java.lang.Class: int getModifiers()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.reflect.misc.ReflectUtil: void conservativeCheckMemberAccess(java.lang.reflect.Member)>-><java.lang.reflect.Constructor: int getModifiers()>
<org.springframework.util.ReflectionUtils: boolean isEqualsMethod(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.lang.reflect.Parameter: java.lang.String toString()>-><java.lang.reflect.Modifier: java.lang.String toString(int)>
<ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.ZoneOffset: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><java.lang.reflect.Parameter: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.asm.Handle: java.lang.String toString()>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.stream.IntPipeline$3$1: void accept(int)>
<org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>-><java.lang.reflect.Method: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.security.CodeSigner: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.misc.Signal: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.apache.ibatis.mapping.ResultMapping: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><org.springframework.beans.factory.support.ManagedMap: void <init>()>
<org.springframework.core.annotation.AnnotationsScanner: java.lang.annotation.Annotation[] getDeclaredAnnotations(java.lang.reflect.AnnotatedElement,boolean)>-><java.lang.reflect.Method: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.util.Collections$SetFromMap: boolean remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object remove(java.lang.Object)>
<java.util.Vector$VectorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><ch.qos.logback.classic.spi.ClassPackagingData: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>
<org.springframework.core.convert.Property: void addAnnotationsToMap(java.util.Map,java.lang.reflect.AnnotatedElement)>-><java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getAnnotations()>
<org.springframework.beans.CachedIntrospectionResults: boolean isClassLoaderAccepted(java.lang.ClassLoader)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>
<org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>-><java.lang.reflect.AccessibleObject: boolean isAccessible()>
<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.lang.reflect.Method: void specificToStringHeader(java.lang.StringBuilder)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<org.springframework.cglib.core.ReflectUtils$6: org.springframework.cglib.core.ClassInfo getClassInfo()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.beans.FeatureDescriptor: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.text.DateFormat: int hashCode()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.core.MethodParameter: java.lang.Class computeParameterType()>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations2(byte[],sun.reflect.ConstantPool,java.lang.Class)>-><sun.reflect.annotation.AnnotationType: sun.reflect.annotation.AnnotationType getInstance(java.lang.Class)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.HashMap$Node: java.lang.String toString()>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.util.HashMap: void putAll(java.util.Map)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><ch.qos.logback.core.status.StatusBase: boolean equals(java.lang.Object)>
<sun.reflect.generics.factory.CoreReflectionFactory: java.lang.ClassLoader getDeclsLoader()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.apache.logging.log4j.spi.Provider: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Class getTypeForFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])>-><java.lang.reflect.Method: int getModifiers()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.String applicable(java.lang.reflect.Method[])>-><java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.util.MimeType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.Locale: java.lang.String toString()>
<java.util.HashMap: int hash(java.lang.Object)>-><java.lang.reflect.Method: int hashCode()>
<java.util.WeakHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.LinkedList$LLSpliterator: long estimateSize()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.stream.SpinedBuffer$1Splitr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.AbstractMap: java.lang.String toString()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator trySplit()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.stream.SortedOps$SizedRefSortingSink: void end()>-><java.util.stream.DistinctOps$1$1: void begin(long)>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.beans.IndexedPropertyDescriptor: void setIndexedReadMethod0(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: java.util.stream.StreamSpliterators$WrappingSpliterator wrap(java.util.Spliterator)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>
<org.springframework.context.support.EmbeddedValueResolutionSupport: java.lang.String resolveEmbeddedValue(java.lang.String)>-><org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.Spliterators$IntArraySpliterator: long estimateSize()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.Boolean: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.invoke.MethodType: boolean equals(java.lang.Object)>
<java.util.stream.SortedOps$SizedRefSortingSink: void end()>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<java.lang.reflect.Executable: java.util.Map declaredAnnotations()>-><java.lang.reflect.Method: byte[] getAnnotationBytes()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: int characteristics()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.SpinedBuffer$1Splitr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<org.springframework.expression.spel.support.ReflectiveMethodResolver: org.springframework.expression.MethodExecutor resolve(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String,java.util.List)>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.expression.spel.ast.FunctionReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.stream.DistinctOps$1$1: void end()>-><java.util.stream.Nodes$IntFixedNodeBuilder: void end()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.math.BigDecimal: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>-><java.lang.reflect.Constructor: sun.reflect.generics.repository.ConstructorRepository getGenericInfo()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><java.text.DateFormat: int hashCode()>
<java.lang.reflect.Executable: void verifyParameters(java.lang.reflect.Parameter[])>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<ltd.newbee.mall.entity.Carousel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.TreeSet: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getAllGenericParameterTypes()>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$2: void end()>-><java.util.stream.Sink: void end()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.HashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.GregorianCalendar: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.WeakHashMap$KeySpliterator: int characteristics()>
<org.springframework.expression.spel.ast.MethodReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.reflect.Method: boolean isDefault()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.Collections$SetFromMap: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.util.Set keySet()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.lang.reflect.Method: sun.reflect.generics.repository.MethodRepository getGenericInfo()>-><sun.reflect.generics.repository.MethodRepository: sun.reflect.generics.repository.MethodRepository make(java.lang.String,sun.reflect.generics.factory.GenericsFactory)>
<org.apache.ibatis.parsing.XNode: void toString(java.lang.StringBuilder,int)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.lang.reflect.Parameter: java.lang.annotation.Annotation[] getDeclaredAnnotations()>-><java.lang.reflect.Method: java.lang.annotation.Annotation[][] getParameterAnnotations()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Parameter: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.net.URI: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: long estimateSize()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.apache.catalina.session.StandardSession$PrivilegedNewSessionFacade: java.lang.Object run()>-><org.apache.catalina.session.StandardSession$PrivilegedNewSessionFacade: org.apache.catalina.session.StandardSessionFacade run()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.lang.reflect.Method: int hashCode()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.security.cert.Certificate: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(org.springframework.core.annotation.TypeMappedAnnotations$Aggregate,java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>-><sun.misc.SharedSecrets: sun.misc.JavaLangAccess getJavaLangAccess()>
<org.springframework.beans.factory.support.ManagedList: java.lang.Object merge(java.lang.Object)>-><org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedMap: boolean isMergeEnabled()>
<ltd.newbee.mall.util.PageQueryUtil: void <init>(java.util.Map)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: int characteristics()>
<java.lang.reflect.Method: java.lang.String toString()>-><java.lang.reflect.Modifier: int methodModifiers()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.util.MultiValueMapAdapter: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.AbstractSet: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.text.AttributeEntry: java.lang.String toString()>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.awt.Point: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.Float: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<org.springframework.core.annotation.AnnotationsScanner: boolean isKnownEmpty(java.lang.reflect.AnnotatedElement,org.springframework.core.annotation.MergedAnnotations$SearchStrategy)>-><java.lang.reflect.Method: boolean isBridge()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.Spliterators$IntIteratorSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long getExactSizeIfKnown()>-><java.util.stream.AbstractPipeline: int getStreamAndOpFlags()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.WeakHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void <init>(java.util.Spliterator)>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getAllGenericParameterTypes()>-><java.lang.reflect.Constructor: boolean hasGenericInformation()>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>-><sun.reflect.annotation.AnnotationParser: java.lang.Object parseMemberValue(java.lang.Class,java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class)>
<java.util.AbstractMap: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.springframework.util.MultiValueMapAdapter: java.util.List put(java.lang.Object,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.EnumMap$1: java.lang.String toString()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.Integer: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.SortedOps$RefSortingSink: void end()>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.Spliterator$OfInt trySplit()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.beans.IndexedPropertyDescriptor: java.lang.reflect.Method getIndexedWriteMethod()>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$2: void <init>(java.util.stream.DistinctOps$1,java.util.stream.Sink)>-><java.util.stream.Sink$ChainedReference: void <init>(java.util.stream.Sink)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] synthesizeAllParams()>-><java.lang.reflect.Constructor: int getParameterCount()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void <init>(java.util.Spliterator,java.util.concurrent.ConcurrentHashMap)>-><java.lang.Object: void <init>()>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.WildcardPathElement: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<java.util.stream.AbstractPipeline: java.util.Spliterator wrapSpliterator(java.util.Spliterator)>-><java.util.stream.ReferencePipeline: java.util.Spliterator wrap(java.util.stream.PipelineHelper,java.util.function.Supplier,boolean)>
<java.lang.reflect.Executable: java.lang.annotation.Annotation[][] parseParameterAnnotations(byte[])>-><sun.misc.SharedSecrets: sun.misc.JavaLangAccess getJavaLangAccess()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.LinkedList$LLSpliterator: int characteristics()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.beans.FeatureDescriptor: java.lang.Class getReturnType(java.lang.Class,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.awt.RenderingHints$Key: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.DependencyDescriptor: void <init>(org.springframework.core.MethodParameter,boolean,boolean)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getInterfaceMethodIfPossible(java.lang.reflect.Method)>-><java.lang.reflect.Method: int getModifiers()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1: java.util.stream.Node reduce(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes: java.util.stream.Node node(java.util.Collection)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.font.EAttribute: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$2: java.util.Spliterator trySplit()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.lang.reflect.Parameter: int hashCode()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$EmptySpliterator: java.util.Spliterator trySplit()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.beans.PropertyDescriptor: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.security.CodeSigner: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.lang.reflect.Method: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void initMaps(java.lang.Class,com.sun.jmx.mbeanserver.MBeanIntrospector)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.Byte: boolean equals(java.lang.Object)>
<org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>-><org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><java.text.DateFormat: int hashCode()>
<java.util.HashMap: int hash(java.lang.Object)>-><java.lang.reflect.Parameter: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.time.format.DateTimePrintContext: java.time.temporal.TemporalAccessor adjust(java.time.temporal.TemporalAccessor,java.time.format.DateTimeFormatter)>-><java.time.ZoneOffset: java.time.zone.ZoneRules getRules()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeAwareMethods(java.lang.String,java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster: void setBeanClassLoader(java.lang.ClassLoader)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: int characteristics()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.SpelNodeImpl: void generateCodeForArguments(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow,java.lang.reflect.Member,org.springframework.expression.spel.ast.SpelNodeImpl[])>-><java.lang.reflect.Method: boolean isVarArgs()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.Nodes$IntFixedNodeBuilder: void begin(long)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: void initPartialTraversalState()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.beans.factory.config.DependencyDescriptor: boolean equals(java.lang.Object)>
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource getResource(java.lang.String)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource getResource(java.lang.String)>
<org.springframework.context.support.AbstractApplicationContext: boolean isSingleton(java.lang.String)>-><org.springframework.context.support.AbstractApplicationContext: void assertBeanFactoryActive()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.WeakHashMap$EntrySpliterator: int characteristics()>
<org.springframework.core.MethodParameter: java.lang.Class getNestedParameterType()>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.reflect.Type getRawType()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Hashtable: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.beans.factory.config.BeanExpressionContext: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<java.util.Spliterator: boolean hasCharacteristics(int)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>
<org.springframework.cglib.core.ReflectUtils: org.springframework.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)>-><java.lang.reflect.Method: int getModifiers()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.util.ReflectionUtils: boolean isHashCodeMethod(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long getExactSizeIfKnown()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long getExactSizeIfKnown()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.TreeMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.TreeMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.ZonedDateTime: boolean equals(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: java.util.Spliterator trySplit()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><java.lang.reflect.Constructor: int hashCode()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getInterfaceMethodIfPossible(java.lang.reflect.Method)>-><java.lang.Class: boolean isInterface()>
<java.util.stream.DistinctOps$1$2: void end()>-><java.util.stream.Nodes$FixedNodeBuilder: void end()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<org.springframework.core.SerializableTypeWrapper$MethodParameterTypeProvider: void <init>(org.springframework.core.MethodParameter)>-><java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.SortedOps$SizedRefSortingSink: void begin(long)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<java.util.AbstractMap: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.AbstractMap: java.lang.String toString()>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator get()>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: boolean isCompilable()>-><java.lang.Class: int getModifiers()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.text.StringCharacterIterator: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$1Splitr: java.util.Spliterator trySplit()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.LocalDateTime: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.management.openmbean.ArrayType: boolean equals(java.lang.Object)>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState,java.lang.reflect.Method)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.Spliterators$IteratorSpliterator: int characteristics()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>
<org.apache.catalina.util.ToStringUtil: java.lang.String toString(java.lang.Object,org.apache.catalina.Container)>-><org.apache.catalina.util.ToStringUtil: java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><java.lang.reflect.Parameter: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.core.MethodParameter: java.lang.Class getNestedParameterType()>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>
<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.security.x509.Extension: boolean equals(java.lang.Object)>
<org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean remove(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntrySet: boolean remove(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.TreeMap$KeySpliterator: int characteristics()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.security.x509.AVA: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.stream.Sink$ChainedReference: void end()>-><java.util.stream.DistinctOps$1$2: void end()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long getExactSizeIfKnown()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: long getExactSizeIfKnown()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.IdentityHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><java.lang.reflect.Constructor: int hashCode()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations2(byte[],sun.reflect.ConstantPool,java.lang.Class)>-><java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.String sharedToString(int,boolean,java.lang.Class[],java.lang.Class[])>-><java.lang.reflect.Executable: void printModifiersIfNonzero(java.lang.StringBuilder,int,boolean)>
<javax.security.auth.PrivateCredentialPermission: void <init>(java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<java.lang.reflect.Method: boolean isSynthetic()>-><java.lang.reflect.Executable: boolean isSynthetic()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.core.MethodParameter: java.lang.Class getNestedParameterType()>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.reflect.Type getRawType()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.net.URL: java.lang.String toString()>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.Nodes$SpinedNodeBuilder: void begin(long)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.PathPattern: int compareTo(org.springframework.web.util.pattern.PathPattern)>-><java.util.Comparators$NullComparator: int compare(java.lang.Object,java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.util.TypeKey: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.TreeMap$EntrySpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.boot.ansi.Ansi8BitColor: boolean equals(java.lang.Object)>
<org.springframework.context.support.AbstractRefreshableConfigApplicationContext: void setBeanName(java.lang.String)>-><org.springframework.context.support.AbstractApplicationContext: void setDisplayName(java.lang.String)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>
<sun.reflect.generics.scope.AbstractScope: java.lang.reflect.TypeVariable lookup(java.lang.String)>-><java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.x509.AVA: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.TreeMap$TreeMapSpliterator: long estimateSize()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.core.io.UrlResource: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.awt.Point: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>
<java.lang.reflect.MalformedParametersException: void <init>(java.lang.String)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: boolean equals(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.Spliterators$IntArraySpliterator: int characteristics()>
<java.lang.reflect.Constructor: sun.reflect.generics.factory.GenericsFactory getFactory()>-><sun.reflect.generics.scope.ConstructorScope: sun.reflect.generics.scope.ConstructorScope make(java.lang.reflect.Constructor)>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.OffsetDateTime: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long getExactSizeIfKnown()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long getExactSizeIfKnown()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.Period: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1: java.util.stream.Node reduce(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.ReduceOps: java.util.stream.TerminalOp makeRef(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BiConsumer)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.Sink$ChainedInt: void end()>-><java.util.stream.DistinctOps$1$1: void end()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.beans.IndexedPropertyDescriptor: java.lang.reflect.Method getIndexedWriteMethod()>-><java.lang.Object: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<java.util.IdentityHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.stream.ReferencePipeline$2$1: void begin(long)>-><java.util.stream.ReduceOps$4ReducingSink: void begin(long)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.lang.reflect.Constructor: void specificToStringHeader(java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator trySplit()>
<java.lang.reflect.Executable: java.lang.String sharedToString(int,boolean,java.lang.Class[],java.lang.Class[])>-><java.lang.reflect.Executable: void separateWithCommas(java.lang.Class[],java.lang.StringBuilder)>
<java.lang.reflect.Method: java.lang.String toString()>-><java.lang.reflect.Executable: java.lang.String sharedToString(int,boolean,java.lang.Class[],java.lang.Class[])>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.util.LinkedCaseInsensitiveMap: void clear()>-><java.util.HashMap: void clear()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaProxy: java.lang.String applicable(java.lang.reflect.Method[])>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.ZoneOffset: java.lang.String toString()>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.nio.ByteBuffer: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.SortedOps$SizedRefSortingSink: void end()>-><java.util.stream.DistinctOps$1$2: void end()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.WeakHashMap$KeySpliterator: int characteristics()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: int hashCode()>
<org.springframework.expression.spel.ast.MethodReference: boolean isCompilable()>-><java.lang.Class: int getModifiers()>
<java.util.stream.SpinedBuffer$OfInt$1Splitr: void arrayForOne(int[],int,java.util.function.IntConsumer)>-><java.util.stream.Sink: void accept(int)>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long getExactSizeIfKnown()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.HashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><java.text.DateFormat: int hashCode()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()>-><java.lang.reflect.Constructor: sun.reflect.generics.repository.ConstructorRepository getGenericInfo()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.core.io.FileSystemResource: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.HashMap$Node: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: java.lang.String getFullName()>-><java.lang.Class: java.lang.String getName()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<org.springframework.beans.factory.support.AutowireUtils: boolean isExcludedFromDependencyCheck(java.beans.PropertyDescriptor)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.stream.StreamSpliterators$AbstractWrappingSpliterator wrap(java.util.Spliterator)>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>
<org.springframework.expression.spel.CodeFlow: java.lang.String toJvmDescriptor(java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<ch.qos.logback.core.joran.util.PropertySetter: java.lang.annotation.Annotation getAnnotation(java.lang.String,java.lang.Class,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<org.springframework.beans.factory.support.ConstructorResolver: org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>-><java.lang.reflect.Method: int getModifiers()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><java.lang.reflect.Constructor: int hashCode()>
<java.util.HashMap: int hash(java.lang.Object)>-><java.text.DateFormat: int hashCode()>
<org.thymeleaf.standard.serializer.StandardJavaScriptSerializer$JacksonThymeleafISO8601DateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>-><java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>
<java.lang.reflect.Parameter: java.lang.String toString()>-><java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.reflect.Method findMethodForProperty(java.lang.String[],java.lang.String,java.lang.Class,boolean,int,java.util.Set)>-><java.lang.reflect.Method: int getParameterCount()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$EmptySpliterator: java.util.Spliterator trySplit()>
<ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<ltd.newbee.mall.util.PageQueryUtil: void <init>(java.util.Map)>-><java.lang.reflect.Method: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: int characteristics()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><java.lang.reflect.Constructor: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.ibatis.parsing.XNode: java.lang.String toString()>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.String: java.lang.String valueOf(char[])>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<java.util.LinkedHashSet: void <init>(java.util.Collection)>-><java.util.Collections$EmptySet: int size()>
<java.beans.MethodRef: java.lang.reflect.Method get()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.SpinedBuffer$1Splitr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.stream.ForEachOps$ForEachOrderedTask: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,java.util.stream.Sink)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<org.springframework.core.convert.support.ObjectToObjectConverter: java.lang.reflect.Method determineToMethod(java.lang.Class,java.lang.Class)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.management.ImmutableDescriptor: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.util.MultiValueMapAdapter: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean equals(java.lang.Object)>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String removeCaseInsensitiveKey(java.lang.String)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.TreeSet: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getAllGenericParameterTypes()>-><java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.IdentityHashMap$KeySpliterator: int characteristics()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.catalina.core.ContainerBase: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.format.DecimalStyle: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.ReferencePipeline$2$1: void begin(long)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><org.apache.catalina.session.StandardSession$PrivilegedNewSessionFacade: java.lang.Object run()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.LinkedList$LLSpliterator: java.util.Spliterator trySplit()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><java.text.DateFormat: int hashCode()>
<org.apache.ibatis.parsing.XNode: void toString(java.lang.StringBuilder,int)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.ConstructorResolver: org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: long estimateSize()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.Sink$ChainedReference: void begin(long)>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<org.springframework.beans.factory.support.ConstructorResolver: org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.lang.reflect.Executable: void separateWithCommas(java.lang.Class[],java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.reflect.Executable: java.lang.annotation.Annotation[][] parseParameterAnnotations(byte[])>-><sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations(byte[],sun.reflect.ConstantPool,java.lang.Class)>
<org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.naming.NamingException: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.apache.catalina.util.ToStringUtil: java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.cglib.core.MethodInfo: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.HashMap$EntrySpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.HashMap$ValueSpliterator: int characteristics()>
<org.springframework.expression.spel.ast.Indexer$PropertyIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.ComparableTimSort: void binarySort(java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<sun.util.locale.LocaleUtils: boolean isEmpty(java.util.Set)>-><java.util.AbstractCollection: boolean isEmpty()>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String access$000(org.springframework.util.LinkedCaseInsensitiveMap,java.lang.String)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.core.MethodParameter: java.lang.annotation.Annotation[] getParameterAnnotations()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getAllGenericParameterTypes()>-><java.lang.reflect.Executable: boolean hasRealParameterData()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: long estimateSize()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] synthesizeAllParams()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()>-><java.lang.reflect.Method: sun.reflect.generics.repository.ConstructorRepository getGenericInfo()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.net.SocketPermission: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><ch.qos.logback.core.subst.Node: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.TreeMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.core.StandardReflectionParameterNameDiscoverer: java.lang.String[] getParameterNames(java.lang.reflect.Method)>-><java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters()>
<org.springframework.cglib.core.RejectModifierPredicate: boolean evaluate(java.lang.Object)>-><java.lang.reflect.Method: int getModifiers()>
<org.springframework.expression.spel.ast.MethodReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.Class: java.lang.String getName()>
<javax.management.MBeanAttributeInfo: boolean isIs(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.security.MessageDigest: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<ltd.newbee.mall.entity.Carousel: java.lang.String toString()>-><java.lang.Object: int hashCode()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<java.util.stream.Nodes$CollectionNode: java.util.Spliterator spliterator()>-><java.util.stream.AbstractPipeline: java.util.Spliterator spliterator()>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.security.UnresolvedPermission: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: boolean doAdvance()>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: void initPartialTraversalState()>
<org.apache.catalina.core.ContainerBase: java.lang.String toString()>-><org.apache.catalina.core.ContainerBase: org.apache.catalina.Container getParent()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MXBeanIntrospector: javax.management.MBeanOperationInfo getMBeanOperationInfo(java.lang.String,com.sun.jmx.mbeanserver.ConvertingMethod)>-><java.lang.reflect.Method: java.lang.annotation.Annotation[][] getParameterAnnotations()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.SortedOps$SizedRefSortingSink: void end()>-><java.util.stream.DistinctOps$1$1: void end()>
<java.beans.PropertyDescriptor: void setReadMethod(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.springframework.beans.MutablePropertyValues: org.springframework.beans.PropertyValue mergeIfRequired(org.springframework.beans.PropertyValue,org.springframework.beans.PropertyValue)>-><org.springframework.beans.factory.support.ManagedList: boolean isMergeEnabled()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>-><java.lang.reflect.Method: sun.reflect.generics.repository.MethodRepository getGenericInfo()>
<org.springframework.cglib.core.ReflectUtils: org.springframework.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)>-><java.lang.reflect.Constructor: int getModifiers()>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.util.MultiValueMapAdapter: int size()>-><java.util.Collections$UnmodifiableMap: int size()>
<java.lang.reflect.Method: sun.reflect.generics.factory.GenericsFactory getFactory()>-><sun.reflect.generics.factory.CoreReflectionFactory: sun.reflect.generics.factory.CoreReflectionFactory make(java.lang.reflect.GenericDeclaration,sun.reflect.generics.scope.Scope)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.stream.SpinedBuffer$1Splitr: long estimateSize()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.String sharedToString(int,boolean,java.lang.Class[],java.lang.Class[])>-><java.lang.reflect.Method: void specificToStringHeader(java.lang.StringBuilder)>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: void forEachRemaining(java.util.function.IntConsumer)>-><java.util.stream.AbstractPipeline: java.util.stream.Sink wrapAndCopyInto(java.util.stream.Sink,java.util.Spliterator)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.lang.reflect.Parameter: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.stream.SpinedBuffer$OfPrimitive: int chunkFor(long)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.management.MBeanInfo: boolean equals(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Class getType(java.lang.String)>-><org.springframework.context.support.AbstractApplicationContext: void assertBeanFactoryActive()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer$MethodOrder: int compare(java.lang.reflect.Method,java.lang.reflect.Method)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.util.MultiValueMapAdapter: java.util.Collection values()>-><java.util.Collections$UnmodifiableMap: java.util.Collection values()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.HashMap$HashMapSpliterator: long estimateSize()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void initMaps(java.lang.Class,com.sun.jmx.mbeanserver.MBeanIntrospector)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.util.MultiValueMapAdapter: java.util.List get(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<org.springframework.core.annotation.AnnotationsScanner: boolean hasPlainJavaAnnotationsOnly(java.lang.Object)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: java.util.Spliterator trySplit()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.Class)>-><org.springframework.context.support.AbstractApplicationContext: void assertBeanFactoryActive()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>-><java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getAllGenericParameterTypes()>-><java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
<java.util.HashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.core.AttributeAccessorSupport: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<ltd.newbee.mall.entity.Carousel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.stream.StreamSpliterators$AbstractWrappingSpliterator wrap(java.util.Spliterator)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><java.lang.reflect.Parameter: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.Duration: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.UUID: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.stream.AbstractPipeline: java.util.stream.Sink wrapSink(java.util.stream.Sink)>-><java.util.stream.DistinctOps$1: java.util.stream.Sink opWrapSink(int,java.util.stream.Sink)>
<java.util.Hashtable: java.lang.String toString()>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: void verifyParameters(java.lang.reflect.Parameter[])>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.LocalDate: java.lang.String toString()>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: boolean isCompilable()>-><java.lang.reflect.Method: int getModifiers()>
<org.springframework.core.MethodParameter: java.lang.annotation.Annotation[] getParameterAnnotations()>-><java.lang.reflect.Method: int getParameterCount()>
<org.springframework.util.ReflectionUtils: boolean isEqualsMethod(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.context.expression.StandardBeanExpressionResolver: java.lang.Object evaluate(java.lang.String,org.springframework.beans.factory.config.BeanExpressionContext)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.YearMonth: boolean equals(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.lang.reflect.Executable: void verifyParameters(java.lang.reflect.Parameter[])>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.web.method.ControllerAdviceBean: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<org.springframework.cglib.proxy.BridgeMethodResolver$BridgedFinder: org.springframework.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean remove(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void <init>(java.util.Spliterator)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void <init>(java.util.Spliterator,java.util.concurrent.ConcurrentHashMap)>
<org.springframework.util.MultiValueMapAdapter: boolean containsKey(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean containsKey(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<sun.util.locale.provider.LocaleProviderAdapter: boolean isSupportedLocale(java.util.Locale,sun.util.locale.provider.LocaleProviderAdapter$Type,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.ZoneId: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DelegatingSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.util.unit.DataSize: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: int characteristics()>
<org.springframework.core.SerializableTypeWrapper$MethodParameterTypeProvider: void <init>(org.springframework.core.MethodParameter)>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<ch.qos.logback.core.util.EnvUtil: boolean isJaninoAvailable()>-><java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.stream.Sink: void accept(int)>
<java.lang.reflect.Method: boolean isDefault()>-><java.lang.reflect.Method: int getModifiers()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.ibatis.type.TypeReference: java.lang.String toString()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<ltd.newbee.mall.util.PageQueryUtil: void <init>(java.util.Map)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState,java.lang.reflect.Method)>-><java.lang.reflect.Method: int getParameterCount()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<java.lang.reflect.Executable: void printModifiersIfNonzero(java.lang.StringBuilder,int,boolean)>-><java.lang.reflect.Method: int getModifiers()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.Year: boolean equals(java.lang.Object)>
<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.lang.String[] doGetParameterNames(java.lang.reflect.Executable)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.stream.ReduceOps: java.util.stream.TerminalOp makeRef(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BiConsumer)>-><java.util.stream.ReduceOps$4: void <init>(java.util.stream.StreamShape,java.util.function.BiConsumer,java.util.function.BiConsumer,java.util.function.Supplier)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.WeakHashMap$ValueSpliterator: int characteristics()>
<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState,java.lang.reflect.Method)>-><java.lang.reflect.Method: boolean isVarArgs()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<org.springframework.beans.factory.config.DependencyDescriptor: void <init>(org.springframework.core.MethodParameter,boolean,boolean)>-><java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeIndexedArgumentValue(java.lang.Integer,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedMap: boolean isMergeEnabled()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.management.MBeanOperationInfo: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.String applicable(java.lang.reflect.Method[])>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<org.springframework.core.MethodParameter: java.lang.reflect.Type getGenericParameterType()>-><java.lang.reflect.Constructor: int getParameterCount()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfInt: void accept(int)>
<java.util.stream.StreamSpliterators$DelegatingSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator get()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<java.util.Collections$SetFromMap: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean isEmpty()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.x509.Extension: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long getExactSizeIfKnown()>-><java.util.Spliterator: long getExactSizeIfKnown()>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.annotation.Annotation[][] parseParameterAnnotations(byte[])>-><java.lang.System$2: sun.reflect.ConstantPool getConstantPool(java.lang.Class)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.nio.ByteBuffer: java.lang.String toString()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.awt.image.ColorModel: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.Spliterators$IteratorSpliterator: long estimateSize()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<java.lang.reflect.Parameter: java.lang.String toString()>-><java.lang.reflect.Parameter: boolean isVarArgs()>
<org.springframework.util.ObjectUtils: java.lang.Object unwrapOptional(java.lang.Object)>-><java.util.Optional: boolean isPresent()>
<ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<java.util.HashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.ReduceOps$ReduceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.ReduceOps$4ReducingSink: void combine(java.util.stream.ReduceOps$AccumulatingSink)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeAwareMethods(java.lang.String,java.lang.Object)>-><org.springframework.web.filter.GenericFilterBean: void setBeanName(java.lang.String)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: void init()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.EnumMap: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.TreeMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.AbstractSet: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.beans.BeanMetadataAttribute: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.String: java.lang.String valueOf(char[])>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: int characteristics()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.Character: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.lang.reflect.Constructor: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.lang.reflect.Executable: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.io.File: java.lang.String toString()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.ReduceOps: java.util.stream.TerminalOp makeRef(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BiConsumer)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.DistinctOps$1$2: void begin(long)>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.context.support.AbstractRefreshableConfigApplicationContext: void afterPropertiesSet()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.stream.Sink$ChainedReference: void begin(long)>-><java.util.stream.DistinctOps$1$1: void begin(long)>
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations2(byte[],sun.reflect.ConstantPool,java.lang.Class)>-><java.nio.HeapByteBuffer: short getShort()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: boolean doAdvance()>-><java.util.stream.ReduceOps$4ReducingSink: void begin(long)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.lang.reflect.Executable: java.util.Map declaredAnnotations()>-><sun.misc.SharedSecrets: sun.misc.JavaLangAccess getJavaLangAccess()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.HashMap$HashMapSpliterator: long estimateSize()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.context.support.ApplicationListenerDetector: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.ReduceOps$2ReducingSink: void begin(long)>
<java.lang.reflect.Constructor: void specificToStringHeader(java.lang.StringBuilder)>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.String typeName(java.lang.reflect.Type)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.reflect.Type getRawType()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.stream.SortedOps$RefSortingSink: void end()>-><java.util.stream.DistinctOps$1$1: void end()>
<java.lang.reflect.Executable: java.lang.annotation.Annotation[][] sharedGetParameterAnnotations(java.lang.Class[],byte[])>-><java.lang.reflect.Constructor: void handleParameterNumberMismatch(int,int)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ltd.newbee.mall.entity.NewBeeMallOrderItem: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>-><java.lang.Object: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(org.springframework.web.util.pattern.PathPattern)>
<org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String access$000(org.springframework.util.LinkedCaseInsensitiveMap,java.lang.String)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: java.util.Spliterator trySplit()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.lang.reflect.Method: int hashCode()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Executable: java.lang.annotation.Annotation[][] parseParameterAnnotations(byte[])>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.util.ReflectionUtils: boolean isHashCodeMethod(java.lang.reflect.Method)>-><java.lang.reflect.Method: int getParameterCount()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.WeakHashMap$WeakHashMapSpliterator: long estimateSize()>
<java.util.stream.DistinctOps$1$1: void end()>-><java.util.stream.SortedOps$SizedRefSortingSink: void end()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.ibatis.mapping.ResultMapping: java.lang.String toString()>
<org.springframework.expression.spel.ast.Indexer: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.springframework.format.datetime.standard.DateTimeFormatterFactory: void setStylePattern(java.lang.String)>-><java.lang.String: char charAt(int)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeAwareMethods(java.lang.String,java.lang.Object)>-><org.springframework.context.weaving.LoadTimeWeaverAwareProcessor: void setBeanFactory(org.springframework.beans.factory.BeanFactory)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.lang.reflect.Method: int hashCode()>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.text.ParsePosition: java.lang.String toString()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: long estimateSize()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.asm.ConstantDynamic: boolean equals(java.lang.Object)>
<java.lang.reflect.Constructor: void specificToStringHeader(java.lang.StringBuilder)>-><java.lang.Class: java.lang.String getTypeName()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.context.i18n.LocaleContextHolder: java.util.Locale getLocale(org.springframework.context.i18n.LocaleContext)>-><org.springframework.context.i18n.SimpleLocaleContext: java.util.Locale getLocale()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Constructor: int hashCode()>
<org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<org.springframework.core.annotation.AnnotationsScanner: boolean isWithoutHierarchy(java.lang.reflect.AnnotatedElement,org.springframework.core.annotation.MergedAnnotations$SearchStrategy)>-><java.lang.reflect.Method: int getModifiers()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>-><java.lang.String: int hashCode()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.TreeSet: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.LinkedList$LLSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeIndexedArgumentValue(java.lang.Integer,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedList: boolean isMergeEnabled()>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.stream.ReduceOps$5ReducingSink: void accept(int)>
<java.lang.reflect.Constructor: void handleParameterNumberMismatch(int,int)>-><java.lang.Class: boolean isEnum()>
<org.springframework.core.MethodParameter: java.lang.reflect.Type getGenericParameterType()>-><java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>
<java.lang.Object: java.lang.String toString()>-><java.lang.reflect.Method: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: void generateCode(java.lang.String,org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.Class: boolean isInterface()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: int characteristics()>
<java.util.stream.DistinctOps$1$1: void end()>-><java.util.stream.Nodes$FixedNodeBuilder: void end()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><java.lang.reflect.Constructor: int hashCode()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer$MethodOrder: int compare(java.lang.reflect.Method,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.zone.ZoneOffsetTransitionRule: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.core.MethodParameter: java.lang.Class getDeclaringClass()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<com.sun.jmx.mbeanserver.Introspector: javax.management.Descriptor descriptorForElement(java.lang.reflect.AnnotatedElement)>-><java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getAnnotations()>
<java.util.stream.SortedOps$SizedRefSortingSink: void end()>-><java.util.stream.ReduceOps$4ReducingSink: void begin(long)>
<org.springframework.beans.factory.support.AutowireUtils: boolean isExcludedFromDependencyCheck(java.beans.PropertyDescriptor)>-><java.lang.Class: java.lang.String getName()>
<org.apache.catalina.util.ToStringUtil: java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)>-><org.apache.catalina.core.ContainerBase: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: java.lang.String toString()>-><org.apache.catalina.core.ContainerBase: java.lang.String getName()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.DistinctOps$1$2: void end()>-><java.util.stream.Nodes$SpinedNodeBuilder: void end()>
<java.lang.reflect.Executable: void printModifiersIfNonzero(java.lang.StringBuilder,int,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.security.x509.RDN: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.Parsed: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanFactory: void afterPrototypeCreation(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: void init()>
<org.apache.catalina.util.ToStringUtil: java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: void <init>(java.lang.String)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$PatternDecoratingFormatter: java.util.Currency determineCurrency(java.lang.String,java.util.Locale)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.Nodes$FixedNodeBuilder: void begin(long)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.security.x509.GeneralName: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntArraySpliterator: java.util.Spliterator trySplit()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.OffsetDateTime: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters()>-><java.lang.reflect.Executable: java.lang.reflect.Parameter[] privateGetParameters()>
<org.springframework.expression.spel.ast.MethodReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.Class: int getModifiers()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.SortedOps$SizedRefSortingSink: void end()>-><java.util.stream.DistinctOps$1$2: void begin(long)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void end()>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void end()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<org.springframework.beans.CachedIntrospectionResults: boolean isClassLoaderAccepted(java.lang.ClassLoader)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<org.springframework.format.datetime.DateFormatter: int getStylePatternForChar(int)>-><java.lang.String: char charAt(int)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.core.io.AbstractResource: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>-><java.lang.reflect.Constructor: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.util.stream.DistinctOps$1$2: void end()>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void end()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>
<java.beans.FeatureDescriptor: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<org.springframework.aop.framework.CglibAopProxy: void doValidateClass(java.lang.Class,java.lang.ClassLoader,java.util.Set)>-><java.lang.reflect.Method: int getModifiers()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><java.lang.reflect.Method: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: java.util.Spliterator spliterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Spliterator spliterator()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.IdentityHashMap: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.beans.factory.support.RootBeanDefinition: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1: java.util.stream.Sink opWrapSink(int,java.util.stream.Sink)>-><java.util.stream.DistinctOps$1$2: void <init>(java.util.stream.DistinctOps$1,java.util.stream.Sink)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.Vector$VectorSpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.Spliterators$EmptySpliterator: long estimateSize()>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.HashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.AbstractMap: java.lang.String toString()>-><java.text.AttributeEntry: java.lang.Object getKey()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.format.support.FormattingConversionService: void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.stream.SortedOps$RefSortingSink: void end()>-><java.util.stream.ReduceOps$4ReducingSink: void begin(long)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.Sink$ChainedReference: void end()>-><java.util.stream.DistinctOps$1$1: void end()>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.core.convert.support.IdToEntityConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.lang.reflect.Parameter: boolean isVarArgs()>-><java.lang.reflect.Method: int getParameterCount()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.reflect.annotation.AnnotationType: void <init>(java.lang.Class)>-><java.lang.reflect.Method: java.lang.Object getDefaultValue()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><java.lang.reflect.Parameter: int hashCode()>
<java.lang.reflect.Method: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.BitSet: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.jsontype.NamedType: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.AbstractPipeline: java.util.Spliterator wrapSpliterator(java.util.Spliterator)>-><java.util.stream.AbstractPipeline: boolean isParallel()>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>-><java.lang.Object: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<java.lang.reflect.Method: sun.reflect.generics.repository.MethodRepository getGenericInfo()>-><java.lang.reflect.Method: java.lang.String getGenericSignature()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.AbstractMap: java.lang.String toString()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<org.springframework.core.type.StandardAnnotationMetadata: boolean isAnnotatedMethod(java.lang.reflect.Method,java.lang.String)>-><java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getAnnotations()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.Spliterators$ArraySpliterator: long estimateSize()>
<java.lang.reflect.Executable: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.factory.support.DisposableBeanAdapter: void <init>(java.lang.Object,java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.util.List,java.security.AccessControlContext)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.ArrayList$ArrayListSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.Spliterators$IntArraySpliterator: int characteristics()>
<java.beans.Introspector: java.lang.reflect.Method internalFindMethod(java.lang.Class,java.lang.String,int,java.lang.Class[])>-><java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.MonthDay: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: int hashCode()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.management.MBeanConstructorInfo: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getAllGenericParameterTypes()>-><java.lang.reflect.Parameter: boolean isSynthetic()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<ltd.newbee.mall.entity.Carousel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.ZonedDateTime: java.lang.String toString()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.String: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.lang.reflect.Constructor: boolean equals(java.lang.Object)>-><java.lang.reflect.Executable: boolean equalParamTypes(java.lang.Class[],java.lang.Class[])>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.IdentityHashMap$KeySpliterator: int characteristics()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.math.BigDecimal: java.lang.String toString()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.temporal.WeekFields: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource[] getResources(java.lang.String)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource getResource(java.lang.String)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.util.PropertySetter: void addBasicProperty(java.lang.String,java.lang.String)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.net.InetAddress: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Collections$EmptyList: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.lang.reflect.Constructor: int hashCode()>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.String: java.lang.String toString()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.beans.Introspector: java.lang.reflect.Method internalFindMethod(java.lang.Class,java.lang.String,int,java.lang.Class[])>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>-><java.lang.reflect.Method: boolean isBridge()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: long estimateSize()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$KeySpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<sun.reflect.annotation.AnnotationType: void <init>(java.lang.Class)>-><java.lang.reflect.Method: boolean isSynthetic()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.Currency: java.lang.String toString()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: boolean isBridge()>-><java.lang.reflect.Method: int getModifiers()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler: java.lang.Object getValue()>-><java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.AnnotationsScanner: java.lang.annotation.Annotation[] getDeclaredAnnotations(java.lang.reflect.AnnotatedElement,boolean)>-><java.lang.reflect.Parameter: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<org.springframework.core.KotlinReflectionParameterNameDiscoverer: java.lang.String[] getParameterNames(java.lang.reflect.Constructor)>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.text.AttributeEntry: java.lang.String toString()>
<ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.stream.Nodes$IntFixedNodeBuilder: void accept(int)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.lang.reflect.Constructor: sun.reflect.generics.factory.GenericsFactory getFactory()>-><sun.reflect.generics.factory.CoreReflectionFactory: sun.reflect.generics.factory.CoreReflectionFactory make(java.lang.reflect.GenericDeclaration,sun.reflect.generics.scope.Scope)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<java.lang.reflect.Executable: java.lang.annotation.Annotation[][] parseParameterAnnotations(byte[])>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.IntPipeline$9$1: void begin(long)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.Spliterators$IntIteratorSpliterator: int characteristics()>
<java.lang.reflect.Parameter: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.Spliterators$ArraySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<org.springframework.cglib.proxy.Enhancer: void emitMethods(org.springframework.cglib.core.ClassEmitter,java.util.List,java.util.List)>-><java.lang.reflect.Method: int getModifiers()>
<sun.reflect.annotation.AnnotationType: void <init>(java.lang.Class)>-><java.lang.reflect.Method: int getModifiers()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>-><java.util.LinkedHashMap$LinkedHashIterator: void remove()>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.context.annotation.AnnotationBeanNameGenerator: boolean isStereotypeWithNameValue(java.lang.String,java.util.Set,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<java.util.stream.AbstractPipeline: java.util.Spliterator sourceSpliterator(int)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean hasCharacteristics(int)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.net.URI: java.lang.String toString()>
<ltd.newbee.mall.util.PageQueryUtil: void <init>(java.util.Map)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.lang.reflect.Executable: java.lang.String sharedToString(int,boolean,java.lang.Class[],java.lang.Class[])>-><java.lang.reflect.Constructor: void specificToStringHeader(java.lang.StringBuilder)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.PatternParseException$PatternMessage: java.lang.String formatMessage(java.lang.Object[])>-><java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.apache.logging.log4j.Level: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><ch.qos.logback.core.joran.spi.ElementSelector: boolean equals(java.lang.Object)>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object remove(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.stream.Sink$ChainedReference: void begin(long)>-><java.util.stream.DistinctOps$1$2: void begin(long)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.zone.ZoneRules: boolean equals(java.lang.Object)>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.util.ReflectionUtils: boolean isEqualsMethod(java.lang.reflect.Method)>-><java.lang.reflect.Method: int getParameterCount()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.lang.reflect.Method: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.management.openmbean.TabularType: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.security.CodeSource: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.Nodes$IntFixedNodeBuilder: void begin(long)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void accept(java.lang.Object)>
<java.util.stream.Sink$ChainedReference: void begin(long)>-><java.util.stream.ReduceOps$4ReducingSink: void begin(long)>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<java.time.ZoneId: java.time.ZoneId normalized()>-><java.time.ZoneRegion: java.time.zone.ZoneRules getRules()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.Byte: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.ReduceOps$5ReducingSink: void begin(long)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.util.PropertySetter: java.lang.Class getParameterClassForMethod(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Optional: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeIndexedArgumentValue(java.lang.Integer,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedList: java.lang.Object merge(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.cglib.core.ClassInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()>-><java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>-><java.lang.Class: int getModifiers()>
<java.util.AbstractMap: java.lang.String toString()>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: void forEachRemaining(java.util.function.IntConsumer)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.ReduceOps$3ReducingSink: void begin(long)>
<org.springframework.core.convert.Property: java.lang.String resolveName()>-><java.lang.String: int indexOf(java.lang.String)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getAnnotations()>-><java.lang.reflect.Method: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.time.format.DateTimePrintContext: java.time.temporal.TemporalAccessor adjust(java.time.temporal.TemporalAccessor,java.time.format.DateTimeFormatter)>-><java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.Instant)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
<java.util.TreeMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: java.lang.String getPath()>
<java.lang.reflect.Constructor: sun.reflect.generics.repository.ConstructorRepository getGenericInfo()>-><java.lang.reflect.Constructor: sun.reflect.generics.factory.GenericsFactory getFactory()>
<com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<org.springframework.format.datetime.DateFormatter: int getStylePatternForChar(int)>-><java.lang.String: int length()>
<java.util.stream.SpinedBuffer$OfPrimitive: int chunkFor(long)>-><java.lang.Long: java.lang.String toString(long)>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.DistinctOps$1$1: void begin(long)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.DateFormat: int hashCode()>
<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>-><java.lang.reflect.Constructor: java.lang.String getSignature()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<java.util.TreeMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.lang.reflect.Parameter: java.lang.String toString()>-><java.lang.reflect.Type: java.lang.String getTypeName()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.core.MethodParameter: java.lang.reflect.Type getGenericParameterType()>-><java.lang.reflect.Method: int getParameterCount()>
<com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.String typeName(java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>
<java.lang.reflect.Executable: boolean hasRealParameterData()>-><java.lang.reflect.Executable: java.lang.reflect.Parameter[] privateGetParameters()>
<java.beans.PropertyDescriptor: java.lang.Class findPropertyType(java.lang.reflect.Method,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String access$000(org.springframework.util.LinkedCaseInsensitiveMap,java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String removeCaseInsensitiveKey(java.lang.String)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<org.springframework.core.MethodParameter: java.lang.annotation.Annotation[] getParameterAnnotations()>-><java.lang.reflect.Constructor: int getParameterCount()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><java.lang.reflect.Parameter: int hashCode()>
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations2(byte[],sun.reflect.ConstantPool,java.lang.Class)>-><java.util.ArrayList: void <init>(int)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.reflect.generics.factory.CoreReflectionFactory: java.lang.ClassLoader getDeclsLoader()>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<java.util.stream.DistinctOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void <init>(java.util.Spliterator)>
<org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String getPatternString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.io.FilePermission: boolean equals(java.lang.Object)>
<java.lang.reflect.Constructor: void handleParameterNumberMismatch(int,int)>-><java.lang.Class: boolean isAnonymousClass()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: void initPartialTraversalState()>-><java.util.stream.AbstractPipeline: java.util.stream.Sink wrapSink(java.util.stream.Sink)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Method: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$PatternDecoratingFormatter: java.util.Currency determineCurrency(java.lang.String,java.util.Locale)>-><java.lang.String: boolean endsWith(java.lang.String)>
<org.springframework.core.annotation.AnnotationsScanner: java.lang.annotation.Annotation[] getDeclaredAnnotations(java.lang.reflect.AnnotatedElement,boolean)>-><java.lang.reflect.Constructor: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String convertKey(java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><java.lang.reflect.Parameter: int hashCode()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.ConstructorResolver: java.lang.Object[] resolvePreparedArguments(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.BeanWrapper,java.lang.reflect.Executable,java.lang.Object[])>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.Spliterators$ArraySpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$2: java.util.Spliterator trySplit()>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: void generateCode(java.lang.String,org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.reflect.Method: int getModifiers()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.WeakHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.Spliterators$IntIteratorSpliterator: long estimateSize()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.security.PermissionCollection: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: void init()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: int hashCode()>
<org.springframework.http.HttpHeaders: java.util.Set entrySet()>-><org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.net.SocketImpl: java.lang.String toString()>
<java.util.HashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.HashSet: void <init>()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DelegatingSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator get()>
<java.lang.reflect.Executable: void printModifiersIfNonzero(java.lang.StringBuilder,int,boolean)>-><java.lang.reflect.Modifier: java.lang.String toString(int)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.lang.reflect.Constructor: java.lang.String toString()>-><java.lang.reflect.Modifier: int constructorModifiers()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.core.MethodParameter: java.lang.Class getDeclaringClass()>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<java.beans.PropertyDescriptor: void setReadMethod(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator trySplit()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long getExactSizeIfKnown()>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.cglib.core.MethodWrapper: java.lang.Object create(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.util.locale.Extension: java.lang.String toString()>
<java.util.stream.DistinctOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.AbstractPipeline: java.util.Spliterator wrapSpliterator(java.util.Spliterator)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.lang.reflect.Parameter: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.IdentityHashMap$EntrySpliterator: int characteristics()>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.Nodes$SizedCollectorTask: void begin(long)>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.management.openmbean.CompositeType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeAwareMethods(java.lang.String,java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster: void setBeanFactory(org.springframework.beans.factory.BeanFactory)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.ArrayList$ArrayListSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.text.DateFormat: int hashCode()>
<org.springframework.beans.CachedIntrospectionResults: void <init>(java.lang.Class)>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.OffsetTime: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long getExactSizeIfKnown()>-><java.util.stream.StreamOpFlag: boolean isKnown(int)>
<org.springframework.core.MethodParameter: java.lang.Class computeParameterType()>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<ch.qos.logback.core.joran.util.PropertySetter: void setProperty(java.lang.reflect.Method,java.lang.String,java.lang.String)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><java.lang.reflect.Method: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.Integer: java.lang.String toString()>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.awt.AppContext: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: boolean isConditionMatch(org.springframework.core.type.classreading.MetadataReader)>-><org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String resolveEmbeddedValue(java.lang.String)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.util.MultiValueMapAdapter: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.beans.factory.config.BeanExpressionContext: org.springframework.beans.factory.config.ConfigurableBeanFactory getBeanFactory()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$StreamBuilderImpl: void forEachRemaining(java.util.function.Consumer)>
<java.util.HashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: int characteristics()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Class getTypeForFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaSetters: java.lang.String applicable(java.lang.reflect.Method[])>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(org.springframework.core.annotation.TypeMappedAnnotations$Aggregate,java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.beans.PropertyDescriptor: boolean compareMethods(java.lang.reflect.Method,java.lang.reflect.Method)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.Spliterators$IteratorSpliterator: long estimateSize()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><java.lang.reflect.Constructor: int hashCode()>
<java.util.AbstractMap: java.lang.String toString()>-><java.text.AttributeEntry: java.lang.Object getValue()>
<java.lang.reflect.Executable: java.util.Map declaredAnnotations()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.io.File: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: boolean isSynthetic()>-><java.lang.reflect.Modifier: boolean isSynthetic(int)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.String,java.lang.Object[])>-><org.springframework.context.support.AbstractApplicationContext: void assertBeanFactoryActive()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><java.lang.reflect.Method: int hashCode()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void initMaps(java.lang.Class,com.sun.jmx.mbeanserver.MBeanIntrospector)>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.nio.charset.Charset: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.lang.reflect.Executable: java.util.Map declaredAnnotations()>-><java.lang.System$2: sun.reflect.ConstantPool getConstantPool(java.lang.Class)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: void <init>(java.lang.reflect.Method)>-><java.lang.reflect.Method: int hashCode()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.Sink$ChainedInt: void begin(long)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.web.filter.GenericFilterBean: void setEnvironment(org.springframework.core.env.Environment)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.LinkedList$LLSpliterator: java.util.Spliterator trySplit()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<java.util.stream.SortedOps$SizedRefSortingSink: void end()>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.ReduceOps$2ReducingSink: void begin(long)>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: boolean doAdvance()>-><java.util.stream.DistinctOps$1$1: void begin(long)>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: boolean doAdvance()>
<java.util.stream.IntPipeline$9$1: void begin(long)>-><java.util.stream.ReduceOps$4ReducingSink: void begin(long)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Method: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: java.lang.String getPath()>
<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>-><java.lang.reflect.Method: java.lang.String getGenericSignature()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.ReflectiveMethodResolver: org.springframework.expression.MethodExecutor resolve(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String,java.util.List)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.Spliterators$ArraySpliterator: long estimateSize()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.stream.IntPipeline$9$1: void accept(int)>
<org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.HashMap$KeySpliterator: int characteristics()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.MethodReference: void updateExitTypeDescriptor()>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><java.lang.reflect.Method: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanFactory: void afterPrototypeCreation(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean remove(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.Class[] getRawParameterTypes()>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: void forEachRemaining(java.util.function.IntConsumer)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.Instant: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><java.lang.reflect.Method: int hashCode()>
<java.util.AbstractMap: java.lang.String toString()>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$ArraySpliterator: java.util.Spliterator trySplit()>
<ch.qos.logback.core.joran.util.beans.BeanDescriptionFactory: ch.qos.logback.core.joran.util.beans.BeanDescription create(java.lang.Class)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.String typeName(java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.reflect.Type getRawType()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><java.lang.reflect.Method: java.lang.String toString()>
<ch.qos.logback.core.joran.util.PropertySetter: void addComplexProperty(java.lang.String,java.lang.Object)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<java.beans.FeatureDescriptor: java.lang.Class getReturnType(java.lang.Class,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<ltd.newbee.mall.entity.Carousel: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.IdentityHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<sun.util.locale.provider.CalendarNameProviderImpl: boolean isSupportedLocale(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.security.CodeSource: java.lang.String toString()>
<java.lang.reflect.Parameter: boolean isVarArgs()>-><java.lang.reflect.Constructor: boolean isVarArgs()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<java.util.stream.SpinedBuffer$OfInt: int get(long)>-><java.util.stream.SpinedBuffer$OfPrimitive: int chunkFor(long)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.jar.Manifest: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$CollectionNode: java.util.Spliterator spliterator()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><java.lang.reflect.Parameter: int hashCode()>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.Spliterator trySplit()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: void forEachRemaining(java.util.function.IntConsumer)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: void init()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.security.BasicPermission: boolean equals(java.lang.Object)>
<org.springframework.core.MethodParameter: java.lang.reflect.Type getGenericParameterType()>-><java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.lang.reflect.Constructor: int hashCode()>
<java.lang.reflect.Parameter: boolean isSynthetic()>-><java.lang.reflect.Modifier: boolean isSynthetic(int)>
<org.springframework.beans.factory.support.DisposableBeanAdapter: void <init>(java.lang.Object,java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.util.List,java.security.AccessControlContext)>-><java.lang.reflect.Method: int getParameterCount()>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.stream.ReferencePipeline$2$1: void begin(long)>-><java.util.stream.DistinctOps$1$2: void begin(long)>
<org.springframework.beans.MutablePropertyValues: org.springframework.beans.PropertyValue mergeIfRequired(org.springframework.beans.PropertyValue,org.springframework.beans.PropertyValue)>-><org.springframework.beans.factory.support.ManagedList: java.lang.Object merge(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.LocalDateTime: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.TreeMap$ValueSpliterator: int characteristics()>
<java.util.stream.SortedOps$RefSortingSink: void end()>-><java.util.stream.DistinctOps$1$2: void end()>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.apache.catalina.core.ContainerBase: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<java.util.TreeMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void end()>-><java.util.stream.Sink: void end()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.SortedOps$RefSortingSink: void begin(long)>
<org.springframework.web.util.pattern.PathPattern: int hashCode()>-><org.springframework.web.util.pattern.PathPattern: char getSeparator()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><java.text.DateFormat: int hashCode()>
<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>-><java.lang.reflect.Method: sun.reflect.generics.repository.MethodRepository getGenericInfo()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<java.util.Collections$SetFromMap: boolean contains(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean containsKey(java.lang.Object)>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.KotlinReflectionParameterNameDiscoverer: java.lang.String[] getParameterNames(java.lang.reflect.Constructor)>-><java.lang.Class: boolean isEnum()>
<org.springframework.cglib.proxy.Enhancer$2: java.lang.Object transform(java.lang.Object)>-><java.lang.reflect.Method: int getModifiers()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.security.ProtectionDomain: java.lang.String toString()>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.reflect.Constructor: void handleParameterNumberMismatch(int,int)>-><java.lang.Class: boolean isMemberClass()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.text.DateFormat: int hashCode()>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState,java.lang.reflect.Method)>-><java.lang.reflect.Method: int getModifiers()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.Streams$StreamBuilderImpl: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void <init>(java.util.stream.DistinctOps$1,java.util.stream.Sink)>-><java.util.stream.Sink$ChainedReference: void <init>(java.util.stream.Sink)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<javax.security.auth.PrivateCredentialPermission: void <init>(java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations2(byte[],sun.reflect.ConstantPool,java.lang.Class)>-><java.nio.HeapByteBuffer: byte get()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer$MethodOrder: int compare(java.lang.reflect.Method,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.SortedOps$RefSortingSink: void begin(long)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>-><org.springframework.util.LinkedCaseInsensitiveMap: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.Sink: void begin(long)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.ArrayList$ArrayListSpliterator: int characteristics()>
<java.util.Collections$SynchronizedCollection: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Constructor: int hashCode()>
<ltd.newbee.mall.entity.Carousel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void end()>-><java.util.stream.SortedOps$RefSortingSink: void end()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>-><java.lang.Object: boolean equals(java.lang.Object)>
<ltd.newbee.mall.util.PageQueryUtil: void <init>(java.util.Map)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.Spliterator trySplit()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.io.ObjectStreamField: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.text.AttributeEntry: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<org.springframework.context.support.AbstractRefreshableConfigApplicationContext: void setBeanName(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.Optional: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: void forEachRemaining(java.util.function.IntConsumer)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<com.sun.jmx.mbeanserver.StandardMBeanIntrospector: java.lang.String[] getSignature(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><java.lang.reflect.Method: java.lang.String toString()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.Collection: java.util.stream.Stream stream()>
<sun.reflect.generics.scope.AbstractScope: java.lang.reflect.TypeVariable lookup(java.lang.String)>-><java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>
<org.springframework.core.convert.Property: java.lang.String resolveName()>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.text.ParsePosition: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.Boolean: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Vector: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.regex.Pattern: java.lang.String toString()>
<ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.util.MultiValueMapAdapter: java.util.List get(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.web.context.support.ServletContextResource: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.util.Map declaredAnnotations()>-><java.lang.reflect.Constructor: java.lang.reflect.Executable getRoot()>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getAllGenericParameterTypes()>-><java.lang.reflect.Method: boolean hasGenericInformation()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: boolean doAdvance()>-><java.util.stream.SpinedBuffer$OfPrimitive: void clear()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.LocalTime: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.beans.factory.support.NullBean: boolean equals(java.lang.Object)>
<org.apache.catalina.util.ToStringUtil: java.lang.String toString(org.apache.catalina.Contained)>-><org.apache.catalina.valves.ValveBase: org.apache.catalina.Container getContainer()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String getName()>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.Objects: int hashCode(java.lang.Object)>-><java.text.DateFormat: int hashCode()>
<java.time.ZoneId: java.time.ZoneId normalized()>-><java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.Instant)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<org.springframework.util.MultiValueMapAdapter: void clear()>-><org.springframework.util.LinkedCaseInsensitiveMap: void clear()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.beans.Introspector: java.lang.reflect.Method internalFindMethod(java.lang.Class,java.lang.String,int,java.lang.Class[])>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.lang.reflect.Method: java.lang.annotation.Annotation[][] getParameterAnnotations()>-><java.lang.reflect.Executable: java.lang.annotation.Annotation[][] sharedGetParameterAnnotations(java.lang.Class[],byte[])>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: void specificToStringHeader(java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.DistinctOps$1$1: void begin(long)>
<ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.stream.Streams$StreamBuilderImpl: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getAllGenericParameterTypes()>-><java.lang.reflect.Parameter: boolean isImplicit()>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.Optional: java.lang.Object get()>-><java.util.NoSuchElementException: void <init>(java.lang.String)>
<java.util.Collections$SynchronizedCollection: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$CollectionNode: java.util.Spliterator spliterator()>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: int characteristics()>
<java.util.stream.DistinctOps$1$2: void end()>-><java.util.stream.Sink$ChainedReference: void end()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.asm.Label: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.invoke.MemberName: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<java.lang.reflect.Method: sun.reflect.generics.factory.GenericsFactory getFactory()>-><sun.reflect.generics.scope.MethodScope: sun.reflect.generics.scope.MethodScope make(java.lang.reflect.Method)>
<java.util.stream.DistinctOps$1$2: void end()>-><java.util.stream.SortedOps$RefSortingSink: void end()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.lang.reflect.Constructor: int hashCode()>-><java.lang.Class: java.lang.String getName()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.Double: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><java.lang.reflect.Constructor: int hashCode()>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.ReduceOps$3ReducingSink: void begin(long)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.Spliterators$ArraySpliterator: int characteristics()>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object remove(java.lang.Object)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.Character$Subset: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<org.springframework.core.MethodParameter: java.lang.Class getNestedParameterType()>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>
<org.springframework.beans.factory.support.ConstructorResolver: org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>-><java.lang.reflect.Method: int getParameterCount()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.ReduceOps$4ReducingSink: void begin(long)>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()>-><java.lang.reflect.Method: boolean hasGenericInformation()>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: long estimateSize()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaProxy: java.lang.String applicable(java.lang.reflect.Method[])>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.web.context.support.ServletContextAwareProcessor: java.lang.Object postProcessBeforeInitialization(java.lang.Object,java.lang.String)>-><org.springframework.web.filter.GenericFilterBean: void setServletContext(javax.servlet.ServletContext)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.time.ZoneId: java.time.ZoneId normalized()>-><java.time.ZoneOffset: java.time.zone.ZoneRules getRules()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>-><java.lang.String: int hashCode()>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.StreamOpFlag: int toCharacteristics(int)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void end()>-><java.util.stream.Sink$ChainedInt: void end()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.text.DateFormat: int hashCode()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.expression.spel.support.ReflectiveMethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.io.ObjectStreamClass$3: int compare(java.io.ObjectStreamClass$MemberSignature,java.io.ObjectStreamClass$MemberSignature)>-><java.lang.String: int compareTo(java.lang.String)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: void specificToStringHeader(java.lang.StringBuilder)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: long estimateSize()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><org.springframework.http.HttpHeaders: java.util.Set entrySet()>
<java.util.Collections$SynchronizedCollection: java.util.Spliterator spliterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Spliterator spliterator()>
<java.lang.reflect.Executable: void printModifiersIfNonzero(java.lang.StringBuilder,int,boolean)>-><java.lang.reflect.Constructor: int getModifiers()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.StringJoiner: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>
<java.util.stream.SortedOps$SizedRefSortingSink: void end()>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.lang.reflect.Executable: java.lang.String sharedToString(int,boolean,java.lang.Class[],java.lang.Class[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.SortedOps$RefSortingSink: void end()>-><java.util.stream.DistinctOps$1$2: void begin(long)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] privateGetParameters()>-><java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters0()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean addAll(int,java.util.Collection)>-><java.util.Arrays$ArrayList: java.lang.Object[] toArray()>
<sun.reflect.misc.ReflectUtil: void conservativeCheckMemberAccess(java.lang.reflect.Member)>-><java.lang.Class: int getModifiers()>
<java.util.stream.DistinctOps$1$2: void end()>-><java.util.stream.DistinctOps$1$1: void end()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.util.calendar.Era: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Parameter: int hashCode()>
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters()>-><java.lang.Object: java.lang.Object clone()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.String applicable(java.lang.reflect.Method[])>-><java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.security.Provider$UString: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.core.io.ClassPathResource: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.DistinctOps$1$2: void begin(long)>
<org.springframework.core.annotation.AnnotationsScanner: java.lang.Object processMethod(java.lang.Object,java.lang.reflect.Method,org.springframework.core.annotation.MergedAnnotations$SearchStrategy,org.springframework.core.annotation.AnnotationsProcessor)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.StringBuffer: java.lang.String toString()>
<java.lang.reflect.Method: void specificToStringHeader(java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.beans.IndexedPropertyDescriptor: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.Spliterators$EmptySpliterator: int characteristics()>
<org.springframework.expression.spel.support.ReflectiveMethodResolver: org.springframework.expression.MethodExecutor resolve(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String,java.util.List)>-><java.lang.reflect.Method: int getParameterCount()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.ComparableTimSort: void mergeHi(int,int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.IdToEntityConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.LinkedList$LLSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>-><java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
<org.springframework.core.MethodParameter: java.lang.annotation.Annotation[] getParameterAnnotations()>-><java.lang.reflect.Constructor: java.lang.annotation.Annotation[][] getParameterAnnotations()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$EntrySpliterator: java.util.Spliterator trySplit()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Method: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.util.ReflectionUtils: void doWithMethods(java.lang.Class,org.springframework.util.ReflectionUtils$MethodCallback,org.springframework.util.ReflectionUtils$MethodFilter)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.jar.Attributes: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.stream.DistinctOps$1: java.util.stream.Sink opWrapSink(int,java.util.stream.Sink)>-><java.util.stream.DistinctOps$1$1: void <init>(java.util.stream.DistinctOps$1,java.util.stream.Sink)>
<java.lang.reflect.Parameter: java.lang.String toString()>-><java.lang.reflect.Parameter: java.lang.reflect.Type getParameterizedType()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.text.DigitList: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.core.env.PropertySource: boolean equals(java.lang.Object)>
<java.beans.FeatureDescriptor: java.lang.Class[] getParameterTypes(java.lang.Class,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.security.Provider$Service: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.Spliterators$IntArraySpliterator: long estimateSize()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.stream.ForEachOps$ForEachOp$OfInt: void accept(int)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String removeCaseInsensitiveKey(java.lang.String)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.LocalDate: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$WrappingSpliterator: java.util.stream.StreamSpliterators$AbstractWrappingSpliterator wrap(java.util.Spliterator)>
<org.springframework.core.MethodParameter: java.lang.reflect.Type getGenericParameterType()>-><java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: java.lang.String toString()>-><java.lang.reflect.Method: boolean isDefault()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void initMaps(java.lang.Class,com.sun.jmx.mbeanserver.MBeanIntrospector)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.lang.reflect.Executable: java.lang.String sharedToString(int,boolean,java.lang.Class[],java.lang.Class[])>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.context.annotation.AnnotationBeanNameGenerator: boolean isStereotypeWithNameValue(java.lang.String,java.util.Set,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<java.lang.reflect.Method: boolean isDefault()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.core.MethodParameter: int validateIndex(java.lang.reflect.Executable,int)>-><java.lang.reflect.Method: int getParameterCount()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<javax.management.MBeanOperationInfo: void <init>(java.lang.String,java.lang.reflect.Method)>-><java.lang.Class: java.lang.String getName()>
<java.util.stream.Sink$ChainedInt: void begin(long)>-><java.util.stream.DistinctOps$1$1: void begin(long)>
<java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.stream.SortedOps$RefSortingSink: void end()>-><java.util.stream.DistinctOps$1$1: void begin(long)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.stream.SpinedBuffer$1Splitr: long estimateSize()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.apache.ibatis.cache.decorators.LoggingCache: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntArraySpliterator: java.util.Spliterator trySplit()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.Class getDeclaringClass()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.asm.Type: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.core.MethodParameter: java.lang.annotation.Annotation[] getParameterAnnotations()>-><java.lang.reflect.Method: java.lang.annotation.Annotation[][] getParameterAnnotations()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><java.lang.Throwable: java.lang.String getMessage()>
<org.springframework.util.MultiValueMapAdapter: java.util.Collection values()>-><org.springframework.util.LinkedCaseInsensitiveMap: java.util.Collection values()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: boolean isVarArgs()>-><java.lang.reflect.Method: int getModifiers()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<org.springframework.util.MultiValueMapAdapter: java.util.Set keySet()>-><org.springframework.util.LinkedCaseInsensitiveMap: java.util.Set keySet()>
<java.lang.reflect.Parameter: java.lang.String toString()>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String getTypeName()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.apache.ibatis.parsing.XNode: void toString(java.lang.StringBuilder,int)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.util.MultiValueMapAdapter: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap: int size()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<ch.qos.logback.core.joran.util.PropertySetter: void setComplexProperty(java.lang.String,java.lang.Object)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeIndexedArgumentValue(java.lang.Integer,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.text.FieldPosition: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.cglib.core.ReflectUtils$6: org.springframework.cglib.core.ClassInfo getClassInfo()>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.misc.Signal: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: boolean doAdvance()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long getExactSizeIfKnown()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.x509.RDN: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.Vector$VectorSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.DistinctOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$CollectionNode: java.util.Spliterator spliterator()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.lang.reflect.Executable: java.lang.String sharedToString(int,boolean,java.lang.Class[],java.lang.Class[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.aop.support.AbstractPointcutAdvisor: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><java.text.DateFormat: int hashCode()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<sun.util.locale.provider.CalendarNameProviderImpl: boolean isSupportedLocale(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.String typeName(java.lang.reflect.Type)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.stream.AbstractPipeline: java.util.Spliterator sourceSpliterator(int)>-><java.util.stream.DistinctOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.WeakHashMap$ValueSpliterator: int characteristics()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Class getTypeForFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])>-><java.lang.reflect.Method: int getParameterCount()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: boolean doAdvance()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long getExactSizeIfKnown()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: boolean equals(java.lang.Object)>
<org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler: void setValue(java.lang.Object)>-><java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.LinkedList$LLSpliterator: int characteristics()>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.ReduceOps$5ReducingSink: void begin(long)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.ReduceOps$4: void <init>(java.util.stream.StreamShape,java.util.function.BiConsumer,java.util.function.BiConsumer,java.util.function.Supplier)>-><java.util.stream.ReduceOps$ReduceOp: void <init>(java.util.stream.StreamShape)>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.ArrayList$ArrayListSpliterator: java.util.Spliterator trySplit()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><ch.qos.logback.core.subst.Token: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.ReduceOps$4ReducingSink: void combine(java.util.stream.ReduceOps$AccumulatingSink)>-><java.util.stream.ReduceOps$4ReducingSink: void combine(java.util.stream.ReduceOps$4ReducingSink)>
<org.springframework.expression.spel.support.ReflectiveMethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>-><java.lang.reflect.Method: boolean isVarArgs()>
<java.util.Objects: int hashCode(java.lang.Object)>-><java.lang.reflect.Parameter: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.ReferencePipeline$2$1: void begin(long)>-><java.util.stream.DistinctOps$1$1: void begin(long)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.PathPattern: char getSeparator()>-><org.springframework.http.server.PathContainer$Options: char separator()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.lang.reflect.Executable: java.lang.String sharedToString(int,boolean,java.lang.Class[],java.lang.Class[])>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.reflect.Method: int getModifiers()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$CollectionNode: java.util.Spliterator spliterator()>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedList: java.lang.Object merge(java.lang.Object)>
<org.springframework.cglib.core.VisibilityPredicate: boolean evaluate(java.lang.Object)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations2(byte[],sun.reflect.ConstantPool,java.lang.Class)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] privateGetParameters()>-><java.lang.reflect.Executable: java.lang.reflect.Parameter[] synthesizeAllParams()>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: void generateCode(java.lang.String,org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void <init>(java.util.Spliterator,java.util.concurrent.ConcurrentHashMap)>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.context.support.AbstractRefreshableConfigApplicationContext: void setBeanName(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getAnnotations()>-><java.lang.reflect.Constructor: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$2: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: int characteristics()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations(byte[],sun.reflect.ConstantPool,java.lang.Class)>-><java.lang.annotation.AnnotationFormatError: void <init>(java.lang.Throwable)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Parameter: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.reflect.annotation.AnnotationType: void <init>(java.lang.Class)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><java.lang.reflect.Method: java.lang.String toString()>
<org.springframework.expression.spel.ast.Indexer: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.stream.ReferencePipeline$7$1: void begin(long)>-><java.util.stream.DistinctOps$1$2: void begin(long)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>-><java.lang.System$2: sun.reflect.ConstantPool getConstantPool(java.lang.Class)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<java.beans.FeatureDescriptor: java.lang.Class[] getParameterTypes(java.lang.Class,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.invoke.LambdaForm: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: boolean equals(java.lang.Object)>-><java.lang.reflect.Executable: boolean equalParamTypes(java.lang.Class[],java.lang.Class[])>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$1Splitr: java.util.Spliterator trySplit()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<ch.qos.logback.core.helpers.ThrowableToStringArray: java.lang.String formatFirstLine(java.lang.Throwable,java.lang.StackTraceElement[])>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.Spliterator$OfInt trySplit()>
<org.springframework.core.SerializableTypeWrapper$MethodParameterTypeProvider: void <init>(org.springframework.core.MethodParameter)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.stream.DistinctOps$1: java.util.stream.Node reduce(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.ReduceOps$ReduceOp: java.lang.Object evaluateParallel(java.util.stream.PipelineHelper,java.util.Spliterator)>
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations2(byte[],sun.reflect.ConstantPool,java.lang.Class)>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.core.MethodParameter: java.lang.Class computeParameterType()>-><java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.DistinctOps$1$2: void begin(long)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.lang.reflect.Executable: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.lang.reflect.Executable: java.util.Map declaredAnnotations()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: java.util.Spliterator trySplit()>
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] synthesizeAllParams()>-><java.lang.reflect.Parameter: void <init>(java.lang.String,int,java.lang.reflect.Executable,int)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.Float: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.TreeMap$EntrySpliterator: int characteristics()>
<sun.reflect.annotation.AnnotationType: void <init>(java.lang.Class)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: int characteristics()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.web.servlet.HttpServletBean: void setEnvironment(org.springframework.core.env.Environment)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.slf4j.event.Level: java.lang.String toString()>
<org.springframework.util.MultiValueMapAdapter: java.util.Set keySet()>-><java.util.Collections$UnmodifiableMap: java.util.Set keySet()>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: int hashCode()>
<org.springframework.core.type.StandardAnnotationMetadata: boolean isAnnotatedMethod(java.lang.reflect.Method,java.lang.String)>-><java.lang.reflect.Method: boolean isBridge()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.HttpServletBean: void setEnvironment(org.springframework.core.env.Environment)>-><org.springframework.util.Assert: void isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String)>
<java.lang.reflect.Parameter: boolean isVarArgs()>-><java.lang.reflect.Constructor: int getParameterCount()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.lang.reflect.Method: int hashCode()>-><java.lang.Class: java.lang.String getName()>
<java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.annotation.Annotation[] getDeclaredAnnotations()>-><sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[] toArray(java.util.Map)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.asm.Handle: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.security.util.DerValue: boolean equals(java.lang.Object)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderCheckGetters: java.lang.String applicable(java.lang.reflect.Method[])>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.expression.spel.CodeFlow: java.lang.String toJvmDescriptor(java.lang.Class)>-><java.lang.Class: java.lang.Class getComponentType()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.DistinctOps$1$2: void end()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.String,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.lang.reflect.Executable: boolean isVarArgs()>-><java.lang.reflect.Constructor: int getModifiers()>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.ComparableTimSort: int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<java.util.stream.ReferencePipeline$7$1: void begin(long)>-><java.util.stream.DistinctOps$1$1: void begin(long)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.stream.IntPipeline$9$1: void begin(long)>-><java.util.stream.DistinctOps$1$2: void begin(long)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.util.calendar.Era: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.Date: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><java.lang.reflect.Method: java.lang.String toString()>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><java.lang.reflect.Constructor: int hashCode()>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.util.regex.Pattern: java.lang.String pattern()>
<java.lang.reflect.Method: sun.reflect.generics.repository.ConstructorRepository getGenericInfo()>-><java.lang.reflect.Method: sun.reflect.generics.repository.MethodRepository getGenericInfo()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.util.ReflectionUtils: boolean isEqualsMethod(java.lang.reflect.Method)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.imageio.ImageTypeSpecifier$Interleaved: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<org.springframework.beans.factory.support.AutowireUtils: boolean isExcludedFromDependencyCheck(java.beans.PropertyDescriptor)>-><java.lang.Class: java.lang.Class getSuperclass()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.VisibilityPredicate: boolean evaluate(java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Hashtable$Entry: boolean equals(java.lang.Object)>
<org.springframework.util.MultiValueMapAdapter: boolean isEmpty()>-><java.util.Collections$UnmodifiableMap: boolean isEmpty()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.Spliterators$EmptySpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.Calendar: java.lang.String toString()>
<java.lang.reflect.Parameter: boolean isSynthetic()>-><java.lang.reflect.Parameter: int getModifiers()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.ForEachOps$ForEachOrderedTask: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,java.util.stream.Sink)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.ArrayList$ArrayListSpliterator: int characteristics()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: java.util.Spliterator trySplit()>
<java.util.IdentityHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getAllGenericParameterTypes()>-><java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.expression.spel.ast.FunctionReference: boolean isCompilable()>-><java.lang.reflect.Method: int getModifiers()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.AbstractPipeline: int getStreamAndOpFlags()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Method: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.HashMap$KeySpliterator: int characteristics()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.util.ObjectUtils: java.lang.Object unwrapOptional(java.lang.Object)>-><java.util.Optional: java.lang.Object get()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.ReduceOps$4ReducingSink: void begin(long)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.reflect.Method findMethodForProperty(java.lang.String[],java.lang.String,java.lang.Class,boolean,int,java.util.Set)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.catalina.core.ContainerBase: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.stream.SpinedBuffer$OfPrimitive: int chunkFor(long)>-><java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>-><java.util.Spliterators$IntIteratorSpliterator: long estimateSize()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>-><sun.reflect.annotation.AnnotationType: java.lang.Class invocationHandlerReturnType(java.lang.Class)>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><java.lang.reflect.Constructor: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.ReferencePipeline$7$1: void begin(long)>
<org.springframework.core.convert.Property: java.lang.Class declaringClass()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.Character$Subset: java.lang.String toString()>
<java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.lang.reflect.Executable: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<java.util.Collections$SetFromMap: boolean add(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.awt.image.PackedColorModel: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean equals(java.lang.Object)>
<java.util.ComparableTimSort: int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.lang.reflect.Constructor: void handleParameterNumberMismatch(int,int)>-><java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.core.DecoratingClassLoader: boolean isExcluded(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: long estimateSize()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.beans.factory.support.AutowireUtils: boolean isSetterDefinedInInterface(java.beans.PropertyDescriptor,java.util.Set)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.Collections$2: int characteristics()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.http.HttpHeaders: java.lang.String toString()>
<java.lang.reflect.Constructor: void handleParameterNumberMismatch(int,int)>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.nio.charset.Charset: java.lang.String toString()>
<org.apache.ibatis.parsing.XNode: void toString(java.lang.StringBuilder,int)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.String toString()>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.invoke.LambdaForm$Name: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.web.filter.GenericFilterBean: void destroy()>
<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>-><sun.reflect.generics.repository.GenericDeclRepository: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.HashMap$EntrySpliterator: int characteristics()>
<java.util.stream.DistinctOps$1: java.util.stream.Sink opWrapSink(int,java.util.stream.Sink)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<org.springframework.expression.spel.ast.MethodReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.Vector$VectorSpliterator: long estimateSize()>
<org.springframework.expression.spel.ast.Indexer: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.lang.reflect.Parameter: int hashCode()>-><java.lang.reflect.Method: int hashCode()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.lang.reflect.Method: int hashCode()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.Thread: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<org.springframework.core.MethodParameter: java.lang.annotation.Annotation[] getMethodAnnotations()>-><java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getAnnotations()>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.lang.reflect.Constructor: java.lang.annotation.Annotation[][] getParameterAnnotations()>-><java.lang.reflect.Executable: java.lang.annotation.Annotation[][] sharedGetParameterAnnotations(java.lang.Class[],byte[])>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.PropertyPermission: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.VisibilityPredicate: boolean evaluate(java.lang.Object)>-><java.lang.reflect.Method: int getModifiers()>
<java.util.stream.StreamSpliterators$DelegatingSpliterator: long getExactSizeIfKnown()>-><java.util.Spliterator: long getExactSizeIfKnown()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] privateGetParameters()>-><java.lang.reflect.Executable: void verifyParameters(java.lang.reflect.Parameter[])>
<java.lang.reflect.Parameter: java.lang.String toString()>-><java.lang.reflect.Parameter: java.lang.String getName()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DelegatingSpliterator: long getExactSizeIfKnown()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator get()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.Spliterators$ArraySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<java.lang.reflect.Parameter: java.lang.annotation.Annotation[] getDeclaredAnnotations()>-><java.lang.reflect.Constructor: java.lang.annotation.Annotation[][] getParameterAnnotations()>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.Short: java.lang.String toString()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] synthesizeAllParams()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.management.MBeanParameterInfo: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.DistinctOps$1: java.util.stream.Node reduce(java.util.stream.PipelineHelper,java.util.Spliterator)>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.awt.Component: java.lang.String toString()>
<org.springframework.beans.factory.support.ConstructorResolver: void resolveFactoryMethodIfPossible(org.springframework.beans.factory.support.RootBeanDefinition)>-><java.lang.reflect.Method: int getModifiers()>
<org.springframework.core.MethodParameter: java.lang.reflect.Type getGenericParameterType()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.lang.reflect.Parameter: java.lang.String toString()>-><java.lang.reflect.Parameter: int getModifiers()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.text.DateFormat: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.util.DerValue: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.StreamOpFlag: int toStreamFlags(int)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.crypto.CryptoAllPermission: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.Sink: void begin(long)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean remove(java.lang.Object)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations(byte[],sun.reflect.ConstantPool,java.lang.Class)>-><java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String)>
<java.lang.reflect.Executable: java.util.Map declaredAnnotations()>-><sun.reflect.annotation.AnnotationParser: java.util.Map parseAnnotations(byte[],sun.reflect.ConstantPool,java.lang.Class)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.time.OffsetTime: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<ltd.newbee.mall.entity.Carousel: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.awt.SunHints$Key: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.awt.image.ComponentColorModel: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.aop.framework.JdkDynamicAopProxy: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.expression.spel.ast.MethodReference: boolean isCompilable()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.LinkedList$LLSpliterator: long estimateSize()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: boolean contains(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanIntrospector: javax.management.MBeanAttributeInfo getMBeanAttributeInfo(java.lang.String,com.sun.jmx.mbeanserver.ConvertingMethod,com.sun.jmx.mbeanserver.ConvertingMethod)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><java.lang.Throwable: java.lang.Throwable getCause()>
<java.util.stream.DistinctOps$1$1: void end()>-><java.util.stream.Nodes$SpinedNodeBuilder: void end()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.AbstractPipeline: int getStreamAndOpFlags()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.WeakHashMap$WeakHashMapSpliterator: long estimateSize()>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.Enum: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.text.DateFormat: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<org.apache.catalina.util.ToStringUtil: java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.beans.factory.config.DependencyDescriptor: void <init>(org.springframework.core.MethodParameter,boolean,boolean)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.lang.reflect.Parameter: boolean isVarArgs()>-><java.lang.reflect.Method: boolean isVarArgs()>
<org.springframework.core.convert.support.ObjectToObjectConverter: java.lang.reflect.Method determineToMethod(java.lang.Class,java.lang.Class)>-><java.lang.reflect.Method: int getModifiers()>
<org.apache.catalina.session.StandardSessionFacade: void <init>(javax.servlet.http.HttpSession)>-><java.lang.Object: void <init>()>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.HashMap$ValueSpliterator: int characteristics()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String value()>
<java.util.stream.DistinctOps$1$1: void end()>-><java.util.stream.DistinctOps$1$1: void end()>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.management.openmbean.SimpleType: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.DefaultAdvisorChainFactory: java.util.List getInterceptorsAndDynamicInterceptionAdvice(org.springframework.aop.framework.Advised,java.lang.reflect.Method,java.lang.Class)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.util.PropertySetter: void setProperty(java.lang.reflect.Method,java.lang.String,java.lang.String)>-><java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.lang.reflect.Executable: void printModifiersIfNonzero(java.lang.StringBuilder,int,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.stream.DistinctOps$1$2: void end()>-><java.util.stream.Sink$ChainedInt: void end()>
<java.lang.reflect.Executable: java.util.Map declaredAnnotations()>-><java.lang.reflect.Method: java.lang.reflect.Executable getRoot()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.LinkedList$LLSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.lang.reflect.Constructor: sun.reflect.generics.repository.ConstructorRepository getGenericInfo()>-><java.lang.reflect.Constructor: java.lang.String getSignature()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.security.Provider$UString: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.Instant: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.MutablePropertyValues: org.springframework.beans.PropertyValue mergeIfRequired(org.springframework.beans.PropertyValue,org.springframework.beans.PropertyValue)>-><org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<ch.qos.logback.core.helpers.ThrowableToStringArray: java.lang.String formatFirstLine(java.lang.Throwable,java.lang.StackTraceElement[])>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.Spliterator trySplit()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: void initPartialTraversalState()>-><java.util.stream.SpinedBuffer$OfInt: void <init>()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.ReduceOps$4ReducingSink: void begin(long)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.Collections$2: long estimateSize()>
<java.lang.reflect.Method: boolean isDefault()>-><java.lang.Class: boolean isInterface()>
<java.lang.reflect.Constructor: void handleParameterNumberMismatch(int,int)>-><java.lang.Class: boolean isLocalClass()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.Class: java.lang.String toString()>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: void forEachRemaining(java.util.function.IntConsumer)>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: boolean tryAdvance(java.util.function.IntConsumer)>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<ltd.newbee.mall.util.PageQueryUtil: void <init>(java.util.Map)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.management.MBeanAttributeInfo: boolean equals(java.lang.Object)>
<java.time.ZoneId: java.time.ZoneId normalized()>-><java.time.zone.ZoneRules: boolean isFixedOffset()>
<java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.lang.reflect.Method: void specificToStringHeader(java.lang.StringBuilder)>-><java.lang.Class: java.lang.String getTypeName()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.stream.IntPipeline$9$1: void begin(long)>-><java.util.stream.DistinctOps$1$1: void begin(long)>
<java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<ltd.newbee.mall.util.PageQueryUtil: void <init>(java.util.Map)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$ArraySpliterator: java.util.Spliterator trySplit()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<java.lang.reflect.Parameter: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.String applicable(java.lang.reflect.Method[])>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.JumboEnumSet: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><java.lang.reflect.Method: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.WeakHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.Spliterator: boolean hasCharacteristics(int)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.util.MimeType: java.lang.String toString()>
<com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer$MethodOrder: int compare(java.lang.reflect.Method,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getAllGenericParameterTypes()>-><java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<org.springframework.util.ReflectionUtils: java.lang.reflect.Field findField(java.lang.Class,java.lang.String,java.lang.Class)>-><java.lang.Class: java.lang.Class getSuperclass()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: long estimateSize()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.ObjectProvider getBeanProvider(org.springframework.core.ResolvableType)>-><org.springframework.context.support.AbstractApplicationContext: void assertBeanFactoryActive()>
<java.util.stream.DistinctOps$1$2: void end()>-><java.util.stream.SortedOps$SizedRefSortingSink: void end()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.stream.SpinedBuffer$1Splitr: int characteristics()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.Date: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.util.MultiValueMapAdapter: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.Hashtable: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>-><java.lang.reflect.Method: java.lang.String getGenericSignature()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.stream.ReferencePipeline$7$1: void begin(long)>-><java.util.stream.ReduceOps$4ReducingSink: void begin(long)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>-><java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,char)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.nio.charset.Charset: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.time.format.DateTimePrintContext: java.time.temporal.TemporalAccessor adjust(java.time.temporal.TemporalAccessor,java.time.format.DateTimeFormatter)>-><java.time.ZoneOffset: int getTotalSeconds()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.management.ObjectName: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntIteratorSpliterator: java.util.Spliterator trySplit()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.Collections$2: int characteristics()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$ValueSpliterator: java.util.Spliterator trySplit()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.util.Set entrySet()>-><org.springframework.http.HttpHeaders: java.util.Set entrySet()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.management.MBeanNotificationInfo: boolean equals(java.lang.Object)>
<javax.management.MBeanAttributeInfo: java.lang.String attributeType(java.lang.reflect.Method,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.LinkedList$LLSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.IdentityHashMap$IdentityHashMapSpliterator: long estimateSize()>
<java.lang.reflect.Executable: java.util.Map declaredAnnotations()>-><java.lang.reflect.Constructor: byte[] getAnnotationBytes()>
<org.springframework.core.convert.Property: java.lang.String resolveName()>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.web.util.pattern.PathPattern: int compareTo(org.springframework.web.util.pattern.PathPattern)>-><java.lang.String: int compareTo(java.lang.String)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.stream.SpinedBuffer$OfPrimitive: int chunkFor(long)>-><java.util.stream.SpinedBuffer$OfInt: int arrayLength(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.security.AllPermission: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.ReflectiveMethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>-><java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void begin(long)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty: java.lang.String toString()>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator get()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>
<ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: long estimateSize()>
<org.springframework.util.ReflectionUtils: boolean isHashCodeMethod(java.lang.reflect.Method)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.text.DateFormat: int hashCode()>-><java.text.DecimalFormat: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.String applicable(java.lang.reflect.Method[])>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: long estimateSize()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.reflect.Method findMethodForProperty(java.lang.String[],java.lang.String,java.lang.Class,boolean,int,java.util.Set)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<javax.management.MBeanAttributeInfo: boolean isIs(java.lang.reflect.Method)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.apache.catalina.util.ToStringUtil: java.lang.String toString(org.apache.catalina.Contained)>-><org.apache.catalina.util.ToStringUtil: java.lang.String toString(java.lang.Object,org.apache.catalina.Container)>
<java.util.IdentityHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.lang.reflect.Parameter: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.util.MultiValueMapAdapter: java.util.List put(java.lang.Object,java.util.List)>-><java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.stream.DistinctOps$1: java.util.stream.Sink opWrapSink(int,java.util.stream.Sink)>-><java.util.stream.StreamOpFlag: boolean isKnown(int)>
<org.springframework.cglib.core.ReflectUtils: org.springframework.asm.Type[] getExceptionTypes(java.lang.reflect.Member)>-><java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>
<java.util.stream.DistinctOps$1$1: void end()>-><java.util.stream.DistinctOps$1$2: void end()>
<java.util.Spliterator: boolean hasCharacteristics(int)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: int characteristics()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.Character: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: long estimateSize()>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.Nodes$SpinedNodeBuilder: void begin(long)>
<java.lang.reflect.Constructor: boolean hasGenericInformation()>-><java.lang.reflect.Constructor: java.lang.String getSignature()>
<org.springframework.expression.spel.ast.FunctionReference: boolean isCompilable()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: long estimateSize()>
<org.springframework.core.annotation.TypeMappedAnnotation: java.lang.ClassLoader getClassLoader()>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><java.text.DateFormat: int hashCode()>
<java.util.IdentityHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<java.lang.reflect.Method: void handleParameterNumberMismatch(int,int)>-><java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String)>
<java.util.Collections$SynchronizedCollection: java.util.Spliterator spliterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Spliterator spliterator()>
<java.lang.reflect.Method: sun.reflect.generics.repository.MethodRepository getGenericInfo()>-><java.lang.reflect.Method: sun.reflect.generics.factory.GenericsFactory getFactory()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: boolean equals(java.lang.Object)>
<java.text.DateFormat: java.lang.String format(java.util.Date)>-><org.thymeleaf.standard.serializer.StandardJavaScriptSerializer$JacksonThymeleafISO8601DateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.time.Duration: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.UUID: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()>-><sun.reflect.generics.repository.ConstructorRepository: java.lang.reflect.Type[] getParameterTypes()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void accept(java.lang.Object)>
<org.springframework.web.util.pattern.PathPattern: int hashCode()>-><java.lang.String: int hashCode()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations2(byte[],sun.reflect.ConstantPool,java.lang.Class)>-><sun.reflect.annotation.AnnotationType: java.lang.annotation.RetentionPolicy retention()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Constructor: int hashCode()>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.core.MethodParameter: java.lang.annotation.Annotation[] getParameterAnnotations()>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>-><sun.reflect.generics.repository.MethodRepository: java.lang.reflect.Type getReturnType()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Parameter: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.ArrayList$ArrayListSpliterator: long estimateSize()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.format.datetime.standard.DateTimeFormatterFactory: void setStylePattern(java.lang.String)>-><java.lang.String: int length()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.Nodes$SizedCollectorTask: void begin(long)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: boolean isLazy(org.springframework.beans.factory.config.DependencyDescriptor)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.SpinedBuffer$1Splitr: int characteristics()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: boolean isCompilable()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.core.MethodParameter: int validateIndex(java.lang.reflect.Executable,int)>-><java.lang.reflect.Constructor: int getParameterCount()>
<org.springframework.expression.spel.CodeFlow: java.lang.String toJvmDescriptor(java.lang.Class)>-><java.lang.Class: boolean isPrimitive()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.AbstractPipeline: java.util.stream.Sink wrapAndCopyInto(java.util.stream.Sink,java.util.Spliterator)>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: void generateCode(java.lang.String,org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntIteratorSpliterator: java.util.Spliterator trySplit()>
<org.springframework.util.MultiValueMapAdapter: java.lang.String toString()>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.ThreadGroup: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><java.lang.reflect.Parameter: int hashCode()>
<org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>-><java.lang.reflect.Method: int getModifiers()>
<org.apache.catalina.util.ToStringUtil: java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.beans.IndexedPropertyDescriptor: void setIndexedReadMethod0(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeAwareMethods(java.lang.String,java.lang.Object)>-><org.springframework.context.support.AbstractRefreshableConfigApplicationContext: void setBeanName(java.lang.String)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.YearMonth: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.Double: java.lang.String toString()>
<org.springframework.cglib.core.RejectModifierPredicate: boolean evaluate(java.lang.Object)>-><java.lang.reflect.Constructor: int getModifiers()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.beans.FeatureDescriptor: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.util.locale.provider.RuleBasedBreakIterator: boolean equals(java.lang.Object)>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.apache.ibatis.cache.decorators.SynchronizedCache: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.Spliterator trySplit()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<java.time.format.DateTimePrintContext: java.time.temporal.TemporalAccessor adjust(java.time.temporal.TemporalAccessor,java.time.format.DateTimeFormatter)>-><java.time.ZoneId: java.time.ZoneId normalized()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] synthesizeAllParams()>-><java.lang.reflect.Method: int getParameterCount()>
<java.lang.reflect.Parameter: java.lang.String toString()>-><java.lang.Class: java.lang.String getTypeName()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.springframework.cglib.core.MethodWrapper: java.lang.Object create(java.lang.reflect.Method)>-><java.lang.Class: java.lang.String getName()>
<java.util.stream.Sink$ChainedInt: void begin(long)>-><java.util.stream.DistinctOps$1$2: void begin(long)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.Nodes$FixedNodeBuilder: void begin(long)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.awt.image.ColorModel: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<java.util.HashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.EventObject: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.WeakHashMap$EntrySpliterator: int characteristics()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.security.Permission: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.lang.reflect.Method: int hashCode()>
<java.lang.reflect.Method: java.lang.annotation.Annotation[] getDeclaredAnnotations()>-><java.lang.reflect.Executable: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()>-><java.lang.reflect.Constructor: boolean hasGenericInformation()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.lang.reflect.Parameter: boolean isImplicit()>-><java.lang.reflect.Parameter: int getModifiers()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.cglib.core.Signature: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.core.DecoratingClassLoader: boolean isExcluded(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.core.StandardReflectionParameterNameDiscoverer: java.lang.String[] getParameterNames(java.lang.reflect.Constructor)>-><java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.lang.reflect.Constructor: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: boolean doAdvance()>-><java.util.stream.DistinctOps$1$2: void begin(long)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.VisibilityPredicate: boolean evaluate(java.lang.Object)>-><java.lang.reflect.Constructor: int getModifiers()>
<java.lang.reflect.Parameter: java.lang.reflect.Type getParameterizedType()>-><java.lang.reflect.Executable: java.lang.reflect.Type[] getAllGenericParameterTypes()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.String applicable(java.lang.reflect.Method[])>-><java.lang.Object: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void end()>-><java.util.stream.Sink$ChainedReference: void end()>
<java.lang.reflect.Executable: java.lang.String sharedToString(int,boolean,java.lang.Class[],java.lang.Class[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.Vector$VectorSpliterator: int characteristics()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.ibatis.mapping.ParameterMapping: java.lang.String toString()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.TreeMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<java.lang.reflect.Constructor: sun.reflect.generics.repository.ConstructorRepository getGenericInfo()>-><sun.reflect.generics.repository.ConstructorRepository: sun.reflect.generics.repository.ConstructorRepository make(java.lang.String,sun.reflect.generics.factory.GenericsFactory)>
<ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.beans.IndexedPropertyDescriptor: void setIndexedReadMethod0(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.lang.reflect.Executable: java.lang.annotation.Annotation[][] sharedGetParameterAnnotations(java.lang.Class[],byte[])>-><java.lang.reflect.Executable: java.lang.annotation.Annotation[][] parseParameterAnnotations(byte[])>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.Long: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.core.KotlinReflectionParameterNameDiscoverer: java.lang.String[] getParameterNames(java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.DistinctOps$1$1: void end()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><org.springframework.core.NestedExceptionUtils: java.lang.String buildMessage(java.lang.String,java.lang.Throwable)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.SpelNodeImpl: void generateCodeForArguments(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow,java.lang.reflect.Member,org.springframework.expression.spel.ast.SpelNodeImpl[])>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<javax.management.MBeanAttributeInfo: java.lang.String attributeType(java.lang.reflect.Method,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.Package: java.lang.String toString()>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.Sink$OfInt: void accept(java.lang.Integer)>-><java.util.stream.Sink: void accept(int)>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntIteratorSpliterator: java.util.Spliterator trySplit()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.lang.Object: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.IdentityHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.DistinctOps$1$1: void begin(long)>
<java.util.stream.Nodes$CollectionNode: void <init>(java.util.Collection)>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.time.Period: java.lang.String toString()>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.asm.Type: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.lang.reflect.Constructor: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.SortedOps$SizedRefSortingSink: void begin(long)>
<java.util.HashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.lang.Class: java.lang.Object cast(java.lang.Object)>
<org.apache.catalina.session.StandardSession$PrivilegedNewSessionFacade: org.apache.catalina.session.StandardSessionFacade run()>-><org.apache.catalina.session.StandardSessionFacade: void <init>(javax.servlet.http.HttpSession)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.Spliterators$IteratorSpliterator: int characteristics()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.lang.reflect.Executable: java.lang.annotation.Annotation[] getDeclaredAnnotations()>-><java.lang.reflect.Executable: java.util.Map declaredAnnotations()>
<com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.beans.MutablePropertyValues: org.springframework.beans.PropertyValue mergeIfRequired(org.springframework.beans.PropertyValue,org.springframework.beans.PropertyValue)>-><org.springframework.beans.factory.support.ManagedMap: boolean isMergeEnabled()>
<org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(org.springframework.core.annotation.TypeMappedAnnotations$Aggregate,java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<org.springframework.expression.spel.ast.FunctionReference: void generateCode(org.springframework.asm.MethodVisitor,org.springframework.expression.spel.CodeFlow)>-><java.lang.Class: java.lang.String getName()>
<java.util.WeakHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.management.MBeanAttributeInfo: java.lang.String attributeType(java.lang.reflect.Method,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.String getName()>
<ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.Vector$VectorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.ComparableTimSort: void mergeLo(int,int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: boolean isTypeMatch(java.lang.String,org.springframework.core.ResolvableType)>-><org.springframework.context.support.AbstractApplicationContext: void assertBeanFactoryActive()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><ltd.newbee.mall.entity.IndexConfig: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><java.lang.reflect.Method: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.beans.factory.config.RuntimeBeanReference: boolean equals(java.lang.Object)>
<java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.math.BigInteger: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.Spliterators$IntIteratorSpliterator: int characteristics()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.Vector$VectorSpliterator: java.util.Spliterator trySplit()>
<java.lang.reflect.Executable: void verifyParameters(java.lang.reflect.Parameter[])>-><java.lang.reflect.MalformedParametersException: void <init>(java.lang.String)>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String removeCaseInsensitiveKey(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String convertKey(java.lang.String)>
<org.springframework.util.MultiValueMapAdapter: boolean isEmpty()>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean isEmpty()>
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations2(byte[],sun.reflect.ConstantPool,java.lang.Class)>-><sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation parseAnnotation(java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class,boolean)>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Method: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.core.MethodParameter: java.lang.reflect.Type getGenericParameterType()>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<java.beans.FeatureDescriptor: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><ltd.newbee.mall.entity.NewBeeMallGoods: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.reflect.Method findMethodForProperty(java.lang.String[],java.lang.String,java.lang.Class,boolean,int,java.util.Set)>-><java.lang.reflect.Method: int getModifiers()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.beans.factory.support.GenericBeanDefinition: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: void specificToStringHeader(java.lang.StringBuilder)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.util.stream.SpinedBuffer$OfInt: void arrayForEach(int[],int,int,java.util.function.IntConsumer)>-><java.util.stream.Sink: void accept(int)>
<sun.reflect.misc.ReflectUtil: void conservativeCheckMemberAccess(java.lang.reflect.Member)>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<org.springframework.context.support.AbstractRefreshableConfigApplicationContext: void setBeanName(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>-><java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<org.springframework.expression.spel.support.ReflectivePropertyAccessor: void write(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String,java.lang.Object)>-><java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void accept(int)>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<java.util.WeakHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.lang.reflect.Constructor: java.lang.String toString()>-><java.lang.reflect.Executable: java.lang.String sharedToString(int,boolean,java.lang.Class[],java.lang.Class[])>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: int characteristics()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<java.lang.reflect.Constructor: java.lang.annotation.Annotation[] getDeclaredAnnotations()>-><java.lang.reflect.Executable: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.proxy.BridgeMethodResolver$BridgedFinder: org.springframework.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean remove(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.util.Collections$SetFromMap: boolean isEmpty()>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean isEmpty()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.Vector$VectorSpliterator: long estimateSize()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.WeakHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String toString()>-><org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.lang.reflect.Parameter: int hashCode()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.stream.DistinctOps$1$2: void end()>-><java.util.stream.DistinctOps$1$2: void end()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.BitSet: java.lang.String toString()>
<javax.security.auth.PrivateCredentialPermission: void <init>(java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void initMaps(java.lang.Class,com.sun.jmx.mbeanserver.MBeanIntrospector)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>-><java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()>
<java.lang.reflect.Method: boolean hasGenericInformation()>-><java.lang.reflect.Method: java.lang.String getGenericSignature()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><java.text.DateFormat: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>-><java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.AbstractCollection: java.lang.String toString()>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.IntPipeline$9$1: void begin(long)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.web.filter.GenericFilterBean: void afterPropertiesSet()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><ltd.newbee.mall.entity.Carousel: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<java.time.format.DateTimePrintContext: java.time.temporal.TemporalAccessor adjust(java.time.temporal.TemporalAccessor,java.time.format.DateTimeFormatter)>-><java.time.ZoneRegion: java.time.zone.ZoneRules getRules()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>
