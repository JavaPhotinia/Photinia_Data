<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.bson.BsonArray: int size()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.OffsetDateTime: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.web.servlet.support.ErrorPageFilterConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<org.apache.ibatis.io.Resources: java.util.Properties getUrlAsProperties(java.lang.String)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.apache.ibatis.builder.annotation.MapperAnnotationBuilder: java.util.Optional getAnnotationWrapper(java.lang.reflect.Method,boolean,java.util.Collection)>-><org.bson.Document: boolean isEmpty()>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated lambda$validate$0(java.lang.String,java.lang.String,io.micrometer.core.instrument.config.validate.DurationValidator)>-><io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<org.springframework.web.server.adapter.ForwardedHeaderTransformer: void <clinit>()>-><java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>-><com.google.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Locale)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.SocketImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<org.apache.ibatis.io.Resources: java.util.Properties getResourceAsProperties(java.lang.String)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.mongodb.core.index.IndexInfo: int hashCode()>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><java.io.FileInputStream: int read(byte[],int,int)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.scheduler.DelegateServiceScheduler: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.transaction.jta.JndiJtaConfiguration: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonMaxKey: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.springframework.util.LinkedCaseInsensitiveMap: void clear()>-><java.util.LinkedHashMap: void clear()>
<com.google.common.collect.ForwardingMap: void <init>()>-><com.google.common.collect.ForwardingObject: void <init>()>
<org.springframework.data.mongodb.core.index.IndexField: void <init>(java.lang.String,org.springframework.data.domain.Sort$Direction,org.springframework.data.mongodb.core.index.IndexField$Type,java.lang.Float)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: int hashCode()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: int hashCode()>
<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyStatement: int getUpdateCount()>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.LocalTime: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$TunnelState: void <clinit>()>-><sun.net.www.protocol.http.HttpURLConnection$TunnelState: void <init>(java.lang.String,int)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.provider.MapValueProvider: java.lang.Object value(java.lang.String,java.lang.reflect.Type)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.data.spel.ExtensionAwareEvaluationContextProvider$EvaluationContextExtensionAdapter: void <init>(org.springframework.data.spel.spi.EvaluationContextExtension,org.springframework.data.spel.EvaluationContextExtensionInformation)>-><org.springframework.data.spel.Functions: void addAll(java.util.Map)>
<io.micrometer.core.instrument.config.validate.PropertyValidator: java.lang.String prefixedProperty(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.beans.PropertyDescriptor: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void remove(java.util.Collection,byte[][])>-><java.util.ArrayList: boolean remove(java.lang.Object)>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray()>
<java.time.Duration: java.time.Duration dividedBy(long)>-><java.lang.ArithmeticException: void <init>(java.lang.String)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.net.InetAddress: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<reactor.core.publisher.ParallelReduceSeed: void <init>(reactor.core.publisher.ParallelFlux,java.util.function.Supplier,java.util.function.BiFunction)>-><reactor.core.publisher.ParallelFlux: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.DigitList: java.lang.String toString()>
<com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>-><com.google.common.base.Joiner: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Boolean: java.lang.String toString()>
<java.io.BufferedOutputStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<org.bson.json.ShellTimestampConverter: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collection: java.util.stream.Stream stream()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<java.lang.Thread: void <init>(java.lang.Runnable,java.security.AccessControlContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.web.accept.ContentNegotiationManagerFactoryBean: void addMediaType(java.lang.String,org.springframework.http.MediaType)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<java.util.zip.GZIPInputStream: int readUByte(java.io.InputStream)>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.nio.charset.Charset: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties)>-><org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void addAssociation(org.springframework.data.mapping.Association)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: java.lang.String toString()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineAddresses()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: java.lang.String access$000(org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.lang.Object get(int)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.BasicPersistentEntity: void doWithAssociations(org.springframework.data.mapping.SimpleAssociationHandler)>-><java.util.TreeSet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: java.lang.Object get(int)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.asm.Handle: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: java.lang.Object manageListIfNecessary(java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.core.io.Resource getIndexHtml(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.util.TypeVariableTypeInformation: java.lang.String toString()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.jedis.JedisConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisMessageListener: void <init>(org.springframework.data.redis.connection.MessageListener)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration: void <init>()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.support.AbstractBeanDefinition createBeanDefinition()>-><org.springframework.beans.BeanWrapperImpl: void <init>(java.lang.Object)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.NTLMAuthenticationProxy tryLoadNTLMAuthentication()>-><java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<java.util.stream.Node$OfPrimitive: java.lang.Object[] asArray(java.util.function.IntFunction)>-><java.util.stream.Nodes$LongArrayNode: long count()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue: java.lang.String toString()>
<java.util.stream.ReferencePipeline: void forEachWithCancel(java.util.Spliterator,java.util.stream.Sink)>-><java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.bson.codecs.configuration.CodecRegistries: org.bson.codecs.configuration.CodecRegistry fromProviders(org.bson.codecs.configuration.CodecProvider[])>-><org.bson.codecs.configuration.CodecRegistries: org.bson.codecs.configuration.CodecRegistry fromProviders(java.util.List)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.security.x509.GeneralName: boolean equals(java.lang.Object)>
<javax.security.auth.kerberos.KrbServicePermissionCollection: void <init>()>-><java.security.PermissionCollection: void <init>()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.rabbitmq.client.Address: java.lang.String toString()>
<java.lang.reflect.Constructor: boolean isSynthetic()>-><java.lang.reflect.Executable: boolean isSynthetic()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$EmptyList: int size()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: void forEach(java.util.function.Consumer)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<cn.hutool.json.JSONObject: void init(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><cn.hutool.core.lang.Tuple: java.lang.String toString()>
<org.bson.Document: java.lang.String toJson(org.bson.json.JsonWriterSettings,org.bson.codecs.Encoder)>-><org.bson.codecs.EncoderContext: org.bson.codecs.EncoderContext$Builder builder()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Date: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserializeUsingCustom(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection,com.fasterxml.jackson.databind.JsonDeserializer)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String toString(java.util.Collection)>-><org.springframework.data.mongodb.util.BsonUtils: java.lang.String iterableToDelimitedString(java.lang.Iterable,java.lang.String,java.lang.String,org.springframework.core.convert.converter.Converter)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.boot.web.embedded.tomcat.TldSkipPatterns: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pSubscribe(byte[][])>-><org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.Object: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.YearMonth: int hashCode()>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator: boolean lambda$fetchIndexInformation$0(java.lang.Object,org.springframework.data.mongodb.core.index.IndexInfo)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String getName()>
<org.springframework.data.mongodb.core.DefaultIndexOperations: java.lang.String lambda$ensureIndex$0(org.springframework.data.mongodb.core.index.IndexDefinition,com.mongodb.client.MongoCollection)>-><org.springframework.data.mongodb.core.IndexConverters: org.springframework.core.convert.converter.Converter indexDefinitionToIndexOptionsConverter()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.JwtMap: void setDate(java.lang.String,java.util.Date)>-><org.bson.BsonDocument: java.lang.Object remove(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.util.regex.Matcher: boolean matches()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>-><io.micrometer.core.util.internal.logging.JdkLogger: void debug(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.hazelcast.HazelcastServerConfiguration$HazelcastServerConfigFileConfiguration: void <init>()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.convert.Converters: java.util.Properties lambda$static$0(java.util.List)>-><java.util.ArrayList: int size()>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundryActuatorAutoConfiguration$IgnoredPathsSecurityConfiguration: void <init>()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.alibaba.druid.util.JdbcUtils: void close(java.io.Closeable)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<reactor.core.Scannable: java.lang.String stepName()>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.OverridableUuidRepresentationUuidCodec: void <init>()>
<org.apache.catalina.core.StandardWrapper: void <init>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonInt32: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.bson.BsonDocumentReader$1: void <clinit>()>-><org.bson.BsonContextType: org.bson.BsonContextType[] values()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.net.MalformedURLException: void <init>(java.lang.String)>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.types.Symbol: java.lang.String toString()>
<java.util.Collections$SetFromMap: java.util.Spliterator spliterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Spliterator spliterator()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCallableOnAssembly: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$HikariDataSourceMetricsConfiguration: void <init>(io.micrometer.core.instrument.MeterRegistry)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: java.lang.String idFromBaseType()>-><com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase: java.lang.String idFromBaseType()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <init>(java.lang.String[])>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<org.springframework.security.crypto.password.NoOpPasswordEncoder: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.security.AllPermission: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.types.Decimal128: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getEnum(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.Class,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<io.micrometer.core.instrument.config.validate.ValidationException: java.lang.String lambda$new$0(io.micrometer.core.instrument.config.validate.Validated$Invalid)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String getMessage()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><java.io.FilterInputStream: int read(byte[])>
<org.springframework.boot.web.servlet.server.Encoding$Type: void <clinit>()>-><org.springframework.boot.web.servlet.server.Encoding$Type: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <clinit>()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonDateTimeCodec: java.lang.Class getEncoderClass()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><java.util.PrimitiveIterator$OfDouble: java.lang.Object next()>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonString: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<sun.net.www.protocol.http.AuthenticationHeader: void <clinit>()>-><sun.security.action.GetPropertyAction: void <init>(java.lang.String)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: long estimateSize()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<register-finalize <org.bson.json.JsonScanner$RegularExpressionState: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Collections$UnmodifiableList: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.FieldPosition: java.lang.String toString()>
<io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>-><java.lang.String: int length()>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.bson.json.ExtendedJsonInt64Converter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: int size()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String iterableToDelimitedString(java.lang.Iterable,java.lang.String,java.lang.String,org.springframework.core.convert.converter.Converter)>-><java.lang.Object: java.lang.Class getClass()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$1: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.ClockSource$Factory: com.zaxxer.hikari.util.ClockSource create()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonString: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.awt.AppContext: java.lang.String toString()>
<cn.hutool.core.map.MapProxy: java.lang.Object remove(java.lang.Object)>-><org.bson.Document: java.lang.Object remove(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.BsonArray: int size()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonDouble: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.lettuce.core.masterslave.RedisMasterSlaveNode: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.types.MinKey: java.lang.String toString()>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.util.HashMap: void <init>()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Properties: void load(java.io.InputStream)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.rabbitmq.client.impl.AMQChannel: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.RabbitResourceHolder: void addChannel(com.rabbitmq.client.Channel,org.springframework.amqp.rabbit.connection.Connection)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.Boolean lambda$new$0()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.io.ObjectStreamClass: java.lang.String toString()>
<register-finalize <org.springframework.boot.web.error.ErrorAttributeOptions$Include: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: java.lang.String toString()>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CycleGuard$Path: void <clinit>()>-><java.util.Collections: java.util.List emptyList()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<org.springframework.web.util.OpaqueUriComponents: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.redis.RedisReactiveHealthContributorAutoConfiguration: void <init>(java.util.Map)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><cn.hutool.core.date.format.FastDatePrinter$TimeZoneDisplayKey: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonDocument: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Set removeBindingsWithDestination(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<io.jsonwebtoken.impl.JwtMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><org.bson.Document: java.lang.Object remove(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Vector: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: java.lang.String toString()>
<org.bson.codecs.BsonTypeClassMap: void <init>(java.util.Map)>-><java.util.HashMap: void <init>()>
<org.apache.ibatis.type.TypeHandlerRegistry: java.util.Map getJdbcHandlerMapForEnumInterfaces(java.lang.Class,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.rabbitmq.client.UnknownClassOrMethodId: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.String lambda$createEndpointBeans$0(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean,org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonDateTime: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><reactor.util.function.Tuple2: int hashCode()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.types.Code: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.sql.Timestamp: int hashCode()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.support.AbstractBeanDefinition createBeanDefinition()>-><org.springframework.beans.factory.support.AbstractBeanDefinition: void setBeanClass(java.lang.Class)>
<org.springframework.data.redis.connection.jedis.JedisConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><java.lang.UnsupportedOperationException: void <init>()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.util.ParentTypeAwareTypeInformation: org.springframework.data.util.ClassTypeInformation getRawTypeInformation()>-><org.springframework.data.util.TypeDiscoverer: org.springframework.data.util.ClassTypeInformation getRawTypeInformation()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.rabbitmq.client.impl.ForgivingExceptionHandler: boolean isSocketClosedOrConnectionReset(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonString: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: int compareTo(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.operation.ApiOperationReader getApiOperationReader()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonDouble: java.lang.String toString()>
<org.apache.ibatis.builder.xml.XMLMapperBuilder: void parsePendingStatements()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<io.jsonwebtoken.impl.crypto.EllipticCurveSignatureValidator: boolean isValid(byte[],byte[])>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.MonoOnAssembly: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexDefinitionBuilder: void <clinit>()>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Class: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getChannels()>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<org.bson.json.ExtendedJsonDecimal128Converter: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.asm.Handle: java.lang.String toString()>
<org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <clinit>()>-><java.util.HashSet: void <init>(java.util.Collection)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.io.InputStream: void close()>
<java.util.stream.AbstractPipeline: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$LongArrayNode: java.util.Spliterator spliterator()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonDocument: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserializeUsingCustom(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection,com.fasterxml.jackson.databind.JsonDeserializer)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: int size()>
<org.bson.codecs.MapCodec: void <clinit>()>-><org.bson.codecs.configuration.CodecRegistries: org.bson.codecs.configuration.CodecRegistry fromProviders(java.util.List)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.types.MaxKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<java.io.BufferedInputStream: int read1(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.mongodb.DBRef: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.AtomicIntegerCodec: java.lang.Class getEncoderClass()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: java.lang.Object next()>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void debug(java.lang.String)>-><io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: boolean isDebugEnabled()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxCreate$IgnoreSink: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonBinary: int hashCode()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: long estimateSize()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: long estimateSize()>
<org.bson.BsonDocument: void putAll(java.util.Map)>-><org.bson.BsonDocument: org.bson.BsonValue put(java.lang.String,org.bson.BsonValue)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.CodeSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.Year: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: int compareTo(java.lang.Object)>
<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>-><sun.net.www.MeteredStream: void close()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.juli.logging.DirectJDKLog: void fatal(java.lang.Object,java.lang.Throwable)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><java.io.BufferedInputStream: void close()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder maximumSize(long)>-><com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool: boolean softEvictConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)>-><com.zaxxer.hikari.util.ConcurrentBag: boolean reserve(com.zaxxer.hikari.util.ConcurrentBag$IConcurrentBagEntry)>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><org.bson.RawBsonArray: boolean addAll(java.util.Collection)>
<java.util.SubList$1: java.lang.Object previous()>-><org.bson.RawBsonArray$RawBsonArrayList$ListItr: java.lang.Object previous()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.io.FilePermission: int hashCode()>
<org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: boolean usePropertyAccess()>-><java.lang.Boolean: boolean booleanValue()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.GregorianCalendar: boolean equals(java.lang.Object)>
<register-finalize <com.zaxxer.hikari.SQLExceptionOverride$Override: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>-><java.net.SocketInputStream: void close()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonJavaScript: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: boolean addAll(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.types.MaxKey: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><cn.hutool.core.lang.Tuple: int hashCode()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.bson.BsonArray: int size()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonMaxKey: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.Scannable$Attr$2: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<io.jsonwebtoken.impl.JwtMap: void putAll(java.util.Map)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.util.MimeType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<com.google.common.base.Joiner$1: void <init>(com.google.common.base.Joiner,com.google.common.base.Joiner,java.lang.String)>-><com.google.common.base.Joiner: void <init>(com.google.common.base.Joiner,com.google.common.base.Joiner$1)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.Pair: java.lang.String toString()>
<java.util.stream.AbstractPipeline: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$EmptyNode$OfRef: java.util.Spliterator spliterator()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><org.springframework.http.server.DefaultPathContainer: void <init>(java.lang.String,java.util.List)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.util.LazyStreamable: java.lang.String toString()>
<org.springframework.data.mapping.model.BasicPersistentEntity: org.springframework.data.mapping.Alias getTypeAlias()>-><org.springframework.data.util.Lazy: java.lang.Object get()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.util.LinkedMultiValueMap: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void addListener(org.springframework.data.redis.connection.MessageListener,java.util.Collection)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder,org.springframework.data.mapping.model.FieldNamingStrategy)>-><org.springframework.data.mapping.model.BasicPersistentEntity: java.lang.String getName()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.misc.Signal: java.lang.String toString()>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.Object: int hashCode()>
<java.lang.ThreadGroup: void <init>(java.lang.String)>-><java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<org.bson.codecs.BooleanCodec: void <init>()>-><java.lang.Object: void <init>()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$PatternSubscriptionTask: void run()>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: java.lang.String toString()>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><java.net.SocketInputStream: void close()>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,int)>-><org.bson.RawBsonArray$RawBsonArrayList: java.lang.Object get(int)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.aop.support.AbstractPointcutAdvisor: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.LoadingCache build(com.google.common.cache.CacheLoader)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.mapping.MongoMappingContext: org.springframework.data.mongodb.core.mapping.MongoPersistentProperty createPersistentProperty(org.springframework.data.mapping.model.Property,org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder,org.springframework.data.mapping.model.FieldNamingStrategy)>
<org.bson.codecs.NumberCodecHelper$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<org.springframework.security.authentication.LockedException: void <init>(java.lang.String)>-><org.springframework.security.authentication.AccountStatusException: void <init>(java.lang.String)>
<org.springframework.data.redis.connection.jedis.JedisConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisConnection: boolean isSubscribed()>
<java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineAddresses()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.invoke.LambdaForm: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration: void <init>()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ShellDateTimeConverter: void <init>()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.boot.web.error.ErrorAttributeOptions getErrorAttributeOptions(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeBindingErrors(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$IntWrappingSpliterator: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.stream.ReduceOps$6ReducingSink: void accept(int)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<java.util.concurrent.ThreadPoolExecutor$AbortPolicy: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonMaxKey: java.lang.String toString()>
<java.util.stream.Nodes$SizedCollectorTask: void <init>(java.util.Spliterator,java.util.stream.PipelineHelper,int)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.rmi.server.LogStream: java.lang.String toString()>
<java.util.stream.SpinedBuffer$OfPrimitive: void inflateSpine()>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.Object[] newArrayArray(int)>
<io.jsonwebtoken.impl.JwtMap: java.util.Date getDate(java.lang.String)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonDouble: java.lang.String toString()>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><org.bson.BsonArray: int size()>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><java.io.BufferedInputStream: void close()>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonObjectId: int hashCode()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: void <init>(javax.security.auth.SubjectDomainCombiner$1)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void handleErrorInObjectToString(java.lang.Object,java.lang.StringBuilder,java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyRegistrationConfiguration: void <init>()>
<com.zaxxer.hikari.HikariConfig: void <clinit>()>-><java.lang.String: char[] toCharArray()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundryActuatorAutoConfiguration: void <init>()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.Scannable$Attr$2: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Locale)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<com.mongodb.DocumentToDBRefTransformer: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: boolean isAssociation()>-><org.springframework.data.util.Lazy: java.lang.Object get()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><org.bson.RawBsonArray$RawBsonArrayList: java.lang.Object get(int)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: void <init>()>-><com.fasterxml.classmate.util.ResolvedTypeCache: com.fasterxml.classmate.util.ResolvedTypeCache lruCache(int)>
<org.springframework.data.mongodb.core.DefaultIndexOperations: com.mongodb.client.model.IndexOptions addPartialFilterIfPresent(com.mongodb.client.model.IndexOptions,org.bson.Document,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions partialFilterExpression(org.bson.conversions.Bson)>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.nio.ByteOrder: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.PropertyValidator: java.lang.String prefixedProperty(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.bson.codecs.DocumentCodec: void <clinit>()>-><org.bson.codecs.ValueCodecProvider: void <init>()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.BsonDocument: int size()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.apache.ibatis.io.Resources: java.util.Properties getUrlAsProperties(java.lang.String)>-><sun.net.www.MeteredStream: void close()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonDateTime: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.types.MaxKey: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.types.Code: java.lang.String toString()>
<sun.security.x509.X509CertImpl: java.util.Collection cloneAltNames(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.Spliterators$3Adapter: boolean hasNext()>
<io.micrometer.core.instrument.config.MeterRegistryConfigValidator: io.micrometer.core.instrument.config.validate.Validated lambda$check$3(java.lang.String,java.util.function.Function,io.micrometer.core.instrument.config.MeterRegistryConfig)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.StringJoiner: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerOpaqueTokenConfiguration$WebSecurityConfiguration: void <init>()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.Vector: boolean addAll(java.util.Collection)>
<com.rabbitmq.client.impl.Frame: long tableSize(java.util.Map)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.pool.HikariProxyStatement: int getUpdateCount()>-><com.zaxxer.hikari.pool.HikariProxyStatement: int getUpdateCount()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonDocument: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.OptionalInt: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: void setCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object,java.lang.Object)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.channel.ReflectiveChannelFactory: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation$CollationLocale: boolean lambda$asString$0(java.lang.String)>-><java.lang.String: boolean isEmpty()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.types.MinKey: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool: void lambda$softEvictConnections$0(com.zaxxer.hikari.pool.PoolEntry)>-><com.zaxxer.hikari.pool.HikariPool: boolean softEvictConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)>
<org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties: java.lang.String lambda$resolveConfigLocation$0()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$10: void <init>(java.lang.String,int)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.CodeSigner: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.JdkLoggerFactory: void <clinit>()>-><io.micrometer.core.util.internal.logging.JdkLoggerFactory: void <init>()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.StringJoiner: java.lang.String toString()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.LinkedList: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.Year: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.management.openmbean.SimpleType: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.Scannable$Attr$1: java.lang.String toString()>
<org.springframework.data.spel.ExtensionAwareEvaluationContextProvider: java.util.Collection lambda$new$0(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.data.spel.ExtensionAwareEvaluationContextProvider: java.util.Collection getExtensionsFrom(org.springframework.beans.factory.ListableBeanFactory)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonArray: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonDocumentWrapper: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.Scannable$Attr$1: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.ProcessEnvironment$StringEntrySet: int hashCode()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<register-finalize <com.mongodb.client.model.CollationStrength: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.github.pagehelper.autoconfigure.PageHelperAutoConfiguration: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jms.activemq.ActiveMQConnectionFactoryConfiguration: void <init>()>
<org.apache.catalina.core.ApplicationFilterConfig: void <init>(org.apache.catalina.Context,org.apache.tomcat.util.descriptor.web.FilterDef)>-><org.apache.catalina.startup.FailedContext: org.apache.tomcat.InstanceManager getInstanceManager()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonArray: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.rmi.server.LoaderHandler$Loader: java.lang.String toString()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions unique(boolean)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.net.URL: java.lang.String toString()>
<org.springframework.dao.InvalidDataAccessResourceUsageException: void <init>(java.lang.String)>-><org.springframework.dao.NonTransientDataAccessException: void <init>(java.lang.String)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.EnumMap$1: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map,boolean,java.util.Locale)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: void lambda$entryConsumer$0(java.util.function.Consumer,java.util.Map$Entry)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: int hashCode()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisSubscribedConnectionException: void <init>(java.lang.String)>-><org.springframework.dao.InvalidDataAccessApiUsageException: void <init>(java.lang.String)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.io.FilePermission: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonDouble: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: boolean containsKey(java.lang.Object)>
<org.springframework.util.CollectionUtils$MultiValueMapAdapter: void putAll(java.util.Map)>-><java.util.Collections$UnmodifiableMap: void putAll(java.util.Map)>
<com.rabbitmq.client.impl.ValueWriter: void writeArray(java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonInt64: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void <init>()>-><com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<sun.security.util.Password: char[] readPassword(java.io.InputStream,boolean)>-><java.io.BufferedInputStream: int read()>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><sun.net.www.http.KeepAliveStream: void close()>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated detect(java.lang.String,java.lang.String)>-><java.util.stream.ReferencePipeline: boolean anyMatch(java.util.function.Predicate)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Currency: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonDouble: java.lang.String toString()>
<sun.text.normalizer.UCharacter: void <clinit>()>-><java.net.URISyntaxException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><java.util.ArrayList: void clear()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>-><java.io.InputStream: void close()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void subscribePattern(byte[][])>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<java.util.stream.SpinedBuffer$OfPrimitive: void inflateSpine()>-><java.util.stream.SpinedBuffer$OfLong: java.lang.Object[] newArrayArray(int)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: int hashCode()>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<org.bson.codecs.BsonTypeClassMap: void <init>(java.util.Map)>-><org.bson.codecs.BsonTypeClassMap: void addDefaults()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<org.bson.codecs.NumberCodecHelper$1: void <clinit>()>-><org.bson.BsonType: org.bson.BsonType[] values()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonBoolean: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.google.common.collect.ForwardingSortedSet: void <init>()>-><com.google.common.collect.ForwardingSet: void <init>()>
<org.bson.codecs.PatternCodec$RegexFlag: void <clinit>()>-><org.bson.codecs.PatternCodec$RegexFlag: org.bson.codecs.PatternCodec$RegexFlag[] values()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$PatternSubscriptionPresentCondition: boolean passes()>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.mongodb.DBObjectCodec: org.bson.codecs.BsonTypeClassMap createDefaultBsonTypeClassMap()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.publisher.MonoOnAssembly: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.types.Binary: int hashCode()>
<org.bson.json.RelaxedExtendedJsonInt64Converter: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ShellInt64Converter: void <init>()>
<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map inspectClass(java.lang.Class)>-><java.net.SocketInputStream: void close()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$MessagingTemplateConfiguration: void <init>()>
<org.bson.codecs.jsr310.Jsr310CodecProvider: void <clinit>()>-><org.bson.codecs.jsr310.LocalTimeCodec: void <init>()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.apache.ibatis.io.ResolverUtil: void addIfMatching(org.apache.ibatis.io.ResolverUtil$Test,java.lang.String)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: boolean usePropertyAccess()>-><java.lang.Boolean: boolean booleanValue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.util.calendar.Era: boolean equals(java.lang.Object)>
<io.lettuce.core.RedisConnectionException: io.lettuce.core.RedisConnectionException create(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.springframework.data.redis.serializer.ByteArrayRedisSerializer: void <clinit>()>-><org.springframework.data.redis.serializer.ByteArrayRedisSerializer: void <init>(java.lang.String,int)>
<org.springframework.security.web.access.ExceptionTranslationFilter$DefaultThrowableAnalyzer: java.lang.Throwable lambda$initExtractorMap$0(java.lang.Throwable)>-><javax.servlet.ServletException: java.lang.Throwable getRootCause()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonDbPointer: java.lang.String toString()>
<org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.bson.codecs.MapCodec: void <clinit>()>-><org.bson.codecs.DocumentCodecProvider: void <init>()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonBinary: java.lang.String toString()>
<org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties: java.lang.String lambda$resolveConfigLocation$0()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.mongodb.core.query.Collation: com.mongodb.client.model.Collation toMongoCollation()>-><org.springframework.data.mongodb.core.query.Collation: java.lang.Object map(org.springframework.core.convert.converter.Converter)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$4Adapter: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.nio.ByteBuffer: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<org.bson.json.ExtendedJsonDateTimeConverter: void <init>()>-><java.lang.Object: void <init>()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<com.rabbitmq.client.impl.nio.NioLoop: void run()>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<jdk.internal.util.xml.impl.ReaderUTF16: int read(char[],int,int)>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.node.BooleanNode: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.internal.CustomizerRegistry: void add(org.springframework.cglib.core.KeyFactoryCustomizer)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap access$000()>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.MeteredStream: int read()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.apache.juli.logging.DirectJDKLog: void fatal(java.lang.Object,java.lang.Throwable)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.bson.BsonBoolean: int compareTo(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.invoke.MemberName: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<org.bson.codecs.DecoderContext: void <clinit>()>-><org.bson.codecs.DecoderContext: org.bson.codecs.DecoderContext$Builder builder()>
<register-finalize <org.springframework.data.redis.serializer.ByteArrayRedisSerializer: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.domain.Sort$Order: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.image.ColorModel: java.lang.String toString()>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)>-><org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: boolean isWhitelisted(java.lang.String)>
<org.springframework.boot.actuate.trace.http.Include: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.util.ClassTypeInformation: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>-><com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><cn.hutool.core.date.DateTime: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterTypeReader: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Object: java.lang.String toString()>
<java.io.DataInputStream: int skipBytes(int)>-><sun.net.www.MeteredStream: long skip(long)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.net.SocketPermission: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.IndexField: void <init>(java.lang.String,org.springframework.data.domain.Sort$Direction,org.springframework.data.mongodb.core.index.IndexField$Type)>-><org.springframework.data.mongodb.core.index.IndexField: void <init>(java.lang.String,org.springframework.data.domain.Sort$Direction,org.springframework.data.mongodb.core.index.IndexField$Type,java.lang.Float)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><java.lang.Double: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.ZonedDateTime: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><java.lang.String: java.lang.String valueOf(char)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.text.DecimalFormatSymbols: int hashCode()>
<org.springframework.security.authentication.AccountExpiredException: void <init>(java.lang.String)>-><org.springframework.security.authentication.AccountStatusException: void <init>(java.lang.String)>
<org.springframework.web.servlet.view.ContentNegotiatingViewResolver: void <clinit>()>-><org.springframework.web.servlet.view.ContentNegotiatingViewResolver$1: void <init>()>
<org.bson.codecs.configuration.CodecRegistries: org.bson.codecs.configuration.CodecRegistry fromProviders(java.util.List)>-><org.bson.internal.ProvidersCodecRegistry: void <init>(java.util.List)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><java.util.stream.SpinedBuffer$OfLong: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.security.CodeSigner: int hashCode()>
<cn.hutool.core.map.MapProxy: java.lang.Object remove(java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object remove(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler$Builder: void _addPropertyIndex(java.lang.String,java.lang.Integer)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.wrapper.MapWrapper: void set(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.redis.connection.RedisStringCommands$SetOption: void <clinit>()>-><org.springframework.data.redis.connection.RedisStringCommands$SetOption: void <init>(java.lang.String,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiListingReader: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonJavaScript: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Byte: java.lang.String toString()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.net.HttpURLConnection: int getResponseCode()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><com.google.common.collect.ForwardingCollection: int size()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><io.lettuce.core.RedisURI: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: java.lang.Object next()>
<org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String extractPartialFilterString(org.bson.Document)>-><org.springframework.data.mongodb.util.BsonUtils: java.lang.String toJson(org.bson.Document)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ExtendedJsonRegularExpressionConverter: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.data.spel.ExtensionAwareEvaluationContextProvider$EvaluationContextExtensionAdapter: void <init>(org.springframework.data.spel.spi.EvaluationContextExtension,org.springframework.data.spel.EvaluationContextExtensionInformation)>-><org.springframework.data.spel.Functions: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.io.File: void <init>(java.lang.String)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.types.CodeWithScope: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonBoolean: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><io.netty.util.AbstractConstant: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.springframework.security.crypto.password.Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.apache.ibatis.io.Resources: java.util.Properties getResourceAsProperties(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void unsubscribePattern(byte[][])>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<java.net.URLClassLoader: void close()>-><java.io.InputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.lettuce.core.masterslave.RedisMasterSlaveNode: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void subscribePattern(byte[][])>-><org.springframework.data.redis.connection.jedis.JedisConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.boot.actuate.audit.listener.AuditListener: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<cn.hutool.core.map.MapProxy: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Collections$UnmodifiableMap: java.util.Collection values()>-><org.bson.RawBsonDocument: java.util.Collection values()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: int hashCode()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><cn.hutool.json.JSONArray: boolean addAll(java.util.Collection)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cache.CachesEndpointAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Locale)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<io.micrometer.core.instrument.binder.system.ProcessorMetrics: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.util.MimeType: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<register-finalize <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<register-finalize <org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity$MongoPersistentPropertyComparator: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void run()>-><org.springframework.data.redis.connection.jedis.JedisConnectionFactory: org.springframework.data.redis.connection.RedisConnection getConnection()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<com.mongodb.client.model.Collation$Builder: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.apache.ibatis.mapping.ResultMapping: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.security.CodeSource: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.Instant: java.lang.String toString()>
<org.bson.codecs.BsonTypeClassMap: void <init>()>-><org.bson.codecs.BsonTypeClassMap: void <init>(java.util.Map)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<org.apache.ibatis.builder.annotation.MapperAnnotationBuilder: java.util.Optional getAnnotationWrapper(java.lang.reflect.Method,boolean,java.util.Collection)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.DriverDataSource: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<reactor.core.scheduler.Schedulers: java.lang.Object scanExecutor(java.util.concurrent.Executor,reactor.core.Scannable$Attr)>-><java.util.concurrent.ThreadPoolExecutor: boolean isTerminated()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonInt64: java.lang.String toString()>
<sun.net.ProgressMonitor: void <clinit>()>-><sun.net.ProgressMonitor: void <init>()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.bson.codecs.EncoderContext: void <clinit>()>-><org.bson.codecs.EncoderContext$Builder: org.bson.codecs.EncoderContext build()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getEnum(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.Class,java.lang.String)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.internal.Optional: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.BsonArray: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.channel.ReflectiveChannelFactory: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.bson.json.LegacyExtendedJsonRegularExpressionConverter: void <init>()>-><java.lang.Object: void <init>()>
<com.mongodb.MongoClientSettings: void <clinit>()>-><com.mongodb.DocumentToDBRefTransformer: void <init>()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>-><com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><org.springframework.util.StringUtils: java.lang.String uriDecode(java.lang.String,java.nio.charset.Charset)>
<com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(byte[],int,int,boolean)>-><com.google.protobuf.CodedInputStream$ArrayDecoder: void <init>(byte[],int,int,boolean,com.google.protobuf.CodedInputStream$1)>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonDbPointer: int hashCode()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag: void <clinit>()>-><org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Formatter$FixedString: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonDouble: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdate(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator: void createAndRegisterProperty(org.springframework.data.mapping.model.Property)>-><org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: boolean usePropertyAccess()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration: void <init>()>
<org.bson.Document: org.bson.Document append(java.lang.String,java.lang.Object)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver: void resolveAndAddIndexesForAssociation(org.springframework.data.mapping.Association,java.util.List,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.web.method.HandlerMethod: org.springframework.core.MethodParameter[] initMethodParameters()>
<com.rabbitmq.client.impl.recovery.AutorecoveringChannel: void close()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.mongodb.client.model.geojson.GeometryCollection: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.cglib.core.MethodInfo: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder,org.springframework.data.mapping.model.FieldNamingStrategy)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.LocalDate: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList: void <init>(int)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.view.InternalResourceViewResolver: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.http.ResponseEntity: void <init>(org.springframework.http.HttpStatus)>-><org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap,org.springframework.http.HttpStatus)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiDescriptionLookup: void <init>()>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.ZonedDateTime: boolean equals(java.lang.Object)>
<java.util.Vector$Itr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>-><org.springframework.boot.actuate.health.Health$Builder: java.util.Map access$100(org.springframework.boot.actuate.health.Health$Builder)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: int hashCode()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<register-finalize <org.springframework.data.mongodb.core.DefaultWriteConcernResolver: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><cn.hutool.core.date.DateTime: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><java.lang.String: int indexOf(int)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator: void <clinit>()>-><io.micrometer.core.instrument.config.validate.DurationValidator$1: void <init>(java.lang.String,int,java.lang.String[])>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,int)>-><org.bson.BsonArray: java.lang.Object get(int)>
<com.mongodb.DBObjectCodec: void <clinit>()>-><org.bson.codecs.configuration.CodecRegistries: org.bson.codecs.configuration.CodecRegistry fromProviders(java.util.List)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.CompletableFuture: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated flatMap(java.util.function.Function)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: io.micrometer.core.instrument.config.validate.Validated flatMap(java.util.function.BiFunction)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: long getLongValue()>-><org.bson.types.Decimal128: long longValue()>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeResolverBuilder: void <init>(com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: void <init>(com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean isReadable()>-><java.net.URLConnection: long getContentLengthLong()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.mongodb.client.model.geojson.Position: int hashCode()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<jdk.internal.util.xml.impl.ReaderUTF16: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder: boolean matches(java.lang.CharSequence,java.lang.String)>-><java.lang.String: int length()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: int hashCode()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.concurrent.ConcurrentSkipListMap$EntrySet: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationParameterHeadersConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.net.URI: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$ClassProxyingConfiguration: void <init>(org.springframework.beans.factory.BeanFactory)>
<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map inspectClass(java.lang.Class)>-><sun.net.www.http.KeepAliveStream: void close()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AbstractPersistentProperty: java.lang.Iterable getPersistentEntityTypes()>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean isEntity()>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.ByteArrayCodec: java.lang.Class getEncoderClass()>
<jdk.internal.util.xml.impl.ReaderUTF16: int read()>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.google.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.boot.web.error.ErrorAttributeOptions getErrorAttributeOptions(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.types.Decimal128: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration: void <init>()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<sun.misc.Resource: byte[] getBytes()>-><java.net.SocketInputStream: void close()>
<com.rabbitmq.client.impl.recovery.AutorecoveringChannel: void close()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.Semaphore: java.lang.String toString()>
<cn.hutool.core.map.MapProxy: java.lang.Object remove(java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object remove(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<jdk.internal.util.xml.impl.ReaderUTF8: int read(char[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<java.util.Collections$SynchronizedMap: void putAll(java.util.Map)>-><org.bson.BasicBSONObject: void putAll(java.util.Map)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: void forEachRemaining(java.util.function.Consumer)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings: void <init>()>-><java.lang.Object: void <init>()>
<com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(byte[],int,int)>-><com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(byte[],int,int,boolean)>
<java.util.IdentityHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.concurrent.SynchronousQueue: int size()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<io.jsonwebtoken.impl.JwtMap: void setValue(java.lang.String,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertiesUtil$Environment$2: void accept(java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.security.provider.PolicyFile$SelfPermission: int hashCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonStringCodec: java.lang.Class getEncoderClass()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.internal.Optional: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.types.Decimal128: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<org.springframework.context.expression.MapAccessor: void write(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.AtomicLongCodec: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.nio.ByteOrder: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<java.util.Collections$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.Document: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Locale: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.health.Status: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Locale$LocaleKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonSymbol: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonDateTime: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<java.util.stream.Nodes: java.util.stream.Node$OfInt flattenInt(java.util.stream.Node$OfInt)>-><java.util.stream.Nodes$EmptyNode: long count()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdate(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$2: void setVariable(java.lang.String,java.lang.Object)>-><groovy.lang.Binding: void setVariable(java.lang.String,java.lang.Object)>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.Throwable: java.lang.String getMessage()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void <init>()>-><java.util.Properties: void <init>()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void addListener(org.springframework.data.redis.connection.MessageListener,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: java.util.Comparator getComparator()>-><java.util.SortedSet$1: java.util.Comparator getComparator()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.types.MaxKey: int hashCode()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.OffsetTime: int hashCode()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.mongo.MongoHealthContributorAutoConfiguration: void <init>()>
<org.springframework.http.server.DefaultPathContainer$DefaultSeparator: void <init>(char,java.lang.String)>-><java.lang.String: java.lang.String valueOf(char)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.CodeSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<java.io.PrintWriter: void flush()>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextPrintWriter: void flush()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<org.mybatis.spring.boot.autoconfigure.MybatisProperties: void <clinit>()>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver: void <init>()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<register-finalize <io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.context.support.ApplicationListenerDetector: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.FloatCodec: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.DateCodec: java.lang.Class getEncoderClass()>
<org.springframework.data.mongodb.core.convert.DocumentAccessor: java.lang.Object get(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>-><java.util.AbstractList$Itr: boolean hasNext()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$TunnelState: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.bson.codecs.MaxKeyCodec: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<sun.text.normalizer.UBiDiProps: void <init>()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonString: int compareTo(java.lang.Object)>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.LinkedList: boolean addAll(java.util.Collection)>
<org.springframework.boot.context.properties.PropertyMapper$Source: java.lang.Boolean lambda$as$0()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<org.springframework.transaction.support.TransactionSynchronizationManager: java.lang.Object doUnbindResource(java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.internal.Optional: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection _deserializeWithObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.BsonArray: int size()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.web.method.ControllerAdviceBean: int hashCode()>
<sun.security.util.Password: char[] readPassword(java.io.InputStream,boolean)>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<org.springframework.http.HttpHeaders: void putAll(java.util.Map)>-><org.springframework.util.LinkedMultiValueMap: void putAll(java.util.Map)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.http.HttpStatus getStatus(javax.servlet.http.HttpServletRequest)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<com.google.common.base.Absent: void <clinit>()>-><com.google.common.base.Absent: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryConfiguration: void <init>()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonDocument: int hashCode()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List groupEntitiesByChannel(java.util.Collection)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void lambda$populateAnnotationCache$6(java.lang.reflect.Method)>-><java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getAnnotations()>
<java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><java.lang.String: java.lang.String substring(int,int)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonInt64: java.lang.String toString()>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.util.ClassKey: void <init>(java.lang.Class)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.TypeVariableTypeInformation: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisMessageListener: void <init>(org.springframework.data.redis.connection.MessageListener)>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.Clock$SystemClock: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<java.lang.Thread: void <init>(java.lang.Runnable,java.security.AccessControlContext)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.String lambda$createEndpointBeans$0(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean,org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean)>-><java.lang.StringBuilder: void <init>()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<io.micrometer.core.instrument.config.validate.DurationValidator$2: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated$Invalid invalid(java.lang.String,java.lang.Object,java.lang.String,io.micrometer.core.instrument.config.validate.InvalidReason,java.lang.Throwable)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.image.ColorModel: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><cn.hutool.core.date.format.FastDateFormat: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.PropertyValidator: java.lang.String prefixedProperty(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<org.bson.codecs.SymbolCodec: void <init>()>-><java.lang.Object: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.plugins.PathAndParametersEquivalence: void <clinit>()>-><springfox.documentation.spring.web.plugins.ResolvedMethodParameterEquivalence: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.management.openmbean.ArrayType: int hashCode()>
<com.google.common.util.concurrent.SerializingExecutor: void <init>(java.util.concurrent.Executor)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$7: void <init>(java.lang.String,int)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$LongArraySpliterator: java.util.Spliterator trySplit()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.apache.tomcat.util.modeler.NoDescriptorRegistry$NoJmxMBeanServer: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.Collections: java.util.Set emptySet()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.AuthCacheValue: void <clinit>()>-><sun.net.www.protocol.http.AuthCacheImpl: void <init>()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: int compareTo(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<sun.net.NetworkClient: void <clinit>()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonSymbol: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxOnAssembly: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardWrapper: void <init>()>-><org.apache.catalina.core.StandardWrapperValve: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.mongodb.DBRef: java.lang.String toString()>
<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Float: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.lang.Object next()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<sun.net.DefaultProgressMeteringPolicy: void <init>()>-><java.lang.Object: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><java.util.Collections: java.util.List emptyList()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.NumberConverter: java.lang.Number convertInternal(java.lang.Object,java.lang.Class)>-><org.bson.types.Decimal128: float floatValue()>
<org.springframework.web.util.pattern.PathPattern: void <clinit>()>-><java.util.Comparator: java.util.Comparator nullsLast(java.util.Comparator)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <clinit>()>-><java.util.ArrayList: void <init>()>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><org.springframework.util.NumberUtils: java.lang.Number convertNumberToTargetClass(java.lang.Number,java.lang.Class)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<io.micrometer.core.instrument.binder.logging.LogbackMetrics: void <clinit>()>-><java.lang.ThreadLocal: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.CachingConnectionFactory$ChannelCachingConnectionProxy: java.lang.String toString()>
<org.springframework.boot.SpringBootExceptionHandler: boolean isLogConfigurationMessage(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration: void <init>()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><cn.hutool.json.JSONArray: java.lang.Object get(int)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(org.springframework.core.annotation.TypeMappedAnnotations$Aggregate,java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: void lambda$initialCacheNames$0(java.lang.String)>-><org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder withCacheConfiguration(java.lang.String,org.springframework.data.redis.cache.RedisCacheConfiguration)>
<org.springframework.data.mongodb.core.query.Collation$PrimaryICUComparisonLevel: void <init>(boolean)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<java.util.stream.ReferencePipeline: void forEachWithCancel(java.util.Spliterator,java.util.stream.Sink)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: boolean addDeferredProperty(java.lang.String,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Locale: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.Validated$Valid: void <init>(java.lang.String,java.lang.Object)>-><java.lang.Object: void <init>()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.internal.Optional: java.lang.String toString()>
<org.apache.ibatis.type.TypeHandlerRegistry: void register(java.lang.reflect.Type,org.apache.ibatis.type.JdbcType,org.apache.ibatis.type.TypeHandler)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter$TimingContext: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.util.LinkedMultiValueMap: java.lang.String toString()>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.property.field.FieldProvider getFieldProvider()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertiesUtil$Environment$2: void accept(java.lang.String,java.lang.String)>-><org.bson.BsonArray: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamField: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.mongodb.client.model.geojson.Point: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><java.net.SocketInputStream: void close()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.lettuce.core.metrics.CommandMetrics: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyConnection$ClosedConnection: java.lang.Object lambda$getClosedConnection$0(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>-><java.lang.Class: java.lang.String getCanonicalName()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.awt.AppContext: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<java.lang.Package: java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class)>-><java.lang.Class: java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class)>
<cn.hutool.json.JSONObject: void init(java.lang.Object)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$2: void setVariable(java.lang.String,java.lang.Object)>-><org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: void applyPropertyToBeanDefinition(java.lang.String,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.LinkedList$ListItr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonDecimal128: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.mapping.model.Property: java.lang.String getName()>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.Class getType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.Map getErrorAttributes(javax.servlet.http.HttpServletRequest,org.springframework.boot.web.error.ErrorAttributeOptions)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.messaging.handler.AbstractMessageCondition: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.rmi.server.LogStream: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.types.Decimal128: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.StringBuffer: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><java.util.Spliterators$4Adapter: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: int hashCode()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void addPersistentProperty(org.springframework.data.mapping.PersistentProperty)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>
<java.util.Currency$1: java.lang.Void run()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.util.TypeDiscoverer: org.springframework.data.util.ClassTypeInformation getRawTypeInformation()>-><org.springframework.data.util.ParentTypeAwareTypeInformation: java.lang.Class getType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><java.util.OptionalInt: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>
<sun.net.ProgressSource$State: void <clinit>()>-><sun.net.ProgressSource$State: void <init>(java.lang.String,int)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration$OAuth2ClientWebMvcSecurityConfiguration: void <init>()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.types.Code: java.lang.String toString()>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.FromStringDeserializer: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>
<org.bson.json.StrictCharacterStreamJsonWriter$State: void <clinit>()>-><org.bson.json.StrictCharacterStreamJsonWriter$State: void <init>(java.lang.String,int)>
<com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.types.ResolvedObjectType create(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>-><com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>
<java.util.Collections$SynchronizedMap: java.lang.Object remove(java.lang.Object)>-><org.bson.Document: java.lang.Object remove(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: int hashCode()>
<org.springframework.boot.actuate.autoconfigure.endpoint.jmx.DefaultEndpointObjectNameFactory: boolean hasMBean(java.lang.String)>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry$NoJmxMBeanServer: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.security.Provider$UString: java.lang.String toString()>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><java.lang.Class: java.lang.String getSimpleName()>
<java.util.stream.Node$OfPrimitive: java.lang.Object[] asArray(java.util.function.IntFunction)>-><java.util.stream.Node$OfLong: void copyInto(java.lang.Object[],int)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean isReadable()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong flattenLong(java.util.stream.Node$OfLong)>-><java.util.stream.Node: int getChildCount()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider: void <init>(org.springframework.data.mongodb.core.convert.MappingMongoConverter,org.springframework.data.mongodb.core.convert.DocumentAccessor,org.springframework.data.mapping.model.SpELExpressionEvaluator,org.springframework.data.mongodb.core.convert.ObjectPath)>-><java.lang.Object: void <init>()>
<org.springframework.messaging.rsocket.DefaultRSocketStrategies$DefaultRSocketStrategiesBuilder: void lambda$build$0(org.springframework.messaging.rsocket.MetadataExtractor,java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<sun.awt.DebugSettings: java.lang.String toString()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonBoolean: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.net.URI: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: boolean fillBuffer()>-><java.util.stream.SliceOps$3$1: boolean cancellationRequested()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: int compareTo(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.Year: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.bson.codecs.MapCodec: void <clinit>()>-><org.bson.codecs.IterableCodecProvider: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.publisher.FluxCreate$BufferAsyncSink: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Vector: int hashCode()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><java.util.OptionalInt: java.lang.String toString()>
<java.util.stream.AbstractPipeline: java.util.stream.Node evaluate(java.util.Spliterator,boolean,java.util.function.IntFunction)>-><java.util.stream.LongPipeline: java.util.stream.Node$Builder makeNodeBuilder(long,java.util.function.IntFunction)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<io.micrometer.core.instrument.binder.jvm.JvmGcMetrics: void <clinit>()>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.Class)>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><java.net.SocketInputStream: void close()>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.lettuce.core.masterslave.RedisMasterSlaveNode: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<org.springframework.security.web.savedrequest.DefaultSavedRequest: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.core.Constants: void lambda$getValues$0(java.lang.String,java.util.Set,java.lang.String,java.lang.Object)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonDateTime: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Collections$UnmodifiableMap: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator: void <init>(java.lang.String,int,java.lang.String[],io.micrometer.core.instrument.config.validate.DurationValidator$1)>-><io.micrometer.core.instrument.config.validate.DurationValidator: void <init>(java.lang.String,int,java.lang.String[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.Instant: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void debug(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: boolean patchShadedLibraryId(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String)>-><java.net.SocketInputStream: int available()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String toJava(java.lang.String,java.lang.String)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.types.Decimal128: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents$Type$10: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: boolean cachePolicy()>-><java.lang.Boolean: boolean parseBoolean(java.lang.String)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration: void <init>()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.security.AccessControlContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.bson.codecs.jsr310.Jsr310CodecProvider: void <clinit>()>-><org.bson.codecs.jsr310.LocalDateCodec: void <init>()>
<java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray()>-><java.util.concurrent.LinkedBlockingQueue: java.lang.Object[] toArray()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdateStringKeyMap(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer: java.lang.String _locateTypeId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: java.lang.String idFromBaseType()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation: com.mongodb.client.model.Collation lambda$toMongoCollationConverter$16(org.springframework.data.mongodb.core.query.Collation)>-><com.mongodb.client.model.Collation$Builder: com.mongodb.client.model.Collation$Builder locale(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.AbstractByteBufAllocator: java.lang.String toString()>
<org.springframework.core.type.classreading.SimpleMetadataReader: org.springframework.asm.ClassReader getClassReader(org.springframework.core.io.Resource)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<com.google.common.collect.MapMakerInternalMap$Strength: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.bson.BsonDocumentWrapper: int size()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.math.BigInteger: int hashCode()>
<java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner)>-><java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner,boolean)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void addAllowedHeader(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonMinKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator: long _long(java.lang.Object)>-><org.bson.types.Decimal128: long longValue()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.AVA: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void doWithAssociations(org.springframework.data.mapping.SimpleAssociationHandler)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.PropertyValidator: java.lang.String lambda$getEnum$0(java.lang.Enum)>-><java.lang.Enum: java.lang.String name()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<sun.security.util.Password: char[] readPassword(java.io.InputStream,boolean)>-><java.io.FileInputStream: int read()>
<org.bson.json.ShellRegularExpressionConverter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.CompletableFuture: java.lang.String toString()>
<org.apache.ibatis.io.Resources: java.util.Properties getResourceAsProperties(java.lang.String)>-><java.io.BufferedInputStream: void close()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonBinary: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getEnum(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.Class,java.lang.String)>-><java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.Class: java.lang.String toString()>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonRegularExpressionCodec: java.lang.Class getEncoderClass()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.bootstrap.AbstractBootstrap: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.EventObject: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<java.util.TreeMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void addListener(org.springframework.data.redis.connection.MessageListener,java.util.Collection)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<java.util.zip.CheckedInputStream: int read()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<org.apache.ibatis.builder.annotation.MapperAnnotationBuilder: java.util.Optional getAnnotationWrapper(java.lang.reflect.Method,boolean,java.util.Collection)>-><org.bson.BsonDocumentWrapper: boolean isEmpty()>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper addProperty(java.lang.String,java.lang.Object)>-><org.springframework.beans.MutablePropertyValues: org.springframework.beans.MutablePropertyValues add(java.lang.String,java.lang.Object)>
<java.util.zip.InflaterOutputStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String toJson(java.lang.Object)>-><org.springframework.util.ObjectUtils: boolean isArray(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner$4: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.net.Inet6Address: int hashCode()>
<com.mongodb.client.model.IndexOptions: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.Nodes$ToArrayTask$OfRef: void copyNodeToArray()>-><java.util.stream.Node$OfDouble: void copyInto(java.lang.Object[],int)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<java.lang.reflect.Proxy$1: java.lang.Void run()>-><java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<springfox.documentation.spring.web.readers.operation.DefaultOperationReader: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<org.springframework.util.LinkedCaseInsensitiveMap$1: boolean removeEldestEntry(java.util.Map$Entry)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String access$000(org.springframework.util.LinkedCaseInsensitiveMap,java.lang.String)>
<jdk.internal.util.xml.impl.Parser: void dtd()>-><sun.net.www.MeteredStream: void close()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<io.netty.util.internal.NativeLibraryLoader: void load(java.lang.String,java.lang.ClassLoader)>-><java.io.FileInputStream: int read(byte[])>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<sun.security.util.Password: char[] readPassword(java.io.InputStream,boolean)>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<org.apache.ibatis.builder.annotation.MapperAnnotationBuilder: java.util.Optional getAnnotationWrapper(java.lang.reflect.Method,boolean,java.util.Collection)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void addPersistentProperty(org.springframework.data.mapping.PersistentProperty)>-><org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: boolean isTransient()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedList: boolean isMergeEnabled()>
<java.util.HashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.StringBuilder: java.lang.String toString()>
<register-finalize <org.bson.AbstractBsonWriter$State: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated detect(java.lang.String,java.lang.String)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<org.springframework.boot.ResourceBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonBoolean: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<java.util.stream.Nodes$DoubleSpinedNodeBuilder: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<javax.security.auth.kerberos.KrbServicePermissionCollection: void <init>()>-><java.util.ArrayList: void <init>()>
<java.time.format.DateTimeTextProvider$LocaleStore: java.util.Iterator getTextIterator(java.time.format.TextStyle)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.Boolean lambda$isFilterMatch$6(org.springframework.boot.actuate.endpoint.ExposableEndpoint,org.springframework.boot.actuate.endpoint.EndpointFilter)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.bson.codecs.MapCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap,org.bson.Transformer)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.InetSocketAddress: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<sun.net.httpserver.ChunkedInputStream: void consumeCRLF()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.Spliterators$LongArraySpliterator: long estimateSize()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.Document: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation$CollationLocale: java.lang.String asString()>-><java.lang.StringBuilder: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Throwable: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonBinary: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.core.env.PropertySource: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<com.google.common.collect.MapMakerInternalMap$Strength$2: void <init>(java.lang.String,int)>-><com.google.common.collect.MapMakerInternalMap$Strength: void <init>(java.lang.String,int,com.google.common.collect.MapMakerInternalMap$1)>
<com.rabbitmq.client.impl.TlsUtils: java.lang.String lambda$sans$0(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CycleGuard$Path: void <clinit>()>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CycleGuard$Path: void <init>(java.util.List,boolean)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.ParamNameResolver: java.lang.String getActualParamName(java.lang.reflect.Method,int)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<com.mongodb.client.model.geojson.CoordinateReferenceSystemType: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonDecimal128: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Type: java.lang.String toString()>
<com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter build()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.Character$Subset: java.lang.String toString()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean isReadable()>-><sun.net.www.MeteredStream: void close()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration: void <init>()>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.publisher.Mono: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<sun.net.httpserver.ChunkedInputStream: int readImpl(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.core.AttributeAccessorSupport: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.actuate.autoconfigure.endpoint.jmx.DefaultEndpointObjectNameFactory: boolean hasMBean(java.lang.String)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.info.ProjectInfoProperties)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.OffsetTime: java.lang.String toString()>
<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>-><sun.net.www.http.KeepAliveStream: void close()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration$HikariPoolDataSourceMetadataProviderConfiguration: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<org.bson.BsonContextType: org.bson.BsonContextType[] values()>-><java.lang.Object: java.lang.Object clone()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$1: void <init>()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>-><org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.data.mongodb.core.query.Collation$ICUComparisonLevel: void <init>(int)>-><org.springframework.data.mongodb.core.query.Collation$ICUComparisonLevel: void <init>(int,java.util.Optional,java.util.Optional)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.Vector: java.util.Iterator iterator()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.format.DecimalStyle: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.health.Status: void <init>(java.lang.String)>-><org.springframework.boot.actuate.health.Status: void <init>(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date parseAsISO8601(java.lang.String,java.text.ParsePosition)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.http.HttpStatus getStatus(javax.servlet.http.HttpServletRequest)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<com.mongodb.client.model.Collation: void <init>(com.mongodb.client.model.Collation$Builder)>-><com.mongodb.client.model.Collation$Builder: com.mongodb.client.model.CollationAlternate access$800(com.mongodb.client.model.Collation$Builder)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String iterableToDelimitedString(java.lang.Iterable,java.lang.String,java.lang.String,org.springframework.core.convert.converter.Converter)>-><java.util.Arrays$ArrayList: java.util.Spliterator spliterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.ThreadGroup: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMetricsAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<io.jsonwebtoken.impl.JwtMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>-><sun.net.www.MeteredStream: void close()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonString: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Hashtable$Enumerator: java.lang.Object nextElement()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigInteger getBigIntegerValue()>-><org.bson.types.Decimal128: long longValue()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonDocument: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Long: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getEnum(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.Class,java.lang.String)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$8: void <init>(java.lang.String,int)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.core.SpringProperties: void <clinit>()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.data.domain.Sort$Order: int hashCode()>
<java.util.AbstractList: void rangeCheckForAdd(int)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<org.springframework.security.core.userdetails.User$UserBuilder: java.lang.String lambda$roles$1(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.util.Properties: void load(java.io.InputStream)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.LoadingCache build(com.google.common.cache.CacheLoader)>-><com.google.common.cache.CacheBuilder: void checkWeightWithWeigher()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.reactive.ReactiveManagementContextAutoConfiguration: void <init>()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><java.lang.Double: java.lang.Double valueOf(double)>
<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<sun.text.normalizer.UBiDiProps: void <init>()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.tomcat.util.ExceptionUtils: java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)>
<org.springframework.web.method.HandlerMethod: org.springframework.core.MethodParameter[] initMethodParameters()>-><org.springframework.web.method.HandlerMethod$HandlerMethodParameter: void <init>(org.springframework.web.method.HandlerMethod,int)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<org.apache.ibatis.mapping.CacheBuilder: void setCacheProperties(org.apache.ibatis.cache.Cache)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.types.Symbol: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Set removeBindingsWithDestination(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: void remove()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.security.cert.X509CRLEntry: int hashCode()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.bson.codecs.AtomicIntegerCodec: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.types.Code: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonInt64: java.lang.String toString()>
<sun.net.www.http.KeepAliveStream: void <clinit>()>-><sun.net.www.http.KeepAliveStreamCleaner: void <init>()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ShellDecimal128Converter: void <init>()>
<com.mongodb.client.model.CollationStrength: com.mongodb.client.model.CollationStrength fromInt(int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map,boolean,java.util.Locale)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<sun.net.www.protocol.http.AuthCacheImpl: void <init>()>-><java.util.HashMap: void <init>()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonInt64: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.PathPatternParser: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration: void <init>()>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><java.io.InputStream: int read(byte[],int,int)>
<org.bson.BsonDocument: void putAll(java.util.Map)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><cn.hutool.json.JSONArray: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.Object: java.lang.Class getClass()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration: void <init>()>
<org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode: void <clinit>()>-><org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonBinary: int hashCode()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.sql.Date: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.PatternCodec: void <init>()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: boolean hasNext()>
<sun.security.x509.X509CertImpl: java.util.Collection cloneAltNames(java.util.Collection)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: java.lang.Object get(int)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.net.URL: int hashCode()>
<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory: boolean isClassLoaderDefineClassAvailable(org.springframework.data.mapping.PersistentEntity)>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.trace.http.HttpExchangeTracer: java.lang.Long lambda$sendingResponse$0(org.springframework.boot.actuate.trace.http.HttpTrace)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<com.mongodb.MongoClientSettings: void <clinit>()>-><org.bson.codecs.DocumentCodecProvider: void <init>(org.bson.Transformer)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void put(java.lang.Object,java.lang.Object)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<org.bson.json.ExtendedJsonDoubleConverter: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.codecs.DocumentCodecProvider: int hashCode()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisConnection: boolean isQueueing()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.EnumMap$1: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<com.rabbitmq.client.impl.AMQChannel: void cleanRpcChannelState()>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy[] values()>-><java.lang.Object: java.lang.Object clone()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Boolean: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.beans.PropertyValue: int hashCode()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String serializeValue(java.lang.Object)>-><java.lang.String: int length()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <init>(java.lang.String,int,java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void subscribeChannel(byte[][])>-><org.springframework.data.redis.connection.jedis.JedisConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator$2: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.time.Duration: java.time.Duration parse(java.lang.CharSequence)>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <clinit>()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<org.springframework.data.spel.Functions: void lambda$addAll$0(java.lang.String,org.springframework.data.spel.spi.Function)>-><org.springframework.data.spel.Functions: boolean contains(java.util.List,org.springframework.data.spel.spi.Function)>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><sun.net.www.MeteredStream: void close()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.nio.charset.Charset: boolean equals(java.lang.Object)>
<javax.servlet.ServletException: java.lang.Throwable getRootCause()>-><java.lang.Throwable: java.lang.Throwable getCause()>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray()>-><org.bson.BsonArray: java.lang.Object[] toArray()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonInt32: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.security.Provider$UString: int hashCode()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonDecimal128: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.crypto.EllipticCurveSignatureValidator: boolean isValid(byte[],byte[])>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<sun.misc.Resource: byte[] getBytes()>-><sun.net.www.MeteredStream: void close()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.Byte: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.text.FieldPosition: int hashCode()>
<com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: void <init>(com.google.protobuf.RepeatedFieldBuilderV3)>-><java.util.AbstractList: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.ibatis.mapping.ResultMapping: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getEnum(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.Class,java.lang.String)>-><java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.util.DerValue: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: void <init>(float,java.util.Map)>-><org.bson.BsonDocument: int size()>
<org.springframework.boot.actuate.system.DiskSpaceHealthIndicator: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.bson.BsonNull: void <clinit>()>-><org.bson.BsonNull: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Long: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.Clock$SystemClock: java.lang.String toString()>
<sun.awt.DebugSettings: void loadNativeSettings()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.io.File: int hashCode()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<io.micrometer.core.instrument.config.validate.Validated: boolean isInvalid()>-><io.micrometer.core.instrument.config.validate.Validated$None: boolean isValid()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<java.util.stream.Nodes$ToArrayTask$OfPrimitive: void copyNodeToArray()>-><java.util.stream.Nodes$EmptyNode: void copyInto(java.lang.Object,int)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonInt32: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<io.jsonwebtoken.impl.JwtMap: void putAll(java.util.Map)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigDecimal getDecimalValue()>-><org.bson.types.Decimal128: long longValue()>
<org.apache.logging.log4j.util.PropertiesUtil: java.util.Properties loadClose(java.io.InputStream,java.lang.Object)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.validation.beanvalidation.SpringValidatorAdapter: void <clinit>()>-><java.util.HashSet: void <init>(int)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.metrics.http.Outcome: void <clinit>()>-><org.springframework.boot.actuate.metrics.http.Outcome: void <init>(java.lang.String,int)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>
<org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder customizers(java.util.Collection)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.DelegateServiceScheduler: java.lang.String toString()>
<com.google.common.cache.LocalCache$LocalLoadingCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache$LocalManualCache: void <init>(com.google.common.cache.LocalCache,com.google.common.cache.LocalCache$1)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonDateTime: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.rabbitmq.client.impl.AMQChannel: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.SubList$1: boolean hasNext()>
<org.springframework.boot.actuate.health.Status: void <init>(java.lang.String,java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><cn.hutool.json.JSONArray: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.bson.json.JsonDoubleConverter: void <init>()>-><java.lang.Object: void <init>()>
<sun.text.normalizer.NormalizerImpl: void <clinit>()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.text.MessageFormat: int hashCode()>
<org.springframework.core.SpringProperties: void <clinit>()>-><java.io.FileInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.zaxxer.hikari.pool.ProxyConnection$ClosedConnection: java.lang.Object lambda$getClosedConnection$0(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>-><java.lang.String: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.ibatis.parsing.XNode: java.lang.String toString()>
<com.mongodb.MongoClientSettings: void <clinit>()>-><com.mongodb.client.gridfs.codecs.GridFSFileCodecProvider: void <init>()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.http.HttpStatus)>
<sun.awt.DebugSettings: void loadNativeSettings()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.ProcessEnvironment$StringValues: int hashCode()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.bson.BsonArray: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<org.springframework.data.mongodb.core.index.IndexField: org.springframework.data.mongodb.core.index.IndexField create(java.lang.String,org.springframework.data.domain.Sort$Direction)>-><org.springframework.data.mongodb.core.index.IndexField: void <init>(java.lang.String,org.springframework.data.domain.Sort$Direction,org.springframework.data.mongodb.core.index.IndexField$Type)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<org.springframework.aop.framework.ProxyCreatorSupport: void activate()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.data.redis.connection.util.AbstractSubscription: boolean isAlive()>-><java.util.concurrent.atomic.AtomicBoolean: boolean get()>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap: java.util.Collection values()>-><org.bson.BsonDocumentWrapper: java.util.Collection values()>
<java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.ibatis.mapping.ParameterMapping: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getMessageParameter(javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getBooleanParameter(javax.servlet.http.HttpServletRequest,java.lang.String)>
<java.io.DataInputStream: int readUnsignedByte()>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Locale)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.math.BigInteger: java.lang.String toString()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.lang.Iterable)>-><org.springframework.data.mapping.model.BasicPersistentEntity: java.util.Iterator iterator()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonObjectId: int hashCode()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeMessage(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getMessageParameter(javax.servlet.http.HttpServletRequest)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<org.apache.ibatis.builder.xml.XMLConfigBuilder: java.util.Properties settingsAsProperties(org.apache.ibatis.parsing.XNode)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.rabbitmq.client.impl.TlsUtils: void logPeerCertificateInfo(javax.net.ssl.SSLSession)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.web.util.HtmlCharacterEntityReferences: java.lang.String lambda$new$0(int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void doWithAssociations(org.springframework.data.mapping.SimpleAssociationHandler)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.core.annotation.TypeMappedAnnotation: java.lang.Object extractFromMap(java.lang.reflect.Method,java.lang.Object)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: char charAt(int)>
<org.springframework.http.HttpHeaders: void <clinit>()>-><org.springframework.http.HttpHeaders: void <init>(org.springframework.util.MultiValueMap)>
<springfox.documentation.spring.web.readers.parameter.ParameterNameReader: void <init>()>-><java.lang.Object: void <init>()>
<org.bson.BsonType: void <clinit>()>-><org.bson.BsonType: void <init>(java.lang.String,int,int)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<jdk.internal.util.xml.impl.Parser: void dtd()>-><java.io.InputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<java.io.DataInputStream: short readShort()>-><sun.net.www.http.ChunkedInputStream: int read()>
<java.text.DecimalFormat: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>-><org.bson.types.Decimal128: long longValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonDocumentWrapper: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<com.google.protobuf.CodedInputStream$ArrayDecoder: void <init>(byte[],int,int,boolean)>-><com.google.protobuf.CodedInputStream: void <init>(com.google.protobuf.CodedInputStream$1)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.types.Decimal128: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonSymbol: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<org.bson.json.JsonScanner$RegularExpressionState: void <clinit>()>-><org.bson.json.JsonScanner$RegularExpressionState: void <init>(java.lang.String,int)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertiesUtil: java.util.Properties loadClose(java.io.InputStream,java.lang.Object)>-><java.net.SocketInputStream: void close()>
<org.springframework.data.redis.connection.jedis.JedisClientUtils: void <clinit>()>-><redis.clients.jedis.Protocol$Command: redis.clients.jedis.Protocol$Command[] values()>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.DBRef: java.lang.String toString()>
<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory: boolean hasUniquePropertyHashCodes(org.springframework.data.mapping.PersistentEntity)>-><org.springframework.data.mapping.model.BasicPersistentEntity: void doWithProperties(org.springframework.data.mapping.SimplePropertyHandler)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: boolean addDeferredProperty(java.lang.String,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: int compareTo(java.lang.Object)>
<org.springframework.boot.autoconfigure.AutoConfigurationPackages: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.github.pagehelper.autoconfigure.PageHelperAutoConfiguration: void <init>()>-><com.github.pagehelper.autoconfigure.PageHelperProperties: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.types.Decimal128: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.PathPattern: void <clinit>()>-><org.springframework.http.server.PathContainer: org.springframework.http.server.PathContainer parsePath(java.lang.String)>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: java.lang.Object getCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.node.LongNode: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisSubscription: void doClose()>-><java.util.ArrayList: boolean isEmpty()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonJavaScriptWithScope: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void _addDeserializerConstructors(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.ArrayList$SubList: int size()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><java.util.concurrent.atomic.AtomicBoolean: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.OptionalInt: int hashCode()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.Vector$Itr: boolean hasNext()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.introspect.MemberKey: int hashCode()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: void setCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: java.lang.Object set(int,java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils: void lambda$unmodifiableMultiValueMap$0(java.util.Map,java.lang.Object,java.util.List)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdate(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.springframework.boot.ImageBanner: org.springframework.boot.ImageBanner$Frame[] readFrames(int,int)>-><java.io.FileInputStream: void close()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.URL: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void lambda$populateAnnotationCache$6(java.lang.reflect.Method)>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider doCreateConnectionProvider(io.lettuce.core.AbstractRedisClient,io.lettuce.core.codec.RedisCodec)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getReadFrom()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.event.Level: java.lang.String toString()>
<io.jsonwebtoken.impl.JwtMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.data.mongodb.core.DefaultIndexOperations: com.mongodb.client.model.IndexOptions addPartialFilterIfPresent(com.mongodb.client.model.IndexOptions,org.bson.Document,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity)>-><org.springframework.util.Assert: void isInstanceOf(java.lang.Class,java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineHost()>-><org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<org.bson.BsonDocument: void putAll(java.util.Map)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.HikariConfig: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonObjectId: java.lang.String toString()>
<org.springframework.core.style.DefaultToStringStyler: void <init>(org.springframework.core.style.ValueStyler)>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.core.AttributeAccessorSupport: int hashCode()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.io.FileInputStream: void close()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.bson.codecs.BsonValueCodecProvider: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.hazelcast.HazelcastServerConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.node.TextNode: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClientUtils: void <clinit>()>-><java.util.stream.Collectors: java.util.stream.Collector toSet()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><java.io.FileInputStream: int read(byte[])>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void doWithProperties(org.springframework.data.mapping.SimplePropertyHandler)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.PatternEntry: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.AttributeEntry: java.lang.String toString()>
<org.apache.ibatis.session.Configuration: void parsePendingResultMaps()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: void remove()>
<java.util.IdentityHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<javax.xml.ws.spi.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean _hasNullKey(java.util.Map)>-><org.bson.Document: boolean containsKey(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.SpringfoxWebMvcConfiguration: void <init>()>
<org.bson.codecs.BsonMinKeyCodec: void <init>()>-><java.lang.Object: void <init>()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.RabbitResourceHolder: void rollbackAll()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<cn.hutool.json.JSONObject: void init(java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.Provider: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.types.Symbol: java.lang.String toString()>
<org.apache.ibatis.mapping.CacheBuilder: void setCacheProperties(org.apache.ibatis.cache.Cache)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.amqp.rabbit.connection.CachingConnectionFactory$ChannelCachingConnectionProxy: java.lang.String toString()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<cn.hutool.core.bean.copier.provider.MapValueProvider: boolean containsKey(java.lang.String)>-><org.bson.BsonDocument: boolean containsKey(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.apache.ibatis.cache.decorators.SynchronizedCache: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonDocument: int hashCode()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<sun.misc.Resource: byte[] getBytes()>-><sun.net.www.http.KeepAliveStream: void close()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.mongodb.DBRef: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean contains(java.lang.Object)>-><java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<register-finalize <org.springframework.data.domain.Sort$NullHandling: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.google.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<cn.hutool.core.map.MapProxy: void putAll(java.util.Map)>-><org.bson.BsonDocumentWrapper: void putAll(java.util.Map)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><java.util.OptionalInt: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonInt32Codec: java.lang.Class getEncoderClass()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool: boolean softEvictConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)>-><com.zaxxer.hikari.pool.PoolEntry: void markEvicted()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<org.springframework.ui.ModelMap: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.Float: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.context.annotation.MBeanExportConfiguration: void <init>()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean isReadable()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.format.DecimalStyle: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>-><java.lang.String: char charAt(int)>
<java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.stream.SliceOps: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><org.bson.RawBsonArray: boolean addAll(java.util.Collection)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.data.mongodb.core.index.IndexField: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.concurrent.ConcurrentHashMap: int hashCode()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundryActuatorAutoConfiguration: void <init>()>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonMaxKeyCodec: java.lang.Class getEncoderClass()>
<springfox.documentation.spring.web.scanners.ApiListingReferenceScanner: void <init>()>-><java.lang.Object: void <init>()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.data.mapping.PreferredConstructor$Parameter: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.io.FileInputStream: void close()>
<org.bson.RawBsonValueHelper: void <clinit>()>-><org.bson.codecs.BsonValueCodecProvider: void <init>()>
<jdk.internal.util.xml.impl.ReaderUTF8: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonSymbol: int hashCode()>
<org.bson.internal.CodecCache: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.OffsetTime: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void handleErrorInObjectToString(java.lang.Object,java.lang.StringBuilder,java.lang.Throwable)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<java.time.Duration: java.time.Duration dividedBy(long)>-><java.time.Duration: java.math.BigDecimal toSeconds()>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><java.net.SocketInputStream: void close()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.lang.Double: java.lang.Double valueOf(double)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.lettuce.core.metrics.CommandMetrics: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers$2: void <init>(java.lang.String,int)>-><org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers: void <init>(java.lang.String,int,org.springframework.data.mapping.model.PreferredConstructorDiscoverer$1)>
<org.springframework.context.annotation.AnnotationBeanNameGenerator: boolean isStereotypeWithNameValue(java.lang.String,java.util.Set,java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: boolean contains(java.lang.Object)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<org.springframework.data.mongodb.core.query.Collation: org.springframework.data.mongodb.core.query.Collation$ComparisonLevel lambda$strength$0(int)>-><org.springframework.data.mongodb.core.query.Collation$ICUComparisonLevel: void <init>(int)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientName()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int getIntValue()>-><org.bson.types.Decimal128: int intValue()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.rabbitmq.client.impl.nio.SocketChannelRegistration: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$4(org.bson.Document,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><java.util.Optional: void ifPresent(java.util.function.Consumer)>
<javax.servlet.DispatcherType: javax.servlet.DispatcherType valueOf(java.lang.String)>-><java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.Vector$Itr: boolean hasNext()>
<reactor.core.scheduler.SchedulerTask: void setFuture(java.util.concurrent.Future)>-><java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: boolean cancel(boolean)>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<java.util.stream.Nodes$ToArrayTask$OfRef: java.util.stream.Nodes$ToArrayTask$OfRef makeChild(int,int)>-><java.util.stream.Nodes$AbstractConcNode: java.util.stream.Node getChild(int)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.x509.AVA: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.ObjectProvider)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _convertNumberToInt(java.lang.Number)>-><org.bson.types.Decimal128: int intValue()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonDateTime: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration: void <init>()>-><org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$1: void <init>(org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter)>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.http.converter.AbstractHttpMessageConverter: boolean canWrite(java.lang.Class,org.springframework.http.MediaType)>-><org.springframework.http.converter.feed.RssChannelHttpMessageConverter: boolean supports(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: void <init>()>
<springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.types.MaxKey: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration$ReactiveTraceFilterConfiguration: void <init>()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.convert.DefaultDbRefResolver: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonNull: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.Document: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.core.convert.TypeDescriptor: int hashCode()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<jdk.internal.util.xml.impl.ReaderUTF16: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray()>-><com.google.common.collect.ForwardingCollection: java.lang.Object[] toArray()>
<org.bson.codecs.BsonRegularExpressionCodec: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.util.Optional lambda$doFindAnnotation$9(java.lang.Class)>-><java.util.stream.ReferencePipeline: java.util.Optional findFirst()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void initMaps(java.lang.Class,com.sun.jmx.mbeanserver.MBeanIntrospector)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.concurrent.ConcurrentSkipListMap$KeySet: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonBoolean: int hashCode()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.codecs.DocumentCodecProvider: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.util.calendar.Era: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.AutorecoveringChannel: void close()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.bson.codecs.BsonValueCodecProvider: void <clinit>()>-><org.bson.codecs.BsonTypeClassMap: void <init>(java.util.Map)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.invoke.MethodType: java.lang.String toString()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String serializeValue(java.lang.Object)>-><java.lang.String: java.lang.String trim()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableCollection: java.util.Spliterator spliterator()>-><java.util.concurrent.LinkedBlockingQueue: java.util.Spliterator spliterator()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.types.MaxKey: java.lang.String toString()>
<org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression[] parseExpressions(java.lang.String,org.springframework.expression.ParserContext)>-><org.springframework.expression.ParserContext$1: java.lang.String getExpressionPrefix()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.management.MBeanConstructorInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.publisher.MonoCallableOnAssembly: java.lang.String toString()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.HikariConfig: java.lang.String getPoolName()>
<org.bson.codecs.PatternCodec$RegexFlag: void <clinit>()>-><java.lang.Character: java.lang.Character valueOf(char)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.HashSet: java.util.Iterator iterator()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.IdentityHashMap$KeySet: int hashCode()>
<org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Locale)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.IndexInfo: void <clinit>()>-><java.lang.Double: java.lang.Double valueOf(double)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.temporal.WeekFields: java.lang.String toString()>
<java.util.Collections$SynchronizedNavigableSet: void <init>(java.util.NavigableSet)>-><java.util.Collections$SynchronizedSortedSet: void <init>(java.util.SortedSet)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.ZoneId: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><cn.hutool.json.JSONArray: java.lang.Object get(int)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonArray: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonDecimal128: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.FieldPosition: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><com.google.common.collect.ForwardingCollection: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.MonoCallableOnAssembly: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdate(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<org.springframework.data.domain.Sort$Order: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String)>-><org.springframework.data.domain.Sort$Order: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String,boolean,org.springframework.data.domain.Sort$NullHandling)>
<springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiListingScanner getApiListingScanner()>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.text.SimpleDateFormat: int hashCode()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<org.springframework.http.HttpEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap)>-><java.lang.Object: void <init>()>
<com.alibaba.druid.filter.FilterManager: void <clinit>()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.net.URL: java.lang.String getQuery()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<com.zaxxer.hikari.util.ClockSource$Factory: com.zaxxer.hikari.util.ClockSource create()>-><com.zaxxer.hikari.util.ClockSource$MillisecondClockSource: void <init>()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.Frame: long tableSize(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.jedis.JedisConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,redis.clients.jedis.BinaryJedisPubSub,byte[][],byte[][])>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.util.calendar.ZoneInfo: int hashCode()>
<com.rabbitmq.client.impl.Frame: long tableSize(java.util.Map)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.data.mongodb.core.DefaultWriteConcernResolver: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.IdentityHashMap: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.LegacyHealthEndpointAdaptersConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: long longValue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.util.calendar.Era: java.lang.String toString()>
<sun.net.httpserver.ChunkedInputStream: int readChunkHeader()>-><sun.net.www.MeteredStream: int read()>
<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.internal.Optional: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.query.Collation$TertiaryICUComparisonLevel: void <init>()>-><org.springframework.data.mongodb.core.query.Collation$ICUComparisonLevel: void <init>(int)>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Set removeBindingsWithDestination(java.lang.String)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.rabbitmq.client.impl.Frame: long arraySize(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<org.bson.BsonType: void <clinit>()>-><org.bson.BsonType: int getValue()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong collectLong(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>-><java.util.Spliterator: boolean hasCharacteristics(int)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: void bindItem(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>-><java.net.HttpURLConnection: java.security.Permission getPermission()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.JsonNullConverter: void <init>()>
<org.apache.ibatis.mapping.CacheBuilder: void setCacheProperties(org.apache.ibatis.cache.Cache)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.bson.codecs.BsonValueCodecProvider: void <init>()>-><org.bson.codecs.BsonValueCodecProvider: void addCodecs()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.mapping.model.BasicPersistentEntity: org.springframework.data.util.TypeInformation getTypeInformation()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedMap: boolean isMergeEnabled()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.types.Binary: int hashCode()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.Clock$SystemClock: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$ResourceChainCustomizerConfiguration: void <init>()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineHost()>-><java.util.ArrayList: java.lang.Object get(int)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonBoolean: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: int hashCode()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$SubscriptionPresentCondition eventuallyPerformSubscription()>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$11: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.asm.ConstantDynamic: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><java.util.PrimitiveIterator$OfLong: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.text.DigitList: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.Frame: long arraySize(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.fasterxml.jackson.module.paramnames.ParameterExtractor: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$PatternSubscriptionPresentCondition: boolean passes()>-><org.springframework.data.redis.connection.jedis.JedisConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isStartTls()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.DoubleCodec: java.lang.Class getEncoderClass()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.convert.DocumentAccessor: java.lang.Object get(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>-><org.springframework.data.mongodb.core.convert.DocumentAccessor: java.util.Map getAsMap(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.bson.codecs.CharacterCodec: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.mapping.model.Property: java.util.Optional getField()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.security.web.server.header.CacheControlServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter build()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonDouble: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.LinkedList$LLSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.ProcessEnvironment$StringEntry: int hashCode()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonJavaScript: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.aop.framework.JdkDynamicAopProxy: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonString: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.convert.DocumentAccessor: java.lang.Object get(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.lang.Iterable)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map,boolean,java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void lambda$populateAnnotationCache$6(java.lang.reflect.Method)>-><org.springframework.core.annotation.AnnotatedElementUtils: java.lang.annotation.Annotation findMergedAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthContributorAutoConfiguration: void <init>(java.util.Map,org.springframework.beans.factory.ObjectProvider)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.BooleanCodec: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonBoolean: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.text.ParsePosition: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.types.ObjectId: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><cn.hutool.json.JSONNull: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.node.BinaryNode: int hashCode()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.bson.codecs.DoubleCodec: void <init>()>-><java.lang.Object: void <init>()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.types.MaxKey: java.lang.String toString()>
<org.springframework.data.projection.ProxyProjectionFactory$PropertyAccessingMethodInvokerFactory: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver: void <clinit>()>-><org.springframework.expression.spel.standard.SpelExpressionParser: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.beans.factory.config.BeanDefinitionHolder: int hashCode()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void doWithAssociations(org.springframework.data.mapping.SimpleAssociationHandler)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration: void <init>()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String serializeValue(java.lang.Object)>-><java.lang.String: java.lang.String substring(int,int)>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.BinaryCodec: void <init>()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonUndefined: int hashCode()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Hashtable: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonSymbol: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void setAllowCredentials(java.lang.Boolean)>
<org.springframework.data.redis.connection.ReturnType: org.springframework.data.redis.connection.ReturnType[] values()>-><java.lang.Object: java.lang.Object clone()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<org.apache.ibatis.builder.xml.XMLMapperBuilder: void parsePendingResultMaps()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.MonthDay: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Set removeBindingsWithDestination(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.ibatis.executor.ErrorContext: java.lang.String toString()>
<java.io.DataInputStream: int readUnsignedByte()>-><sun.net.www.MeteredStream: int read()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<java.util.AbstractList: void removeRange(int,int)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: void remove()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: int hashCode()>
<org.springframework.data.spel.Functions: void <init>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.lang.String[] doGetParameterNames(java.lang.reflect.Executable)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ExtendedJsonInt64Converter: void <init>()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonInt64: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.management.MBeanInfo: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.SubList: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.bson.BsonArray: boolean isEmpty()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.util.stream.Stream getAccessors()>-><org.springframework.data.mapping.model.AbstractPersistentProperty: java.lang.reflect.Field getField()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.beans.factory.config.BeanExpressionContext: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonArray: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonMaxKey: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.ThreadGroup: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<org.springframework.data.mongodb.core.DefaultIndexOperations: com.mongodb.client.model.IndexOptions addDefaultCollationIfRequired(com.mongodb.client.model.IndexOptions,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions collation(com.mongodb.client.model.Collation)>
<java.io.DataInputStream: char readChar()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.util.SubList: java.lang.Object get(int)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.bson.BsonArray: java.lang.Object get(int)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.publisher.FluxCallableOnAssembly: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.types.MinKey: java.lang.String toString()>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.SubList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.LazyStreamable: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.nio.ByteBuffer: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver: void resolveAndAddIndexesForAssociation(org.springframework.data.mapping.Association,java.util.List,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.Duration: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>
<jdk.internal.util.xml.impl.Parser: java.io.Reader bom(java.io.InputStream,char)>-><sun.net.www.MeteredStream: int read()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.CloudFoundrySecurityInterceptor: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.mongodb.DBRefCodecProvider: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.actuate.web.trace.reactive.HttpTraceWebFilter: void <clinit>()>-><java.lang.Object: void <init>()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.RelaxedExtendedJsonInt64Converter: void <init>()>
<com.google.protobuf.Internal: void <clinit>()>-><java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonJavaScript: int hashCode()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonSymbol: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.Document: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.mapping.model.Property: java.util.Optional getSetter()>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)>-><com.fasterxml.jackson.databind.cfg.MapperConfigBase: java.lang.Class findMixInClassFor(java.lang.Class)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><ch.qos.logback.core.joran.spi.ElementSelector: int hashCode()>
<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder allowIfSubType(java.lang.Class)>-><com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder$4: void <init>(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder,java.lang.Class)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void closeConnection()>-><org.springframework.data.redis.connection.jedis.JedisConnection: void close()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: boolean isCandidateComponent(org.springframework.core.type.classreading.MetadataReader)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<register-finalize <org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.JvmMetricsAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes: void <clinit>()>-><org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes: void <init>(java.lang.String[])>
<cn.hutool.core.map.MapUtil: boolean isNotEmpty(java.util.Map)>-><org.bson.BsonDocument: boolean isEmpty()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.reflect.Proxy$Key2: int hashCode()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonDocument: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.web.util.UriComponentsBuilder: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration: void <init>()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.type.TypeParser: java.lang.Class findClass(java.lang.String,com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.boot.actuate.health.HealthComponent: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void addClassIfExists(java.util.List,java.lang.String)>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.springframework.context.expression.MapAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.types.Decimal128: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.ZoneId: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.String lambda$createEndpointBeans$0(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean,org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean: org.springframework.boot.actuate.endpoint.EndpointId getId()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisNode: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>
<org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.util.List)>-><java.util.Collection: java.util.stream.Stream stream()>
<java.util.HashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.web.servlet.WebMvcMetricsAutoConfiguration: void <init>(org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties)>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.util.regex.Matcher: java.lang.String group(int)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonInt64: java.lang.String toString()>
<com.alibaba.druid.util.JdbcUtils: void close(java.io.Closeable)>-><java.net.SocketInputStream: void close()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.security.web.debug.Logger: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.Instant: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonMinKey: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AbstractPersistentProperty: org.springframework.data.mapping.Association lambda$new$0()>-><org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: boolean isAssociation()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedMap: void putAll(java.util.Map)>-><org.bson.Document: void putAll(java.util.Map)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: boolean addDeferredProperty(java.lang.String,java.lang.Object)>-><org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$DeferredProperty: void <init>(org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper,java.lang.String,java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.beans.factory.support.AbstractBeanDefinition: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<reactor.core.scheduler.Schedulers: java.lang.Object scanExecutor(java.util.concurrent.Executor,reactor.core.Scannable$Attr)>-><java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.actuate.metrics.http.Outcome: void <init>(java.lang.String,int)>-><java.lang.Enum: java.lang.String name()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.stream.Nodes$ToArrayTask$OfPrimitive: void copyNodeToArray()>-><java.util.stream.Nodes$DoubleArrayNode: void copyInto(java.lang.Object,int)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.Period: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void doAcquireShared(int)>-><java.util.concurrent.Semaphore$FairSync: int tryAcquireShared(int)>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.HikariConfig: void seal()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.types.MinKey: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.lang.Number: byte byteValue()>-><org.bson.types.Decimal128: int intValue()>
<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: org.springframework.dao.DataAccessException convertJedisAccessException(java.lang.Exception)>
<org.apache.ibatis.mapping.ResultMap$Builder: java.util.List getArgNames(java.lang.reflect.Constructor)>-><org.bson.RawBsonArray$RawBsonArrayList: java.lang.Object get(int)>
<org.springframework.data.mapping.model.BasicPersistentEntity: void doWithAssociations(org.springframework.data.mapping.SimpleAssociationHandler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterDefaultReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getEnum(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.Class,java.lang.String)>-><io.micrometer.core.instrument.config.validate.PropertyValidator: java.lang.String prefixedProperty(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonObjectId: java.lang.String toString()>
<jdk.internal.util.xml.impl.Parser: java.io.Reader bom(java.io.InputStream,char)>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonInt32: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong flattenLong(java.util.stream.Node$OfLong)>-><java.util.stream.Nodes$AbstractConcNode: int getChildCount()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map inspectClass(java.lang.Class)>-><sun.net.www.MeteredStream: void close()>
<org.springframework.core.annotation.MergedAnnotationCollectors: void lambda$toAnnotationSet$0(java.util.ArrayList,org.springframework.core.annotation.MergedAnnotation)>-><org.springframework.core.annotation.AbstractMergedAnnotation: java.lang.annotation.Annotation synthesize()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>-><org.springframework.boot.actuate.health.Health$Builder: org.springframework.boot.actuate.health.Status access$000(org.springframework.boot.actuate.health.Health$Builder)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<reactor.core.publisher.FluxIterable: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: boolean isAssociation()>-><java.lang.Boolean: boolean booleanValue()>
<org.apache.logging.log4j.util.PropertyFilePropertySource: java.util.Properties loadPropertiesFile(java.lang.String)>-><java.net.SocketInputStream: void close()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.util.stream.LongPipeline$StatefulOp: void <init>(java.util.stream.AbstractPipeline,java.util.stream.StreamShape,int)>-><java.util.stream.IntPipeline: java.util.stream.StreamShape getOutputShape()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.ibatis.parsing.XNode: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void <clinit>()>-><java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<org.springframework.boot.actuate.context.ShutdownEndpoint: void <clinit>()>-><java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.util.MimeType: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.mapping.model.Property: int hashCode()>
<jdk.internal.util.xml.impl.Parser: java.io.Reader bom(java.io.InputStream,char)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<java.util.TreeMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: int hashCode()>
<jdk.internal.util.xml.impl.ReaderUTF8: int read(char[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<sun.net.www.http.HttpClient: void <clinit>()>-><sun.net.www.http.KeepAliveCache: void <init>()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.apache.ibatis.parsing.XNode: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: int hashCode()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String toJson(java.lang.Object)>-><com.mongodb.MongoClientSettings: org.bson.codecs.configuration.CodecRegistry getDefaultCodecRegistry()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<java.util.HashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation$AlternateWithMaxVariable: void <init>(java.lang.String)>-><java.util.Optional: java.util.Optional empty()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.IndexConverters: void <clinit>()>-><org.springframework.data.mongodb.core.IndexConverters: org.springframework.core.convert.converter.Converter getDocumentIndexInfoConverter()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.Byte: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.sql.Timestamp: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonObjectId: java.lang.String toString()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.ConnectableFluxOnAssembly: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.PrimitiveIterator$OfLong: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<sun.net.ProgressMonitor: void <init>()>-><java.util.ArrayList: void <init>()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Collections$SetFromMap: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.Character: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.Package: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.bson.codecs.IterableCodecProvider: void <init>(org.bson.Transformer)>-><org.bson.codecs.BsonTypeClassMap: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.security.PermissionCollection: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<org.springframework.data.mapping.model.BasicPersistentEntity: void addPersistentProperty(org.springframework.data.mapping.PersistentProperty)>-><org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: boolean isAssociation()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.math.BigInteger: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.String)>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory getDefaultFactory()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: void <clinit>()>-><org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.types.Decimal128: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.JavaType: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.StringJoiner: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.PropertyPermission: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator: void <init>(java.lang.String,int,java.lang.String[])>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.springframework.boot.web.server.MimeMappings: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.publisher.FluxCreate$LatestAsyncSink: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthContributorAutoConfiguration: void <init>(java.util.Map,org.springframework.beans.factory.ObjectProvider)>-><java.util.Collections$SynchronizedNavigableSet: void <init>(java.util.NavigableSet)>
<jdk.internal.util.xml.impl.ReaderUTF8: void close()>-><sun.net.www.MeteredStream: void close()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonInt64: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.types.CodeWScope: int hashCode()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.LoadingCache build(com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache$LocalLoadingCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonInt32: int hashCode()>
<org.springframework.data.mongodb.core.query.Collation: org.bson.Document lambda$toMongoDocumentConverter$11(org.springframework.data.mongodb.core.query.Collation)>-><org.bson.Document: org.bson.Document append(java.lang.String,java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>
<org.springframework.util.LinkedCaseInsensitiveMap$1: boolean removeEldestEntry(java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$PatternSubscriptionPresentCondition: boolean passes()>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getPatterns()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.types.MaxKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.boot.actuate.endpoint.OperationType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder percentilePrecision(java.lang.Integer)>
<org.bson.BsonDocument: void putAll(java.util.Map)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$RequestMappingInfoHandlerMappingDescriptionProvider: void <init>(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$PermitStatus: void <clinit>()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$PermitStatus: void <init>(java.lang.String,int)>
<javax.security.auth.Subject$SecureSet: void <init>(javax.security.auth.Subject,int)>-><java.util.AbstractSet: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.NTLMAuthenticationProxy tryLoadNTLMAuthentication()>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<com.mongodb.DBObjectCodecProvider: void <init>()>-><com.mongodb.DBObjectCodec: org.bson.codecs.BsonTypeClassMap getDefaultBsonTypeClassMap()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>-><io.micrometer.core.util.internal.logging.AbstractInternalLogger: void <init>(java.lang.String)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><org.springframework.boot.web.servlet.support.ErrorPageFilter: void addClassIfPresent(java.util.Collection,java.lang.String)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.LocalDateTime: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.DefaultDeserializationContext: void checkUnresolvedObjectId()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Hashtable$Entry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.OffsetTime: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonSymbol: java.lang.String toString()>
<com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>-><java.io.FileInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.EmptyByteBuf: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.sql.Time: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.ibatis.mapping.ParameterMapping: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><redis.clients.jedis.JedisCluster: void psubscribe(redis.clients.jedis.BinaryJedisPubSub,byte[][])>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertiesUtil: java.util.Properties loadClose(java.io.InputStream,java.lang.Object)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: void setCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)>
<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory: boolean isTypeInjectable(org.springframework.data.mapping.PersistentEntity)>-><org.springframework.data.mapping.model.BasicPersistentEntity: java.lang.Class getType()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<register-finalize <io.micrometer.core.instrument.config.validate.DurationValidator: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.BasicPersistentEntity: org.springframework.data.mapping.Alias getAliasFromAnnotation(java.lang.Class)>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: void putAll(java.util.Map)>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$13(com.mongodb.client.model.Collation$Builder,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><java.util.Optional: void ifPresent(java.util.function.Consumer)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void recoverConsumer(java.lang.String,com.rabbitmq.client.impl.recovery.RecordedConsumer,boolean)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><io.netty.buffer.AbstractByteBuf: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.LocalDate: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<org.bson.codecs.ShortCodec: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.stream.Streams$ConcatSpliterator: long estimateSize()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: long estimateSize()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.JdkLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>-><java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.convert.QueryMapper: void <clinit>()>-><org.bson.Document: void <init>(java.lang.String,java.lang.Object)>
<register-finalize <org.springframework.data.annotation.AccessType$Type: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder,org.springframework.data.mapping.model.FieldNamingStrategy)>-><org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: boolean isIdProperty()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<org.bson.codecs.StringCodec: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.calendar.Era: java.lang.String toString()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.security.MessageDigest: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.ibatis.mapping.ResultMapping: java.lang.String toString()>
<io.jsonwebtoken.impl.JwtMap: void setDate(java.lang.String,java.util.Date)>-><org.bson.RawBsonDocument: java.lang.Object remove(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$13: void <clinit>()>-><sun.net.www.protocol.http.AuthScheme: sun.net.www.protocol.http.AuthScheme[] values()>
<org.bson.json.JsonReader$1: void <clinit>()>-><org.bson.BsonContextType: org.bson.BsonContextType[] values()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.springframework.data.redis.connection.jedis.JedisClientUtils: void <clinit>()>-><org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonString: int hashCode()>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonObjectIdCodec: java.lang.Class getEncoderClass()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.type.TypeParser: java.lang.Class findClass(java.lang.String,com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonObjectId: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.types.Decimal128: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.OptionalInt: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.util.RawValue: boolean equals(java.lang.Object)>
<org.springframework.core.SpringProperties: void <clinit>()>-><java.io.InputStream: void close()>
<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$DelegatingKD: java.lang.Object deserializeKey(java.lang.String,com.fasterxml.jackson.databind.DeserializationContext)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.String)>-><io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.PrimitiveIterator$OfLong: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: void load(java.lang.String,java.lang.ClassLoader)>-><java.io.InputStream: int read(byte[])>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><sun.net.www.http.KeepAliveStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator$2: void <init>(java.lang.String,int,java.lang.String[])>-><io.micrometer.core.instrument.config.validate.DurationValidator: void <init>(java.lang.String,int,java.lang.String[],io.micrometer.core.instrument.config.validate.DurationValidator$1)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder,org.springframework.data.mapping.model.FieldNamingStrategy)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong flattenLong(java.util.stream.Node$OfLong)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>-><java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>
<org.springframework.data.mapping.Alias: int hashCode()>-><ch.qos.logback.core.subst.Token: int hashCode()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler pickSoleHandler(java.util.Map)>-><org.bson.BsonDocument: java.util.Collection values()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.Year: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.web.filter.ForwardedHeaderFilter: void <clinit>()>-><java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.Point: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.nio.charset.Charset: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.context.expression.MapAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><org.bson.Document: boolean containsKey(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.support.AbstractBeanDefinition createBeanDefinition()>-><org.springframework.beans.factory.config.ConstructorArgumentValues: void addGenericArgumentValue(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.PermissionCollection: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jms.artemis.ArtemisConnectionFactoryConfiguration: void <init>()>
<ch.qos.logback.core.joran.action.ConversionRuleAction: void begin(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String,org.xml.sax.Attributes)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><java.util.OptionalInt: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.lang.Object next()>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.mail.javamail.ConfigurableMimeFileTypeMap: javax.activation.FileTypeMap createFileTypeMap(org.springframework.core.io.Resource,java.lang.String[])>-><java.net.SocketInputStream: void close()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$PermitStatus: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: int compareTo(java.lang.Object)>
<java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><java.lang.String: int length()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.codecs.IterableCodecProvider: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonArray: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonDouble: int hashCode()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder expiry(java.time.Duration)>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig: java.time.Duration access$602(io.micrometer.core.instrument.distribution.DistributionStatisticConfig,java.time.Duration)>
<org.springframework.amqp.rabbit.connection.RabbitResourceHolder: void rollbackAll()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.boot.web.error.ErrorAttributeOptions$Include: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.RedisSubscribedConnectionException: void <init>(java.lang.String)>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>
<java.util.TreeMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonDoubleCodec: java.lang.Class getEncoderClass()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.bson.BsonArray: int size()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<com.google.common.base.Joiner: void <init>(java.lang.String)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>-><org.slf4j.helpers.SubstituteLogger: java.lang.String getName()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.http.converter.AbstractHttpMessageConverter: boolean canWrite(java.lang.Class,org.springframework.http.MediaType)>-><org.springframework.http.converter.feed.AtomFeedHttpMessageConverter: boolean supports(java.lang.Class)>
<com.alibaba.druid.filter.FilterManager: void <clinit>()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.http.HttpHeaders: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<register-finalize <org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: boolean fillBuffer()>-><java.util.stream.Nodes$LongSpinedNodeBuilder: void end()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.publisher.MonoOnAssembly: java.lang.String toString()>
<org.springframework.data.mongodb.core.index.Index: void lambda$getIndexOptions$0(org.bson.Document,org.springframework.data.mongodb.core.index.IndexFilter)>-><org.bson.Document: java.lang.Object put(java.lang.String,java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.mongodb.DBRef: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.util.context.Context0: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonObjectId: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$MapperScannerRegistrarNotFoundConfiguration: void <init>()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean _hasNullKey(java.util.Map)>-><org.bson.BsonDocument: boolean containsKey(java.lang.Object)>
<jdk.internal.util.xml.impl.ReaderUTF16: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.CountDownLatch: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.Collation fromDocument(org.bson.Document)>-><org.springframework.data.mongodb.core.query.Collation: com.mongodb.client.model.Collation toMongoCollation()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonTimestamp: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$1: void <init>(java.lang.String,int)>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.MonthDay: java.lang.String toString()>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>-><java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>
<springfox.documentation.spring.web.paths.PathMappingDecorator: void <init>()>-><java.lang.Object: void <init>()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisStringCommands$SetOption: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.ArrayList$SubList$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.bson.codecs.jsr310.Jsr310CodecProvider: void <clinit>()>-><org.bson.codecs.jsr310.InstantCodec: void <init>()>
<org.springframework.core.SpringProperties: void <clinit>()>-><java.io.BufferedInputStream: void close()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.io.InputStream lambda$newBundle$0(boolean,java.lang.ClassLoader,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.publisher.FluxCreate$DropAsyncSink: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonDecimal128: int hashCode()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.mongodb.client.model.Collation$Builder: com.mongodb.client.model.Collation build()>-><com.mongodb.client.model.Collation: void <init>(com.mongodb.client.model.Collation$Builder,com.mongodb.client.model.Collation$1)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.Year: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.security.Provider$UString: boolean equals(java.lang.Object)>
<java.util.Collections$SetFromMap: void clear()>-><org.springframework.util.LinkedCaseInsensitiveMap: void clear()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><io.lettuce.core.masterslave.MasterSlaveConnectionProvider$ConnectionKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<com.rabbitmq.client.impl.ValueWriter: void writeArray(java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.jar.Manifest: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.bson.Document: java.util.Set entrySet()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<java.io.DataInputStream: short readShort()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.channel.ReflectiveChannelFactory: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.naming.NamingException: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.apache.logging.log4j.spi.Provider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.core.io.SerializedString: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.Class: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$PatternSubscriptionTask: void run()>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: boolean isSubscribed()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder builder()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.Point: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<java.util.AbstractList: java.lang.String outOfBoundsMsg(int)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory getDefaultFactory()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void closeConnection()>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: void close()>
<com.rabbitmq.client.impl.AMQChannel: void cleanRpcChannelState()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><org.springframework.data.mongodb.core.index.IndexField: org.springframework.data.mongodb.core.index.IndexField hashed(java.lang.String)>
<com.fasterxml.jackson.module.paramnames.PackageVersion: void <clinit>()>-><com.fasterxml.jackson.core.util.VersionUtil: com.fasterxml.jackson.core.Version parseVersion(java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.boot.actuate.endpoint.Sanitizer: void <clinit>()>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<org.apache.ibatis.type.TypeHandlerRegistry: java.util.Map getJdbcHandlerMapForEnumInterfaces(java.lang.Class,java.lang.Class)>-><org.bson.Document: java.util.Set entrySet()>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><cn.hutool.json.JSONObject: java.lang.String toString()>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.PrimitiveIterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><org.springframework.data.mapping.model.BasicPersistentEntity: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<com.mongodb.DBObjectCodec: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.boot.SpringBootExceptionHandler: boolean isLogConfigurationMessage(java.lang.Throwable)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMeterBinderProvidersConfiguration: void <init>()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.Parsed: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: java.lang.String toString()>
<java.util.TreeMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor: void <init>()>-><java.lang.Object: void <init>()>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonBinaryCodec: void <init>()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.InvalidReason: void <clinit>()>-><io.micrometer.core.instrument.config.validate.InvalidReason: void <init>(java.lang.String,int)>
<java.util.stream.SpinedBuffer$OfDouble: java.lang.Object[] newArrayArray(int)>-><java.util.stream.SpinedBuffer$OfDouble: double[][] newArrayArray(int)>
<org.springframework.web.method.HandlerMethod$HandlerMethodParameter: void <init>(org.springframework.web.method.HandlerMethod,int)>-><org.springframework.web.method.HandlerMethod: java.lang.reflect.Method access$000(org.springframework.web.method.HandlerMethod)>
<org.springframework.jdbc.datasource.DataSourceUtils: java.sql.Connection fetchConnection(javax.sql.DataSource)>-><com.zaxxer.hikari.HikariDataSource: java.sql.Connection getConnection()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: int compareTo(java.lang.Object)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Optional: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><cn.hutool.json.JSONArray: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)>-><com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.MonthDay: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.awt.Point: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: java.lang.String lambda$encodeTemplate$1(java.nio.charset.Charset,java.lang.String)>-><org.springframework.web.util.HierarchicalUriComponents: java.lang.String encodeUriComponent(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonInt32: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder,org.springframework.boot.actuate.health.Health$1)>-><org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration: void <init>()>
<org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<javax.security.auth.Subject$SecureSet: void <init>(javax.security.auth.Subject,int)>-><java.util.LinkedList: void <init>()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonObjectId: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.HashMap$Node: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.misc.Signal: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils$MultiValueMapAdapter: void putAll(java.util.Map)>-><java.util.AbstractMap: void putAll(java.util.Map)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardWrapper: void <init>()>-><org.apache.catalina.core.StandardWrapperFacade: void <init>(org.apache.catalina.core.StandardWrapper)>
<cn.hutool.core.convert.impl.NumberConverter: java.lang.Number convertInternal(java.lang.Object,java.lang.Class)>-><org.bson.types.Decimal128: double doubleValue()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.boot.web.servlet.server.Encoding$Type: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<ch.qos.logback.core.joran.action.ConversionRuleAction: void begin(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String,org.xml.sax.Attributes)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void visit(com.sun.jmx.mbeanserver.MBeanAnalyzer$MBeanVisitor)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<org.apache.ibatis.io.Resources: java.util.Properties getResourceAsProperties(java.lang.String)>-><java.io.FileInputStream: void close()>
<com.zaxxer.hikari.pool.ProxyConnection$ClosedConnection: java.sql.Connection getClosedConnection()>-><java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.bson.json.RelaxedExtendedJsonDoubleConverter: void <clinit>()>-><org.bson.json.ExtendedJsonDoubleConverter: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthEndpointReactiveWebExtensionConfiguration: void <init>()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonNull: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.ZoneId: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.lang.String: char charAt(int)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException wrongTokenException(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonToken,java.lang.String)>-><com.fasterxml.jackson.core.util.JsonParserDelegate: com.fasterxml.jackson.core.JsonToken getCurrentToken()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<com.mongodb.client.model.Collation: void <init>(com.mongodb.client.model.Collation$Builder)>-><com.mongodb.client.model.Collation$Builder: com.mongodb.client.model.CollationStrength access$600(com.mongodb.client.model.Collation$Builder)>
<java.util.Vector$VectorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.Duration: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonSymbol: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<java.util.stream.AbstractPipeline: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$ConcNode: java.util.Spliterator spliterator()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.PropertyValue$Map: void assign(java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<java.net.URLClassLoader: void close()>-><java.io.BufferedInputStream: void close()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.util.Iterator iterator()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<org.bson.json.JsonNullConverter: void <init>()>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration: void <init>()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.String lambda$addExtensionBean$4(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean,org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$ExtensionBean)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<org.springframework.core.SpringProperties: void <clinit>()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.mongodb.client.model.geojson.LineString: int hashCode()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: java.lang.Object manageMapIfNecessary(java.util.Map)>-><java.util.LinkedHashMap: java.util.Collection values()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<java.time.Duration: java.time.Duration dividedBy(long)>-><java.time.Duration: java.time.Duration create(java.math.BigDecimal)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void lambda$populateAnnotationCache$6(java.lang.reflect.Method)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: org.springframework.data.mapping.PersistentEntity getOwner()>
<com.sun.jmx.mbeanserver.Introspector: javax.management.NotCompliantMBeanException throwException(java.lang.Class,java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.context.expression.MapAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMetricsRegistrarConfiguration: void <init>(io.micrometer.core.instrument.MeterRegistry,java.util.Collection,java.util.Map)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.invoke.LambdaForm$Name: int hashCode()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void validateAnnotation(java.lang.annotation.Annotation,java.lang.String,java.lang.Object[])>-><org.springframework.data.mapping.MappingException: void <init>(java.lang.String)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<org.springframework.data.spel.ExtensionAwareEvaluationContextProvider$FunctionMethodExecutor: void <init>(org.springframework.data.spel.spi.Function)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator: void createAndRegisterProperty(org.springframework.data.mapping.model.Property)>-><org.springframework.data.mapping.model.BasicPersistentEntity: void addPersistentProperty(org.springframework.data.mapping.PersistentProperty)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.stream.AbstractPipeline: java.util.stream.Node evaluateToArrayNode(java.util.function.IntFunction)>-><java.util.stream.ReferencePipeline$Head: boolean opIsStateful()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.springframework.core.task.SimpleAsyncTaskExecutor: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.types.ObjectId: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Currency: java.lang.String toString()>
<java.util.Spliterators$IntIteratorSpliterator: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.stream.ReduceOps$6ReducingSink: void accept(int)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.io.ObjectStreamField: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.lang.Object next()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<org.springframework.boot.SpringBootExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>-><reactor.core.scheduler.ReactorThreadFactory: void uncaughtException(java.lang.Thread,java.lang.Throwable)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.ParamNameResolver: java.lang.String getActualParamName(java.lang.reflect.Method,int)>-><org.bson.RawBsonArray$RawBsonArrayList: java.lang.Object get(int)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.Throwable: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.types.MaxKey: java.lang.String toString()>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonObjectId: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.reflect.Method: java.lang.String toString()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void addPersistentProperty(org.springframework.data.mapping.PersistentProperty)>-><java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.Provider$UString: java.lang.String toString()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.bson.BsonInt32: int compareTo(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.AutorecoveringChannel: void close()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.JwtMap: void putAll(java.util.Map)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander getModelAttributeParameterExpander()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.data.projection.ProxyProjectionFactory$MapAccessingMethodInterceptorFactory: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.ThreadGroup: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.metrics.export.properties.PropertiesConfigAdapter: void <init>(java.lang.Object)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity: org.springframework.data.mongodb.core.mapping.MongoPersistentProperty returnPropertyIfBetterIdPropertyCandidateOrNull(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>-><org.springframework.data.mapping.MappingException: void <init>(java.lang.String)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonArray: java.lang.String toString()>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity: void <clinit>()>-><org.springframework.expression.spel.standard.SpelExpressionParser: void <init>()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.types.Decimal128: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisMessageListener: void <init>(org.springframework.data.redis.connection.MessageListener)>-><redis.clients.jedis.BinaryJedisPubSub: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.ParameterizedTypeInformation: java.lang.String toString()>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.AtomicBooleanCodec: java.lang.Class getEncoderClass()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundrySecurityService$1: void <init>()>-><org.springframework.core.ParameterizedTypeReference: void <init>()>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.Object: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.apache.ibatis.parsing.XNode: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.convert.CustomConversions$StoreConversions: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$SubscriptionPresentCondition: boolean passes()>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: boolean isSubscribed()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<javax.net.ssl.DefaultSSLSocketFactory: void <init>(java.lang.Exception)>-><javax.net.ssl.SSLSocketFactory: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.springframework.web.util.HierarchicalUriComponents: void verifyUriComponent(java.lang.String,org.springframework.web.util.HierarchicalUriComponents$Type)>
<java.util.zip.CheckedInputStream: int read()>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.Map getErrorAttributes(javax.servlet.http.HttpServletRequest,org.springframework.boot.web.error.ErrorAttributeOptions)>
<java.util.stream.Nodes$LongArrayNode: void <init>(long[])>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.Point: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.management.openmbean.TabularType: int hashCode()>
<java.util.stream.StreamShape: java.util.stream.StreamShape[] values()>-><java.lang.Object: java.lang.Object clone()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><cn.hutool.json.JSONObject: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity: org.springframework.data.mongodb.core.mapping.MongoPersistentProperty returnPropertyIfBetterIdPropertyCandidateOrNull(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>-><org.springframework.data.mapping.model.BasicPersistentEntity: org.springframework.data.mapping.PersistentProperty getIdProperty()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiDescriptionLookup: void <init>()>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration: void <init>()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.mapping.model.Property: java.util.Optional getWither()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: int hashCode()>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerOpaqueTokenConfiguration$OpaqueTokenIntrospectionClientConfiguration: void <init>()>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Type: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyConnection$ClosedConnection: java.sql.Connection getClosedConnection()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<org.springframework.core.CoroutinesUtils$monoToDeferred$1: void <init>(reactor.core.publisher.Mono,kotlin.coroutines.Continuation)>-><kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.node.DecimalNode: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.springframework.data.mongodb.core.mapping.ShardingStrategy: void <clinit>()>-><org.springframework.data.mongodb.core.mapping.ShardingStrategy: void <init>(java.lang.String,int)>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonBooleanCodec: java.lang.Class getEncoderClass()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Object)>
<io.netty.util.internal.NativeLibraryLoader: void closeQuietly(java.io.Closeable)>-><java.io.InputStream: void close()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<org.springframework.data.redis.core.convert.PathIndexResolver: void <init>()>-><org.springframework.data.redis.core.convert.PathIndexResolver: void <init>(org.springframework.data.redis.core.mapping.RedisMappingContext)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.query.Collation: org.bson.Document lambda$toMongoDocumentConverter$11(org.springframework.data.mongodb.core.query.Collation)>-><java.util.Optional: void ifPresent(java.util.function.Consumer)>
<io.micrometer.core.instrument.config.validate.DurationValidator: void <clinit>()>-><io.micrometer.core.instrument.config.validate.DurationValidator$2: void <init>(java.lang.String,int,java.lang.String[])>
<org.bson.codecs.OverridableUuidRepresentationUuidCodec: void <init>()>-><org.bson.codecs.UuidCodec: void <init>()>
<io.micrometer.core.util.internal.logging.AbstractInternalLogger: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Collections$UnmodifiableSet: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.types.Code: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<org.apache.ibatis.io.Resources: java.util.Properties getUrlAsProperties(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.google.common.base.Joiner: void <init>(com.google.common.base.Joiner)>-><java.lang.Object: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonDocument: int hashCode()>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$13(com.mongodb.client.model.Collation$Builder,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><com.mongodb.client.model.Collation$Builder: com.mongodb.client.model.Collation$Builder collationStrength(com.mongodb.client.model.CollationStrength)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.data.domain.Sort$Order: int hashCode()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineAddresses()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: int determinePort()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean: java.lang.String lambda$new$0(java.lang.Class)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<org.apache.logging.log4j.util.PropertiesUtil: java.util.Properties loadClose(java.io.InputStream,java.lang.Object)>-><java.io.BufferedInputStream: void close()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserializeUsingCustom(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection,com.fasterxml.jackson.databind.JsonDeserializer)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.text.PatternEntry: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: int hashCode()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.nio.charset.CoderResult: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>
<sun.awt.DebugSettings: java.lang.String toString()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(byte[],int,int,boolean)>-><com.google.protobuf.CodedInputStream$ArrayDecoder: int pushLimit(int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.apache.ibatis.mapping.ResultMapping: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.NoOpReactiveSessionConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: boolean isExternalMessageHeaderAllowed(java.lang.String,java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.util.Collections$UnmodifiableList$1: void <init>(java.util.Collections$UnmodifiableList,int)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.ListIterator listIterator(int)>
<cn.hutool.json.JSONObject: void init(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.data.mapping.model.SimpleTypeHolder: void <init>(java.util.Set,boolean)>-><com.google.common.collect.ForwardingCollection: int size()>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(org.springframework.transaction.TransactionDefinition)>-><org.springframework.transaction.TransactionDefinition: int getPropagationBehavior()>
<java.util.Currency$1: java.lang.Void run()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.types.MaxKey: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <clinit>()>-><org.springframework.data.util.ReflectionUtils: java.lang.reflect.Field findRequiredField(java.lang.Class,java.lang.String)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<java.util.stream.Streams$ConcatSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: java.util.Spliterator trySplit()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.awt.geom.Point2D: int hashCode()>
<com.rabbitmq.client.impl.ValueWriter: void writeArray(java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.core.SpringProperties: void <clinit>()>-><java.net.SocketInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Locale: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<org.springframework.core.annotation.AnnotatedElementUtils: java.lang.annotation.Annotation findMergedAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class)>
<java.util.stream.Nodes$ToArrayTask$OfRef: void copyNodeToArray()>-><java.util.stream.Node$OfLong: void copyInto(java.lang.Object[],int)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisSocketURIAndApplySettings(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.time.Duration getCommandTimeout()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map,boolean,java.util.Locale)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.reflect.WeakCache$CacheKey: int hashCode()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings: org.springframework.boot.web.server.MimeMappings unmodifiableMappings(org.springframework.boot.web.server.MimeMappings)>-><org.springframework.boot.web.server.MimeMappings: void <init>(org.springframework.boot.web.server.MimeMappings,boolean)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl: void <init>()>-><org.springframework.security.core.SpringSecurityMessageSource: org.springframework.context.support.MessageSourceAccessor getAccessor()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.AVA: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><sun.net.www.MeteredStream: void close()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<org.apache.ibatis.type.TypeHandlerRegistry: void register(java.lang.reflect.Type,org.apache.ibatis.type.JdbcType,org.apache.ibatis.type.TypeHandler)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void addClassIfPresent(java.util.Collection,java.lang.String)>-><org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: void <init>()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.RDN: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.text.PatternEntry: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><java.util.OptionalInt: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: void <init>(com.fasterxml.classmate.util.ResolvedTypeCache)>-><java.lang.Object: void <init>()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><com.google.protobuf.LazyStringArrayList: void <init>()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor: void <init>()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean isReadable()>-><java.net.HttpURLConnection: int getResponseCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><cn.hutool.json.JSONNull: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><com.mongodb.client.model.geojson.Point: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.springframework.boot.actuate.health.Status: void <clinit>()>-><org.springframework.boot.actuate.health.Status: void <init>(java.lang.String)>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><org.bson.BsonArray: boolean addAll(java.util.Collection)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<com.google.protobuf.CodedInputStream$ArrayDecoder: int pushLimit(int)>-><com.google.protobuf.CodedInputStream$ArrayDecoder: void recomputeBufferSizeAfterLimit()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation: org.springframework.data.mongodb.core.query.Collation$Alternate lambda$alternate$1(java.lang.String)>-><org.springframework.data.mongodb.core.query.Collation$Alternate: void <init>(java.lang.String,java.util.Optional)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<org.apache.ibatis.reflection.wrapper.MapWrapper: java.lang.Object get(org.apache.ibatis.reflection.property.PropertyTokenizer)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.apache.logging.log4j.util.PropertyFilePropertySource: java.util.Properties loadPropertiesFile(java.lang.String)>-><sun.net.www.http.KeepAliveStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.util.context.Context0: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.invoke.MemberName: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.math.BigInteger: java.lang.String toString()>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.net.URL: java.lang.String getAuthority()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void _addDeserializerFactoryMethods(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<io.netty.util.internal.NativeLibraryLoader: byte[] classToByteArray(java.lang.Class)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[])>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.types.MinKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.Permission: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger wrapLogger(org.slf4j.Logger)>-><io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void <init>(org.slf4j.spi.LocationAwareLogger)>
<org.springframework.data.spel.spi.Function: boolean isSignatureEqual(org.springframework.data.spel.spi.Function)>-><java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>
<org.bson.codecs.jsr310.Jsr310CodecProvider: void putCodec(org.bson.codecs.Codec)>-><org.bson.codecs.jsr310.LocalTimeCodec: java.lang.Class getEncoderClass()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisMessageListener: void <init>(org.springframework.data.redis.connection.MessageListener)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.ProxyLeakTask: void <clinit>()>-><com.zaxxer.hikari.pool.ProxyLeakTask$1: void <init>()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>-><com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.DefaultIndexOperations: java.lang.String lambda$ensureIndex$0(org.springframework.data.mongodb.core.index.IndexDefinition,com.mongodb.client.MongoCollection)>-><org.springframework.data.mongodb.core.DefaultIndexOperations: com.mongodb.client.model.IndexOptions addPartialFilterIfPresent(com.mongodb.client.model.IndexOptions,org.bson.Document,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonArray: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>-><java.lang.Object: void <init>()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: int compareTo(java.lang.Object)>
<java.util.Collections$UnmodifiableList$1: boolean hasNext()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.data.mongodb.core.convert.DocumentAccessor: java.lang.Object get(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>-><org.springframework.data.mongodb.util.BsonUtils: java.util.Map asMap(org.bson.conversions.Bson)>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: java.lang.Object get(int)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.LegacyHealthEndpointCompatibilityConfiguration$LegacyReactiveHealthEndpointCompatibilityConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.lettuce.core.event.metrics.CommandLatencyEvent: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.management.MBeanParameterInfo: int hashCode()>
<org.springframework.data.mongodb.core.convert.DocumentAccessor: void <init>(org.bson.conversions.Bson)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void _addDeserializerConstructors(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,java.util.Map)>-><com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: com.fasterxml.jackson.annotation.JsonCreator$Mode findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.DelegateServiceScheduler$UnsupportedScheduledExecutorService: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void recoverTopology(java.util.concurrent.ExecutorService)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonArray: java.lang.String toString()>
<com.google.common.collect.ForwardingSet: void <init>()>-><com.google.common.collect.ForwardingCollection: void <init>()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>-><com.google.common.cache.CacheBuilder: void <init>()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<register-finalize <org.springframework.data.redis.connection.RedisNode$NodeType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.mongodb.client.model.Collation: void <init>(com.mongodb.client.model.Collation$Builder)>-><com.mongodb.client.model.Collation$Builder: java.lang.Boolean access$400(com.mongodb.client.model.Collation$Builder)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Collections$SynchronizedList: int hashCode()>
<org.springframework.core.style.DefaultToStringStyler: void <init>(org.springframework.core.style.ValueStyler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><cn.hutool.core.date.format.FastDateFormat: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.regex.Pattern: java.lang.String toString()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration: void <init>(org.springframework.core.env.Environment)>-><org.springframework.web.context.support.StandardServletEnvironment: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder,org.springframework.data.mapping.model.FieldNamingStrategy)>-><org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: java.lang.String getAnnotatedFieldName()>
<com.google.common.cache.CacheBuilder: void checkWeightWithWeigher()>-><java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonBinary: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.StackTraceElement: int hashCode()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.Frame: long tableSize(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.ResourceLeakDetector$Record: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.data.mapping.Association: void <init>(org.springframework.data.mapping.PersistentProperty,org.springframework.data.mapping.PersistentProperty)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonDouble: java.lang.String toString()>
<sun.net.NetworkClient: void <clinit>()>-><sun.net.NetworkClient: boolean isASCIISuperset(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.springframework.messaging.rsocket.DefaultRSocketStrategies$DefaultRSocketStrategiesBuilder: void lambda$build$0(org.springframework.messaging.rsocket.MetadataExtractor,java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonDocument: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.Provider$UString: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: boolean patchShadedLibraryId(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String)>-><java.io.FileInputStream: int read(byte[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><org.springframework.web.servlet.handler.MappedInterceptor: void <init>(java.lang.String[],java.lang.String[],org.springframework.web.servlet.HandlerInterceptor)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList: java.lang.Object get(int)>
<reactor.core.scheduler.ParallelScheduler: void <clinit>()>-><java.util.concurrent.atomic.AtomicLong: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String iterableToDelimitedString(java.lang.Iterable,java.lang.String,java.lang.String,org.springframework.core.convert.converter.Converter)>-><java.util.StringJoiner: java.lang.String toString()>
<org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType: void <clinit>()>-><org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType: void <init>(java.lang.String,int)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.springframework.http.converter.ResourceRegionHttpMessageConverter: boolean canWrite(java.lang.reflect.Type,java.lang.Class,org.springframework.http.MediaType)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonDateTime: java.lang.String toString()>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: int getMaxTotal()>
<org.bson.json.ShellObjectIdConverter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.actuate.metrics.web.client.MetricsClientHttpRequestInterceptor: void <clinit>()>-><org.springframework.boot.actuate.metrics.web.client.MetricsClientHttpRequestInterceptor$UrlTemplateThreadLocal: void <init>(org.springframework.boot.actuate.metrics.web.client.MetricsClientHttpRequestInterceptor$1)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList: java.lang.Object get(int)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.types.Symbol: java.lang.String toString()>
<org.springframework.util.LinkedCaseInsensitiveMap: void clear()>-><java.util.HashMap: void clear()>
<cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>-><org.bson.BsonArray: boolean isEmpty()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.Collections$UnmodifiableList$1: boolean hasNext()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.OptionalInt: void <clinit>()>-><java.util.OptionalInt: void <init>()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><java.net.URLConnection: int getContentLength()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.ibatis.type.TypeHandlerRegistry: java.util.Map getJdbcHandlerMapForEnumInterfaces(java.lang.Class,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object)>
<org.springframework.core.type.classreading.SimpleMetadataReader: org.springframework.asm.ClassReader getClassReader(org.springframework.core.io.Resource)>-><java.io.BufferedInputStream: void close()>
<org.springframework.data.redis.cache.CacheKeyPrefix: java.lang.String lambda$simple$0(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.bson.AbstractBsonWriter$State: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<register-finalize <io.micrometer.core.instrument.Meter$Type: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity: org.springframework.data.mongodb.core.mapping.MongoPersistentProperty returnPropertyIfBetterIdPropertyCandidateOrNull(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: java.lang.reflect.Field getField()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.io.FileInputStream: void close()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<java.util.stream.Nodes$ToArrayTask$OfPrimitive: void copyNodeToArray()>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: void copyInto(java.lang.Object,int)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.bson.internal.ProvidersCodecRegistry: void <init>(java.util.List)>-><java.util.Arrays$ArrayList: int size()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxIterable: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.bson.codecs.BsonNullCodec: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents$Type$7: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonMinKeyCodec: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.UUID: java.lang.String toString()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.JsonDoubleConverter: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><cn.hutool.core.date.format.FastDateFormat: boolean equals(java.lang.Object)>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<springfox.documentation.spring.web.DescriptionResolver: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<io.netty.util.internal.NativeLibraryLoader: boolean patchShadedLibraryId(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String)>-><java.io.FilterInputStream: int available()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.types.Symbol: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><com.mongodb.DBObjectCodecProvider: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.beans.PropertyValue: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonMinKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonMinKey: int hashCode()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.publisher.SignalType: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.ClassTypeInformation: java.lang.String toString()>
<org.apache.ibatis.reflection.wrapper.MapWrapper: void set(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.lettuce.core.metrics.CommandMetrics: java.lang.String toString()>
<jdk.internal.util.xml.impl.ReaderUTF8: int read()>-><sun.net.www.http.ChunkedInputStream: int read()>
<com.zaxxer.hikari.pool.HikariProxyStatement: java.sql.SQLWarning getWarnings()>-><com.zaxxer.hikari.pool.ProxyStatement: java.sql.SQLException checkException(java.sql.SQLException)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.Map getErrorAttributes(javax.servlet.http.HttpServletRequest,org.springframework.boot.web.error.ErrorAttributeOptions)>-><org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest)>
<reactor.util.function.Tuple3: int hashCode()>-><com.mongodb.client.model.geojson.MultiPolygon: int hashCode()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><org.bson.RawBsonArray$RawBsonArrayList: java.lang.Object get(int)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$13(com.mongodb.client.model.Collation$Builder,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$ICUComparisonLevel: java.util.Optional getCaseFirst()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.Collections$EmptyList: int size()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.Document: java.lang.String toString()>
<java.lang.Thread: void <init>(java.lang.Runnable,java.security.AccessControlContext)>-><java.lang.Thread: int nextThreadNum()>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: java.util.Set addCandidateComponentsFromIndex(org.springframework.context.index.CandidateComponentsIndex,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void lambda$new$0(org.springframework.security.core.userdetails.UserDetails)>-><org.springframework.security.authentication.DisabledException: void <init>(java.lang.String)>
<org.bson.codecs.BsonCodec: void <clinit>()>-><org.bson.codecs.BsonDocumentCodec: void <init>()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.springframework.boot.actuate.endpoint.jmx.JmxEndpointExporter: javax.management.ObjectName register(org.springframework.boot.actuate.endpoint.jmx.ExposableJmxEndpoint)>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry$NoJmxMBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: int compareTo(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.net.httpserver.ServerImpl$Dispatcher: void run()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonDouble: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.mongodb.DBObjectCodecProvider: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation$Alternate: void <clinit>()>-><org.springframework.data.mongodb.core.query.Collation$Alternate: void <init>(java.lang.String,java.util.Optional)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<register-finalize <org.springframework.data.redis.connection.RedisClusterNode$LinkState: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonNull: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)>-><com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonDateTime: int hashCode()>
<com.alibaba.druid.filter.FilterManager: void <clinit>()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>
<sun.awt.DebugSettings: void loadSystemProperties()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<java.time.Duration: java.time.Duration dividedBy(long)>-><java.math.BigDecimal: java.math.BigDecimal valueOf(long)>
<org.springframework.data.mongodb.core.index.IndexField: void <init>(java.lang.String,org.springframework.data.domain.Sort$Direction,org.springframework.data.mongodb.core.index.IndexField$Type)>-><java.lang.Float: java.lang.Float valueOf(float)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonString: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration: void <init>()>
<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.util.List getPropertyAccessorsToTry(java.lang.Object,java.util.List)>-><org.springframework.data.spel.ExtensionAwareEvaluationContextProvider$ExtensionAwarePropertyAccessor: java.lang.Class[] getSpecificTargetClasses()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.x509.GeneralName: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.web.servlet.view.ContentNegotiatingViewResolver$1: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$13(com.mongodb.client.model.Collation$Builder,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$ICUComparisonLevel: int getLevel()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterNameReader: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <init>()>-><java.lang.Object: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.node.POJONode: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.util.LazyStreamable: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<java.util.TreeMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: int getMinIdle()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$ErrorAsyncSink: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: java.lang.String toString()>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider: void <init>(org.springframework.data.mongodb.core.convert.MappingMongoConverter,org.springframework.data.mongodb.core.convert.DocumentAccessor,org.springframework.data.mapping.model.SpELExpressionEvaluator,org.springframework.data.mongodb.core.convert.ObjectPath)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.context.ShutdownEndpointAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.http.ResponseEntity: void <init>(org.springframework.http.HttpStatus)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<cn.hutool.core.map.CaseInsensitiveMap: void <init>(float,java.util.Map)>-><org.bson.BsonDocumentWrapper: int size()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.lang.Object next()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.IdentityHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.annotation.Annotation[] getAnnotations()>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><java.lang.Object: void <init>()>
<io.jsonwebtoken.impl.JwtMap: void setValue(java.lang.String,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.mongodb.client.model.geojson.MultiPolygon: int hashCode()>
<java.util.concurrent.Executors$PrivilegedThreadFactory: void <init>()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<org.bson.BsonBoolean: void <init>(boolean)>-><org.bson.BsonValue: void <init>()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonMinKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$LongWrappingSpliterator: java.util.Spliterator trySplit()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.InvalidReason: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ExtendedJsonMinKeyConverter: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.text.PatternEntry: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<cn.hutool.core.map.MapProxy: void putAll(java.util.Map)>-><org.bson.BsonDocument: void putAll(java.util.Map)>
<org.springframework.amqp.rabbit.connection.RabbitResourceHolder: void rollbackAll()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.security.jca.ProviderConfig: int hashCode()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.util.Pair: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonDateTime: java.lang.String toString()>
<org.springframework.core.annotation.MergedAnnotationCollectors: void lambda$toAnnotationSet$0(java.util.ArrayList,org.springframework.core.annotation.MergedAnnotation)>-><io.netty.util.internal.RecyclableArrayList: boolean add(java.lang.Object)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void <init>(java.lang.reflect.Constructor,java.lang.reflect.Constructor)>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonDouble: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<io.lettuce.core.masterslave.SentinelConnector: reactor.core.publisher.Mono lambda$connectAsync$0(io.lettuce.core.masterslave.SentinelTopologyRefresh,io.lettuce.core.masterslave.MasterSlaveConnectionProvider,java.lang.Runnable,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getTraceParameter(javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getBooleanParameter(javax.servlet.http.HttpServletRequest,java.lang.String)>
<org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag: org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag[] values()>-><java.lang.Object: java.lang.Object clone()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.types.Decimal128: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><cn.hutool.json.JSONArray: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation$PrimaryICUComparisonLevel: void <clinit>()>-><org.springframework.data.mongodb.core.query.Collation$PrimaryICUComparisonLevel: void <init>(boolean)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonInt32: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: int size()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<org.springframework.context.expression.MapAccessor: boolean canRead(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><org.bson.Document: boolean containsKey(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.StringBuffer: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.simple.SimpleConfig: java.time.Duration step()>-><io.micrometer.core.instrument.config.validate.Validated: java.lang.Object orElse(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void subscribeChannel(byte[][])>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.security.CodeSource: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.temporal.ChronoField: java.lang.String toString()>
<register-finalize <io.micrometer.core.instrument.simple.CountingMode: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.bson.json.JsonBooleanConverter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: void setCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.rmi.server.LoaderHandler$Loader: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<com.mongodb.DBObjectCodecProvider: void <init>()>-><com.mongodb.DBObjectCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap)>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.property.bean.AccessorsProvider getAccessorsProvider()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Locale)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.Spliterators$DoubleArraySpliterator: int characteristics()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.types.Symbol: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.scheduling.quartz.SchedulerAccessor: void registerJobsAndTriggers()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.mongodb.client.model.Collation: void <init>(com.mongodb.client.model.Collation$Builder)>-><com.mongodb.client.model.Collation$Builder: java.lang.Boolean access$700(com.mongodb.client.model.Collation$Builder)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.jar.Manifest: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type$9: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonNull: java.lang.String toString()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.ValidationException: java.lang.String lambda$new$0(io.micrometer.core.instrument.config.validate.Validated$Invalid)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.Object getValue()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.web.ResourceProperties)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.httpserver.FixedLengthInputStream: int readImpl(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions partialFilterExpression(org.bson.conversions.Bson)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<org.springframework.data.redis.cache.RedisCacheConfiguration: byte[] lambda$registerDefaultConverters$2(java.lang.String)>-><java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.lang.StringBuffer: void <init>(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.io.DataInputStream: char readChar()>-><sun.net.www.MeteredStream: int read()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.reflect.Method: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type$6: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonBinary: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonDecimal128: int hashCode()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.AbstractRedisClient createClient()>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientResources()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.bootstrap.AbstractBootstrap: java.lang.String toString()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><springfox.documentation.spring.web.plugins.DefaultConfiguration: void <init>(springfox.documentation.spi.service.contexts.Defaults,com.fasterxml.classmate.TypeResolver,javax.servlet.ServletContext)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: boolean remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$ErrorAsyncSink: java.lang.String toString()>
<java.util.zip.InflaterOutputStream: void flush()>-><java.io.PrintStream: void write(byte[],int,int)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong flattenLong(java.util.stream.Node$OfLong)>-><java.util.concurrent.ForkJoinTask: java.lang.Object invoke()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Currency: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyConnection: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.util.function.Tuple2: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.net.URI: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.PathSanitizer: void <init>()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.SubList: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.util.ClassTypeInformation: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonInt32: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<org.springframework.security.web.savedrequest.SavedRequestAwareWrapper: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<com.google.common.collect.RegularImmutableList: void <clinit>()>-><com.google.common.collect.RegularImmutableList: void <init>(java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.io.File: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.AttributeEntry: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.bson.codecs.configuration.CodecRegistries: org.bson.codecs.configuration.CodecRegistry fromProviders(org.bson.codecs.configuration.CodecProvider[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.bson.codecs.MapCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap)>-><org.bson.codecs.MapCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap,org.bson.Transformer)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonJavaScript: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: org.springframework.data.mapping.Association createAssociation()>-><org.springframework.data.mapping.Association: void <init>(org.springframework.data.mapping.PersistentProperty,org.springframework.data.mapping.PersistentProperty)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.Collections$SetFromMap: void forEach(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: void forEach(java.util.function.Consumer)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.springframework.http.HttpHeaders: void <clinit>()>-><org.springframework.http.ReadOnlyHttpHeaders: void <init>(org.springframework.http.HttpHeaders)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.bson.types.Decimal128: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.ibatis.type.TypeReference: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$DoubleArraySpliterator: java.util.Spliterator trySplit()>
<org.springframework.http.HttpStatus: void <clinit>()>-><org.springframework.http.HttpStatus: void <init>(java.lang.String,int,int,java.lang.String)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.bson.AbstractBsonReader$1: void <clinit>()>-><org.bson.BsonContextType: org.bson.BsonContextType[] values()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.data.projection.ProxyProjectionFactory$MapAccessingMethodInterceptorFactory: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: void <clinit>()>-><java.lang.Boolean: boolean booleanValue()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<java.util.stream.IntPipeline: void forEachWithCancel(java.util.Spliterator,java.util.stream.Sink)>-><java.util.stream.SliceOps$3$1: boolean cancellationRequested()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean isReadable()>-><java.io.InputStream: void close()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.boot.actuate.health.Health$Builder: void <init>(org.springframework.boot.actuate.health.Status)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.zip.ZipEntry: int hashCode()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<com.rabbitmq.client.impl.Frame: long arraySize(java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes: void <init>(java.lang.String[])>-><org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes: void <init>(java.util.List)>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><java.io.FileInputStream: void close()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<com.fasterxml.classmate.util.ClassKey: void <init>(java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.google.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.text.DecimalFormat: int hashCode()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type$8: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Long: long parseLong(java.lang.String)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void _checkImplicitlyNamedConstructors(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsManager: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.stream.AbstractPipeline: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator spliterator()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void <init>(java.lang.String)>-><com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.google.common.collect.Sets$UnmodifiableNavigableSet: void <init>(java.util.NavigableSet)>-><com.google.common.collect.ForwardingSortedSet: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$BufferAsyncSink: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean: java.lang.String lambda$new$0(java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource: void <clinit>()>-><java.util.Collections: java.util.List emptyList()>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder$4: void <init>(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder,java.lang.Class)>-><com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$TypeMatcher: void <init>()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonObjectId: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<io.micrometer.core.instrument.config.validate.ValidationException: java.lang.String lambda$new$0(io.micrometer.core.instrument.config.validate.Validated$Invalid)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonSymbol: int hashCode()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.mapping.model.AbstractPersistentProperty: org.springframework.data.mapping.Association lambda$new$0()>-><org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: org.springframework.data.mapping.Association createAssociation()>
<sun.net.www.protocol.http.HttpURLConnection$13: void <clinit>()>-><java.lang.Enum: int ordinal()>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><org.springframework.http.server.DefaultPathContainer$DefaultSeparator: void <init>(char,java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.util.context.ContextN: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents$Type$4: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.data.mongodb.core.MongoTemplate: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.DurationValidator[] values()>-><java.lang.Object: java.lang.Object clone()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.util.context.ContextN: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<io.jsonwebtoken.impl.crypto.RsaSignatureValidator: boolean isValid(byte[],byte[])>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.bson.BsonDocumentWriter$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<java.util.Comparators$NullComparator: void <init>(boolean,java.util.Comparator)>-><java.lang.Object: void <init>()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.Consumer)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonInt64: java.lang.String toString()>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: java.lang.Object getCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList: java.lang.Object get(int)>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.springframework.core.SpringProperties: void <clinit>()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonMinKey: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonObjectId: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<com.google.common.collect.ForwardingCollection: void <init>()>-><com.google.common.collect.ForwardingObject: void <init>()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiDocumentationScanner getApiDocumentationScanner()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration: void <init>()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: void applyPropertyToBeanDefinition(java.lang.String,java.lang.Object)>-><org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: void <init>(java.lang.String,java.lang.Class)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.Tag: int compareTo(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.beans.propertyeditors.CustomMapEditor: void setValue(java.lang.Object)>-><org.bson.BsonDocumentWrapper: int size()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.zaxxer.hikari.pool.ProxyLeakTask$1: void <init>()>-><com.zaxxer.hikari.pool.ProxyLeakTask: void <init>(com.zaxxer.hikari.pool.ProxyLeakTask$1)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils$MultiValueMapAdapter: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: void putAll(java.util.Map)>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: int hashCode()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: int compareTo(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonInt32: int hashCode()>
<org.springframework.context.support.StaticMessageSource: void <init>()>-><java.util.HashMap: void <init>()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.Vector: boolean addAll(java.util.Collection)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator: void createAndRegisterProperty(org.springframework.data.mapping.model.Property)>-><org.springframework.data.mongodb.core.mapping.MongoMappingContext: org.springframework.data.mapping.PersistentProperty createPersistentProperty(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.model.MutablePersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonMinKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.cglib.core.Signature: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonBoolean: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.text.RuleBasedCollator: int hashCode()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>-><io.micrometer.core.util.internal.logging.JdkLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>
<com.google.common.collect.ForwardingObject: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.catalina.core.StandardWrapper: void <init>()>-><java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
<reactor.core.scheduler.Schedulers: java.lang.Object scanExecutor(java.util.concurrent.Executor,reactor.core.Scannable$Attr)>-><java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>
<org.springframework.web.client.RestTemplate: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$13(com.mongodb.client.model.Collation$Builder,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$ICUComparisonLevel: java.util.Optional getCaseLevel()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isVerifyPeer()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.regex.Pattern: java.lang.String toString()>
<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<org.bson.internal.ProvidersCodecRegistry: void <init>(java.util.List)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonObjectId: java.lang.String toString()>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[])>
<org.springframework.messaging.rsocket.DefaultRSocketStrategies$DefaultRSocketStrategiesBuilder: void lambda$build$0(org.springframework.messaging.rsocket.MetadataExtractor,java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.types.CodeWithScope: int hashCode()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: java.lang.String toString()>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: void forEach(java.util.function.Consumer)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.rabbitmq.client.impl.nio.SocketChannelRegistration: int hashCode()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.net.URL: java.lang.String getProtocol()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.web.reactive.WebFluxMetricsAutoConfiguration: void <init>(org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties)>
<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.ProtectionDomain)>-><java.util.Collections$3: boolean hasMoreElements()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonBoolean: int hashCode()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonDateTime: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler$Builder: void _addPropertyIndex(java.lang.String,java.lang.Integer)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap,org.springframework.http.HttpStatus)>-><org.springframework.http.HttpEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonBinary: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<jdk.internal.util.xml.impl.ReaderUTF16: void close()>-><java.io.InputStream: void close()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<org.bson.types.Decimal128: void <clinit>()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.awt.AppContext: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<io.micrometer.core.instrument.config.validate.Validated: boolean isInvalid()>-><io.micrometer.core.instrument.config.validate.Validated$Valid: boolean isValid()>
<org.springframework.data.mongodb.core.convert.MappingMongoConverter: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.data.mongodb.core.query.Collation$CollationLocale: java.lang.String asString()>-><java.util.Optional: void ifPresent(java.util.function.Consumer)>
<io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getEnum(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.Class,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.types.MaxKey: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.YearMonth: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertiesUtil: java.util.Properties loadClose(java.io.InputStream,java.lang.Object)>-><sun.net.www.MeteredStream: void close()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.zone.ZoneOffsetTransition: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.stream.Nodes$InternalNodeSpliterator: int characteristics()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><org.bson.RawBsonArray: boolean remove(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator: void createAndRegisterProperty(org.springframework.data.mapping.model.Property)>-><java.lang.Object: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonString: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.plugins.DocumentationPluginsManager: void <init>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Hashtable$Entry: int hashCode()>
<com.mongodb.DBObjectCodec: void <clinit>()>-><org.bson.codecs.ValueCodecProvider: void <init>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineHost()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: java.lang.String access$000(org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator: void createAndRegisterProperty(org.springframework.data.mapping.model.Property)>-><org.springframework.data.mapping.model.BasicPersistentEntity: java.lang.Class getType()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.bson.Document: java.util.Set entrySet()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.node.ArrayNode: int hashCode()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: int hashCode()>
<org.bson.codecs.ValueCodecProvider: void <init>()>-><org.bson.codecs.ValueCodecProvider: void addCodecs()>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: java.lang.String getDescForKnownTypeIds()>-><com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver: java.lang.String getDescForKnownTypeIds()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.management.MBeanNotificationInfo: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitRetryTemplateCustomizer$Target: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Date: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<cn.hutool.core.map.MapProxy: java.lang.Object remove(java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object remove(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: void <init>()>
<org.apache.ibatis.io.Resources: java.util.Properties getResourceAsProperties(java.lang.String)>-><java.io.InputStream: void close()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.types.Decimal128: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.EnumMap$1: java.lang.String toString()>
<java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<com.google.common.collect.Collections2: void <clinit>()>-><com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.Scannable$Attr$2: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.amqp.RabbitMetricsAutoConfiguration: void <init>()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.io.FileInputStream: void <init>(java.io.File)>
<org.springframework.context.support.StaticApplicationContext: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.context.support.StaticMessageSource: void <init>()>
<java.net.URLClassLoader: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<com.zaxxer.hikari.HikariConfig: void <init>(java.lang.String)>-><com.zaxxer.hikari.HikariConfig: void <init>()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.AbstractMap: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.Document: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions min(java.lang.Double)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><cn.hutool.json.JSONNull: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.LocalDate: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonRegularExpression: int hashCode()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List groupEntitiesByChannel(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.boot.web.error.ErrorAttributeOptions getErrorAttributeOptions(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.LocalDate: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.rabbitmq.client.UnknownClassOrMethodId: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$JdkDynamicAutoProxyConfiguration: void <init>()>
<jdk.internal.util.xml.impl.ReaderUTF8: int read(char[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.types.ObjectId: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<java.util.HashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.stream.ReduceOps$ReduceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.ReduceOps$6ReducingSink: void combine(java.util.stream.ReduceOps$AccumulatingSink)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.internal.Optional: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.lettuce.core.internal.AbstractInvocationHandler: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.OffsetTime: java.lang.String toString()>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><java.util.stream.SpinedBuffer$OfDouble: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.bson.AbstractBsonReader$State: void <clinit>()>-><org.bson.AbstractBsonReader$State: void <init>(java.lang.String,int)>
<com.rabbitmq.client.impl.Frame: long tableSize(java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.bson.codecs.BsonDateTimeCodec: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: int size()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.mongodb.BasicDBObject: int hashCode()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<cn.hutool.json.JSONObject: void init(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.invoke.MethodType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.security.CodeSource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonDocumentWrapper: int hashCode()>
<org.springframework.data.spel.ExtensionAwareEvaluationContextProvider$EvaluationContextExtensionAdapter: void <init>(org.springframework.data.spel.spi.EvaluationContextExtension,org.springframework.data.spel.EvaluationContextExtensionInformation)>-><org.springframework.data.spel.Functions: void addAll(org.springframework.util.MultiValueMap)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong collectLong(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>-><java.util.concurrent.ForkJoinTask: java.lang.Object invoke()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber,java.util.Iterator,boolean,java.lang.Runnable)>-><java.util.Spliterators$4Adapter: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void add(java.lang.Object)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$3Adapter: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.OffsetDateTime: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.BitSet: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.types.MinKey: java.lang.String toString()>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<register-finalize <org.bson.codecs.PatternCodec$RegexFlag: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: void applyPropertyToBeanDefinition(java.lang.String,java.lang.Object)>-><org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: boolean addDeferredProperty(java.lang.String,java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String toJava(java.lang.String,java.lang.String)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.util.Map mapAnnotations(java.lang.annotation.Annotation[])>-><sun.reflect.annotation.AnnotationType: java.lang.annotation.RetentionPolicy retention()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.MeteredStream: void close()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonArray: int hashCode()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.apache.logging.log4j.util.PropertiesUtil: java.util.Properties loadClose(java.io.InputStream,java.lang.Object)>-><sun.net.www.http.ChunkedInputStream: void close()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$9: void <init>(java.lang.String,int)>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.rabbitmq.client.impl.Frame: long arraySize(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.util.stream.Stream getAccessors()>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong collectLong(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean hasCharacteristics(int)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication$1: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.mail.javamail.ConfigurableMimeFileTypeMap: javax.activation.FileTypeMap createFileTypeMap(org.springframework.core.io.Resource,java.lang.String[])>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.publisher.FluxCreate$ErrorAsyncSink: java.lang.String toString()>
<org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.http.HttpStatus)>-><org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap,org.springframework.http.HttpStatus)>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: int intValue()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.reflect.Proxy$KeyX: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag: io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.springframework.jdbc.datasource.init.ScriptUtils: void executeSqlScript(java.sql.Connection,org.springframework.core.io.support.EncodedResource,boolean,boolean,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyStatement: boolean execute(java.lang.String)>
<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.ForgivingExceptionHandler: boolean isSocketClosedOrConnectionReset(java.lang.Throwable)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.misc.Signal: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.lang.Math: double pow(double,double)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: int determinePort()>-><java.lang.Boolean: boolean booleanValue()>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<register-finalize <com.zaxxer.hikari.util.UtilityElf: java.util.concurrent.ThreadPoolExecutor createThreadPoolExecutor(int,java.lang.String,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.mongodb.MongoClientSettings: void <clinit>()>-><org.bson.codecs.jsr310.Jsr310CodecProvider: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<java.util.stream.Streams$ConcatSpliterator: void <init>(java.util.Spliterator,java.util.Spliterator)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: long estimateSize()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.String lambda$addExtensionBean$4(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean,org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$ExtensionBean)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig build()>
<org.springframework.boot.actuate.metrics.web.servlet.WebMvcTags: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: int hashCode()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.springframework.security.crypto.password.LdapShaPasswordEncoder: void <clinit>()>-><java.lang.String: java.lang.String toLowerCase()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory: boolean hasUniquePropertyHashCodes(org.springframework.data.mapping.PersistentEntity)>-><org.springframework.data.mapping.model.BasicPersistentEntity: void doWithAssociations(org.springframework.data.mapping.SimpleAssociationHandler)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<reactor.util.function.Tuple3: int hashCode()>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.LocalTime: java.lang.String toString()>
<cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean isRestrictedHeader(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><java.lang.Long: long longValue()>
<cn.hutool.core.map.MapProxy: java.util.Collection values()>-><org.bson.BsonDocumentWrapper: java.util.Collection values()>
<org.apache.ibatis.reflection.wrapper.BeanWrapper: org.apache.ibatis.reflection.MetaObject instantiatePropertyValue(java.lang.String,org.apache.ibatis.reflection.property.PropertyTokenizer,org.apache.ibatis.reflection.factory.ObjectFactory)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.mongodb.client.model.geojson.MultiLineString: int hashCode()>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.AtomicBooleanCodec: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void subscribeChannel(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.security.x509.Extension: int hashCode()>
<java.util.Collection: java.util.stream.Stream parallelStream()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Spliterator spliterator()>
<register-finalize <sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonBoolean: int hashCode()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ShellTimestampConverter: void <init>()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonInt64: java.lang.String toString()>
<sun.misc.Resource: byte[] getBytes()>-><java.io.InputStream: void close()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonElement: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: void <init>(org.springframework.boot.autoconfigure.orm.jpa.JpaProperties)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: java.lang.String toString()>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeResolverBuilder: void <init>(com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping)>-><com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder builder()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.String: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.HashMap$Node: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.types.MinKey: int hashCode()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.publisher.ConnectableFluxOnAssembly: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void recoverTopology(java.util.concurrent.ExecutorService)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><java.util.Spliterators$4Adapter: boolean hasNext()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.net.SocketInputStream: void close()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonBoolean: int hashCode()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<ch.qos.logback.core.joran.conditional.PropertyEvalScriptBuilder: ch.qos.logback.core.joran.conditional.Condition build(java.lang.String)>-><org.codehaus.janino.ClassBodyEvaluator: void setExtendedClass(java.lang.Class)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.stream.ReferencePipeline: void forEachWithCancel(java.util.Spliterator,java.util.stream.Sink)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.http.HttpStatus getStatus(javax.servlet.http.HttpServletRequest)>-><org.springframework.http.HttpStatus: org.springframework.http.HttpStatus valueOf(int)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.ArrayList$SubList: int size()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><cn.hutool.json.JSONArray: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.util.Map mapAnnotations(java.lang.annotation.Annotation[])>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.text.StringCharacterIterator: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.publisher.FluxCallableOnAssembly: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Object: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.SubList: java.util.Iterator iterator()>
<sun.net.www.protocol.http.AuthenticationHeader: void <clinit>()>-><java.lang.String: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.lang.Iterable)>-><java.util.stream.SpinedBuffer$OfDouble: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.mongodb.DBRefCodecProvider: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.support.AbstractBeanDefinition createBeanDefinition()>-><org.springframework.beans.factory.support.GenericBeanDefinition: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonTimestampCodec: java.lang.Class getEncoderClass()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)>-><java.lang.Class: java.lang.String getName()>
<org.bson.json.RelaxedExtendedJsonDoubleConverter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$13(com.mongodb.client.model.Collation$Builder,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$TertiaryICUComparisonLevel: java.util.Optional getCaseLevel()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.JsonBooleanConverter: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.bson.BsonArray: int size()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean contains(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: boolean contains(java.lang.Object)>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: int compareTo(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndBind(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.security.UnresolvedPermission: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><java.net.SocketInputStream: int read(byte[])>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration: void <init>()>
<java.util.zip.ZipInputStream: void readFully(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.util.ClassTypeInformation: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.lettuce.core.internal.AbstractInvocationHandler: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getReadFrom()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getReadFrom()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.RawBsonDocument: int hashCode()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: java.lang.Object manageMapIfNecessary(java.util.Map)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.apache.ibatis.type.TypeHandlerRegistry: java.util.Map getJdbcHandlerMapForEnumInterfaces(java.lang.Class,java.lang.Class)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.StringBuffer: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<org.bson.json.ExtendedJsonTimestampConverter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean isReadable()>-><sun.net.www.http.KeepAliveStream: void close()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<org.apache.juli.logging.DirectJDKLog: void fatal(java.lang.Object,java.lang.Throwable)>-><org.apache.juli.logging.DirectJDKLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions name(java.lang.String)>
<com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException from(com.fasterxml.jackson.core.JsonParser,java.lang.Object,java.lang.String,java.util.Collection)>-><com.fasterxml.jackson.core.util.JsonParserDelegate: com.fasterxml.jackson.core.JsonLocation getCurrentLocation()>
<java.util.Collections$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><redis.clients.jedis.Jedis: void psubscribe(redis.clients.jedis.BinaryJedisPubSub,byte[][])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiModelReader getApiModelReader()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Locale)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeMessage(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.ErrorProperties: org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeAttribute getIncludeMessage()>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientOptions()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientOptions()>
<org.springframework.data.redis.connection.jedis.JedisConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisMessageListener: void <init>(org.springframework.data.redis.connection.MessageListener)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.action.AbstractEventEvaluatorAction: void end(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.net.URLClassLoader: void close()>-><sun.net.www.MeteredStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.LogbackMetricsAutoConfiguration: void <init>()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$DifferentManagementContextConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.actuate.autoconfigure.web.ManagementContextFactory)>-><org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>()>
<org.springframework.data.spel.ExtensionAwareEvaluationContextProvider$EvaluationContextExtensionAdapter: void <init>(org.springframework.data.spel.spi.EvaluationContextExtension,org.springframework.data.spel.EvaluationContextExtensionInformation)>-><java.util.HashMap: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonDocument: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions expireAfter(java.lang.Long,java.util.concurrent.TimeUnit)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.springframework.data.mongodb.core.query.Collation$ICUComparisonLevel: void <init>(int)>-><java.util.Optional: java.util.Optional empty()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<com.google.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>-><java.lang.String: int indexOf(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList$COWIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.context.expression.MapAccessor: void write(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.bson.codecs.PatternCodec$RegexFlag: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<register-finalize <org.springframework.boot.actuate.autoconfigure.health.HealthProperties$Show: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Hashtable$Enumerator: boolean hasMoreElements()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<sun.net.NetworkClient: boolean isASCIISuperset(java.lang.String)>-><java.util.Arrays: boolean equals(byte[],byte[])>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.Flux: java.lang.String toString()>
<com.google.common.collect.Sets$UnmodifiableNavigableSet: void <init>(java.util.NavigableSet)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.awt.Point: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonInt32: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: java.lang.String lambda$setDatabase$0(int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.fasterxml.classmate.TypeBindings: void <clinit>()>-><com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.ShortCodec: java.lang.Class getEncoderClass()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<java.util.stream.ReduceOps$6ReducingSink: void combine(java.util.stream.ReduceOps$AccumulatingSink)>-><java.util.stream.ReduceOps$6ReducingSink: void combine(java.util.stream.ReduceOps$6ReducingSink)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><cn.hutool.json.JSONArray: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>-><com.google.protobuf.LazyStringArrayList: void <init>()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><java.lang.String: char[] toCharArray()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.StackTraceElement: java.lang.String toString()>
<io.jsonwebtoken.impl.JwtMap: java.util.Collection values()>-><org.bson.BsonDocumentWrapper: java.util.Collection values()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.bson.types.BSONTimestamp: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: java.util.Spliterator trySplit()>
<org.bson.BsonDocumentWriter$1: void <clinit>()>-><org.bson.AbstractBsonWriter$State: org.bson.AbstractBsonWriter$State[] values()>
<org.springframework.data.mongodb.core.query.Collation: org.bson.Document lambda$toMongoDocumentConverter$11(org.springframework.data.mongodb.core.query.Collation)>-><org.springframework.data.mongodb.core.query.Collation$CollationLocale: java.lang.String asString()>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated detect(java.lang.String,java.lang.String)>-><java.util.Collection: java.util.stream.Stream stream()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeStacktrace: org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeStacktrace[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory getDefaultFactory()>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.Period: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.WrappedByteBuf: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>-><java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonNullCodec: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.security.x509.GeneralName: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><java.lang.Enum: int ordinal()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<java.util.AbstractList: void rangeCheckForAdd(int)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonArray: java.lang.String toString()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>
<org.bson.codecs.IntegerCodec: void <init>()>-><java.lang.Object: void <init>()>
<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.redis.listener.PatternTopic: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><java.util.OptionalInt: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeBindingErrors(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getErrorsParameter(javax.servlet.http.HttpServletRequest)>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag: org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag[] values()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool: java.util.concurrent.ThreadFactory lambda$initializeHouseKeepingExecutorService$3()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.ibatis.builder.annotation.MapperAnnotationBuilder: void parsePendingMethods()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.ZonedDateTime: java.lang.String toString()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void validateAnnotation(java.lang.annotation.Annotation,java.lang.String,java.lang.Object[])>-><java.util.Optional: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<java.time.format.ZoneName: void <clinit>()>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<sun.text.normalizer.UCharacter: void <clinit>()>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.IntegerCodec: java.lang.Class getEncoderClass()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonArray: java.lang.String toString()>
<register-finalize <sun.net.www.protocol.http.AuthScheme: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.stream.ReferencePipeline: void forEachWithCancel(java.util.Spliterator,java.util.stream.Sink)>-><java.util.stream.SliceOps$3$1: boolean cancellationRequested()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.reflect.WeakCache$CacheValue: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$4(org.bson.Document,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$ICUComparisonLevel: int getLevel()>
<register-finalize <org.springframework.data.mapping.model.BeanWrapperPropertyAccessorFactory: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.io.DataOutputStream: void writeChar(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleServiceProviderPool: java.util.List findProviders(java.util.Locale)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonString: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.metrics.export.properties.PropertiesConfigAdapter: void <init>(java.lang.Object)>-><java.lang.Object: void <init>()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonObjectId: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.util.DerValue: java.lang.String toString()>
<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<cn.hutool.core.bean.copier.provider.MapValueProvider: java.lang.Object value(java.lang.String,java.lang.reflect.Type)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Character$Subset: java.lang.String toString()>
<java.util.WeakHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.apache.ibatis.mapping.ParameterMapping: java.lang.String toString()>
<org.bson.codecs.jsr310.LocalDateTimeCodec: void <init>()>-><org.bson.codecs.jsr310.DateTimeBasedCodec: void <init>()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.mapping.model.Property: java.lang.String toString()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<cn.hutool.json.JSONObject: void init(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>-><cn.hutool.json.JSONArray: boolean isEmpty()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigDecimal getDecimalValue()>-><org.bson.types.Decimal128: double doubleValue()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.Boolean: java.lang.String toString()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.annotation.Annotation findPropertyOrOwnerAnnotation(java.lang.Class)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: org.springframework.data.mapping.PersistentEntity getOwner()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<sun.net.www.http.HttpClient: void <clinit>()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.types.MinKey: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: boolean patchShadedLibraryId(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String)>-><java.io.FileInputStream: int available()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<java.util.Collections$UnmodifiableList$1: void <init>(java.util.Collections$UnmodifiableList,int)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.ListIterator listIterator(int)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.String lambda$createEndpointBeans$0(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean,org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><ch.qos.logback.core.joran.spi.ElementSelector: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.sun.beans.WildcardTypeImpl: int hashCode()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.support.AbstractBeanDefinition createBeanDefinition()>-><org.springframework.beans.factory.support.AbstractBeanDefinition: void setConstructorArgumentValues(org.springframework.beans.factory.config.ConstructorArgumentValues)>
<org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <clinit>()>-><org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <init>(java.lang.String,int)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.bson.BsonArray: int size()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ExpandedParameterBuilder: void <init>(com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.Nodes$ToArrayTask$OfPrimitive: void copyNodeToArray()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void copyInto(java.lang.Object,int)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.LocalDate: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.ThreadGroup: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonInt32: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<com.google.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.Thread$WeakClassKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<sun.security.util.Password: char[] readPassword(java.io.InputStream,boolean)>-><sun.net.www.MeteredStream: int read()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.zone.ZoneOffsetTransitionRule: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonDbPointer: java.lang.String toString()>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$13(com.mongodb.client.model.Collation$Builder,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$TertiaryICUComparisonLevel: int getLevel()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<io.jsonwebtoken.impl.JwtMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object remove(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean: java.lang.String lambda$new$0(java.lang.Class)>-><java.lang.StringBuilder: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<io.micrometer.core.instrument.Tags: void <clinit>()>-><io.micrometer.core.instrument.Tags: void <init>(io.micrometer.core.instrument.Tag[])>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.types.Code: java.lang.String toString()>
<com.alibaba.druid.filter.FilterManager: void <clinit>()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>-><java.security.Permission: java.lang.String getName()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.invoke.LambdaFormEditor$Transform: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<com.mongodb.DBObjectCodec: void <clinit>()>-><com.mongodb.DBObjectCodecProvider: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<java.util.stream.SortedOps$OfRef: java.util.stream.Node opEvaluateParallel(java.util.stream.PipelineHelper,java.util.Spliterator,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode: java.lang.Object[] asArray(java.util.function.IntFunction)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.invoke.MethodType: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: int hashCode()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerOpaqueTokenConfiguration: void <init>()>
<reactor.core.scheduler.ParallelScheduler: void <clinit>()>-><java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.DigitList: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.management.HeapDumpWebEndpointAutoConfiguration: void <init>()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void run()>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: boolean isSubscribed()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void visit(com.sun.jmx.mbeanserver.MBeanAnalyzer$MBeanVisitor)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonString: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Thread: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<org.bson.codecs.UuidCodec: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<org.bson.RawBsonValueHelper: void <clinit>()>-><org.bson.codecs.configuration.CodecRegistries: org.bson.codecs.configuration.CodecRegistry fromProviders(org.bson.codecs.configuration.CodecProvider[])>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner,boolean)>-><java.lang.Object: void <init>()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String,java.util.Locale)>-><java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatter toFormatter(java.util.Locale)>
<org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers$1: void <init>(java.lang.String,int)>-><org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers: void <init>(java.lang.String,int,org.springframework.data.mapping.model.PreferredConstructorDiscoverer$1)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.MessageDigest: java.lang.String toString()>
<org.springframework.boot.ImageBanner: org.springframework.boot.ImageBanner$Frame[] readFrames(int,int)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.web.method.ControllerAdviceBean: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonString: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonDocument: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.mongodb.DBRef: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity: org.springframework.data.mongodb.core.mapping.MongoPersistentProperty returnPropertyIfBetterIdPropertyCandidateOrNull(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>-><org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: boolean isIdProperty()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.apache.ibatis.mapping.CacheBuilder: void setCacheProperties(org.apache.ibatis.cache.Cache)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ExtendedJsonInt32Converter: void <init>()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder maximumSize(long)>-><com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ShellUndefinedConverter: void <init>()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.lang.StringBuffer: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonDocument: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Integer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>
<org.bson.codecs.IterableCodecProvider: void <init>()>-><org.bson.codecs.IterableCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.node.NullNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariDataSource: void <init>()>-><com.zaxxer.hikari.HikariConfig: void <init>()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers: void <init>(java.lang.String,int,org.springframework.data.mapping.model.PreferredConstructorDiscoverer$1)>-><org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers: void <init>(java.lang.String,int)>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.pool.HikariPool: java.util.concurrent.ThreadFactory lambda$initializeHouseKeepingExecutorService$3()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.types.BSONTimestamp: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonInt64: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.String: int length()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List groupEntitiesByChannel(java.util.Collection)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><java.io.InputStream: int read(byte[],int,int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonString: java.lang.String toString()>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.naming.NamingException: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.management.ObjectName: java.lang.String toString()>
<org.bson.json.JsonParseException: void <init>(java.lang.Throwable)>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void visit(com.sun.jmx.mbeanserver.MBeanAnalyzer$MBeanVisitor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.LongCodec: java.lang.Class getEncoderClass()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.apache.ibatis.builder.xml.XMLMapperBuilder: void parsePendingStatements()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: void remove()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><java.util.Spliterators$3Adapter: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: int hashCode()>
<com.alibaba.druid.util.JdbcUtils: void close(java.io.Closeable)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.data.domain.Sort$Order: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String,boolean,org.springframework.data.domain.Sort$NullHandling)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.WrappedByteBuf: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.x509.RDN: java.lang.String toString()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><org.springframework.data.mapping.model.BasicPersistentEntity: java.util.Iterator iterator()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonArray: boolean contains(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Character: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.bson.json.StrictCharacterStreamJsonWriter$State: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void doWithAssociations(org.springframework.data.mapping.SimpleAssociationHandler)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.io.ObjectStreamClass$WeakClassKey: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: int size()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserializeUsingCustom(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection,com.fasterxml.jackson.databind.JsonDeserializer)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<cn.hutool.core.convert.impl.NumberConverter: java.lang.Number convertInternal(java.lang.Object,java.lang.Class)>-><org.bson.types.Decimal128: long longValue()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.ZoneOffset: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.security.ProtectionDomain$WeakProtectionDomainKey: int hashCode()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Introspector: javax.management.NotCompliantMBeanException throwException(java.lang.Class,java.lang.Throwable)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<jdk.internal.util.xml.impl.ReaderUTF8: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void recoverBinding(com.rabbitmq.client.impl.recovery.RecordedBinding,boolean)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.PatternCodec: java.lang.Class getEncoderClass()>
<org.apache.ibatis.io.Resources: java.util.Properties getResourceAsProperties(java.lang.String)>-><sun.net.www.MeteredStream: void close()>
<org.springframework.data.mongodb.SessionSynchronization: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.util.DerValue: java.lang.String toString()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: java.lang.Object manageListIfNecessary(java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.fasterxml.jackson.core.base.ParserMinimalBase: int getValueAsInt(int)>-><org.bson.types.Decimal128: int intValue()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: int indexOf(int,int)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: boolean isDebugEnabled()>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<org.springframework.web.servlet.view.InternalResourceViewResolver: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><java.lang.Object: void <init>()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.SimpleTimeZone: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.mongodb.core.index.IndexField: void <init>(java.lang.String,org.springframework.data.domain.Sort$Direction,org.springframework.data.mongodb.core.index.IndexField$Type,java.lang.Float)>-><java.lang.Float: java.lang.Float valueOf(float)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.RawBsonArray: int hashCode()>
<ch.qos.logback.core.joran.action.AbstractEventEvaluatorAction: void end(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: java.lang.Object next()>
<com.rabbitmq.client.impl.Frame: long arraySize(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.http.HttpStatus$Series: void <init>(java.lang.String,int,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><ch.qos.logback.core.subst.Node: int hashCode()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map,boolean,java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.util.ParameterizedTypeInformation: java.lang.String toString()>
<org.bson.json.JsonScanner$1: void <clinit>()>-><org.bson.json.JsonScanner$NumberState: org.bson.json.JsonScanner$NumberState[] values()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonObjectIdCodec: void <init>()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <init>(java.lang.String[])>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String getMimeType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.Document: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.nio.ByteBuffer: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.MonoOnAssembly: java.lang.String toString()>
<org.bson.types.Decimal128: void <clinit>()>-><org.bson.types.Decimal128: org.bson.types.Decimal128 fromIEEE754BIDEncoding(long,long)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.redis.listener.PatternTopic: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(org.springframework.transaction.TransactionDefinition)>-><org.springframework.transaction.TransactionDefinition: java.lang.String getName()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String toJson(java.lang.Object)>-><org.springframework.data.mongodb.util.BsonUtils: java.lang.String toString(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<org.springframework.beans.propertyeditors.CustomMapEditor: void setValue(java.lang.Object)>-><org.bson.RawBsonDocument: int size()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><java.util.HashMap: void <init>(int)>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.bson.BsonDateTime: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.bson.codecs.BsonDBPointerCodec: void <init>()>-><java.lang.Object: void <init>()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<org.apache.tomcat.jni.SSL: void <clinit>()>-><org.apache.tomcat.jni.SSL: int version()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><java.util.PrimitiveIterator$OfDouble: java.lang.Object next()>
<reactor.core.publisher.FluxIterable: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void closeIfUnsubscribed()>-><java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonDateTime: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: void putAll(java.util.Map)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.slf4j.helpers.SubstituteLogger: int hashCode()>
<org.bson.codecs.AtomicLongCodec: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.core.type.classreading.SimpleMetadataReader: org.springframework.asm.ClassReader getClassReader(org.springframework.core.io.Resource)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.util.ClassUtils: java.lang.Class getUserClass(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.schema.TypeNameExtractor: void <init>(com.fasterxml.classmate.TypeResolver,org.springframework.plugin.core.PluginRegistry,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeIndexedArgumentValue(java.lang.Integer,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedMap: boolean isMergeEnabled()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxCreate$BufferAsyncSink: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><org.springframework.data.redis.connection.RedisStringCommands$SetOption: org.springframework.data.redis.connection.RedisStringCommands$SetOption[] values()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.web.servlet.ManagementErrorEndpoint$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<javax.security.auth.SubjectDomainCombiner: void <clinit>()>-><sun.misc.SharedSecrets: sun.misc.JavaSecurityProtectionDomainAccess getJavaSecurityProtectionDomainAccess()>
<org.bson.BsonDocument: void putAll(java.util.Map)>-><org.bson.BsonDocumentWrapper: org.bson.BsonValue put(java.lang.String,org.bson.BsonValue)>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getBooleanParameter(javax.servlet.http.HttpServletRequest,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.String: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.boot.web.embedded.tomcat.TldSkipPatterns: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<java.io.DataInputStream: char readChar()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.UUID: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<java.util.stream.Nodes: java.util.stream.Node$OfLong collectLong(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>-><java.util.stream.AbstractPipeline: long exactOutputSizeIfKnown(java.util.Spliterator)>
<org.springframework.data.redis.connection.RedisNode$NodeType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: void <init>(java.lang.String,java.lang.Class)>-><groovy.lang.GroovyObjectSupport: void <init>()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.types.Code: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.Instant: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.springframework.http.server.PathContainer$Options: org.springframework.http.server.PathContainer$Options create(char,boolean)>-><org.springframework.http.server.PathContainer$Options: void <init>(char,boolean)>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated validate(java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated detect(java.lang.String,java.lang.String)>
<org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Locale)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.ibatis.io.Resources: java.util.Properties getResourceAsProperties(java.lang.String)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>
<java.util.concurrent.Executors$PrivilegedThreadFactory: void <init>()>-><java.lang.RuntimePermission: void <init>(java.lang.String)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.util.function.Tuple2: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.RabbitResourceHolder: void rollbackAll()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<io.lettuce.core.RedisConnectionException: io.lettuce.core.RedisConnectionException create(java.lang.Throwable)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.RelaxedExtendedJsonDoubleConverter: void <init>()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void lambda$populateAnnotationCache$6(java.lang.reflect.Method)>-><org.springframework.data.mapping.model.BasicPersistentEntity: java.lang.Class getType()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.AbstractMap: int hashCode()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.JwtMap: void putAll(java.util.Map)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.aop.framework.JdkDynamicAopProxy: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<reactor.core.publisher.Operators: void lambda$onDiscardMultiple$4(java.util.function.Consumer,java.lang.Object)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.web.util.UriComponents: java.lang.String expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><org.bson.BsonArray: java.lang.Object get(int)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: int hashCode()>
<org.springframework.boot.autoconfigure.security.servlet.PathRequest$H2ConsoleRequestMatcher: void <init>(org.springframework.boot.autoconfigure.security.servlet.PathRequest$1)>-><org.springframework.boot.autoconfigure.security.servlet.PathRequest$H2ConsoleRequestMatcher: void <init>()>
<org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder,org.springframework.data.mapping.model.FieldNamingStrategy)>-><org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder,org.springframework.data.mapping.model.FieldNamingStrategy)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><cn.hutool.json.JSONObject: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.management.ObjectName: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents$Type$5: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.jar.Attributes: int hashCode()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.types.BSONTimestamp: int hashCode()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: void forEach(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: void forEach(java.util.function.Consumer)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonInt32: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation: com.mongodb.client.model.Collation toMongoCollation()>-><org.springframework.data.mongodb.core.query.Collation: org.springframework.core.convert.converter.Converter toMongoCollationConverter()>
<org.bson.codecs.BsonInt32Codec: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonArray: int hashCode()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String toJson(java.lang.Object)>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.amqp.rabbit.connection.RabbitResourceHolder: void rollbackAll()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.ArrayList$SubList$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: int hashCode()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.util.MimeType: java.lang.String toString()>
<org.springframework.core.type.classreading.SimpleMetadataReader: org.springframework.asm.ClassReader getClassReader(org.springframework.core.io.Resource)>-><sun.net.www.MeteredStream: void close()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.Meter$Type: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.UUID: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: java.lang.String toString()>
<jdk.internal.util.xml.impl.Parser: java.io.Reader bom(java.io.InputStream,char)>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void lambda$new$0(org.springframework.security.core.userdetails.UserDetails)>-><org.springframework.security.authentication.AccountExpiredException: void <init>(java.lang.String)>
<com.google.common.base.Joiner: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.net.AbstractPlainSocketImpl: void connect(java.lang.String,int)>-><java.net.AbstractPlainSocketImpl: void close()>
<org.springframework.web.servlet.FrameworkServlet: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>
<org.springframework.security.web.reactive.result.view.CsrfRequestDataValueProcessor: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<org.bson.json.JsonScanner$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.AbstractList$ListItr: java.lang.Object previous()>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: java.lang.Object get(int)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.AbstractList: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.MonoOnAssembly: java.lang.String toString()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.misc.Signal: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeResolverBuilder: void <init>(com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping)>-><com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator build()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundrySecurityService: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundrySecurityService$1: void <init>()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonMinKey: java.lang.String toString()>
<io.lettuce.core.ReadFrom: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementChildContextConfiguration: void <init>()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.http.HttpEntity: void <init>()>-><org.springframework.http.HttpEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap)>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.data.mongodb.core.index.IndexField: org.springframework.data.mongodb.core.index.IndexField geo(java.lang.String)>-><org.springframework.data.mongodb.core.index.IndexField: void <init>(java.lang.String,org.springframework.data.domain.Sort$Direction,org.springframework.data.mongodb.core.index.IndexField$Type)>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><io.micrometer.core.instrument.config.validate.Validated$None: java.util.Iterator iterator()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonDateTime: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<springfox.documentation.spring.web.readers.parameter.ParameterRequiredReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><springfox.documentation.spring.web.DescriptionResolver: void <init>(org.springframework.core.env.Environment)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: int hashCode()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.mail.javamail.ConfigurableMimeFileTypeMap: javax.activation.FileTypeMap createFileTypeMap(org.springframework.core.io.Resource,java.lang.String[])>-><java.io.FileInputStream: void close()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration: void <init>()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableCollection$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: void forEachRemaining(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonMinKey: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object,java.lang.Throwable)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonBoolean: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.AbstractCollection: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonString: java.lang.String toString()>
<springfox.documentation.spring.web.paths.QueryStringUriTemplateDecorator: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.DoubleCodec: void <init>()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<jdk.internal.util.xml.impl.ReaderUTF8: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.String)>-><io.micrometer.core.util.internal.logging.JdkLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>
<jdk.internal.util.xml.impl.ReaderUTF16: int read()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><java.lang.reflect.Modifier: boolean isFinal(int)>
<java.util.Collections$UnmodifiableMap: java.util.Collection values()>-><org.bson.Document: java.util.Collection values()>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.security.x509.AVA: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><cn.hutool.core.lang.Tuple: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.MonthDay: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.springframework.boot.util.LambdaSafe: void <clinit>()>-><org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$null$4(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.EnumMap$1: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.buffer.AbstractByteBufAllocator: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.util.locale.BaseLocale$Key: int hashCode()>
<com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<java.util.zip.ZipInputStream: void readFully(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.time.Duration: java.time.Duration dividedBy(long)>-><java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,java.math.RoundingMode)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.core.io.FileSystemResource: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.MessageDigest: java.lang.String toString()>
<java.util.Currency$1: java.lang.Void run()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.scheduler.DelegateServiceScheduler: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.apache.ibatis.type.TypeHandlerRegistry: java.util.Map getJdbcHandlerMapForEnumInterfaces(java.lang.Class,java.lang.Class)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityConfigurerAdapter: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: int determinePort()>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.audit.AuditEventsEndpointAutoConfiguration: void <init>()>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<org.springframework.amqp.rabbit.connection.RabbitResourceHolder: void rollbackAll()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated$Invalid invalid(java.lang.String,java.lang.Object,java.lang.String,io.micrometer.core.instrument.config.validate.InvalidReason)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Object[])>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.mapping.PreferredConstructor$Parameter: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>-><org.springframework.core.annotation.AnnotatedElementUtils: java.lang.annotation.Annotation findMergedAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<java.util.stream.StreamSpliterators$SliceSpliterator: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity: org.springframework.data.mongodb.core.mapping.MongoPersistentProperty returnPropertyIfBetterIdPropertyCandidateOrNull(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.apache.ibatis.mapping.ResultMap$Builder: java.util.List getArgNames(java.lang.reflect.Constructor)>-><org.bson.BsonArray: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceEndpointAutoConfiguration: void <init>()>
<register-finalize <java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$PermitStatus: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<org.springframework.boot.context.properties.PropertyMapper: void <clinit>()>-><org.springframework.boot.context.properties.PropertyMapper: void <init>(org.springframework.boot.context.properties.PropertyMapper,org.springframework.boot.context.properties.PropertyMapper$SourceOperator)>
<register-finalize <java.net.Socket: void <init>(java.net.Proxy)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<sun.net.www.protocol.http.BasicAuthentication: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void recoverConsumer(java.lang.String,com.rabbitmq.client.impl.recovery.RecordedConsumer,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.OperationDeprecatedReader: void <init>()>-><java.lang.Object: void <init>()>
<com.google.protobuf.CodedInputStream: void <init>(com.google.protobuf.CodedInputStream$1)>-><com.google.protobuf.CodedInputStream: void <init>()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Double: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.ZoneOffset: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.io.DataInputStream: short readShort()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.core.io.UrlResource: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthScheme: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.EmbeddedDataSourceConfiguration: void <init>()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.security.CodeSigner: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>
<com.fasterxml.jackson.core.util.JsonParserSequence: void <init>(com.fasterxml.jackson.core.JsonParser[])>-><com.fasterxml.jackson.core.util.JsonParserSequence: void <init>(boolean,com.fasterxml.jackson.core.JsonParser[])>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: void <clinit>()>-><io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: void <init>()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.util.locale.Extension: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Set removeBindingsWithDestination(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation: com.mongodb.client.model.Collation lambda$toMongoCollationConverter$16(org.springframework.data.mongodb.core.query.Collation)>-><java.util.Optional: void ifPresent(java.util.function.Consumer)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthContributorAutoConfiguration: void <init>()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.bson.codecs.BsonTypeClassMap: void addDefaults()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.actuate.health.Health: org.springframework.boot.actuate.health.Health$Builder up()>-><org.springframework.boot.actuate.health.Health: org.springframework.boot.actuate.health.Health$Builder status(org.springframework.boot.actuate.health.Status)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.ResourceBundle$1: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ShellBinaryConverter: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonDecimal128: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.imageio.ImageTypeSpecifier: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.ObjectIdCodec: void <init>()>
<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map inspectClass(java.lang.Class)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.types.Symbol: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Character$Subset: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClientUtils: void <clinit>()>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getChannels()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _convertNumberToInt(java.lang.Number)>-><org.bson.types.Decimal128: double doubleValue()>
<com.mongodb.client.model.geojson.GeoJsonObjectType: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari: void <init>()>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$13(com.mongodb.client.model.Collation$Builder,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$PrimaryICUComparisonLevel: java.util.Optional getCaseFirst()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonNull: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<io.netty.util.internal.NativeLibraryLoader: boolean patchShadedLibraryId(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String)>-><java.io.BufferedInputStream: int available()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isVerifyPeer()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isVerifyPeer()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.util.ParameterizedTypeInformation: int hashCode()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$DeferredProperty: void apply()>-><org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper addProperty(java.lang.String,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.lettuce.core.event.metrics.CommandLatencyEvent: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.types.Symbol: int hashCode()>
<org.springframework.data.mongodb.core.WriteResultChecking: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map retrieveMetrics()>-><org.bson.RawBsonDocument: java.util.Collection values()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.hateoas.HypermediaHttpMessageConverterConfiguration: void <init>()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.concurrent.ThreadPoolExecutor$Worker: boolean isLocked()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.zip.InflaterOutputStream: void close()>-><java.io.PrintStream: void close()>
<reactor.core.publisher.Mono: reactor.core.publisher.Mono onAssembly(reactor.core.publisher.Mono)>-><java.util.stream.ReduceOps$6ReducingSink: java.lang.Object get()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.google.common.base.Joiner: com.google.common.base.Joiner useForNull(java.lang.String)>-><com.google.common.base.Joiner$1: void <init>(com.google.common.base.Joiner,com.google.common.base.Joiner,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><io.netty.util.concurrent.PromiseTask: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler: java.util.List initSseConverters(java.util.List)>-><org.springframework.http.converter.ResourceRegionHttpMessageConverter: boolean canWrite(java.lang.Class,org.springframework.http.MediaType)>
<org.bson.codecs.IterableCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap,org.bson.Transformer)>-><org.bson.assertions.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.security.Permission: java.lang.String toString()>
<org.springframework.transaction.support.TransactionSynchronizationManager: java.lang.Object doUnbindResource(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean isEmpty()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonString: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.bson.codecs.ObjectIdCodec: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.imageio.ImageTypeSpecifier: boolean equals(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.ByteCodec: void <init>()>
<com.google.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.LocalDate: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.Year: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.Scannable$Attr$2: java.lang.String toString()>
<org.bson.codecs.IterableCodecProvider: void <init>()>-><org.bson.codecs.BsonTypeClassMap: void <init>()>
<java.util.LinkedList$LLSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BasicBSONObject: void putAll(java.util.Map)>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.web.servlet.FrameworkServlet: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><java.io.BufferedInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeBindingErrors(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.boot.autoconfigure.web.ErrorProperties getErrorProperties()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: int hashCode()>
<org.bson.codecs.MapCodecProvider: void <init>()>-><org.bson.codecs.BsonTypeClassMap: void <init>()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiDescriptionReader getApiDescriptionReader()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: void <clinit>()>-><java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String,java.util.Locale)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: boolean addDeferredProperty(java.lang.String,java.lang.Object)>-><org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: java.lang.String getBeanName()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.springframework.web.context.request.async.TimeoutDeferredResultProcessingInterceptor: void <init>()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: int hashCode()>
<java.util.HashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.codecs.IterableCodecProvider: int hashCode()>
<com.rabbitmq.client.impl.recovery.AutorecoveringChannel: void close()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.mongo.MongoReactiveHealthContributorAutoConfiguration: void <init>()>
<com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>-><sun.net.www.http.KeepAliveStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.apache.ibatis.mapping.CacheBuilder: void setCacheProperties(org.apache.ibatis.cache.Cache)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.types.Symbol: java.lang.String toString()>
<register-finalize <org.bson.json.JsonScanner$NumberState: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonDecimal128: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<ch.qos.logback.core.joran.action.AbstractEventEvaluatorAction: void end(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.util.context.Context0: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void addPersistentProperty(org.springframework.data.mapping.PersistentProperty)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.HikariConfig: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.messaging.handler.AbstractMessageCondition: int hashCode()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.HashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.Clock$SystemClock: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.ErrorProperties: org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeStacktrace getIncludeStacktrace()>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.util.calendar.Era: int hashCode()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonBinary: java.lang.String toString()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: void applyPropertyToBeanDefinition(java.lang.String,java.lang.Object)>-><org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper addProperty(java.lang.String,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdateStringKeyMap(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.rabbitmq.client.impl.TlsUtils: void logPeerCertificateInfo(javax.net.ssl.SSLSession)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<reactor.util.function.Tuple3: int hashCode()>-><com.mongodb.DBRefCodecProvider: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.String: java.lang.String substring(int,int)>
<java.util.IdentityHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.util.AbstractConstant: java.lang.String toString()>
<com.github.pagehelper.PageInfo: void <init>(java.util.List,int)>-><java.util.Collections$SingletonList: int size()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.bson.BsonDouble: int compareTo(java.lang.Object)>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<sun.awt.DebugSettings: java.lang.String toString()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration: void <init>(org.springframework.core.env.Environment)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.CodeSource: java.lang.String toString()>
<sun.awt.DebugSettings: java.lang.String toString()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.rabbitmq.client.impl.recovery.AutorecoveringChannel: void close()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: double doubleValue()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.Document: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<org.bson.codecs.BigDecimalCodec: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.Short: int hashCode()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>-><java.net.SocketInputStream: void close()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<com.mongodb.client.model.CollationStrength: com.mongodb.client.model.CollationStrength fromInt(int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.text.AttributeEntry: boolean equals(java.lang.Object)>
<org.apache.ibatis.type.TypeHandlerRegistry: void register(java.lang.reflect.Type,org.apache.ibatis.type.JdbcType,org.apache.ibatis.type.TypeHandler)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.ObjectName: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: java.lang.String toString()>
<org.bson.codecs.MapCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap,org.bson.Transformer)>-><org.bson.assertions.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.Extension: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.node.IntNode: int hashCode()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder percentilePrecision(java.lang.Integer)>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig: java.lang.Integer access$202(io.micrometer.core.instrument.distribution.DistributionStatisticConfig,java.lang.Integer)>
<org.springframework.boot.actuate.metrics.http.Outcome: void <init>(java.lang.String,int)>-><io.micrometer.core.instrument.Tag: io.micrometer.core.instrument.Tag of(java.lang.String,java.lang.String)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void add(java.util.Collection,byte[][])>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.StackTraceElement: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonNull: java.lang.String toString()>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler pickSoleHandler(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.web.util.pattern.PatternParseException$PatternMessage: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.node.LongNode: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.types.Symbol: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$4(org.bson.Document,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$PrimaryICUComparisonLevel: int getLevel()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.types.Code: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.DelegateServiceScheduler: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getErrorsParameter(javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getBooleanParameter(javax.servlet.http.HttpServletRequest,java.lang.String)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.OffsetDateTime: java.lang.String toString()>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.net.URL: java.lang.String getPath()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>
<org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest: javax.servlet.http.HttpServletRequest lambda$new$0()>-><javax.servlet.ServletRequestWrapper: javax.servlet.ServletRequest getRequest()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ShellMinKeyConverter: void <init>()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.naming.NamingException: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdateStringKeyMap(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonInt64Codec: java.lang.Class getEncoderClass()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisSocketURIAndApplySettings(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.time.Duration getCommandTimeout()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.AutorecoveringChannel: void close()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.time.Duration getCommandTimeout()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.jar.Attributes: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: boolean getTestOnCreate()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeIndexedArgumentValue(java.lang.Integer,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedList: boolean isMergeEnabled()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.security.BasicPermission: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceInitializationConfiguration: void <init>()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean: java.lang.String lambda$new$0(java.lang.Class)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration: void <init>()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.PrimitiveIterator$OfLong: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataConfiguration: void <init>()>
<org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow: org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow[] values()>-><java.lang.Object: java.lang.Object clone()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><org.springframework.util.LinkedMultiValueMap: void add(java.lang.Object,java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: com.fasterxml.classmate.types.ResolvedPrimitiveType voidType()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Object[])>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.bson.AbstractBsonReader$State: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<cn.hutool.core.map.MapUtil: java.lang.Object get(java.util.Map,java.lang.Object,java.lang.Class,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber,java.util.Iterator,boolean,java.lang.Runnable)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map,boolean,java.util.Locale)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.OptionalInt: void <init>()>-><java.lang.Object: void <init>()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<jdk.internal.util.xml.impl.Parser: void dtd()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.IdentityHashMap: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.BitSet: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.EndpointId: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.bson.Document: java.lang.String toJson()>-><org.bson.json.JsonWriterSettings: org.bson.json.JsonWriterSettings$Builder builder()>
<register-finalize <org.bson.BsonContextType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<cn.hutool.core.map.MapUtil: boolean isNotEmpty(java.util.Map)>-><org.bson.Document: boolean isEmpty()>
<java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.URI: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Float: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.schema.property.bean.AccessorsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.util.ParentTypeAwareTypeInformation: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration: void <init>()>
<org.springframework.security.web.savedrequest.SavedRequestAwareWrapper: void <clinit>()>-><java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
<org.springframework.data.redis.connection.ReturnType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] values()>-><java.lang.Object: java.lang.Object clone()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationTagsReader: void <init>(springfox.documentation.spring.web.readers.operation.DefaultTagsProvider)>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.regex.Pattern: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.String: int hashCode()>
<com.zaxxer.hikari.util.ClockSource$Factory: com.zaxxer.hikari.util.ClockSource create()>-><com.zaxxer.hikari.util.ClockSource$NanosecondClockSource: void <init>()>
<org.springframework.web.filter.ForwardedHeaderFilter: void <clinit>()>-><org.springframework.util.LinkedCaseInsensitiveMap: void <init>(int,java.util.Locale)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.types.MinKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<java.util.stream.Streams$ConcatSpliterator: java.util.Comparator getComparator()>-><java.util.SortedSet$1: java.util.Comparator getComparator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: java.lang.String toString()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<org.springframework.cache.transaction.TransactionAwareCacheDecorator: java.lang.String getName()>-><org.springframework.cache.concurrent.ConcurrentMapCache: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.data.mongodb.core.index.IndexField: int hashCode()>
<org.springframework.security.authentication.AccountStatusException: void <init>(java.lang.String)>-><org.springframework.security.core.AuthenticationException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Vector: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.core.SpringProperties: void <clinit>()>-><sun.net.www.MeteredStream: void close()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder maximumExpectedValue(java.lang.Double)>
<org.bson.codecs.BsonTypeClassMap: void <init>()>-><java.util.Collections: java.util.Map emptyMap()>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Byte: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: java.lang.Object getCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: java.lang.Object get(int)>
<java.util.stream.IntPipeline: void forEachWithCancel(java.util.Spliterator,java.util.stream.Sink)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfInt: boolean tryAdvance(java.util.function.IntConsumer)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object[])>
<org.springframework.core.type.classreading.SimpleMetadataReader: org.springframework.asm.ClassReader getClassReader(org.springframework.core.io.Resource)>-><sun.net.www.http.ChunkedInputStream: void close()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>-><java.lang.Object: void <init>()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.Document: int hashCode()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler getTypeHandler(java.lang.reflect.Type,org.apache.ibatis.type.JdbcType)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration: void <init>()>
<org.springframework.boot.web.client.ClientHttpRequestFactorySupplier: void <clinit>()>-><java.util.LinkedHashMap: void <init>()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: java.lang.String lambda$new$0(int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.Parsed: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.awt.AppContext: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Properties: java.util.Enumeration propertyNames()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<register-finalize <com.zaxxer.hikari.pool.HikariPool: java.util.concurrent.ScheduledExecutorService initializeHouseKeepingExecutorService()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><sun.net.ProgressSource: java.lang.String toString()>
<springfox.documentation.spring.web.readers.parameter.ExpandedParameterBuilder: void <init>(com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.ProtectionDomain)>-><javax.security.auth.kerberos.KrbServicePermissionCollection: java.util.Enumeration elements()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.StringJoiner: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.UUID: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.lettuce.core.masterslave.RedisMasterSlaveNode: java.lang.String toString()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.util.Optional lambda$doFindAnnotation$9(java.lang.Class)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.util.stream.Stream getAccessors()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.redis.RedisHealthContributorAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<java.net.URLClassLoader: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.bson.json.JsonStringConverter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.management.openmbean.CompositeType: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.annotation.DiscoveredServletEndpoint: java.lang.String lambda$new$0(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<org.apache.ibatis.mapping.CacheBuilder: void setCacheProperties(org.apache.ibatis.cache.Cache)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.util.function.Tuple2: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.reflect.Method: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>
<com.fasterxml.jackson.databind.util.EnumResolver: com.fasterxml.jackson.databind.util.EnumResolver constructUsingMethod(java.lang.Class,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.AnnotationIntrospector)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonJavaScript: int hashCode()>
<java.util.zip.CheckedInputStream: int read()>-><sun.net.www.MeteredStream: int read()>
<org.springframework.data.redis.connection.RedisStandaloneConfiguration: java.lang.String lambda$setDatabase$1(int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertyFilePropertySource: java.util.Properties loadPropertiesFile(java.lang.String)>-><java.io.InputStream: void close()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonInt64: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryDependentConfiguration: void <init>(org.springframework.boot.autoconfigure.mongo.MongoProperties)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.beans.BeanMetadataAttribute: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>-><java.io.BufferedInputStream: void close()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineAddresses()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: int access$100(org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address)>
<register-finalize <org.springframework.data.projection.ProxyProjectionFactory$PropertyAccessingMethodInvokerFactory: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.mongodb.client.model.Collation: void <init>(com.mongodb.client.model.Collation$Builder)>-><com.mongodb.client.model.Collation$Builder: java.lang.Boolean access$1000(com.mongodb.client.model.Collation$Builder)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineAddresses()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: void <init>(com.fasterxml.jackson.annotation.JsonCreator$Mode,com.fasterxml.jackson.module.paramnames.ParameterExtractor)>-><com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector: void <init>()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<jdk.internal.util.xml.impl.Parser: java.io.Reader bom(java.io.InputStream,char)>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<org.springframework.core.annotation.AnnotatedElementUtils: java.lang.annotation.Annotation findMergedAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>-><java.lang.Package: java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.net.SocketInputStream: void close()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableList$1: java.lang.Object previous()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object previous()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonMinKey: java.lang.String toString()>
<cn.hutool.core.map.MapProxy: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><java.util.PrimitiveIterator$OfLong: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.springframework.data.mongodb.core.query.Collation$CollationLocale: java.lang.String asString()>-><java.util.Optional: java.util.Optional filter(java.util.function.Predicate)>
<org.apache.catalina.core.StandardWrapper: void <init>()>-><java.util.HashMap: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.types.Code: int hashCode()>
<org.apache.ibatis.io.Resources: java.util.Properties getUrlAsProperties(java.lang.String)>-><java.io.BufferedInputStream: void close()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonDocument: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonString: int hashCode()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: java.lang.Object manageListIfNecessary(java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<sun.net.httpserver.ChunkedInputStream: int readImpl(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.rabbitmq.client.impl.recovery.AutorecoveringChannel: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getDuration(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>-><io.micrometer.core.instrument.config.validate.PropertyValidator: java.lang.String prefixedProperty(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.codecs.MapCodecProvider: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.UUID: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.misc.Signal: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.lang.Double: java.lang.Double valueOf(java.lang.String)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonInt64: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.types.CodeWScope: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated validateChronoUnit(java.lang.String,java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated$Invalid invalid(java.lang.String,java.lang.Object,java.lang.String,io.micrometer.core.instrument.config.validate.InvalidReason)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.ObjectName: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonBoolean: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.SimpleMixInResolver: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver copy()>-><com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver copy()>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.slf4j.event.Level: java.lang.String toString()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<cn.hutool.json.JSONObject: void init(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<org.springframework.core.annotation.MergedAnnotationCollectors: void lambda$toAnnotationSet$0(java.util.ArrayList,org.springframework.core.annotation.MergedAnnotation)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonInt32: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.LocalTime: int hashCode()>
<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.types.Binary: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<org.springframework.context.support.AbstractApplicationContext: java.util.Map getBeansOfType(java.lang.Class,boolean,boolean)>-><org.springframework.context.support.StaticApplicationContext: void assertBeanFactoryActive()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.context.support.StaticApplicationContext: void <init>()>-><org.springframework.context.support.StaticApplicationContext: void <init>(org.springframework.context.ApplicationContext)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<sun.net.httpserver.FixedLengthInputStream: int readImpl(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object previous()>-><java.util.NoSuchElementException: void <init>()>
<sun.net.www.protocol.http.NegotiateAuthentication: void <clinit>()>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.Vector: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Date: int hashCode()>
<java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndBind(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.ibatis.parsing.XNode: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.springframework.boot.logging.LoggerGroups: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<org.springframework.data.mongodb.core.convert.DocumentAccessor: void <init>(org.bson.conversions.Bson)>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void visit(com.sun.jmx.mbeanserver.MBeanAnalyzer$MBeanVisitor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.misc.Resource: byte[] getBytes()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><org.bson.BsonArray: int size()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<io.jsonwebtoken.impl.JwtMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.security.web.server.header.CacheControlServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder header(java.lang.String,java.lang.String[])>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><redis.clients.jedis.JedisCluster: void subscribe(redis.clients.jedis.BinaryJedisPubSub,byte[][])>
<org.springframework.data.redis.connection.ReturnType: void <clinit>()>-><org.springframework.data.redis.connection.ReturnType: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.google.common.base.Joiner$MapJoiner: void <init>(com.google.common.base.Joiner,java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.ProtectionDomain: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: java.lang.Object remove(java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object remove(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.text.ParsePosition: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: void <clinit>()>-><sun.net.www.protocol.http.DigestAuthentication$1: void <init>()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: boolean remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<java.util.ResourceBundle$Control$1: java.io.InputStream run()>-><java.net.URLConnection: void setUseCaches(boolean)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.MediaTypeReader: void <init>()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.util.Properties: void <init>()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isUseSsl()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isUseSsl()>
<org.bson.json.RelaxedExtendedJsonDateTimeConverter: void <clinit>()>-><org.bson.json.ExtendedJsonDateTimeConverter: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.rabbitmq.client.impl.recovery.AutorecoveringChannel: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings: void <clinit>()>-><org.springframework.boot.web.server.MimeMappings: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.sql.Timestamp: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.types.Code: java.lang.String toString()>
<java.util.Collection: java.util.stream.Stream parallelStream()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Spliterator spliterator()>
<com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: void <clinit>()>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: void <init>(java.lang.String)>
<org.springframework.boot.ImageBanner: org.springframework.boot.ImageBanner$Frame[] readFrames(int,int)>-><java.io.BufferedInputStream: void close()>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: boolean isWhitelisted(java.lang.String)>-><java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonTimestamp: int hashCode()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<org.springframework.web.bind.annotation.RequestMethod: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder builder()>-><com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.String: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineAddresses()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.internal.Optional: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.redis.connection.RedisNode: java.lang.String toString()>
<org.bson.codecs.DocumentCodecProvider: void <init>(org.bson.Transformer)>-><org.bson.codecs.BsonTypeClassMap: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.bson.Document: java.lang.String toJson()>-><org.bson.json.JsonWriterSettings$Builder: org.bson.json.JsonWriterSettings build()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.calendar.Era: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.mongodb.client.model.geojson.PolygonCoordinates: int hashCode()>
<org.springframework.core.annotation.AnnotatedElementUtils: java.lang.annotation.Annotation findMergedAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>-><java.lang.reflect.Parameter: java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void lambda$populateAnnotationCache$6(java.lang.reflect.Method)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: java.lang.String getName()>
<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator: void <init>(java.util.Set,com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$TypeMatcher[],com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$NameMatcher[],com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$TypeMatcher[])>-><com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Base: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: void load(java.lang.String,java.lang.ClassLoader)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[])>
<com.zaxxer.hikari.util.ClockSource: void <clinit>()>-><com.zaxxer.hikari.util.ClockSource$Factory: com.zaxxer.hikari.util.ClockSource access$000()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonObjectId: java.lang.String toString()>
<org.apache.ibatis.io.Resources: java.io.InputStream getUrlAsStream(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.mongodb.client.model.geojson.Point: int hashCode()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void addPersistentProperty(org.springframework.data.mapping.PersistentProperty)>-><org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity: org.springframework.data.mapping.PersistentProperty returnPropertyIfBetterIdPropertyCandidateOrNull(org.springframework.data.mapping.PersistentProperty)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.apache.ibatis.reflection.ParamNameResolver: java.lang.String getActualParamName(java.lang.reflect.Method,int)>-><org.bson.BsonArray: java.lang.Object get(int)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.net.URL: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.DefaultOperationReader: void <init>()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.LifecycleEvent: java.lang.String getType()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<reactor.util.function.Tuple3: int hashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<com.rabbitmq.client.impl.nio.NioLoop: void run()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.RawBsonDocument: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool: java.util.concurrent.ThreadFactory lambda$initializeHouseKeepingExecutorService$3()>-><com.zaxxer.hikari.util.UtilityElf$DefaultThreadFactory: void <init>(java.lang.String,boolean)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.IdentityHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<cn.hutool.core.map.CaseInsensitiveMap: void <init>(float,java.util.Map)>-><org.bson.RawBsonDocument: int size()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$RequestMappingInfoHandlerMappingDescriptionProvider: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Currency: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<sun.text.normalizer.UBiDiProps: void <init>()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Vector: java.lang.Object get(int)>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleServiceProviderPool: java.util.List findProviders(java.util.Locale)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.data.mapping.model.BasicPersistentEntity: void addPersistentProperty(org.springframework.data.mapping.PersistentProperty)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.io.File: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.text.AttributeEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.types.Decimal128: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.BasicPersistentEntity: void addPersistentProperty(org.springframework.data.mapping.PersistentProperty)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.types.Symbol: java.lang.String toString()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map retrieveMetrics()>-><org.bson.Document: java.util.Collection values()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.SubList$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.bson.RawBsonDocument: int size()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$2: void setVariable(java.lang.String,java.lang.Object)>-><org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper access$000(org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Byte: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$EmbeddedDatabaseConfiguration: void <init>()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.security.util.ObjectIdentifier: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.beans.factory.support.RootBeanDefinition: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: int compareTo(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.MonthDay: java.lang.String toString()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeBindingErrors(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.ErrorProperties: org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeAttribute getIncludeMessage()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.bson.UuidRepresentation: org.bson.UuidRepresentation[] values()>-><java.lang.Object: java.lang.Object clone()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.ArrayList$SubList: boolean addAll(java.util.Collection)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.springframework.mail.javamail.ConfigurableMimeFileTypeMap: javax.activation.FileTypeMap createFileTypeMap(org.springframework.core.io.Resource,java.lang.String[])>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<com.mongodb.DBObjectCodec$1: void <clinit>()>-><org.bson.BsonType: org.bson.BsonType[] values()>
<com.mongodb.client.model.Collation: void <init>(com.mongodb.client.model.Collation$Builder,com.mongodb.client.model.Collation$1)>-><com.mongodb.client.model.Collation: void <init>(com.mongodb.client.model.Collation$Builder)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonNull: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>-><org.springframework.data.redis.connection.jedis.JedisSubscription: void doSubscribe(byte[][])>
<org.springframework.data.mapping.model.AbstractPersistentProperty: boolean usePropertyAccess()>-><java.lang.Boolean: boolean booleanValue()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.Character$Subset: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>
<sun.awt.DebugSettings: void loadSystemProperties()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<com.zaxxer.hikari.HikariConfig: void <clinit>()>-><java.util.concurrent.TimeUnit$4: long toMillis(long)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.math.BigInteger: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.reflect.Modifier: boolean isFinal(int)>
<org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(org.springframework.core.annotation.TypeMappedAnnotations$Aggregate,java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.data.redis.connection.convert.Converters: java.util.Properties lambda$static$0(java.util.List)>-><java.util.ArrayList: java.lang.Object get(int)>
<org.bson.codecs.jsr310.Jsr310CodecProvider: void <init>()>-><java.lang.Object: void <init>()>
<org.bson.codecs.BsonCodecProvider: void <init>()>-><java.lang.Object: void <init>()>
<io.jsonwebtoken.impl.JwtMap: java.lang.Object remove(java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object remove(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisConnection: void <clinit>()>-><org.springframework.data.redis.FallbackExceptionTranslationStrategy: void <init>(org.springframework.core.convert.converter.Converter)>
<org.springframework.web.util.NestedServletException: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.beans.BeanMetadataAttribute: int hashCode()>
<org.apache.ibatis.type.TypeHandlerRegistry: java.util.Map getJdbcHandlerMapForEnumInterfaces(java.lang.Class,java.lang.Class)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: int determinePort()>-><java.util.ArrayList: java.lang.Object get(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.lang.Iterable)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonBinary: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><ch.qos.logback.classic.spi.ClassPackagingData: int hashCode()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<org.bson.internal.Optional$1: void <init>()>-><org.bson.internal.Optional: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: int hashCode()>
<org.springframework.boot.ImageBanner: org.springframework.boot.ImageBanner$Frame[] readFrames(int,int)>-><java.io.InputStream: void close()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.lang.String[] doGetParameterNames(java.lang.reflect.Executable)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<java.io.BufferedInputStream: int read1(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>-><io.micrometer.core.instrument.util.StringUtils: boolean isEmpty(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: int hashCode()>-><io.lettuce.core.internal.AbstractInvocationHandler: int hashCode()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider doCreateConnectionProvider(io.lettuce.core.AbstractRedisClient,io.lettuce.core.codec.RedisCodec)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getReadFrom()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.Double: java.lang.String toString()>
<java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>-><org.bson.BsonArray: void add(int,java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow: org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow[] values()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.Throwable: java.lang.String getMessage()>
<org.springframework.security.crypto.password.NoOpPasswordEncoder: void <clinit>()>-><org.springframework.security.crypto.password.NoOpPasswordEncoder: void <init>()>
<java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.util.TypeVariableTypeInformation: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: boolean isAssociation()>-><java.lang.Boolean: boolean booleanValue()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Boolean: boolean parseBoolean(java.lang.String)>
<io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated$Valid valid(java.lang.String,java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: void <init>(java.lang.String,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><com.mongodb.BasicDBObject: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.PrimitiveIterator$OfDouble: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.bson.Document: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties)>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>-><io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger wrapLogger(org.slf4j.Logger)>
<io.micrometer.core.instrument.Meter$Type: void <clinit>()>-><io.micrometer.core.instrument.Meter$Type: void <init>(java.lang.String,int)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><org.springframework.web.servlet.handler.MappedInterceptor: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Hashtable: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.web.annotation.DiscoveredServletEndpoint: java.lang.String lambda$new$0(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.Boolean lambda$new$0()>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.annotation.Annotation findPropertyOrOwnerAnnotation(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<sun.awt.DebugSettings: void loadSystemProperties()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonRegularExpression: int hashCode()>
<reactor.core.scheduler.ParallelScheduler: void <clinit>()>-><java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><ch.qos.logback.core.subst.Token: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.Tag: int compareTo(java.lang.Object)>
<sun.awt.DebugSettings: void loadSystemProperties()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.springframework.data.mongodb.SessionSynchronization: void <clinit>()>-><org.springframework.data.mongodb.SessionSynchronization: void <init>(java.lang.String,int)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.rabbitmq.client.impl.recovery.AutorecoveringChannel: java.lang.String toString()>
<org.bson.BsonBinaryReader$1: void <clinit>()>-><org.bson.BsonType: org.bson.BsonType[] values()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.IdentityHashMap$EntryIterator$Entry: int hashCode()>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.bson.json.LegacyExtendedJsonDateTimeConverter: void <init>()>-><java.lang.Object: void <init>()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<com.mongodb.client.model.CollationStrength: com.mongodb.client.model.CollationStrength fromInt(int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.data.mapping.model.BasicPersistentEntity: void addPersistentProperty(org.springframework.data.mapping.PersistentProperty)>-><org.springframework.data.mapping.MappingException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.reactive.ReactiveManagementChildContextConfiguration: void <init>()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonInt32: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonBinary: java.lang.String toString()>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonElement: int hashCode()>
<org.apache.ibatis.mapping.ResultMap$Builder: java.util.List getArgNames(java.lang.reflect.Constructor)>-><org.bson.BsonArray: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Throwable: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration: void <init>()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.types.MinKey: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: int hashCode()>-><java.util.OptionalInt: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.util.Pair: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers: void <clinit>()>-><org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers$2: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.io.File: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.URI: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: boolean usePropertyAccess()>-><org.springframework.data.util.Lazy: java.lang.Object get()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: int hashCode()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.bson.codecs.ByteArrayCodec: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>-><java.io.InputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.OffsetTime: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.lang.Iterable)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.Enum: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String,org.springframework.context.annotation.MBeanExportConfiguration$1)>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.bson.BsonContextType: void <clinit>()>-><org.bson.BsonContextType: void <init>(java.lang.String,int)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ExtendedJsonBinaryConverter: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Locale: java.lang.String toString()>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.StringCodec: java.lang.Class getEncoderClass()>
<com.alibaba.druid.filter.FilterManager: void <clinit>()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: void <init>()>-><javax.security.auth.Subject$SecureSet: void <init>(javax.security.auth.Subject,int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.util.context.Context0: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<java.net.Authenticator$RequestorType: void <clinit>()>-><java.net.Authenticator$RequestorType: void <init>(java.lang.String,int)>
<org.springframework.mail.javamail.ConfigurableMimeFileTypeMap: javax.activation.FileTypeMap createFileTypeMap(org.springframework.core.io.Resource,java.lang.String[])>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>-><java.lang.String: java.lang.String toLowerCase()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonElement: int hashCode()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Character$Subset: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.Extension: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated lambda$validate$0(java.lang.String,java.lang.String,io.micrometer.core.instrument.config.validate.DurationValidator)>-><io.micrometer.core.instrument.config.validate.DurationValidator$2: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>
<java.util.WeakHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: java.lang.String toString()>
<sun.security.provider.PolicyFile: boolean wildcardPrincipalNameImplies(java.lang.String,java.security.Principal[])>-><java.lang.Object: java.lang.Class getClass()>
<register-finalize <org.springframework.security.crypto.password.Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions expireAfter(java.lang.Long,java.util.concurrent.TimeUnit)>-><java.util.concurrent.TimeUnit$4: long convert(long,java.util.concurrent.TimeUnit)>
<sun.net.httpserver.ChunkedInputStream: int readChunkHeader()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonArray: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<org.springframework.boot.actuate.trace.http.HttpExchangeTracer: java.lang.Long lambda$sendingResponse$0(org.springframework.boot.actuate.trace.http.HttpTrace)>-><org.springframework.boot.actuate.trace.http.HttpTrace: java.time.Instant getTimestamp()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.bson.codecs.DocumentCodecProvider: void <init>()>-><org.bson.codecs.DocumentCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<io.lettuce.core.protocol.CommandExpiryWriter: void setTimeout(java.time.Duration)>-><java.util.concurrent.TimeUnit$3: long convert(long,java.util.concurrent.TimeUnit)>
<org.bson.codecs.DocumentCodec: void <clinit>()>-><org.bson.codecs.BsonValueCodecProvider: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.types.Code: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><org.springframework.util.CollectionUtils: org.springframework.util.MultiValueMap unmodifiableMultiValueMap(org.springframework.util.MultiValueMap)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.types.Binary: int hashCode()>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection _deserializeWithObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean contains(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration: void <init>()>
<java.util.TreeMap: java.util.TreeMap$Entry getEntryUsingComparator(java.lang.Object)>-><org.springframework.data.mapping.model.BasicPersistentEntity$AssociationComparator: int compare(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<java.util.stream.Streams$RangeIntSpliterator: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.stream.ReduceOps$6ReducingSink: void accept(int)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.security.AccessControlContext)>-><java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long,java.security.AccessControlContext)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration: void <init>()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder withCacheConfiguration(java.lang.String,org.springframework.data.redis.cache.RedisCacheConfiguration)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><io.jsonwebtoken.impl.JwtMap: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.JwtMap: java.lang.Object remove(java.lang.Object)>-><org.bson.Document: java.lang.Object remove(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.scheduler.DelegateServiceScheduler$UnsupportedScheduledExecutorService: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.buffer.AbstractByteBufAllocator: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.convert.CustomConversions$StoreConversions: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.CodeSigner: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><java.util.OptionalInt: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<com.alibaba.druid.support.logging.LogFactory: void <clinit>()>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.util.stream.Streams$RangeIntSpliterator: void forEachRemaining(java.util.function.IntConsumer)>-><java.util.stream.ReduceOps$6ReducingSink: void accept(int)>
<sun.net.www.protocol.http.HttpURLConnection: java.util.Set schemesListToSet(java.lang.String)>-><java.lang.String: boolean isEmpty()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonString: java.lang.String toString()>
<org.bson.codecs.PatternCodec$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.apache.ibatis.reflection.ParamNameResolver: java.lang.String getActualParamName(java.lang.reflect.Method,int)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: java.lang.Object get(int)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><cn.hutool.json.JSONArray: int size()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.ResourceLeakDetector$Record: java.lang.String toString()>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: java.lang.String getDescForKnownTypeIds()>-><com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.lang.String getDescForKnownTypeIds()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.query.Collation$PrimaryICUComparisonLevel: void <init>(boolean)>-><java.util.Optional: java.util.Optional of(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings: void <clinit>()>-><org.springframework.boot.web.server.MimeMappings: org.springframework.boot.web.server.MimeMappings unmodifiableMappings(org.springframework.boot.web.server.MimeMappings)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.RawBsonDocument: int hashCode()>
<org.springframework.data.mongodb.core.query.Collation: org.bson.Document lambda$toMongoDocumentConverter$11(org.springframework.data.mongodb.core.query.Collation)>-><org.bson.Document: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList: int size()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.Thread: java.lang.String toString()>
<org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>-><org.springframework.web.method.HandlerMethod: java.lang.annotation.Annotation getMethodAnnotation(java.lang.Class)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonDecimal128: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonArray: int size()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: java.lang.String toString()>
<org.apache.catalina.core.StandardWrapperValve: void <init>()>-><org.apache.catalina.valves.ValveBase: void <init>(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.util.DerValue: java.lang.String toString()>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><java.io.InputStream: void close()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.types.Code: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$LatestAsyncSink: java.lang.String toString()>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><java.io.FileInputStream: int read(byte[],int,int)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.AbstractConstant: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.Provider$Service: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.locale.Extension: java.lang.String toString()>
<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: boolean containsKey(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.bson.Document: java.lang.String toJson()>-><org.bson.Document: java.lang.String toJson(org.bson.json.JsonWriterSettings)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap: java.lang.String toString()>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<sun.net.www.protocol.http.AuthenticationInfo: void <clinit>()>-><sun.security.action.GetBooleanAction: void <init>(java.lang.String)>
<java.util.SubList$1: int previousIndex()>-><org.bson.RawBsonArray$RawBsonArrayList$ListItr: int previousIndex()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.chrono.AbstractChronology: int hashCode()>
<reactor.core.scheduler.Schedulers: java.lang.Object scanExecutor(java.util.concurrent.Executor,reactor.core.Scannable$Attr)>-><java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.web.util.pattern.PathElement: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.AbstractConstant: java.lang.String toString()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.EventObject: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.types.Code: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><java.util.HashMap: int size()>
<io.micrometer.core.instrument.config.validate.ValidationException: java.lang.String lambda$new$0(io.micrometer.core.instrument.config.validate.Validated$Invalid)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.Character: boolean equals(java.lang.Object)>
<org.springframework.security.web.debug.Logger: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<com.mongodb.DBObjectCodec: void <clinit>()>-><org.bson.codecs.BsonValueCodecProvider: void <init>()>
<org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: void <init>(java.lang.String)>-><java.lang.Float: java.lang.Float valueOf(float)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><cn.hutool.json.JSONArray: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration: void <init>()>
<sun.misc.Resource: byte[] getBytes()>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Set removeBindingsWithDestination(java.lang.String)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: void remove()>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean isRestrictedHeader(java.lang.String,java.lang.String)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.EnumMap$1: java.lang.String toString()>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity: org.springframework.data.mongodb.core.mapping.MongoPersistentProperty returnPropertyIfBetterIdPropertyCandidateOrNull(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>-><org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: boolean isExplicitIdProperty()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.data.mapping.model.AbstractPersistentProperty: int hashCode()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: int hashCode()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonInt64Codec: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.types.Symbol: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.ZoneId: java.lang.String toString()>
<javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler$ExtTypedProperty: java.lang.String getDefaultTypeId()>-><org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: java.lang.String idFromValueAndType(java.lang.Object,java.lang.Class)>
<org.springframework.validation.beanvalidation.SpringValidatorAdapter: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><org.bson.Document: java.util.Set entrySet()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.LocalDateTime: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.types.Decimal128: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonDecimal128Codec: java.lang.Class getEncoderClass()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableList$1: java.lang.Object previous()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object previous()>
<java.util.stream.SpinedBuffer$OfInt$1Splitr: void arrayForOne(int[],int,java.util.function.IntConsumer)>-><java.util.stream.ReduceOps$6ReducingSink: void accept(int)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: com.fasterxml.jackson.databind.PropertyName findImplicitParamName(int)>-><java.lang.String: boolean isEmpty()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: org.springframework.dao.DataAccessException convertJedisAccessException(java.lang.Exception)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(org.springframework.transaction.TransactionDefinition)>-><org.springframework.transaction.TransactionDefinition: int getIsolationLevel()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration: void <init>()>
<org.springframework.boot.actuate.autoconfigure.health.HealthProperties$Show: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.bson.Document: java.util.Set entrySet()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.lang.ThreadGroup: void <init>(java.lang.String)>-><java.lang.Thread: java.lang.Thread currentThread()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.math.BigInteger: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.SubList: java.util.Iterator iterator()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><java.util.Spliterators$4Adapter: boolean hasNext()>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: void bindItem(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$BufferAsyncSink: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.zip.CheckedInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.rabbitmq.client.Address: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.redis.listener.PatternTopic: int hashCode()>
<com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: com.fasterxml.jackson.databind.PropertyName findImplicitParamName(int)>-><com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: java.lang.String findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<java.util.stream.ReduceOps$1ReducingSink: void combine(java.util.stream.ReduceOps$AccumulatingSink)>-><java.util.stream.ReduceOps$1ReducingSink: void combine(java.util.stream.ReduceOps$1ReducingSink)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.rmi.server.LoaderHandler$Loader: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<java.util.HashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.wrapper.MapWrapper: java.lang.Class getSetterType(java.lang.String)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<org.springframework.data.mongodb.core.WriteResultChecking: void <clinit>()>-><org.springframework.data.mongodb.core.WriteResultChecking: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><ch.qos.logback.core.status.StatusBase: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.aop.support.DefaultIntroductionAdvisor: int hashCode()>
<com.zaxxer.hikari.pool.HikariPool: boolean softEvictConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)>-><com.zaxxer.hikari.pool.HikariPool: void closeConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<java.util.stream.Streams$ConcatSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.data.mapping.Alias: int hashCode()>-><io.lettuce.core.masterslave.MasterSlaveConnectionProvider$ConnectionKey: int hashCode()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.boot.web.error.ErrorAttributeOptions getErrorAttributeOptions(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeMessage(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.util.TypeVariableTypeInformation: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.Period: java.lang.String toString()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisClusterNode$LinkState: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.bson.codecs.BinaryCodec: void <init>()>-><java.lang.Object: void <init>()>
<java.net.Socket: int getPort()>-><java.net.HttpConnectSocketImpl: int getPort()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.IndexField: org.springframework.data.mongodb.core.index.IndexField hashed(java.lang.String)>-><org.springframework.data.mongodb.core.index.IndexField: void <init>(java.lang.String,org.springframework.data.domain.Sort$Direction,org.springframework.data.mongodb.core.index.IndexField$Type)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.PrimitiveIterator$OfDouble: java.lang.Object next()>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.Semaphore: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: boolean patchShadedLibraryId(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String)>-><java.io.InputStream: int read(byte[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>
<java.util.zip.InflaterOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonArray: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<org.springframework.boot.ImageBanner: org.springframework.boot.ImageBanner$Frame[] readFrames(int,int)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.util.unit.DataSize: int hashCode()>
<org.apache.ibatis.type.TypeHandlerRegistry: java.util.Map getJdbcHandlerMapForEnumInterfaces(java.lang.Class,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.http.converter.feed.RssChannelHttpMessageConverter: boolean supports(java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><io.lettuce.core.masterslave.RedisMasterSlaveNode: int hashCode()>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.ValueWriter: void writeArray(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonInt64: int hashCode()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.PathPatternParser: void <init>()>-><java.lang.Object: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.bson.codecs.jsr310.InstantCodec: void <init>()>-><org.bson.codecs.jsr310.DateTimeBasedCodec: void <init>()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.util.context.Context0: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration$ServletTraceFilterConfiguration: void <init>()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.bson.codecs.MapCodec: void <clinit>()>-><org.bson.codecs.MapCodecProvider: void <init>()>
<register-finalize <org.springframework.data.mongodb.SessionSynchronization: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: int hashCode()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.util.LazyStreamable: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$DataSourcePoolMetadataMetricsConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: int determinePort()>-><org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: void <init>(java.lang.String,int,java.lang.String[])>-><io.micrometer.core.instrument.config.validate.DurationValidator: void <init>(java.lang.String,int,java.lang.String[],io.micrometer.core.instrument.config.validate.DurationValidator$1)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<register-finalize <org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertiesUtil: java.util.Properties loadClose(java.io.InputStream,java.lang.Object)>-><java.io.FileInputStream: void close()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.QueryStringUriTemplateDecorator: void <init>()>
<java.util.stream.Nodes$ToArrayTask$OfPrimitive: void copyNodeToArray()>-><java.util.stream.Nodes$LongSpinedNodeBuilder: void copyInto(java.lang.Object,int)>
<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object previous()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object previous()>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber,java.util.Iterator,boolean,java.lang.Runnable)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientConfigurations$RestClientFallbackConfiguration: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>-><java.util.Collections$EmptyList: boolean isEmpty()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.RawBsonArray: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Hashtable: java.lang.String toString()>
<java.util.stream.Nodes$LongSpinedNodeBuilder: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.apache.ibatis.executor.ErrorContext: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<io.micrometer.core.instrument.simple.SimpleMeterRegistry: void <init>()>-><io.micrometer.core.instrument.simple.SimpleMeterRegistry: void <init>(io.micrometer.core.instrument.simple.SimpleConfig,io.micrometer.core.instrument.Clock)>
<org.springframework.data.mapping.model.BasicPersistentEntity: void addPersistentProperty(org.springframework.data.mapping.PersistentProperty)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: java.lang.String getName()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.convert.CustomConversions$StoreConversions: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: boolean patchShadedLibraryId(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[])>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.core.style.ToStringCreator: void <clinit>()>-><org.springframework.core.style.DefaultToStringStyler: void <init>(org.springframework.core.style.ValueStyler)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.Object: java.lang.String toString()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map retrieveMetrics()>-><org.bson.BsonDocument: java.util.Collection values()>
<org.springframework.http.HttpEntity: void <clinit>()>-><org.springframework.http.HttpEntity: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<jdk.internal.util.xml.impl.ReaderUTF8: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void <clinit>()>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: boolean supportsTransparentAuth()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonSymbolCodec: java.lang.Class getEncoderClass()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.util.locale.provider.RuleBasedBreakIterator: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<io.jsonwebtoken.impl.crypto.RsaSignatureValidator: boolean isValid(byte[],byte[])>-><java.net.URISyntaxException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<org.springframework.context.expression.MapAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><org.bson.BsonDocument: boolean containsKey(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Date: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: java.lang.Object getCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.bson.AbstractBsonWriter$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.internal.CustomizerRegistry: void add(org.springframework.cglib.core.KeyFactoryCustomizer)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimplePropertiesConfigAdapter: void <init>(org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties)>-><org.springframework.boot.actuate.autoconfigure.metrics.export.properties.PropertiesConfigAdapter: void <init>(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Thread: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: void putAll(java.util.Map)>-><org.springframework.util.CollectionUtils$MultiValueMapAdapter: void putAll(java.util.Map)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.support.AbstractBeanDefinition getBeanDefinition()>-><org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.support.AbstractBeanDefinition createBeanDefinition()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<ch.qos.logback.core.joran.conditional.PropertyEvalScriptBuilder: ch.qos.logback.core.joran.conditional.Condition build(java.lang.String)>-><org.codehaus.janino.ClassBodyEvaluator: void setParentClassLoader(java.lang.ClassLoader)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonMinKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.Duration: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getEnum(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.Class,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonArray: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$IgnoreSink: java.lang.String toString()>
<com.google.common.base.Joiner: void <init>(com.google.common.base.Joiner,com.google.common.base.Joiner$1)>-><com.google.common.base.Joiner: void <init>(com.google.common.base.Joiner)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><java.util.PrimitiveIterator$OfLong: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.freemarker.FreeMarkerNonWebConfiguration: void <init>(org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties)>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag: io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag[] values()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.AutorecoveringChannel: void close()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator: void <init>(java.lang.String,int,java.lang.String[])>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.FloatCodec: java.lang.Class getEncoderClass()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>-><java.lang.Object: java.lang.Class getClass()>
<org.bson.codecs.BsonDocumentCodec: void <clinit>()>-><org.bson.codecs.BsonValueCodecProvider: void <init>()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.alibaba.druid.filter.FilterManager: void <clinit>()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.boot.actuate.trace.http.Include: void <clinit>()>-><org.springframework.boot.actuate.trace.http.Include: void <init>(java.lang.String,int)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.bson.BsonBinarySubType: void <init>(java.lang.String,int,byte)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void validateAnnotation(java.lang.annotation.Annotation,java.lang.String,java.lang.Object[])>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Collections$ReverseComparator2: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonDocumentWrapper: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator: int _int(java.lang.Object)>-><org.bson.types.Decimal128: int intValue()>
<org.bson.codecs.LongCodec: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.BsonArray: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration$EmbeddedTomcat: void <init>()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.springframework.boot.web.error.ErrorAttributeOptions$Include: void <clinit>()>-><org.springframework.boot.web.error.ErrorAttributeOptions$Include: void <init>(java.lang.String,int)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList: void clear()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean isRestrictedHeader(java.lang.String,java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.nio.charset.Charset: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.internal.Optional: java.lang.String toString()>
<org.springframework.data.mongodb.core.index.IndexField: void <init>(java.lang.String,org.springframework.data.domain.Sort$Direction,org.springframework.data.mongodb.core.index.IndexField$Type,java.lang.Float)>-><java.lang.Object: void <init>()>
<java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: int hashCode()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<org.apache.catalina.core.StandardWrapper: void <init>()>-><org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<sun.net.www.protocol.http.Handler: void <init>()>-><java.net.URLStreamHandler: void <init>()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<com.mongodb.client.model.CollationStrength: void <clinit>()>-><com.mongodb.client.model.CollationStrength: void <init>(java.lang.String,int,int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.nio.ByteBuffer: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>-><io.micrometer.core.util.internal.logging.Slf4JLogger: void debug(java.lang.String)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.security.Provider$ServiceKey: int hashCode()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.servlet.PathRequest$H2ConsoleRequestMatcher: void <init>()>-><org.springframework.boot.security.servlet.ApplicationContextRequestMatcher: void <init>(java.lang.Class)>
<org.bson.AbstractBsonWriter$State: org.bson.AbstractBsonWriter$State[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.apache.logging.log4j.util.PropertyFilePropertySource: java.util.Properties loadPropertiesFile(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardWrapper: void <init>()>-><org.apache.catalina.core.ContainerBase: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.Parsed: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.net.SocketImpl: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: java.lang.String toString()>
<register-finalize <sun.net.www.protocol.http.HttpURLConnection$TunnelState: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.ILoggerFactory getILoggerFactory()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<org.apache.ibatis.builder.xml.XMLConfigBuilder: java.util.Properties settingsAsProperties(org.apache.ibatis.parsing.XNode)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.JsonInt32Converter: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><org.springframework.util.StringUtils: java.lang.String uriDecode(java.lang.String,java.nio.charset.Charset)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver copy()>-><java.lang.UnsupportedOperationException: void <init>()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.util.ArrayList: void <init>()>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.internal.Optional: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <init>(org.springframework.security.web.server.csrf.CsrfWebFilter$1)>-><org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <init>()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Collections$EmptyEnumeration: java.lang.Object nextElement()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.YearMonth: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.stream.Nodes$ToArrayTask$OfLong: void <init>(java.util.stream.Node$OfLong,long[],int)>-><java.util.stream.Nodes$ToArrayTask$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive,java.lang.Object,int,java.util.stream.Nodes$1)>
<java.util.stream.Node$OfPrimitive: java.lang.Object[] asArray(java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<org.springframework.data.mongodb.core.index.IndexField: org.springframework.data.mongodb.core.index.IndexField create(java.lang.String,org.springframework.data.domain.Sort$Direction)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<io.micrometer.core.util.internal.logging.JdkLogger: void debug(java.lang.String)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.rabbitmq.client.impl.Frame: long tableSize(java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<sun.text.normalizer.NormalizerImpl: void <clinit>()>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.springframework.boot.actuate.metrics.web.client.MetricsClientHttpRequestInterceptor$UrlTemplateThreadLocal: void <init>(org.springframework.boot.actuate.metrics.web.client.MetricsClientHttpRequestInterceptor$1)>-><org.springframework.boot.actuate.metrics.web.client.MetricsClientHttpRequestInterceptor$UrlTemplateThreadLocal: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonString: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.logging.LoggersEndpointAutoConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.mongodb.core.index.IndexField: int hashCode()>
<org.springframework.core.io.AbstractFileResolvingResource: void customizeConnection(java.net.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: void setRequestMethod(java.lang.String)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.util.Map mapAnnotations(java.lang.annotation.Annotation[])>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonString: int hashCode()>
<org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: void <init>(java.lang.String,java.lang.String)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.google.common.util.concurrent.SerializingExecutor: void <init>(java.util.concurrent.Executor)>-><java.util.ArrayDeque: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.buffer.WrappedByteBuf: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.type.TypeFactory: java.lang.Class findClass(java.lang.String)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.ArrayList: int size()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.Character$Subset: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><org.springframework.data.redis.connection.util.ByteArrayWrapper: byte[] getArray()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><org.springframework.data.util.ClassTypeInformation: org.springframework.data.util.ClassTypeInformation getRawTypeInformation()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.BitSet: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<org.springframework.http.HttpStatus$Series: void <clinit>()>-><org.springframework.http.HttpStatus$Series: void <init>(java.lang.String,int,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.Collections$EmptyList: java.lang.Object[] toArray()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: void init()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.net.InetSocketAddress: int hashCode()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><cn.hutool.json.JSONArray: boolean addAll(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver: void resolveAndAddIndexesForAssociation(org.springframework.data.mapping.Association,java.util.List,java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.BasicPersistentEntity: org.springframework.data.mapping.Alias getAliasFromAnnotation(java.lang.Class)>-><org.springframework.data.mapping.Alias: org.springframework.data.mapping.Alias ofNullable(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundryActuatorAutoConfiguration: org.springframework.boot.actuate.info.InfoContributor lambda$cloudFoundryInfoEndpointWebExtension$0(org.springframework.boot.info.GitProperties,org.springframework.boot.actuate.info.InfoContributor)>-><org.springframework.boot.actuate.info.GitInfoContributor: void <init>(org.springframework.boot.info.GitProperties,org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.RabbitResourceHolder: void rollbackAll()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.stream.LongPipeline$StatelessOp: void <init>(java.util.stream.AbstractPipeline,java.util.stream.StreamShape,int)>-><java.util.stream.IntPipeline: java.util.stream.StreamShape getOutputShape()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><com.google.common.collect.ForwardingCollection: java.util.Iterator iterator()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>(org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$1)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$13(com.mongodb.client.model.Collation$Builder,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$PrimaryICUComparisonLevel: java.util.Optional getCaseLevel()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: int compareTo(java.lang.Object)>
<org.bson.json.JsonTokenType: org.bson.json.JsonTokenType[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><org.bson.BsonArray: int size()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: void lambda$entryConsumer$0(java.util.function.Consumer,java.util.Map$Entry)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: int determinePort()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl getSsl()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.rabbitmq.client.Address: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(byte[])>-><com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(byte[],int,int)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DecimalStyle: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><io.netty.buffer.WrappedByteBuf: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: void closeQuietly(java.io.Closeable)>-><java.io.FileInputStream: void close()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void <init>()>-><java.util.HashMap: void <init>()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.misc.Signal: int hashCode()>
<org.bson.codecs.jsr310.Jsr310CodecProvider: void putCodec(org.bson.codecs.Codec)>-><org.bson.codecs.jsr310.InstantCodec: java.lang.Class getEncoderClass()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: boolean contains(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.Float: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: boolean patchShadedLibraryId(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String)>-><sun.net.www.http.ChunkedInputStream: int available()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.mongodb.DBRef: java.lang.String toString()>
<org.apache.catalina.core.ApplicationFilterConfig: javax.servlet.Filter getFilter()>-><org.apache.catalina.startup.FailedContext: org.apache.tomcat.InstanceManager getInstanceManager()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.util.Map mapAnnotations(java.lang.annotation.Annotation[])>-><java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><sun.net.www.MeteredStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<cn.hutool.core.map.MapUtil: java.lang.Object get(java.util.Map,java.lang.Object,java.lang.Class,java.lang.Object)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat: void <init>()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.MetricsEndpointAutoConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.Long: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Package: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.apache.ibatis.builder.xml.XMLConfigBuilder: java.util.Properties settingsAsProperties(org.apache.ibatis.parsing.XNode)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.BasicPersistentEntity: java.util.Optional lambda$doFindAnnotation$8(java.lang.Class)>-><org.springframework.core.annotation.AnnotatedElementUtils: java.lang.annotation.Annotation findMergedAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<java.util.zip.InflaterOutputStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void close()>
<org.apache.ibatis.builder.annotation.MapperAnnotationBuilder: java.util.Optional getAnnotationWrapper(java.lang.reflect.Method,boolean,java.util.Collection)>-><org.bson.RawBsonDocument: boolean isEmpty()>
<org.springframework.data.mongodb.util.BsonUtils: java.util.Map asMap(org.bson.conversions.Bson)>-><com.mongodb.MongoClientSettings: org.bson.codecs.configuration.CodecRegistry getDefaultCodecRegistry()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.JapaneseImperialCalendar: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.ThreadGroup: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: java.lang.Object get(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.convert.CustomConversions$StoreConversions: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Integer: java.lang.String toString()>
<org.springframework.data.mongodb.util.MongoDbErrorCodes: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeIndexedArgumentValue(java.lang.Integer,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedList: java.lang.Object merge(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.security.UnresolvedPermission: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClientUtils: void <clinit>()>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<springfox.documentation.spring.web.readers.operation.ResponseMessagesReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><java.lang.Object: void <init>()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor$LongTaskTimingContext: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <init>()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated validate(java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated flatMap(java.util.function.Function)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.amqp.RabbitHealthContributorAutoConfiguration: void <init>()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void _checkImplicitlyNamedConstructors(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String serializeValue(java.lang.Object)>-><org.bson.Document: java.lang.String toJson()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Arrays$ArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.regex.Pattern: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.time.Duration getCommandTimeout()>
<org.springframework.util.NumberUtils: long checkedLongValue(java.lang.Number,java.lang.Class)>-><org.bson.types.Decimal128: long longValue()>
<org.bson.io.ByteBufferBsonInput: void <clinit>()>-><java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
<java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner,boolean)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.jdbc.datasource.DataSourceUtils: void doCloseConnection(java.sql.Connection,javax.sql.DataSource)>-><com.zaxxer.hikari.pool.ProxyConnection: void close()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.stream.AbstractPipeline: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator spliterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.ResourceLeakDetector$Record: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.Document: int hashCode()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ParameterDefaultReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.util.stream.Stream getAccessors()>-><org.springframework.data.mapping.model.AbstractPersistentProperty: java.lang.reflect.Method getGetter()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.TreeMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.data.mapping.PersistentProperty: org.springframework.data.mapping.Association getRequiredAssociation()>-><org.springframework.data.mapping.model.AbstractPersistentProperty: org.springframework.data.mapping.Association getAssociation()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.util.TypeKey: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.IntPipeline: void forEachWithCancel(java.util.Spliterator,java.util.stream.Sink)>-><java.util.stream.Sink$ChainedLong: boolean cancellationRequested()>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Hashtable$Entry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonUndefinedCodec: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonTimestamp: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.boot.web.error.ErrorAttributeOptions getErrorAttributeOptions(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.web.error.ErrorAttributeOptions: org.springframework.boot.web.error.ErrorAttributeOptions including(org.springframework.boot.web.error.ErrorAttributeOptions$Include[])>
<org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers: void <clinit>()>-><org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers$1: void <init>(java.lang.String,int)>
<org.springframework.data.redis.connection.jedis.JedisConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.RedisSubscribedConnectionException: void <init>(java.lang.String)>
<com.zaxxer.hikari.HikariConfig: void <clinit>()>-><java.util.concurrent.TimeUnit$5: long toMillis(long)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CountDownLatch: java.lang.String toString()>
<com.mongodb.MongoClientSettings: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: java.lang.Object getCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><org.bson.BsonArray: java.lang.Object get(int)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><java.util.ArrayList: void <init>(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<org.bson.codecs.BsonValueCodecProvider: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<org.springframework.data.mongodb.core.convert.DocumentPropertyAccessor: void <clinit>()>-><org.springframework.data.mongodb.core.convert.DocumentPropertyAccessor: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.net.Socket: java.net.InetAddress getInetAddress()>-><java.net.SocketImpl: java.net.InetAddress getInetAddress()>
<java.util.Currency$1: java.lang.Void run()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<register-finalize <org.springframework.boot.actuate.metrics.http.Outcome: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<java.util.stream.Nodes$ToArrayTask$OfRef: void copyNodeToArray()>-><java.util.stream.Nodes$ConcNode: void copyInto(java.lang.Object[],int)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean contains(java.lang.Object)>-><com.google.common.collect.ForwardingCollection: boolean contains(java.lang.Object)>
<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.util.Map mapAnnotations(java.lang.annotation.Annotation[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$DelegatingHandlerMappingDescriptionProvider: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.rmi.server.LogStream: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisSubscription: void doClose()>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getPatterns()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.PrimitiveConverter: java.lang.Object convertInternal(java.lang.Object)>-><org.bson.types.Decimal128: long longValue()>
<io.netty.util.internal.NativeLibraryLoader: byte[] classToByteArray(java.lang.Class)>-><java.io.FileInputStream: int read(byte[])>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.jni.SSL: java.lang.String versionString()>
<java.util.stream.Streams$ConcatSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.awt.image.PackedColorModel: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><java.io.InputStream: int read(byte[])>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<org.bson.json.ShellInt64Converter: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.types.MaxKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.MonoCallableOnAssembly: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.reactive.ReactiveOAuth2ClientImportSelector$OAuth2ClientWebFluxSecurityConfiguration: void <init>()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<io.lettuce.core.RedisConnectionException: io.lettuce.core.RedisConnectionException create(java.lang.String,java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.mapping.model.AbstractPersistentProperty: int hashCode()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.types.Symbol: int hashCode()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: void <init>(javax.security.auth.SubjectDomainCombiner$1)>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: void <init>()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.springframework.security.web.util.ThrowableAnalyzer: void verifyThrowableHierarchy(java.lang.Throwable,java.lang.Class)>-><java.lang.Object: java.lang.Class getClass()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.util.Set schemesListToSet(java.lang.String)>-><java.util.Collections: java.util.Set emptySet()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.bson.codecs.PatternCodec: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ExtendedJsonTimestampConverter: void <init>()>
<reactor.core.publisher.FluxIterable: boolean checkFinite(java.lang.Iterable)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator spliterator()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.TreeMap$Entry: int hashCode()>
<org.springframework.core.env.CommandLineArgs: void addOptionArg(java.lang.String,java.lang.String)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean isReadable()>-><java.io.FileInputStream: void close()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap)>-><java.lang.String: char[] toCharArray()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.OffsetTime: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Object)>
<io.netty.util.internal.NativeLibraryLoader: boolean patchShadedLibraryId(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String)>-><java.net.SocketInputStream: int read(byte[])>
<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>-><sun.security.action.GetIntegerAction: void <init>(java.lang.String,int)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><cn.hutool.core.lang.Tuple: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.boot.web.error.ErrorAttributeOptions getErrorAttributeOptions(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.web.error.ErrorAttributeOptions: org.springframework.boot.web.error.ErrorAttributeOptions defaults()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<java.util.AbstractList: void removeRange(int,int)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.ListIterator listIterator(int)>
<java.util.Collections$SetFromMap: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap: int size()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<org.springframework.data.mongodb.core.convert.DocumentPropertyAccessor: void <init>()>-><org.springframework.context.expression.MapAccessor: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.util.function.Tuple2: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator getCachingOperationNameGenerator()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions bucketSize(java.lang.Double)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.LocalDateTime: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.Period: java.lang.String toString()>
<org.springframework.http.HttpHeaders: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>(int)>
<jdk.internal.util.xml.impl.ReaderUTF16: int read(char[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.LocalTime: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonBinary: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void <clinit>()>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>
<org.springframework.core.env.CommandLineArgs: void addOptionArg(java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider: void <init>(org.springframework.data.mongodb.core.convert.MappingMongoConverter,org.bson.conversions.Bson,org.springframework.data.mapping.model.SpELExpressionEvaluator,org.springframework.data.mongodb.core.convert.ObjectPath)>-><org.springframework.data.mongodb.core.convert.DocumentAccessor: void <init>(org.bson.conversions.Bson)>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><java.lang.Double: void <init>(java.lang.String)>
<sun.net.ProgressSource$State: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonTimestamp: int hashCode()>
<java.util.Collections$UnmodifiableList$1: java.lang.Object previous()>-><org.bson.RawBsonArray$RawBsonArrayList$ListItr: java.lang.Object previous()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.convert.CustomConversions$StoreConversions: java.lang.String toString()>
<register-finalize <sun.net.ProgressSource$State: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler$Builder: void _addPropertyIndex(java.lang.String,java.lang.Integer)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: void setPoolSize(int)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration: void <init>()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$WebSecurityConfiguration: void <init>()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>-><sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger getLogger(java.lang.String)>
<java.util.stream.Nodes$SizedCollectorTask$OfLong: void <init>(java.util.Spliterator,java.util.stream.PipelineHelper,long[])>-><java.util.stream.Nodes$SizedCollectorTask: void <init>(java.util.Spliterator,java.util.stream.PipelineHelper,int)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mongodb.core.convert.QueryMapper: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><java.io.FileInputStream: int read(byte[],int,int)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<sun.net.httpserver.ChunkedInputStream: int readImpl(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.PatternEntry: java.lang.String toString()>
<register-finalize <com.zaxxer.hikari.util.IsolationLevel: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void remove(java.util.Collection,byte[][])>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>
<io.netty.util.internal.NativeLibraryLoader: byte[] classToByteArray(java.lang.Class)>-><java.net.SocketInputStream: int read(byte[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.ShortCodec: void <init>()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void add(java.util.Collection,byte[][])>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.types.MaxKey: java.lang.String toString()>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<sun.awt.DebugSettings: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration: void <init>()>
<io.jsonwebtoken.impl.JwtMap: void setDate(java.lang.String,java.util.Date)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.BsonArray: int size()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<register-finalize <java.io.FileReader: void <init>(java.lang.String)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.rmi.server.LogStream: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><java.lang.String: java.lang.String substring(int,int)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.SubList: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><javax.security.auth.Subject: boolean isReadOnly()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: void <init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap)>-><com.google.common.collect.ForwardingConcurrentMap: void <init>()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineAddresses()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<java.util.WeakHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.mongodb.client.model.geojson.MultiLineString: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.mongodb.BasicDBObject: int hashCode()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<io.jsonwebtoken.impl.JwtMap: java.lang.Object remove(java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object remove(java.lang.Object)>
<java.util.Vector$VectorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonSymbol: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void remove(java.util.Collection,byte[][])>-><org.springframework.data.redis.connection.util.ByteArrayWrapper: void <init>(byte[])>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<java.util.Currency$1: java.lang.Void run()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.pattern.RegexPathElement: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.lettuce.core.RedisURI: java.lang.String toString()>
<jdk.internal.util.xml.impl.ReaderUTF16: int read(char[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter: void logWarningIfNecessary(java.lang.reflect.Type,java.lang.Throwable)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<ch.qos.logback.core.joran.conditional.PropertyEvalScriptBuilder: ch.qos.logback.core.joran.conditional.Condition build(java.lang.String)>-><org.codehaus.janino.ClassBodyEvaluator: java.lang.Class getClazz()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>-><io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>
<com.rabbitmq.client.impl.Frame: long arraySize(java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: int hashCode()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.sql.Time: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<io.jsonwebtoken.impl.JwtMap: java.lang.Object remove(java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object remove(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.PrimitiveIterator$OfLong: void forEachRemaining(java.util.function.Consumer)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration$SpringMvcConfiguration: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties: void <init>()>
<sun.net.www.http.HttpClient: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<com.fasterxml.jackson.databind.type.TypeParser: java.lang.Class findClass(java.lang.String,com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonInt64: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.PropertyPermission: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.MeterRegistryConfigValidator: io.micrometer.core.instrument.config.validate.Validated lambda$check$3(java.lang.String,java.util.function.Function,io.micrometer.core.instrument.config.MeterRegistryConfig)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<java.util.stream.SpinedBuffer$OfLong: java.lang.Object[] newArrayArray(int)>-><java.util.stream.SpinedBuffer$OfLong: long[][] newArrayArray(int)>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonBinary: int hashCode()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.ZonedDateTime: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.Document: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.DefaultTagsProvider: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<java.net.AbstractPlainSocketImpl: void finalize()>-><java.net.AbstractPlainSocketImpl: void close()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Optional: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.node.TextNode: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.bson.codecs.BsonBinaryCodec: void <init>()>-><java.lang.Object: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonInt32: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<reactor.util.function.Tuple3: int hashCode()>-><com.mongodb.client.model.geojson.Position: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.BsonDocumentWrapper: int size()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.scheduler.DelegateServiceScheduler: java.lang.String toString()>
<com.rabbitmq.client.impl.Frame: long arraySize(java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: int hashCode()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.io.File: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated detect(java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.mongodb.client.model.geojson.MultiPoint: int hashCode()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.lang.String[] doGetParameterNames(java.lang.reflect.Executable)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.data.mongodb.util.MongoDbErrorCodes: void <clinit>()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonDateTime: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.security.AllPermission: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.apache.ibatis.reflection.wrapper.BeanWrapper: void setBeanProperty(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object,java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.Collectors: java.lang.Object lambda$throwingMerger$0(java.lang.Object,java.lang.Object)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean isReadable()>-><java.io.BufferedInputStream: void close()>
<org.springframework.core.annotation.MergedAnnotationCollectors: void lambda$toAnnotationSet$0(java.util.ArrayList,org.springframework.core.annotation.MergedAnnotation)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean add(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: double getDoubleValue()>-><org.bson.types.Decimal128: double doubleValue()>
<org.springframework.boot.ImageBanner: org.springframework.boot.ImageBanner$Frame[] readFrames(int,int)>-><sun.net.www.MeteredStream: void close()>
<io.micrometer.core.instrument.config.validate.ValidationException: java.lang.String lambda$new$0(io.micrometer.core.instrument.config.validate.Validated$Invalid)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.lang.Double: long longValue()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.AbstractList: java.lang.String outOfBoundsMsg(int)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.util.ReflectionUtils: java.lang.reflect.Field findRequiredField(java.lang.Class,java.lang.String)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.Period: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.apache.logging.log4j.Level: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.mongodb.DBObjectCodecProvider: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.Instant: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.bson.json.ShellMaxKeyConverter: void <init>()>-><java.lang.Object: void <init>()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.DefaultWriteConcernResolver: void <clinit>()>-><org.springframework.data.mongodb.core.DefaultWriteConcernResolver: void <init>(java.lang.String,int)>
<java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.springframework.data.mapping.model.AbstractPersistentProperty: org.springframework.data.mapping.Association getAssociation()>-><org.springframework.data.util.Lazy: java.lang.Object orElse(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonSymbol: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<org.bson.codecs.jsr310.Jsr310CodecProvider: void <clinit>()>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<java.net.URLClassLoader: void close()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.Collections$UnmodifiableList$1: java.lang.Object next()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.redis.connection.RedisPassword: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>-><java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void debug(java.lang.String)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.lang.Object lambda$throwingMerger$0(java.lang.Object,java.lang.Object)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.WeakHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.bson.codecs.DocumentCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap,org.bson.Transformer)>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.PropertyName: int hashCode()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.Semaphore: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.data.mapping.Alias: org.springframework.data.mapping.Alias ofNullable(java.lang.Object)>-><org.springframework.data.mapping.Alias: void <init>(java.lang.Object)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$UrlHandlerMappingDescriptionProvider: void <init>(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.apache.ibatis.type.TypeHandlerRegistry: java.util.Map getJdbcHandlerMapForEnumInterfaces(java.lang.Class,java.lang.Class)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler pickSoleHandler(java.util.Map)>-><org.bson.BsonDocumentWrapper: java.util.Collection values()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><org.springframework.data.util.ParentTypeAwareTypeInformation: org.springframework.data.util.ClassTypeInformation getRawTypeInformation()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.YearMonth: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<org.springframework.context.support.StaticApplicationContext: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.context.support.GenericApplicationContext: void <init>(org.springframework.context.ApplicationContext)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.util.OptionalInt: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.net.SocketInputStream: void close()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<sun.net.www.http.HttpClient: void <clinit>()>-><sun.security.action.GetPropertyAction: void <init>(java.lang.String)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<org.springframework.boot.actuate.context.ShutdownEndpoint: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.springframework.context.expression.MapAccessor: boolean canRead(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><org.bson.BsonDocumentWrapper: boolean containsKey(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.core.env.PropertySource: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.buffer.EmptyByteBuf: java.lang.String toString()>
<register-finalize <org.springframework.http.HttpStatus$Series: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.mybatis.spring.MyBatisExceptionTranslator: org.springframework.jdbc.support.SQLExceptionTranslator lambda$new$0(javax.sql.DataSource)>-><org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: void <init>(javax.sql.DataSource)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<jdk.internal.util.xml.impl.ReaderUTF16: void close()>-><java.io.BufferedInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Long: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void closeIfUnsubscribed()>-><org.springframework.data.redis.connection.jedis.JedisSubscription: void doClose()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.context.support.ApplicationListenerDetector: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.net.InetAddress: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonDocument: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.JavaType _resolveAndValidateGeneric(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,int)>-><com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)>
<org.springframework.web.util.HtmlCharacterEntityReferences: java.lang.String lambda$new$0(int)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: int compareTo(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<java.util.stream.SortedOps$OfRef: java.util.stream.Node opEvaluateParallel(java.util.stream.PipelineHelper,java.util.Spliterator,java.util.function.IntFunction)>-><java.util.stream.Nodes$ConcNode: java.lang.Object[] asArray(java.util.function.IntFunction)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<cn.hutool.core.convert.impl.BooleanConverter: java.lang.Boolean convertInternal(java.lang.Object)>-><org.bson.types.Decimal128: double doubleValue()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ParameterMultiplesReader: void <init>()>-><java.lang.Object: void <init>()>
<java.io.BufferedOutputStream: void flush()>-><java.io.PrintStream: void flush()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<reactor.util.function.Tuple3: int hashCode()>-><com.mongodb.client.model.geojson.LineString: int hashCode()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.net.Socket: int getLocalPort()>-><java.net.HttpConnectSocketImpl: int getLocalPort()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.io.BufferedInputStream: void close()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: int compareTo(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler pickSoleHandler(java.util.Map)>-><org.bson.RawBsonDocument: java.util.Collection values()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.boot.util.LambdaSafe: void <clinit>()>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: boolean isVersionProperty()>-><org.springframework.data.util.Lazy: java.lang.Object get()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<java.io.DataOutputStream: void writeChar(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions bits(java.lang.Integer)>
<org.springframework.data.mapping.model.BasicPersistentEntity: void addAssociation(org.springframework.data.mapping.Association)>-><java.util.TreeSet: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder _appendSubClassMatcher(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$TypeMatcher)>-><java.util.ArrayList: void <init>()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getEnum(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.Class,java.lang.String)>-><java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<org.bson.json.JsonScanner$RegularExpressionState: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.InetSocketAddress: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<org.apache.ibatis.type.TypeHandlerRegistry: void register(java.lang.reflect.Type,org.apache.ibatis.type.JdbcType,org.apache.ibatis.type.TypeHandler)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonUndefinedCodec: java.lang.Class getEncoderClass()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.io.File: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><java.util.ArrayList: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.management.MBeanOperationInfo: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.alibaba.druid.util.JdbcUtils: void close(java.io.Closeable)>-><java.io.BufferedInputStream: void close()>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonNullCodec: java.lang.Class getEncoderClass()>
<com.fasterxml.classmate.TypeResolver: void <init>()>-><com.fasterxml.classmate.TypeResolver: void <init>(com.fasterxml.classmate.util.ResolvedTypeCache)>
<sun.net.www.protocol.http.AuthenticationHeader: void <clinit>()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.mapping.model.Property: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <init>(java.lang.String[])>-><java.lang.Object: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<com.mongodb.client.model.geojson.GeoJsonObjectType: void <clinit>()>-><com.mongodb.client.model.geojson.GeoJsonObjectType: void <init>(java.lang.String,int,java.lang.String)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,redis.clients.jedis.BinaryJedisPubSub,byte[][],byte[][])>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.Decimal128Codec: java.lang.Class getEncoderClass()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: int determinePort()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl: java.lang.Boolean getEnabled()>
<org.springframework.boot.actuate.autoconfigure.web.servlet.ManagementErrorEndpoint$1: void <clinit>()>-><org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeStacktrace: org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeStacktrace[] values()>
<org.springframework.web.util.UriComponents: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<cn.hutool.core.convert.impl.PrimitiveConverter: java.lang.Object convertInternal(java.lang.Object)>-><org.bson.types.Decimal128: int intValue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.ibatis.type.TypeReference: java.lang.String toString()>
<org.apache.catalina.core.StandardWrapper: void <init>()>-><java.util.ArrayList: void <init>()>
<java.util.stream.AbstractPipeline: java.util.stream.Node evaluate(java.util.Spliterator,boolean,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.stream.Node build()>
<org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator: void createAndRegisterProperty(org.springframework.data.mapping.model.Property)>-><org.springframework.data.mapping.PersistentProperty: org.springframework.data.mapping.Association getRequiredAssociation()>
<org.springframework.data.mapping.Alias: int hashCode()>-><cn.hutool.json.JSONObject: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Thread: java.lang.String toString()>
<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>-><org.bson.Document: boolean containsKey(java.lang.Object)>
<org.bson.codecs.BsonTypeClassMap: void <init>(java.util.Map)>-><java.util.HashMap: void putAll(java.util.Map)>
<org.springframework.data.mongodb.core.query.Collation$TertiaryICUComparisonLevel: void <clinit>()>-><org.springframework.data.mongodb.core.query.Collation$TertiaryICUComparisonLevel: void <init>()>
<org.springframework.data.domain.Sort$NullHandling: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.io.DataOutputStream: void writeBoolean(boolean)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.boot.SpringBootExceptionHandler: boolean isLogConfigurationMessage(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: java.lang.String toString()>
<org.bson.codecs.BsonTypeClassMap: void <init>(java.util.Map)>-><java.lang.Object: void <init>()>
<io.netty.util.concurrent.ThreadPerTaskExecutor: void execute(java.lang.Runnable)>-><java.util.concurrent.Executors$PrivilegedThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><java.lang.Float: java.lang.Float valueOf(java.lang.String)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: org.springframework.dao.DataAccessException convertJedisAccessException(java.lang.Exception)>-><org.springframework.data.redis.RedisSystemException: void <init>(java.lang.String,java.lang.Throwable)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiListingReferenceScanner: void <init>()>
<java.util.stream.ReduceOps$6ReducingSink: void combine(java.util.stream.ReduceOps$6ReducingSink)>-><java.util.stream.ReduceOps$6ReducingSink: void accept(int)>
<org.springframework.web.client.RestTemplate: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.RelaxedExtendedJsonDateTimeConverter: void <init>()>
<javax.servlet.http.HttpServlet: void <clinit>()>-><java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.types.CodeWScope: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(org.springframework.transaction.TransactionDefinition)>-><org.springframework.transaction.TransactionDefinition: boolean isReadOnly()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.types.MinKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.types.Code: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.Character: java.lang.Character valueOf(char)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.context.annotation.AnnotationConfigUtils: void processCommonDefinitionAnnotations(org.springframework.beans.factory.annotation.AnnotatedBeanDefinition,org.springframework.core.type.AnnotatedTypeMetadata)>-><org.bson.types.Decimal128: int intValue()>
<sun.net.httpserver.ChunkedInputStream: void consumeCRLF()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Hashtable: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.core.io.support.EncodedResource: int hashCode()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonDocument: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.OffsetDateTime: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.StackTraceElement: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.scheduler.DelegateServiceScheduler$UnsupportedScheduledExecutorService: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: java.util.Collection values()>
<java.io.BufferedOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void <init>(java.util.Properties)>-><com.zaxxer.hikari.util.PropertyElf: void setTargetFromProperties(java.lang.Object,java.util.Properties)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<com.rabbitmq.client.impl.Frame: long arraySize(java.util.List)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$TextIndexIncludeOptions$IncludeStrategy: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.types.MinKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.types.MaxKey: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.sql.Date: java.lang.String toString()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void addPersistentProperty(org.springframework.data.mapping.PersistentProperty)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: boolean isVersionProperty()>
<org.springframework.data.spel.Functions: boolean lambda$null$1(java.util.List,org.springframework.data.spel.spi.Function)>-><org.springframework.data.spel.Functions: boolean contains(java.util.List,org.springframework.data.spel.spi.Function)>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings emptyBindings()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.health.Health$Builder: void <init>(org.springframework.boot.actuate.health.Status)>-><java.lang.Object: void <init>()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BooleanCodec: java.lang.Class getEncoderClass()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: java.lang.String toString()>
<cn.hutool.core.bean.copier.provider.MapValueProvider: java.lang.Object value(java.lang.String,java.lang.reflect.Type)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonInt32: java.lang.String toString()>
<org.springframework.data.annotation.AccessType$Type: void <clinit>()>-><org.springframework.data.annotation.AccessType$Type: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings: void <clinit>()>-><org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>
<io.micrometer.core.instrument.config.validate.PropertyValidator: java.lang.String lambda$getEnum$0(java.lang.Enum)>-><java.lang.StringBuilder: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.Frame: long tableSize(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: boolean hasNext()>
<sun.net.www.protocol.http.AuthenticationInfo: void <clinit>()>-><java.lang.Boolean: boolean booleanValue()>
<sun.net.www.http.KeepAliveCache: void <init>()>-><java.util.HashMap: void <init>()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: int hashCode()>
<org.apache.ibatis.io.Resources: java.util.Properties getUrlAsProperties(java.lang.String)>-><sun.net.www.http.KeepAliveStream: void close()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.PropertyValidator: java.lang.String prefixedProperty(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ShellRegularExpressionConverter: void <init>()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.springframework.context.expression.MapAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$ExtensionBean: java.lang.String lambda$new$0(java.lang.Class)>-><java.lang.StringBuilder: void <init>()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: java.lang.String substring(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$DelegatingKD: java.lang.Object deserializeKey(java.lang.String,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<reactor.core.publisher.MonoLog: void <init>(reactor.core.publisher.Mono,reactor.core.publisher.SignalPeek)>-><reactor.core.publisher.InternalMonoOperator: void <init>(reactor.core.publisher.Mono)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.codecs.MapCodecProvider: int hashCode()>
<com.sun.net.httpserver.Headers: void add(java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.data.mapping.PreferredConstructor$Parameter: java.lang.Boolean lambda$new$0(org.springframework.data.mapping.PersistentEntity,org.springframework.data.util.TypeInformation)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath$Loader$1: java.io.InputStream getInputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>-><sun.security.action.GetPropertyAction: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration: void <init>()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.types.Symbol: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.mongodb.DBRef: java.lang.String toString()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.net.URLClassLoader: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonObjectId: int hashCode()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.lang.String: boolean equals(java.lang.Object)>
<reactor.core.scheduler.DelegateServiceScheduler: boolean isDisposed()>-><java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.Semaphore: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonElement: int hashCode()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.awt.image.ColorModel: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserializeUsingCustom(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection,com.fasterxml.jackson.databind.JsonDeserializer)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$DeferredProperty: void <init>(org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper,java.lang.String,java.lang.Object)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<org.apache.ibatis.mapping.ResultMap$Builder: java.util.List getArgNames(java.lang.reflect.Constructor)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisConnection: org.springframework.dao.DataAccessException convertJedisAccessException(java.lang.Exception)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation$Alternate: void <clinit>()>-><java.util.Optional: java.util.Optional empty()>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(org.springframework.transaction.TransactionDefinition)>-><org.springframework.transaction.TransactionDefinition: int getTimeout()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<sun.misc.Resource: byte[] getBytes()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Vector$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonDouble: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.AbstractSet: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.math.BigDecimal: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonSymbol: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: int hashCode()>
<org.springframework.transaction.support.TransactionSynchronizationManager: java.lang.Object doUnbindResource(java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object remove(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonDbPointer: java.lang.String toString()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><io.netty.util.internal.RecyclableArrayList: boolean addAll(java.util.Collection)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.bson.codecs.IterableCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap,org.bson.Transformer)>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration: void <init>(org.springframework.mail.javamail.JavaMailSenderImpl)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler getTypeHandler(java.lang.reflect.Type,org.apache.ibatis.type.JdbcType)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.ResponseMessagesReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.TypeNameExtractor getTypeNameExtractor()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonBoolean: int hashCode()>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisClusterNode$LinkState: void <clinit>()>-><org.springframework.data.redis.connection.RedisClusterNode$LinkState: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.type.TypeFactory: java.lang.Class findClass(java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.management.openmbean.SimpleType: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration: void <init>()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.HikariConfig: void validate()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder expiry(java.time.Duration)>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated validateChronoUnit(java.lang.String,java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated$Valid valid(java.lang.String,java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.bson.codecs.BsonArrayCodec: void <clinit>()>-><org.bson.codecs.BsonValueCodecProvider: void <init>()>
<io.jsonwebtoken.impl.JwtMap: java.util.Collection values()>-><org.bson.BsonDocument: java.util.Collection values()>
<sun.net.www.protocol.http.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.annotation.DiscoveredServletEndpoint: java.lang.String lambda$new$0(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.amqp.rabbit.connection.RabbitResourceHolder: void addChannel(com.rabbitmq.client.Channel,org.springframework.amqp.rabbit.connection.Connection)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(org.springframework.core.annotation.TypeMappedAnnotations$Aggregate,java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.cglib.core.ClassInfo: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.lettuce.core.internal.AbstractInvocationHandler: java.lang.String toString()>
<org.springframework.data.projection.ProxyProjectionFactory$PropertyAccessingMethodInvokerFactory: void <clinit>()>-><org.springframework.data.projection.ProxyProjectionFactory$PropertyAccessingMethodInvokerFactory: void <init>(java.lang.String,int)>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addGenericArgumentValue(java.lang.Object)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.mongodb.DBRef: int hashCode()>
<com.google.common.collect.MapMakerInternalMap$Strength: void <init>(java.lang.String,int,com.google.common.collect.MapMakerInternalMap$1)>-><com.google.common.collect.MapMakerInternalMap$Strength: void <init>(java.lang.String,int)>
<org.bson.BsonDocument: void putAll(java.util.Map)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.boot.web.embedded.tomcat.TldSkipPatterns: void <clinit>()>-><java.util.LinkedHashSet: void <init>()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonSymbol: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.data.redis.connection.jedis.JedisSubscription: void doUnsubscribe(boolean,byte[][])>
<java.net.URLClassLoader: void close()>-><sun.net.www.http.PosterOutputStream: void close()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration$DataSourceTransactionManagerConfiguration: void <init>()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.google.protobuf.LazyStringArrayList: void <clinit>()>-><com.google.protobuf.LazyStringArrayList: void <init>()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider: void <init>(org.springframework.data.mongodb.core.convert.MappingMongoConverter,org.bson.conversions.Bson,org.springframework.data.mapping.model.SpELExpressionEvaluator,org.springframework.data.mongodb.core.convert.ObjectPath)>-><org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider: void <init>(org.springframework.data.mongodb.core.convert.MappingMongoConverter,org.springframework.data.mongodb.core.convert.DocumentAccessor,org.springframework.data.mapping.model.SpELExpressionEvaluator,org.springframework.data.mongodb.core.convert.ObjectPath)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<sun.misc.Resource: byte[] getBytes()>-><java.net.SocketInputStream: int read(byte[],int,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.text.DigitList: int hashCode()>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><java.util.Spliterators$3Adapter: boolean hasNext()>
<org.apache.ibatis.mapping.CacheBuilder: void setCacheProperties(org.apache.ibatis.cache.Cache)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection _deserializeWithObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.types.MaxKey: int hashCode()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration: void <init>()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat.TomcatMetricsAutoConfiguration: void <init>()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonBoolean: java.lang.String toString()>
<org.apache.ibatis.reflection.wrapper.MapWrapper: void set(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.Character$Subset: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: void <clinit>()>-><sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.channel.ReflectiveChannelFactory: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.internal.Optional: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<java.util.stream.Nodes$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: int hashCode()>
<java.util.stream.ReduceOps$6ReducingSink: void <init>(java.util.function.IntBinaryOperator)>-><java.lang.Object: void <init>()>
<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.util.locale.Extension: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<io.micrometer.core.instrument.config.MeterRegistryConfigValidator: io.micrometer.core.instrument.config.validate.Validated lambda$check$3(java.lang.String,java.util.function.Function,io.micrometer.core.instrument.config.MeterRegistryConfig)>-><java.lang.StringBuilder: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.Validated$Valid: io.micrometer.core.instrument.config.validate.Validated map(java.util.function.Function)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: void <init>(java.lang.String,java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.OptionalInt: java.lang.String toString()>
<org.bson.codecs.MapCodec: void <clinit>()>-><org.bson.codecs.BsonValueCodecProvider: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.types.MaxKey: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.lettuce.core.internal.AbstractInvocationHandler: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CountDownLatch: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineAddresses()>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$DropAsyncSink: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$4(org.bson.Document,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$TertiaryICUComparisonLevel: java.util.Optional getCaseFirst()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<java.util.stream.Nodes: java.util.stream.Node flatten(java.util.stream.Node,java.util.function.IntFunction)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonBinary: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator: void createAndRegisterProperty(org.springframework.data.mapping.model.Property)>-><org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: boolean isAssociation()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: boolean equals(java.lang.Object)>
<java.net.AbstractPlainSocketImpl: void connect(java.net.InetAddress,int)>-><java.net.AbstractPlainSocketImpl: void close()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><javax.security.auth.Subject: java.util.Set getPrincipals()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonJavaScript: int hashCode()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonDateTime: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.asm.ConstantDynamic: int hashCode()>
<java.time.format.ZoneName: void <clinit>()>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonDBPointerCodec: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<io.micrometer.core.instrument.config.MeterRegistryConfigValidator: io.micrometer.core.instrument.config.validate.Validated lambda$check$3(java.lang.String,java.util.function.Function,io.micrometer.core.instrument.config.MeterRegistryConfig)>-><java.lang.StringBuilder: void <init>()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>
<java.util.stream.Nodes$SizedCollectorTask: void <init>(java.util.Spliterator,java.util.stream.PipelineHelper,int)>-><java.util.Spliterators$LongArraySpliterator: long estimateSize()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.core.annotation.SynthesizingMethodParameter: void <init>(java.lang.reflect.Method,int)>-><org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.context.properties.PropertyMapper$Source: boolean lambda$whenHasText$3(java.lang.Object)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map inspectClass(java.lang.Class)>-><java.io.FileInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<java.util.stream.LongPipeline: java.util.stream.Node evaluateToNode(java.util.stream.PipelineHelper,java.util.Spliterator,boolean,java.util.function.IntFunction)>-><java.util.stream.Nodes: java.util.stream.Node$OfLong collectLong(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<java.net.URLClassLoader: void close()>-><com.zaxxer.hikari.HikariDataSource: void close()>
<com.google.common.collect.Collections2: void <clinit>()>-><com.google.common.base.Joiner: com.google.common.base.Joiner useForNull(java.lang.String)>
<org.springframework.data.mongodb.core.index.IndexField: void <init>(java.lang.String,org.springframework.data.domain.Sort$Direction,org.springframework.data.mongodb.core.index.IndexField$Type,java.lang.Float)>-><org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>
<com.mongodb.client.model.geojson.codecs.GeoJsonCodecProvider: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonDateTimeCodec: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver: java.lang.String lambda$resolveIndexForEntity$0(org.springframework.data.mongodb.core.mapping.MongoPersistentEntity)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxCreate$ErrorAsyncSink: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.SignalType: java.lang.String toString()>
<java.util.stream.Streams$ConcatSpliterator: int characteristics()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: int characteristics()>
<org.springframework.data.mapping.model.BeanWrapperPropertyAccessorFactory: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<sun.net.www.protocol.http.HttpURLConnection: java.util.Set schemesListToSet(java.lang.String)>-><java.util.HashSet: boolean add(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder bufferLength(java.lang.Integer)>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig: java.lang.Integer access$702(io.micrometer.core.instrument.distribution.DistributionStatisticConfig,java.lang.Integer)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><reactor.util.Loggers$ConsoleLogger: void error(java.lang.String,java.lang.Throwable)>
<sun.net.www.protocol.http.AuthenticationHeader: void <clinit>()>-><java.lang.String: java.lang.String toLowerCase()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisConnection: org.springframework.dao.DataAccessException convertJedisAccessException(java.lang.Exception)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<com.mongodb.client.model.CollationStrength: void <init>(java.lang.String,int,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: int compareTo(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableCollection: int size()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<java.util.stream.ReferencePipeline: void forEachWithCancel(java.util.Spliterator,java.util.stream.Sink)>-><java.util.stream.Sink$ChainedLong: boolean cancellationRequested()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.IsolationLevel: void <clinit>()>-><com.zaxxer.hikari.util.IsolationLevel: void <init>(java.lang.String,int,int)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.ZoneOffset: java.lang.String toString()>
<org.springframework.data.mongodb.core.convert.QueryMapper: void <clinit>()>-><org.springframework.data.util.ClassTypeInformation: org.springframework.data.util.ClassTypeInformation from(java.lang.Class)>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<io.netty.util.internal.NativeLibraryLoader: void closeQuietly(java.io.Closeable)>-><sun.net.www.MeteredStream: void close()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><java.lang.Object: void <init>()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder percentilesHistogram(java.lang.Boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Throwable: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: int size()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><com.google.common.collect.ForwardingCollection: java.util.Iterator iterator()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<java.util.zip.ZipInputStream: void readFully(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void add(java.util.Collection,byte[][])>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.mapping.model.BasicPersistentEntity: org.springframework.data.mapping.Alias lambda$new$0()>-><org.springframework.data.mapping.model.BasicPersistentEntity: java.lang.Class getType()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder withCacheConfiguration(java.lang.String,org.springframework.data.redis.cache.RedisCacheConfiguration)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Collections$ReverseComparator2: int hashCode()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong flattenLong(java.util.stream.Node$OfLong)>-><java.util.stream.Nodes$ToArrayTask$OfLong: void <init>(java.util.stream.Node$OfLong,long[],int,java.util.stream.Nodes$1)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.plugins.PathAndParametersEquivalence: void <init>()>-><com.google.common.base.Equivalence: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.util.Map mapAnnotations(java.lang.annotation.Annotation[])>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated$Invalid invalid(java.lang.String,java.lang.Object,java.lang.String,io.micrometer.core.instrument.config.validate.InvalidReason)>-><io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated$Invalid invalid(java.lang.String,java.lang.Object,java.lang.String,io.micrometer.core.instrument.config.validate.InvalidReason,java.lang.Throwable)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration: void <init>()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.time.Duration getCommandTimeout()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.time.Duration getCommandTimeout()>
<springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.ConnectableFluxOnAssembly: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><org.bson.BsonArray: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonBinary: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.Package: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.util.calendar.CalendarDate: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.codecs.IterableCodecProvider: int hashCode()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.io.InputStream: void close()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<org.springframework.data.redis.serializer.ByteArrayRedisSerializer: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Handle: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.AbstractList: void removeRange(int,int)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Arrays$ArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<java.util.stream.Nodes$ToArrayTask$OfPrimitive: void copyNodeToArray()>-><java.util.stream.Nodes$LongArrayNode: void copyInto(java.lang.Object,int)>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: io.micrometer.core.instrument.config.validate.Validated map(java.util.function.Function)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode: void <clinit>()>-><org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode: void <init>(java.lang.String,int)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<java.util.stream.Nodes: java.util.stream.Node flatten(java.util.stream.Node,java.util.function.IntFunction)>-><java.util.stream.Nodes$AbstractConcNode: int getChildCount()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.types.MaxKey: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyConnection$ClosedConnection: java.lang.Object lambda$getClosedConnection$0(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>-><java.sql.SQLException: void <init>(java.lang.String)>
<com.zaxxer.hikari.pool.ProxyConnection: void <clinit>()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonBinary: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.SubList: int size()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><org.bson.BsonArray: java.lang.Object[] toArray()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.security.CodeSigner: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonNull: java.lang.String toString()>
<register-finalize <org.springframework.data.mongodb.core.mapping.ShardingStrategy: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonDBPointerCodec: java.lang.Class getEncoderClass()>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$4(org.bson.Document,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$TertiaryICUComparisonLevel: java.util.Optional getCaseLevel()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.Character: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.CodeSigner: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonRegularExpression: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<org.springframework.scheduling.quartz.SchedulerAccessor: void registerJobsAndTriggers()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.data.mongodb.core.index.IndexInfo: int hashCode()>
<sun.misc.Resource: byte[] getBytes()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<javax.security.auth.SubjectDomainCombiner: void <clinit>()>-><javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: boolean isExternalMessageHeaderAllowed(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<io.lettuce.core.masterslave.StaticMasterSlaveConnector: reactor.core.publisher.Mono lambda$connectAsync$0(io.lettuce.core.RedisURI,io.lettuce.core.masterslave.MasterSlaveConnectionProvider,java.util.List)>-><org.bson.BsonArray: boolean isEmpty()>
<org.apache.ibatis.reflection.wrapper.MapWrapper: java.lang.Class getSetterType(java.lang.String)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: int accept(java.lang.reflect.Method)>-><org.bson.BsonArray: boolean isEmpty()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.publisher.FluxOnAssembly: java.lang.String toString()>
<com.zaxxer.hikari.pool.PoolEntry: void <clinit>()>-><java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>-><java.io.InputStream: void close()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.beans.factory.support.NullBean: int hashCode()>
<io.netty.util.internal.NativeLibraryLoader: void closeQuietly(java.io.Closeable)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: boolean addDeferredProperty(java.lang.String,java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.management.MBeanAttributeInfo: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: java.time.Duration lambda$doParse$0(long,long,java.time.temporal.ChronoUnit)>-><java.time.Duration: java.time.Duration dividedBy(long)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode$OfPrimitive: java.util.stream.Node$OfPrimitive getChild(int)>-><java.util.stream.Nodes$AbstractConcNode: java.util.stream.Node getChild(int)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Class: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.nio.NioLoop: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.data.mongodb.util.MongoDbErrorCodes: void <clinit>()>-><java.util.HashMap: void <init>()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.data.redis.connection.jedis.JedisSubscription: void doPUnsubscribe(boolean,byte[][])>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void <init>()>
<com.alibaba.druid.filter.FilterManager: void <clinit>()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.http.HttpEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap)>-><org.springframework.http.HttpHeaders: void putAll(java.util.Map)>
<org.springframework.boot.ResourceBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<com.rabbitmq.client.impl.Frame: long arraySize(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: java.lang.String toString()>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: java.util.Map access$100(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders)>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.io.DataInputStream: short readShort()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean equals(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: int previousIndex()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: int previousIndex()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.BsonArray: int size()>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.annotation.Annotation findAnnotation(java.lang.Class)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void doWithAssociations(org.springframework.data.mapping.SimpleAssociationHandler)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.bson.BsonDocument: void putAll(java.util.Map)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.util.ParameterizedTypeInformation: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Collections$SetFromMap: boolean equals(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: java.lang.annotation.Annotation getMethodAnnotation(java.lang.Class)>-><org.springframework.core.annotation.AnnotatedElementUtils: java.lang.annotation.Annotation findMergedAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.internal.Optional: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.reflect.Constructor: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: java.util.Set schemesListToSet(java.lang.String)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.ClassTypeInformation: java.lang.String toString()>
<org.springframework.web.server.adapter.ForwardedHeaderTransformer: void <clinit>()>-><org.springframework.util.LinkedCaseInsensitiveMap: void <init>(int,java.util.Locale)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.ValidationException: java.lang.String lambda$new$0(io.micrometer.core.instrument.config.validate.Validated$Invalid)>-><java.lang.StringBuilder: void <init>()>
<io.micrometer.core.instrument.simple.SimpleConfig: io.micrometer.core.instrument.simple.CountingMode mode()>-><io.micrometer.core.instrument.config.validate.Validated: java.lang.Object orElse(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<org.springframework.web.util.HtmlUtils: void <clinit>()>-><org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.RawBsonDocument: int hashCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.sql.Timestamp: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.zip.CheckedInputStream: int read()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.management.ImmutableDescriptor: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>(org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$1)>-><org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.net.InetSocketAddress: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.util.function.Tuple2: java.lang.String toString()>
<java.util.Collections$UnmodifiableCollection: java.util.Spliterator spliterator()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Spliterator spliterator()>
<org.bson.AbstractBsonWriter$1: void <clinit>()>-><org.bson.BsonType: org.bson.BsonType[] values()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.RawBsonArray: int hashCode()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder minimumExpectedValue(java.lang.Double)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.google.protobuf.CodedInputStream$ArrayDecoder: void <init>(byte[],int,int,boolean,com.google.protobuf.CodedInputStream$1)>-><com.google.protobuf.CodedInputStream$ArrayDecoder: void <init>(byte[],int,int,boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration: void <init>(org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><org.bson.BsonArray: boolean isEmpty()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: java.lang.String toString()>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Class: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$null$4(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.text.AttributeEntry: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementChildContextConfiguration$ServletManagementContextSecurityConfiguration: void <init>()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.data.domain.Sort: org.springframework.data.domain.Sort$Order lambda$new$0(org.springframework.data.domain.Sort$Direction,java.lang.String)>-><org.springframework.data.domain.Sort$Order: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeMessage(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.boot.autoconfigure.web.ErrorProperties getErrorProperties()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.Double: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: void <init>(int)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonDocument: int hashCode()>
<org.bson.types.Decimal128: void <clinit>()>-><java.math.BigInteger: void <init>(java.lang.String)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.Validated$Invalid: void <init>(java.lang.String,java.lang.Object,java.lang.String,io.micrometer.core.instrument.config.validate.InvalidReason,java.lang.Throwable)>-><java.lang.Object: void <init>()>
<sun.net.ProgressMonitor: void <clinit>()>-><sun.net.DefaultProgressMeteringPolicy: void <init>()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdateStringKeyMap(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.data.util.TypeDiscoverer: org.springframework.data.util.ClassTypeInformation getRawTypeInformation()>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.Class getType()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.Spliterators$LongArraySpliterator: int characteristics()>
<org.springframework.http.server.PathContainer$Options: void <init>(char,boolean)>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isStartTls()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes: void <init>(java.lang.String[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: boolean usePropertyAccess()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.security.ProtectionDomain: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$IgnoreSink: java.lang.String toString()>
<org.springframework.transaction.support.TransactionSynchronizationManager: java.lang.Object doUnbindResource(java.lang.Object)>-><org.bson.Document: boolean isEmpty()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.spel.ExtensionAwareEvaluationContextProvider$ExtensionAwarePropertyAccessor: java.util.stream.Stream lambda$resolve$4(java.lang.String,java.util.List,org.springframework.data.spel.ExtensionAwareEvaluationContextProvider$EvaluationContextExtensionAdapter)>-><org.springframework.data.util.Optionals: java.util.stream.Stream toStream(java.util.Optional[])>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<java.util.zip.ZipInputStream: void readFully(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ExpandedParameterBuilder: void <init>(com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: void <clinit>()>-><sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation$PrimaryICUComparisonLevel: void <init>(boolean)>-><java.util.Optional: java.util.Optional empty()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.EnumMap$1: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<cn.hutool.core.map.MapProxy: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.lettuce.core.internal.AbstractInvocationHandler: java.lang.String toString()>
<java.util.stream.Nodes: java.util.stream.Node flatten(java.util.stream.Node,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode: long count()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonBinary: int hashCode()>
<com.rabbitmq.client.impl.ValueWriter: void writeArray(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<org.bson.json.JsonScanner$NumberState: void <clinit>()>-><org.bson.json.JsonScanner$NumberState: void <init>(java.lang.String,int)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<java.util.zip.GZIPInputStream: int readUByte(java.io.InputStream)>-><sun.net.www.MeteredStream: int read()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$3: void <init>(java.lang.String,int)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow: void <clinit>()>-><org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.jsonwebtoken.impl.JwtMap: java.lang.String toString()>
<sun.misc.URLClassPath$Loader$1: int getContentLength()>-><java.net.URLConnection: int getContentLength()>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><java.lang.Object: void <init>()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><com.google.common.collect.ForwardingCollection: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.node.NullNode: int hashCode()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<com.zaxxer.hikari.SQLExceptionOverride$Override: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonInt32: int hashCode()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.cluster.ClusterClientOptions getClusterClientOptions(org.springframework.data.redis.connection.RedisConfiguration$ClusterConfiguration)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientOptions()>
<java.util.stream.LongPipeline$StatelessOp: void <init>(java.util.stream.AbstractPipeline,java.util.stream.StreamShape,int)>-><java.util.stream.LongPipeline: void <init>(java.util.stream.AbstractPipeline,int)>
<java.util.Collections$SynchronizedMap: java.lang.Object remove(java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.lettuce.core.metrics.CommandMetrics: java.lang.String toString()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><org.bson.BsonArray: boolean addAll(java.util.Collection)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<jdk.internal.util.xml.impl.ReaderUTF8: int read(char[],int,int)>-><java.io.BufferedInputStream: int read()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.management.MBeanParameterInfo: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.convert.DefaultConverterBuilder$ConfigurableGenericConverter: boolean equals(java.lang.Object)>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonMinKeyCodec: java.lang.Class getEncoderClass()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions collation(com.mongodb.client.model.Collation)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.SignalType: java.lang.String toString()>
<org.springframework.beans.propertyeditors.CustomMapEditor: void setValue(java.lang.Object)>-><org.bson.BsonDocument: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>-><java.util.concurrent.Executors$DelegatedScheduledExecutorService: void <init>(java.util.concurrent.ScheduledExecutorService)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><reactor.util.Loggers$JdkLogger: void error(java.lang.String,java.lang.Throwable)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonMinKey: java.lang.String toString()>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><cn.hutool.core.date.DateTime: java.lang.String toString()>
<sun.net.ProgressMonitor: void <init>()>-><java.lang.Object: void <init>()>
<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.bson.codecs.BsonDocumentCodec: void <clinit>()>-><org.bson.codecs.configuration.CodecRegistries: org.bson.codecs.configuration.CodecRegistry fromProviders(org.bson.codecs.configuration.CodecProvider[])>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void <clinit>()>-><java.util.Random: void <init>()>
<cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>-><java.util.Vector: boolean isEmpty()>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.mongodb.client.model.Collation: void <init>(com.mongodb.client.model.Collation$Builder)>-><java.lang.Object: void <init>()>
<org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: void <init>(java.lang.String)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: void <init>(java.lang.String,java.lang.Float)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: java.lang.Object next()>
<org.bson.codecs.jsr310.Jsr310CodecProvider: void <clinit>()>-><org.bson.codecs.jsr310.LocalDateTimeCodec: void <init>()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void doWithAssociations(org.springframework.data.mapping.SimpleAssociationHandler)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.codecs.ValueCodecProvider: int hashCode()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><springfox.documentation.spring.web.DocumentationCache: void <init>()>
<sun.security.util.Password: char[] readPassword(java.io.InputStream,boolean)>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<org.springframework.data.mongodb.core.index.IndexField$Type: void <clinit>()>-><org.springframework.data.mongodb.core.index.IndexField$Type: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.util.BuddhistCalendar: int hashCode()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><sun.net.www.http.ChunkedInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<com.github.pagehelper.autoconfigure.PageHelperAutoConfiguration: void <init>()>-><com.google.protobuf.LazyStringArrayList: void <init>()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory: void lambda$hasUniquePropertyHashCodes$1(java.util.Set,java.util.concurrent.atomic.AtomicInteger,org.springframework.data.mapping.PersistentProperty)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.internal.Optional: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.JwtMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object remove(java.lang.Object)>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.Property: java.lang.String getName()>-><org.springframework.data.util.Lazy: java.lang.Object get()>
<java.util.stream.LongPipeline$StatelessOp: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver: void resolveAndAddIndexesForAssociation(org.springframework.data.mapping.Association,java.util.List,java.lang.String,java.lang.String)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<jdk.internal.util.xml.impl.ReaderUTF16: int read(char[],int,int)>-><sun.net.www.MeteredStream: int read()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.bson.Document: java.util.Set entrySet()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<java.lang.CharSequence$1CharIterator: void forEachRemaining(java.util.function.IntConsumer)>-><java.util.stream.ReduceOps$6ReducingSink: void accept(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Package: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<jdk.internal.util.xml.impl.Parser: java.io.Reader bom(java.io.InputStream,char)>-><java.io.BufferedInputStream: int read()>
<org.springframework.context.expression.MapAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><org.bson.RawBsonDocument: boolean containsKey(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.rabbitmq.client.impl.nio.NioLoop: void run()>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.beans.factory.support.GenericBeanDefinition: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.rabbitmq.client.UnknownClassOrMethodId: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<java.security.ProtectionDomain: java.security.PermissionCollection mergePermissions()>-><javax.security.auth.kerberos.KrbServicePermissionCollection: java.util.Enumeration elements()>
<org.springframework.web.servlet.handler.MappedInterceptor: void <init>(java.lang.String[],java.lang.String[],org.springframework.web.servlet.HandlerInterceptor)>-><java.lang.Object: void <init>()>
<org.springframework.data.spel.ExtensionAwareEvaluationContextProvider$EvaluationContextExtensionAdapter: void <init>(org.springframework.data.spel.spi.EvaluationContextExtension,org.springframework.data.spel.EvaluationContextExtensionInformation)>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Locale: java.lang.String toString()>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: void <clinit>()>-><java.util.HashSet: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><cn.hutool.json.JSONNull: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Character: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: void <clinit>()>-><org.springframework.core.OrderComparator: java.util.Comparator withSourceProvider(org.springframework.core.OrderComparator$OrderSourceProvider)>
<org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void visit(com.sun.jmx.mbeanserver.MBeanAnalyzer$MBeanVisitor)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: java.lang.String toString()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<java.util.stream.LongPipeline$StatefulOp: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties: java.lang.String lambda$resolveConfigLocation$0()>-><java.lang.StringBuilder: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration: void <init>(org.mybatis.spring.boot.autoconfigure.MybatisProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonJavaScriptWithScope: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxCreate$DropAsyncSink: java.lang.String toString()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.internal.Optional: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<io.micrometer.core.util.internal.logging.AbstractInternalLogger: void <init>(java.lang.String)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
<io.micrometer.core.instrument.binder.system.FileDescriptorMetrics: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.AttributeEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.domain.Sort$Order: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String,boolean,org.springframework.data.domain.Sort$NullHandling)>-><java.lang.Object: void <init>()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.RawBsonDocument: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.util.concurrent.Executors$PrivilegedThreadFactory: void <init>()>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.Instant: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.bootstrap.AbstractBootstrap: java.lang.String toString()>
<com.rabbitmq.client.impl.nio.NioLoop: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.SubList$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.LocalTime: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Date: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.Integer: int hashCode()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.types.Decimal128: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void _decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.lettuce.core.protocol.CommandArgs$CharArrayArgument: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>-><sun.net.www.MeteredStream: void close()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.web.context.support.ServletContextResource: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.spi.SimpleRuleStore: void addRule(ch.qos.logback.core.joran.spi.ElementSelector,ch.qos.logback.core.joran.action.Action)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.SocketImpl: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: boolean cachePolicy()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator: void createAndRegisterProperty(org.springframework.data.mapping.model.Property)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: java.lang.Iterable getPersistentEntityTypes()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity$MongoPersistentPropertyComparator: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.AutowireCapableBeanFactory getAutowireCapableBeanFactory()>-><org.springframework.context.support.StaticApplicationContext: void assertBeanFactoryActive()>
<org.apache.ibatis.builder.xml.XMLMapperBuilder: void parsePendingResultMaps()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: void remove()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<org.bson.BsonType: void <init>(java.lang.String,int,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.time.Duration getCommandTimeout()>
<org.springframework.data.mongodb.core.MongoTemplate: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<reactor.core.publisher.FluxIterable: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><org.bson.BsonArray: int size()>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.JwtMap: java.util.Date toDate(java.lang.Object,java.lang.String)>-><org.bson.types.Decimal128: long longValue()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.util.Pair: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Optional: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><java.lang.Object: void <init>()>
<java.text.SimpleDateFormat: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>-><org.bson.types.Decimal128: long longValue()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.bson.Document: java.util.Set entrySet()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase: com.fasterxml.jackson.databind.JsonDeserializer _findDeserializer(com.fasterxml.jackson.databind.DeserializationContext,java.lang.String)>-><org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<cn.hutool.core.map.MapProxy: java.util.Collection values()>-><org.bson.RawBsonDocument: java.util.Collection values()>
<jdk.internal.util.xml.impl.ReaderUTF8: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.Pair: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonDouble: java.lang.String toString()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean isReadable()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<java.net.URLConnection: int getContentLength()>-><java.net.URLConnection: long getContentLengthLong()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: void forEach(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList: void forEach(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.types.Code: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.util.ResolvedTypeCache: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration: void <init>()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Set removeBindingsWithDestination(java.lang.String)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map,boolean,java.util.Locale)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><java.lang.String: int indexOf(int,int)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.Document: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.MeterRegistryConfigValidator: io.micrometer.core.instrument.config.validate.Validated lambda$check$3(java.lang.String,java.util.function.Function,io.micrometer.core.instrument.config.MeterRegistryConfig)>-><io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated$Valid valid(java.lang.String,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void subscribePattern(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void pSubscribe(byte[][])>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.node.DoubleNode: int hashCode()>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.MongoTemplate: void <clinit>()>-><java.util.HashSet: void <init>()>
<jdk.internal.util.xml.impl.ReaderUTF8: int read()>-><sun.net.www.MeteredStream: int read()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.TypeNameExtractor getTypeNameExtractor()>
<sun.awt.DebugSettings: void loadSystemProperties()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><java.io.BufferedInputStream: void close()>
<ch.qos.logback.core.joran.action.ConversionRuleAction: void begin(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String,org.xml.sax.Attributes)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.util.locale.provider.RuleBasedBreakIterator: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonMaxKey: int hashCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<register-finalize <java.io.FileWriter: void <init>(java.io.File,boolean)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.wrapper.MapWrapper: java.lang.Class getSetterType(java.lang.String)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonString: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<com.zaxxer.hikari.util.SuspendResumeLock$1: void <init>(boolean)>-><com.zaxxer.hikari.util.SuspendResumeLock: void <init>(boolean,com.zaxxer.hikari.util.SuspendResumeLock$1)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><java.lang.String: java.lang.String substring(int)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.io.File: boolean isFile()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonArray: java.lang.String toString()>
<com.zaxxer.hikari.util.ConcurrentBag: java.util.List lambda$new$0()>-><java.util.ArrayList: void <init>(int)>
<com.rabbitmq.client.impl.Frame: long tableSize(java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void visit(com.sun.jmx.mbeanserver.MBeanAnalyzer$MBeanVisitor)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Vector: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.crypto.password.Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm: void <clinit>()>-><org.springframework.security.crypto.password.Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.node.DoubleNode: boolean equals(java.lang.Object)>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonRegularExpressionCodec: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.http.server.PathContainer: org.springframework.http.server.PathContainer parsePath(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>
<org.springframework.data.redis.connection.RedisStandaloneConfiguration: java.lang.String lambda$setDatabase$1(int)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.data.redis.connection.RedisStringCommands$SetOption: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.github.pagehelper.autoconfigure.PageHelperProperties: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<org.springframework.data.mongodb.core.index.IndexField: void <init>(java.lang.String,org.springframework.data.domain.Sort$Direction,org.springframework.data.mongodb.core.index.IndexField$Type,java.lang.Float)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.cluster.ClusterClientOptions getClusterClientOptions(org.springframework.data.redis.connection.RedisConfiguration$ClusterConfiguration)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientOptions()>
<java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineAddresses()>-><org.springframework.util.StringUtils: java.lang.String collectionToCommaDelimitedString(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.internal.Optional: java.lang.String toString()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale,java.lang.Boolean)>-><com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale,java.lang.Boolean,boolean)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: java.lang.String lambda$new$0(int)>-><java.lang.StringBuilder: void <init>()>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonMaxKeyCodec: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.Integer: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonDocument: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.fasterxml.jackson.databind.deser.DefaultDeserializationContext: void checkUnresolvedObjectId()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasPrevious()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: int previousIndex()>
<java.util.Collections$UnmodifiableMap: java.util.Collection values()>-><org.bson.BsonDocument: java.util.Collection values()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory: boolean isTypeInjectable(org.springframework.data.mapping.PersistentEntity)>-><java.lang.String: boolean startsWith(java.lang.String)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ThreadPoolExecutor: boolean isTerminated()>-><java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>
<java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<cn.hutool.core.convert.impl.PrimitiveConverter: java.lang.Object convertInternal(java.lang.Object)>-><org.bson.types.Decimal128: double doubleValue()>
<org.bson.json.ExtendedJsonUndefinedConverter: void <init>()>-><java.lang.Object: void <init>()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.Parsed: java.lang.String toString()>
<org.bson.BsonBinarySubType: void <clinit>()>-><org.bson.BsonBinarySubType: void <init>(java.lang.String,int,byte)>
<jdk.internal.util.xml.impl.ReaderUTF16: int read(char[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.ParsePosition: java.lang.String toString()>
<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String toJavaUncached0(java.lang.String,boolean)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonMaxKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<register-finalize <com.zaxxer.hikari.util.UtilityElf: java.util.concurrent.ThreadPoolExecutor createThreadPoolExecutor(java.util.concurrent.BlockingQueue,java.lang.String,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Short: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: java.time.Duration lambda$doParse$0(long,long,java.time.temporal.ChronoUnit)>-><java.time.Duration: java.time.Duration of(long,java.time.temporal.TemporalUnit)>
<com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.util.LazyStreamable: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<io.jsonwebtoken.impl.JwtMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonMinKey: java.lang.String toString()>
<org.springframework.data.mongodb.core.index.IndexField: void <init>(java.lang.String,org.springframework.data.domain.Sort$Direction,org.springframework.data.mongodb.core.index.IndexField$Type,java.lang.Float)>-><java.lang.Float: float floatValue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<org.apache.catalina.core.StandardWrapperValve: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.ZonedDateTime: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonRegularExpression: int hashCode()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><org.bson.BsonArray: int size()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<org.apache.ibatis.mapping.CacheBuilder: void setCacheProperties(org.apache.ibatis.cache.Cache)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.types.MinKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.OptionalInt: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.InetSocketAddress: java.lang.String toString()>
<java.lang.ThreadGroup: void <init>(java.lang.String)>-><java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.util.TypeInformation: org.springframework.data.util.TypeInformation getRequiredProperty(java.lang.String)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<register-finalize <com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.redis.core.StringRedisTemplate: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.core.RedisAccessor: void setConnectionFactory(org.springframework.data.redis.connection.RedisConnectionFactory)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.bson.BsonDocument: void putAll(java.util.Map)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<java.util.stream.LongPipeline$StatelessOp: void <init>(java.util.stream.AbstractPipeline,java.util.stream.StreamShape,int)>-><java.lang.AssertionError: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.druid.support.logging.LogFactory: void <clinit>()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonInt32Codec: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.util.ParameterizedTypeInformation: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.util.ClassUtil: void throwAsIAE(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonTimestamp: int hashCode()>
<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: void <clinit>()>-><java.util.Collections: java.util.Set emptySet()>
<org.bson.codecs.MapCodecProvider: void <init>()>-><org.bson.codecs.MapCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap)>
<org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: int accept(java.lang.reflect.Method)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.text.FieldPosition: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: void afterNodeInsertion(boolean)>-><org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.DateCodec: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonNull: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: java.lang.String toString()>
<sun.awt.DebugSettings: void loadSystemProperties()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.servlet.WebMvcEndpointChildContextConfiguration: void <init>()>
<com.zaxxer.hikari.util.SuspendResumeLock: void <init>(boolean,com.zaxxer.hikari.util.SuspendResumeLock$1)>-><com.zaxxer.hikari.util.SuspendResumeLock: void <init>(boolean)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getPatterns()>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: int hashCode()>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getEnum(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.Class,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<sun.misc.Resource: byte[] getBytes()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<io.netty.util.internal.NativeLibraryLoader: boolean patchShadedLibraryId(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: void <clinit>()>-><java.util.HashSet: void <init>(java.util.Collection)>
<org.apache.catalina.core.ApplicationFilterConfig: javax.servlet.ServletContext getServletContext()>-><org.apache.catalina.startup.FailedContext: javax.servlet.ServletContext getServletContext()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.mongodb.client.gridfs.model.GridFSFile: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<java.util.zip.GZIPInputStream: boolean readTrailer()>-><sun.net.www.http.ChunkedInputStream: int available()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.StringBuffer: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.text.DecimalFormat: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<java.util.stream.ReduceOps$ReduceTask: java.util.stream.ReduceOps$AccumulatingSink doLeaf()>-><java.util.stream.ReduceOps$1: java.util.stream.ReduceOps$AccumulatingSink makeSink()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.ProxyCreatorSupport: void adviceChanged()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: void <init>(java.lang.String)>-><groovy.lang.GroovyObjectSupport: void <init>()>
<springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <clinit>()>-><springfox.documentation.spring.web.plugins.PathAndParametersEquivalence: void <init>()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.transaction.support.TransactionSynchronizationManager: java.lang.Object doUnbindResource(java.lang.Object)>-><org.bson.BsonDocument: boolean isEmpty()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.slf4j.event.Level: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.PropertyValidator: java.lang.String lambda$getEnum$0(java.lang.Enum)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: boolean addDeferredProperty(java.lang.String,java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.web.debug.DebugRequestWrapper: void <clinit>()>-><org.springframework.security.web.debug.Logger: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration: void <init>()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void unsubscribePattern(byte[][])>-><org.springframework.data.redis.connection.jedis.JedisConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.PoolEntry: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>
<org.bson.Document: java.lang.String toJson()>-><org.bson.json.JsonWriterSettings$Builder: org.bson.json.JsonWriterSettings$Builder outputMode(org.bson.json.JsonMode)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<java.util.Collections$UnmodifiableList$1: boolean hasNext()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.Document: int size()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<org.springframework.data.spel.ExtensionAwareEvaluationContextProvider: org.springframework.data.spel.ExtensionAwareEvaluationContextProvider$EvaluationContextExtensionAdapter lambda$toAdapters$2(org.springframework.data.spel.spi.EvaluationContextExtension)>-><org.springframework.data.spel.ExtensionAwareEvaluationContextProvider$EvaluationContextExtensionAdapter: void <init>(org.springframework.data.spel.spi.EvaluationContextExtension,org.springframework.data.spel.EvaluationContextExtensionInformation)>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><sun.net.www.MeteredStream: void close()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<org.springframework.data.mongodb.core.IndexConverters: void <clinit>()>-><org.springframework.data.mongodb.core.IndexConverters: org.springframework.core.convert.converter.Converter getIndexDefinitionIndexOptionsConverter()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<com.rabbitmq.client.impl.Frame: long tableSize(java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><sun.net.ProgressSource: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonArray: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<org.bson.json.JsonScanner$1: void <clinit>()>-><org.bson.json.JsonScanner$RegularExpressionState: org.bson.json.JsonScanner$RegularExpressionState[] values()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.CountDownLatch: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.lang.Double: double doubleValue()>
<org.springframework.data.redis.connection.jedis.JedisConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><redis.clients.jedis.Jedis: void subscribe(redis.clients.jedis.BinaryJedisPubSub,byte[][])>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<org.bson.codecs.BsonValueCodecProvider: void <clinit>()>-><java.util.HashMap: void <init>()>
<java.util.stream.ReduceOps$ReduceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.ReduceOps$1ReducingSink: void combine(java.util.stream.ReduceOps$AccumulatingSink)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.redis.connection.RedisNode: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pSubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void add(java.util.Collection,byte[][])>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void visit(com.sun.jmx.mbeanserver.MBeanAnalyzer$MBeanVisitor)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.JdkLogger: void <init>(java.util.logging.Logger)>-><io.micrometer.core.util.internal.logging.AbstractInternalLogger: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonDateTime: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: int hashCode()>
<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.AbstractMap$SimpleEntry: int hashCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.availability.LivenessState: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>-><io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void debug(java.lang.String)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonDouble: java.lang.String toString()>
<org.bson.Document: java.lang.String toJson(org.bson.json.JsonWriterSettings,org.bson.codecs.Encoder)>-><org.bson.codecs.EncoderContext$Builder: org.bson.codecs.EncoderContext build()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$SingletonList: int size()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isUseSsl()>
<org.springframework.amqp.rabbit.connection.RabbitResourceHolder: void addChannel(com.rabbitmq.client.Channel,org.springframework.amqp.rabbit.connection.Connection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.text.ParsePosition: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.crypto.CryptoPermission: int hashCode()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<reactor.core.publisher.Flux: reactor.core.publisher.Flux onAssembly(reactor.core.publisher.Flux)>-><java.util.stream.ReduceOps$6ReducingSink: java.lang.Object get()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonBoolean: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Locale: int hashCode()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonDbPointer: int hashCode()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonBinary: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.types.Decimal128: java.lang.String toString()>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: void <init>(org.springframework.boot.autoconfigure.data.redis.RedisProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<org.springframework.data.mapping.model.BasicPersistentEntity: org.springframework.data.mapping.Alias getAliasFromAnnotation(java.lang.Class)>-><java.util.Optional: java.util.Optional map(java.util.function.Function)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.Vector: java.util.Iterator iterator()>
<org.springframework.http.HttpEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap)>-><org.springframework.http.HttpHeaders: org.springframework.http.HttpHeaders readOnlyHttpHeaders(org.springframework.http.HttpHeaders)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.metrics.dropwizard.CodahaleHealthChecker: boolean lambda$registerHealthChecks$0(com.zaxxer.hikari.HikariConfig,java.lang.String,com.codahale.metrics.Metric)>-><com.codahale.metrics.MetricRegistry: java.lang.String name(java.lang.String,java.lang.String[])>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object previous()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasPrevious()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.asm.Type: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.BitSet: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.Vector: int size()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.management.MBeanConstructorInfo: int hashCode()>
<org.bson.codecs.BsonJavaScriptCodec: void <init>()>-><java.lang.Object: void <init>()>
<io.lettuce.core.RedisConnectionException: io.lettuce.core.RedisConnectionException create(java.lang.String,java.lang.Throwable)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.apache.ibatis.type.TypeReference: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.Boolean: int hashCode()>
<com.sun.net.httpserver.Headers: void add(java.lang.String,java.lang.String)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<org.springframework.core.type.classreading.SimpleMetadataReader: org.springframework.asm.ClassReader getClassReader(org.springframework.core.io.Resource)>-><java.net.SocketInputStream: void close()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong flattenLong(java.util.stream.Node$OfLong)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList$Itr: boolean hasNext()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanInfo: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: boolean usePropertyAccess()>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: boolean usePropertyAccess()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><org.springframework.util.ClassUtils: java.util.Set findMethodCandidatesByName(java.lang.Class,java.lang.String)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.LongPipeline$8: void <init>(java.util.stream.LongPipeline,java.util.stream.AbstractPipeline,java.util.stream.StreamShape,int,java.util.function.LongPredicate)>-><java.util.stream.LongPipeline$StatelessOp: void <init>(java.util.stream.AbstractPipeline,java.util.stream.StreamShape,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonBoolean: java.lang.String toString()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.util.MimeType: int hashCode()>
<java.util.concurrent.Executors$PrivilegedThreadFactory: void <init>()>-><java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<org.springframework.data.mapping.model.AbstractPersistentProperty: boolean usePropertyAccess()>-><org.springframework.data.util.Lazy: java.lang.Object get()>
<org.springframework.boot.autoconfigure.AutoConfigurationPackages: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber,java.util.Iterator,boolean,java.lang.Runnable)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: boolean patchShadedLibraryId(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>-><java.util.ArrayList: void <init>()>
<org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator: void createAndRegisterProperty(org.springframework.data.mapping.model.Property)>-><org.springframework.data.mapping.model.BasicPersistentEntity: void addAssociation(org.springframework.data.mapping.Association)>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.util.Lazy: org.springframework.data.util.Lazy of(java.util.function.Supplier)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.amqp.rabbit.connection.CachingConnectionFactory$ChannelCachingConnectionProxy: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamField: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$UrlHandlerMappingDescriptionProvider: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum findEnum(java.lang.String)>-><org.bson.BsonArray: boolean contains(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String toJson(org.bson.Document)>-><org.springframework.data.mongodb.util.BsonUtils: java.lang.String toJson(java.lang.Object)>
<org.springframework.boot.ImageBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<register-finalize <org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.google.protobuf.RepeatedFieldBuilderV3: void <init>(java.util.List,boolean,com.google.protobuf.AbstractMessage$BuilderParent,boolean)>-><java.lang.Object: void <init>()>
<cn.hutool.core.bean.copier.provider.MapValueProvider: boolean containsKey(java.lang.String)>-><org.bson.BsonDocumentWrapper: boolean containsKey(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$SubscriptionPresentCondition eventuallyPerformSubscription()>-><org.springframework.data.redis.connection.jedis.JedisConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: void <init>(java.lang.String,java.util.List)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<org.apache.ibatis.builder.xml.XMLMapperBuilder: void parsePendingCacheRefs()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.rabbitmq.client.impl.AMQChannel: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.data.mongodb.core.index.IndexInfo: int hashCode()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.publisher.Flux: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdateStringKeyMap(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.bson.BsonArray: void add(int,org.bson.BsonValue)>-><java.util.ArrayList: void add(int,java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: boolean isSubscribed()>
<org.bson.BsonArray: void add(int,java.lang.Object)>-><org.bson.BsonArray: void add(int,org.bson.BsonValue)>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<java.util.IdentityHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.SubList: java.lang.Object get(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: float getFloatValue()>-><org.bson.types.Decimal128: float floatValue()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$4(org.bson.Document,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.bson.Document: org.bson.Document append(java.lang.String,java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<org.bson.Document: java.lang.String toJson(org.bson.json.JsonWriterSettings,org.bson.codecs.Encoder)>-><org.bson.codecs.DocumentCodec: void encode(org.bson.BsonWriter,java.lang.Object,org.bson.codecs.EncoderContext)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: java.lang.Object next()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>-><sun.security.action.GetBooleanAction: void <init>(java.lang.String)>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.http.server.PathContainer$Options: void <clinit>()>-><org.springframework.http.server.PathContainer$Options: org.springframework.http.server.PathContainer$Options create(char,boolean)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: java.lang.Object next()>
<io.jsonwebtoken.impl.JwtMap: void setDate(java.lang.String,java.util.Date)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.security.util.DerValue: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.jar.Attributes$Name: int hashCode()>
<java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.Collation fromDocument(org.bson.Document)>-><org.springframework.data.mongodb.core.query.Collation: org.springframework.data.mongodb.core.query.Collation from(org.bson.Document)>
<io.netty.util.internal.NativeLibraryLoader: void closeQuietly(java.io.Closeable)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<javax.security.auth.Subject: void <init>()>-><java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonTimestamp: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<reactor.core.publisher.Operators: void lambda$onDiscardMultiple$4(java.util.function.Consumer,java.lang.Object)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.RDN: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.RedisSubscribedConnectionException: void <init>(java.lang.String)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions sphereVersion(java.lang.Integer)>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.LinkedList: java.lang.Object[] toArray()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<sun.net.httpserver.ChunkedInputStream: int readChunkHeader()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: int hashCode()>
<reactor.core.scheduler.Schedulers: java.lang.Object scanExecutor(java.util.concurrent.Executor,reactor.core.Scannable$Attr)>-><java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.apache.ibatis.io.Resources: java.util.Properties getUrlAsProperties(java.lang.String)>-><java.net.SocketInputStream: void close()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.util.MimeType: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ShellMaxKeyConverter: void <init>()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: boolean addAll(java.util.Collection)>
<org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter: java.util.Map lambda$new$0(javax.servlet.http.HttpServletRequest)>-><java.util.Collections: java.util.Map emptyMap()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: java.lang.Object get(int)>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.MaxKeyCodec: java.lang.Class getEncoderClass()>
<org.springframework.boot.actuate.info.InfoPropertiesInfoContributor: void <clinit>()>-><org.springframework.boot.context.properties.bind.Bindable: org.springframework.boot.context.properties.bind.Bindable mapOf(java.lang.Class,java.lang.Class)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.Object: void <init>()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.aop.support.AbstractPointcutAdvisor: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.http.HttpStatus: int value()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<org.bson.types.Decimal128: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<com.google.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>-><java.lang.StringBuilder: void <init>(int)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.data.domain.Sort$Direction: org.springframework.data.domain.Sort$Direction[] values()>-><java.lang.Object: java.lang.Object clone()>
<java.util.stream.Node$OfPrimitive: java.lang.Object[] asArray(java.util.function.IntFunction)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$2: void setVariable(java.lang.String,java.lang.Object)>
<java.util.stream.Nodes$CollectionNode: java.util.Spliterator spliterator()>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.DigitList: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.ZonedDateTime: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisNode: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.lang.String: boolean endsWith(java.lang.String)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.String lambda$createEndpointBeans$0(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean,org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.util.Set schemesListToSet(java.lang.String)>-><java.util.HashSet: void <init>()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<java.io.DataOutputStream: void writeBoolean(boolean)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.type.ClassKey: int hashCode()>
<sun.awt.DebugSettings: void loadSystemProperties()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void initMaps(java.lang.Class,com.sun.jmx.mbeanserver.MBeanIntrospector)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<org.apache.ibatis.reflection.wrapper.MapWrapper: java.lang.Object get(org.apache.ibatis.reflection.property.PropertyTokenizer)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder maximumSize(long)>-><com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>
<java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.Duration: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$LatestAsyncSink: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.amqp.rabbit.connection.CachingConnectionFactory: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator$2: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated$Valid valid(java.lang.String,java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.UUID: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<java.util.Currency$1: java.lang.Void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: int hashCode()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<sun.security.x509.X509CertImpl: java.util.Collection cloneAltNames(java.util.Collection)>-><org.bson.BsonArray: java.lang.Object get(int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.JumboEnumSet: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Integer: java.lang.String toString()>
<com.mongodb.client.model.Collation$Builder: void <init>(com.mongodb.client.model.Collation$1)>-><com.mongodb.client.model.Collation$Builder: void <init>()>
<com.mongodb.DBObjectCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap)>-><com.mongodb.assertions.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isStartTls()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.apache.ibatis.type.TypeReference: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.PatternEntry: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><cn.hutool.core.date.format.FastDatePrinter$TimeZoneDisplayKey: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.concurrent.Executors$PrivilegedThreadFactory: void <init>()>-><java.security.AccessController: java.security.AccessControlContext getContext()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonElement: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest)>-><org.springframework.web.context.request.ServletRequestAttributes: void <init>(javax.servlet.http.HttpServletRequest)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.awt.Point: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$null$4(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.ForEachOps$ForEachOrderedTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.SpinedBuffer$OfLong: void forEach(java.util.function.Consumer)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$4(org.bson.Document,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$PrimaryICUComparisonLevel: java.util.Optional getCaseLevel()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.mongodb.client.model.geojson.GeometryCollection: int hashCode()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.bson.json.JsonTokenType: void <clinit>()>-><org.bson.json.JsonTokenType: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.convert.CustomConversions$StoreConversions: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.StackTraceElement: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<io.netty.util.internal.NativeLibraryLoader: boolean patchShadedLibraryId(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String)>-><sun.net.www.MeteredStream: int available()>
<org.springframework.web.servlet.FrameworkServlet: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><sun.net.www.MeteredStream: void close()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<sun.net.www.http.HttpClient: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<java.util.stream.Nodes: java.util.stream.Node$OfLong flattenLong(java.util.stream.Node$OfLong)>-><java.util.stream.Nodes$LongArrayNode: long count()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: void finalizeDeferredProperties()>-><org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$DeferredProperty: void apply()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.publisher.Flux: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.redis.connection.RedisNode: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.HashMap$Node: java.lang.String toString()>
<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory: boolean isTypeInjectable(org.springframework.data.mapping.PersistentEntity)>-><java.lang.Package: java.lang.String getName()>
<org.springframework.data.redis.serializer.RedisSerializerToSerializationPairAdapter: void <clinit>()>-><org.springframework.data.redis.serializer.RedisSerializerToSerializationPairAdapter: void <init>(org.springframework.data.redis.serializer.RedisSerializer)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonObjectId: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.http.HttpURLConnection: void setRequestMethod(java.lang.String)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<org.apache.ibatis.builder.xml.XMLConfigBuilder: java.util.Properties settingsAsProperties(org.apache.ibatis.parsing.XNode)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>-><java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.types.Symbol: java.lang.String toString()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.awt.image.ColorModel: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.AbstractCollection: java.lang.String toString()>
<org.springframework.context.support.StaticApplicationContext: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: void registerSingleton(java.lang.String,java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><java.lang.Enum: int ordinal()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.sql.Timestamp: boolean equals(java.lang.Object)>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.mongodb.client.model.geojson.Polygon: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.types.Code: java.lang.String toString()>
<java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.util.ClassKey: void <init>(java.lang.Class)>
<sun.net.NetworkClient$1: void <init>(int[],java.lang.String[])>-><java.lang.Object: void <init>()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder customizers(java.util.Collection)>-><org.springframework.boot.web.client.RestTemplateBuilder: java.util.Set copiedSetOf(java.util.Collection)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void checkPulse()>-><org.springframework.data.redis.connection.util.AbstractSubscription: boolean isAlive()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.lettuce.core.event.metrics.CommandLatencyEvent: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.util.context.ContextN: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.ZoneId: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.util.ParameterizedTypeInformation: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.apache.ibatis.io.ResolverUtil: void addIfMatching(org.apache.ibatis.io.ResolverUtil$Test,java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<springfox.documentation.spring.web.readers.parameter.ParameterTypeReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.Document: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: void <init>(org.springframework.http.HttpStatus,java.lang.String)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<org.apache.ibatis.builder.annotation.MapperAnnotationBuilder: java.util.Optional getAnnotationWrapper(java.lang.reflect.Method,boolean,java.util.Collection)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter: void <clinit>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.AbstractSet: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <clinit>()>-><org.springframework.web.bind.annotation.RequestMethod: org.springframework.web.bind.annotation.RequestMethod[] values()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<java.util.stream.SpinedBuffer$OfInt: void arrayForEach(int[],int,int,java.util.function.IntConsumer)>-><java.util.stream.ReduceOps$6ReducingSink: void accept(int)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonInt32: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthScheme: void <clinit>()>-><sun.net.www.protocol.http.AuthScheme: void <init>(java.lang.String,int)>
<io.jsonwebtoken.impl.JwtMap: void setDate(java.lang.String,java.util.Date)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.util.unit.DataSize: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.actuate.health.Health$Builder: org.springframework.boot.actuate.health.Health build()>-><org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder,org.springframework.boot.actuate.health.Health$1)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyLeakTask: void <init>(com.zaxxer.hikari.pool.ProxyLeakTask$1)>-><com.zaxxer.hikari.pool.ProxyLeakTask: void <init>()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.bson.BsonArray: int size()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.SubList$1: boolean hasNext()>
<ch.qos.logback.core.joran.spi.SimpleRuleStore: void addRule(ch.qos.logback.core.joran.spi.ElementSelector,ch.qos.logback.core.joran.action.Action)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<java.net.Socket: java.net.InetAddress getInetAddress()>-><java.net.HttpConnectSocketImpl: java.net.InetAddress getInetAddress()>
<com.google.protobuf.LazyStringArrayList: void <clinit>()>-><com.google.protobuf.AbstractProtobufList: void makeImmutable()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.MeterRegistryConfigValidator: io.micrometer.core.instrument.config.validate.Validated lambda$check$3(java.lang.String,java.util.function.Function,io.micrometer.core.instrument.config.MeterRegistryConfig)>-><io.micrometer.core.instrument.simple.SimpleConfig: java.lang.String prefix()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<java.util.Comparator: java.util.Comparator nullsLast(java.util.Comparator)>-><java.util.Comparators$NullComparator: void <init>(boolean,java.util.Comparator)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.mongodb.DBRef: int hashCode()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<com.google.common.base.Absent: void <init>()>-><com.google.common.base.Optional: void <init>()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String,java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<java.util.ArrayList$SubList$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.io.ObjectStreamField: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection _deserializeWithObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>-><java.io.InputStream: void close()>
<org.bson.codecs.BsonBooleanCodec: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.Validated: java.lang.Object orElse(java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.Object orElseGet(java.util.function.Supplier)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.Long: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<java.util.Collections$UnmodifiableList$1: void <init>(java.util.Collections$UnmodifiableList,int)>-><org.bson.BsonArray: java.util.ListIterator listIterator(int)>
<org.springframework.aop.framework.ProxyCreatorSupport: void activate()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.model.BasicPersistentEntity: java.util.Optional lambda$doFindAnnotation$8(java.lang.Class)>-><org.springframework.data.mapping.model.BasicPersistentEntity: java.lang.Class getType()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.crypto.CryptoPermission: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonInt64: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.BsonArray: int size()>
<reactor.core.publisher.FluxIterable: boolean checkFinite(java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Spliterator spliterator()>
<org.springframework.data.mongodb.core.convert.MappingMongoConverter: java.lang.Object getValueInternal(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty,org.bson.conversions.Bson,org.springframework.data.mapping.model.SpELExpressionEvaluator,org.springframework.data.mongodb.core.convert.ObjectPath)>-><org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider: void <init>(org.springframework.data.mongodb.core.convert.MappingMongoConverter,org.bson.conversions.Bson,org.springframework.data.mapping.model.SpELExpressionEvaluator,org.springframework.data.mongodb.core.convert.ObjectPath)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$TextIndexIncludeOptions$IncludeStrategy: void <clinit>()>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$TextIndexIncludeOptions$IncludeStrategy: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><java.lang.String: int indexOf(int)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.Document: java.lang.String toString()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions sparse(boolean)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.availability.AvailabilityProbesAutoConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: int hashCode()>
<org.springframework.web.servlet.ModelAndView: org.springframework.ui.ModelMap getModelMap()>-><org.springframework.ui.ModelMap: void <init>()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>
<java.util.stream.AbstractPipeline: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator spliterator()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><org.bson.BsonArray: boolean addAll(java.util.Collection)>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><io.micrometer.core.instrument.Tag: int compareTo(java.lang.Object)>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: boolean fillBuffer()>-><java.util.stream.Sink$ChainedLong: void end()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.types.Code: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.SubList$1: boolean hasNext()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonInt32: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.mongodb.DBRef: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.ResourceBundle$CacheKey: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.bson.Document: java.lang.String toJson(org.bson.json.JsonWriterSettings)>-><org.bson.codecs.DocumentCodec: void <init>()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.TypeMappedAnnotation: java.lang.Object extractFromMap(java.lang.reflect.Method,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.ParsePosition: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder$BuildState: void <init>(java.lang.String,int,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.apache.ibatis.type.TypeHandlerRegistry: java.util.Map getJdbcHandlerMapForEnumInterfaces(java.lang.Class,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<sun.net.NetworkClient: void <clinit>()>-><sun.net.NetworkClient$1: void <init>(int[],java.lang.String[])>
<org.springframework.data.mongodb.core.index.IndexInfo: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>-><org.springframework.boot.actuate.health.HealthComponent: void <init>()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonDbPointer: int hashCode()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <clinit>()>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$2: void <init>(java.lang.String,int,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: void <clinit>()>-><java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<org.springframework.data.mongodb.core.query.Collation$AlternateWithMaxVariable: void <init>(java.lang.String)>-><org.springframework.data.mongodb.core.query.Collation$Alternate: void <init>(java.lang.String,java.util.Optional)>
<org.springframework.security.authentication.AccountExpiredException: void <init>(java.lang.String,java.lang.Throwable)>-><org.springframework.security.authentication.AccountStatusException: void <init>(java.lang.String,java.lang.Throwable)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><java.util.PrimitiveIterator$OfLong: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$4(org.bson.Document,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$ICUComparisonLevel: java.util.Optional getCaseLevel()>
<org.bson.codecs.BsonStringCodec: void <init>()>-><java.lang.Object: void <init>()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><java.util.OptionalInt: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<org.apache.ibatis.builder.xml.XMLConfigBuilder: java.util.Properties settingsAsProperties(org.apache.ibatis.parsing.XNode)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><io.lettuce.core.internal.AbstractInvocationHandler: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void <init>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$HikariDataSourceMetricsConfiguration: void <init>(io.micrometer.core.instrument.MeterRegistry)>-><io.micrometer.core.instrument.composite.CompositeMeterRegistry: void <init>()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.JavaType refineDeserializationType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JavaType)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.mongodb.client.model.geojson.Geometry: void <clinit>()>-><org.bson.codecs.configuration.CodecRegistries: org.bson.codecs.configuration.CodecRegistry fromProviders(org.bson.codecs.configuration.CodecProvider[])>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Vector: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.PathMappingDecorator: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonObjectId: int hashCode()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.mongodb.client.model.geojson.PolygonCoordinates: int hashCode()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<com.google.protobuf.CodedInputStream$ArrayDecoder: int pushLimit(int)>-><com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException negativeSize()>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<com.alibaba.druid.util.JdbcUtils: void close(java.io.Closeable)>-><sun.net.www.MeteredStream: void close()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String toJson(java.lang.Object)>-><org.springframework.data.mongodb.util.BsonUtils: java.lang.String serializeValue(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Short: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation$CaseFirst: void <clinit>()>-><org.springframework.data.mongodb.core.query.Collation$CaseFirst: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<java.util.LinkedList$ListItr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.data.spel.ExtensionAwareEvaluationContextProvider$EvaluationContextExtensionAdapter: void <init>(org.springframework.data.spel.spi.EvaluationContextExtension,org.springframework.data.spel.EvaluationContextExtensionInformation)>-><java.lang.Object: void <init>()>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$4(org.bson.Document,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$DelegatingKD: java.lang.Object deserializeKey(java.lang.String,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.bson.types.StringRangeSet: void <clinit>()>-><java.lang.String: java.lang.String valueOf(int)>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: int hashCode()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.mongodb.BasicDBObject: int hashCode()>
<jdk.internal.util.xml.impl.ReaderUTF16: int read()>-><java.io.BufferedInputStream: int read()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Arrays$ArrayList: int size()>
<org.springframework.ui.ModelMap: org.springframework.ui.ModelMap addAllAttributes(java.util.Map)>-><java.util.HashMap: void putAll(java.util.Map)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.ClockSource$NanosecondClockSource: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonDouble: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.MaxKeyCodec: void <init>()>
<java.util.zip.CheckedInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.Currency$1: java.lang.Void run()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonDouble: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.bson.codecs.BsonTimestampCodec: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String lambda$toString$1(java.util.Map$Entry)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.lang.Iterable)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.bson.codecs.jsr310.Jsr310CodecProvider: void putCodec(org.bson.codecs.Codec)>-><org.bson.codecs.jsr310.LocalDateTimeCodec: java.lang.Class getEncoderClass()>
<register-finalize <org.springframework.boot.availability.LivenessState: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.Document: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.ibatis.mapping.ParameterMapping: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: java.lang.Object next()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.stream.Nodes$ToArrayTask$OfPrimitive: java.util.stream.Nodes$ToArrayTask$OfPrimitive makeChild(int,int)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.util.stream.Node$OfPrimitive getChild(int)>
<org.apache.catalina.core.StandardWrapperFacade: void <init>(org.apache.catalina.core.StandardWrapper)>-><java.lang.Object: void <init>()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String iterableToDelimitedString(java.lang.Iterable,java.lang.String,java.lang.String,org.springframework.core.convert.converter.Converter)>-><java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: boolean isFIPSModeActive()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.core.io.Resource getIndexHtml(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.management.MBeanNotificationInfo: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><io.lettuce.core.RedisURI: int hashCode()>
<org.bson.codecs.DocumentCodecProvider: void <init>()>-><org.bson.codecs.BsonTypeClassMap: void <init>()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AbstractPersistentProperty: java.lang.Iterable getPersistentEntityTypes()>-><java.util.Collections: java.util.Set emptySet()>
<io.jsonwebtoken.impl.JwtMap: void setDate(java.lang.String,java.util.Date)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.AuthScheme: sun.net.www.protocol.http.AuthScheme[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.bson.Document: java.lang.String toJson(org.bson.json.JsonWriterSettings,org.bson.codecs.Encoder)>-><org.bson.json.JsonWriter: void <init>(java.io.Writer,org.bson.json.JsonWriterSettings)>
<org.apache.catalina.core.StandardWrapperValve: void <init>()>-><java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String)>-><org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<java.util.stream.AbstractPipeline: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator spliterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<cn.hutool.json.JSONObject: void init(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$HikariDataSourceMetricsConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.zone.ZoneRules: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeAttribute: org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeAttribute[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.Parsed: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<org.bson.internal.ProvidersCodecRegistry: void <init>(java.util.List)>-><org.bson.assertions.Assertions: void isTrueArgument(java.lang.String,boolean)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonDateTime: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.types.CodeWScope: int hashCode()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$PatternSubscriptionTask: void run()>-><org.springframework.data.redis.connection.jedis.JedisConnection: boolean isSubscribed()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.util.ArrayList: java.lang.Object get(int)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.lang.Iterable: void forEach(java.util.function.Consumer)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration: void <init>()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String serializeValue(java.lang.Object)>-><java.lang.String: int indexOf(int)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.freemarker.FreeMarkerReactiveWebConfiguration: void <init>(org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClientUtils$1: void <init>()>-><redis.clients.jedis.Builder: void <init>()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ExtendedJsonObjectIdConverter: void <init>()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<sun.awt.DebugSettings: void loadSystemProperties()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.Document: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><org.bson.BsonArray: java.lang.Object get(int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><reactor.util.function.Tuple2: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory: boolean isTypeInjectable(org.springframework.data.mapping.PersistentEntity)>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: int hashCode()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration: void <init>()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>
<org.springframework.boot.actuate.endpoint.Sanitizer: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.apache.ibatis.reflection.wrapper.MapWrapper: java.lang.Class getSetterType(java.lang.String)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.rabbitmq.client.impl.recovery.AutorecoveringChannel: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.web.servlet.ManagementErrorEndpoint$$InterceptorProxy: boolean getBooleanParameter(org.springframework.web.context.request.ServletWebRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.autoconfigure.web.servlet.ManagementErrorEndpoint: boolean getBooleanParameter(org.springframework.web.context.request.ServletWebRequest,java.lang.String)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.CharacterCodec: java.lang.Class getEncoderClass()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong collectLong(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>-><java.util.stream.Nodes$CollectorTask$OfLong: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.redis.listener.PatternTopic: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashSet: java.util.Iterator iterator()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder,org.springframework.data.mapping.model.FieldNamingStrategy)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: java.lang.String getName()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Vector: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>
<org.springframework.boot.ImageBanner: org.springframework.boot.ImageBanner$Frame[] readFrames(int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: boolean isVersionProperty()>-><java.lang.Boolean: boolean booleanValue()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.security.PermissionCollection: java.lang.String toString()>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver: void resolveAndAddIndexesForAssociation(org.springframework.data.mapping.Association,java.util.List,java.lang.String,java.lang.String)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: boolean isAnnotationPresent(java.lang.Class)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.Clock$SystemClock: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String toJson(java.lang.Object)>-><org.bson.internal.ProvidersCodecRegistry: org.bson.codecs.Codec get(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<cn.hutool.json.JSONObject: void init(java.lang.Object)>-><org.bson.Document: java.util.Set entrySet()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: int hashCode()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>-><org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.math.BigDecimal: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void cancel()>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.web.accept.ContentNegotiationManagerFactoryBean: void addMediaType(java.lang.String,org.springframework.http.MediaType)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.util.Optional lambda$doFindAnnotation$9(java.lang.Class)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream flatMap(java.util.function.Function)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: void putAll(java.util.Map)>
<java.util.WeakHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void add(java.util.Collection,byte[][])>-><org.springframework.data.redis.connection.util.ByteArrayWrapper: void <init>(byte[])>
<org.springframework.security.web.server.header.CacheControlServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder builder()>
<io.micrometer.core.instrument.simple.SimpleConfig: java.time.Duration step()>-><java.time.Duration: java.time.Duration ofMinutes(long)>
<register-finalize <java.net.Authenticator$RequestorType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.types.Decimal128: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonArray: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator build()>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.mongodb.DBRef: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.Provider: java.lang.String toString()>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><java.time.Duration: java.time.Duration ofSeconds(long)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.regex.Pattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.Duration: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: java.lang.String toString()>
<org.springframework.transaction.support.TransactionSynchronizationManager: java.lang.Object doUnbindResource(java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.types.MinKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonBinary: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Package: java.lang.String toString()>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: void <clinit>()>-><org.springframework.web.util.pattern.PathPatternParser: void <init>()>
<java.util.Vector$Itr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.util.AbstractConstant: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.types.BSONTimestamp: int hashCode()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.data.mongodb.core.mapping.ShardKey: void <clinit>()>-><org.springframework.data.mongodb.core.mapping.ShardKey: void <init>(java.util.List,org.springframework.data.mongodb.core.mapping.ShardingStrategy,boolean)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><java.util.PrimitiveIterator$OfDouble: java.lang.Object next()>
<io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>-><java.lang.Character: boolean isWhitespace(char)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.IndexInfo: void <init>(java.util.List,java.lang.String,boolean,boolean,java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<java.util.stream.Streams$StreamBuilderImpl: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>
<java.util.stream.Nodes$1: void <clinit>()>-><java.util.stream.StreamShape: java.util.stream.StreamShape[] values()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.EventObject: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$4(org.bson.Document,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$ICUComparisonLevel: java.util.Optional getCaseFirst()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.util.MongoDbErrorCodes: void <clinit>()>-><java.util.HashMap: void <init>(int,float)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.security.web.savedrequest.DefaultSavedRequest: java.util.List lambda$addHeader$0(java.lang.String)>-><java.util.ArrayList: void <init>()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<reactor.core.scheduler.ParallelScheduler: void <clinit>()>-><java.util.concurrent.Executors$DelegatedExecutorService: java.util.List shutdownNow()>
<io.jsonwebtoken.impl.JwtMap: java.util.Date getDate(java.lang.String)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration: void <init>()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: boolean isSubscribed()>-><org.springframework.data.redis.connection.util.AbstractSubscription: boolean isAlive()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<java.lang.Thread: void <init>(java.lang.Runnable,java.security.AccessControlContext)>-><java.lang.Object: void <init>()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.util.stream.Stream lambda$toString$10(java.util.Optional)>-><org.springframework.data.util.Optionals: java.util.stream.Stream toStream(java.util.Optional[])>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.boot.autoconfigure.web.ErrorProperties getErrorProperties()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.types.ObjectId: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.simple.CountingMode: void <clinit>()>-><io.micrometer.core.instrument.simple.CountingMode: void <init>(java.lang.String,int)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Collections$EmptyEnumeration: boolean hasMoreElements()>
<sun.misc.Resource: byte[] getBytes()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<reactor.core.scheduler.DelegateServiceScheduler: void dispose()>-><java.util.concurrent.ScheduledThreadPoolExecutor: java.util.List shutdownNow()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<org.springframework.context.expression.MapAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><org.springframework.data.mongodb.core.index.IndexField: org.springframework.data.mongodb.core.index.IndexField geo(java.lang.String)>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.util.Set schemesListToSet(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.StackTraceElement: java.lang.String toString()>
<java.util.stream.Nodes$SizedCollectorTask: void <init>(java.util.Spliterator,java.util.stream.PipelineHelper,int)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: long estimateSize()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: int hashCode()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.bson.codecs.PatternCodec$RegexFlag: void <clinit>()>-><java.util.HashMap: void <init>()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.trace.http.Include: void <clinit>()>-><java.util.LinkedHashSet: void <init>()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonDocumentWrapper: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><io.netty.buffer.EmptyByteBuf: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.net.URL: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<register-finalize <org.bson.BsonBinarySubType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.beans.factory.config.BeanExpressionContext: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.ClockSource$Factory: com.zaxxer.hikari.util.ClockSource access$000()>-><com.zaxxer.hikari.util.ClockSource$Factory: com.zaxxer.hikari.util.ClockSource create()>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.io.ObjectStreamClass$FieldReflectorKey: int hashCode()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.types.MinKey: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<org.bson.codecs.FloatCodec: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.web.method.HandlerMethod: org.springframework.core.MethodParameter[] initMethodParameters()>-><java.lang.reflect.Method: int getParameterCount()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><java.io.InputStream: void close()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><org.springframework.http.server.PathContainer$Options: char separator()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.apache.ibatis.executor.ErrorContext: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.rabbitmq.client.impl.recovery.AutorecoveringChannel: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.beans.PropertyDescriptor: int hashCode()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.BsonArray: java.lang.Object get(int)>
<com.zaxxer.hikari.pool.ProxyLeakTask: void <init>()>-><java.lang.Object: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonBoolean: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.calendar.Era: java.lang.String toString()>
<io.micrometer.core.instrument.simple.CountingMode: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.bson.BsonDocument: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.asm.Label: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<io.netty.util.internal.NativeLibraryLoader: byte[] classToByteArray(java.lang.Class)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundrySecurityInterceptor: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse success()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<register-finalize <org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder$BuildState: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.WeakHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.cglib.core.internal.CustomizerRegistry: void add(org.springframework.cglib.core.KeyFactoryCustomizer)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.ObjectName: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: int size()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<org.bson.RawBsonArray: void add(int,java.lang.Object)>-><org.bson.RawBsonArray: void add(int,org.bson.BsonValue)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.web.servlet.ManagementErrorEndpoint$1: void <clinit>()>-><org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeAttribute: org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeAttribute[] values()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.mongodb.DBRefCodecProvider: int hashCode()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><org.springframework.core.io.ClassPathResource: void <init>(java.lang.String,java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$4(org.bson.Document,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$TertiaryICUComparisonLevel: int getLevel()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.beans.BeansEndpointAutoConfiguration: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<java.util.stream.AbstractPipeline: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$DoubleArrayNode: java.util.Spliterator spliterator()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.UuidCodec: java.lang.Class getEncoderClass()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.util.ParentTypeAwareTypeInformation: int hashCode()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.core.io.Resource getIndexHtml(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.ibatis.mapping.ResultMap$Builder: java.util.List getArgNames(java.lang.reflect.Constructor)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: java.lang.Object get(int)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.springframework.boot.ImageBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonInt64: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Double: java.lang.String toString()>
<io.lettuce.core.masterslave.StaticMasterSlaveConnector: reactor.core.publisher.Mono lambda$connectAsync$0(io.lettuce.core.RedisURI,io.lettuce.core.masterslave.MasterSlaveConnectionProvider,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void visit(com.sun.jmx.mbeanserver.MBeanAnalyzer$MBeanVisitor)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.AbstractCollection: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<cn.hutool.core.convert.impl.PrimitiveConverter: java.lang.Object convertInternal(java.lang.Object)>-><org.bson.types.Decimal128: float floatValue()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.naming.NamingException: java.lang.String toString()>
<org.apache.ibatis.io.Resources: java.util.Properties getUrlAsProperties(java.lang.String)>-><java.io.FileInputStream: void close()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<sun.net.httpserver.ChunkedInputStream: void consumeCRLF()>-><sun.net.www.http.ChunkedInputStream: int read()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.types.CodeWScope: int hashCode()>
<org.bson.codecs.BsonSymbolCodec: void <init>()>-><java.lang.Object: void <init>()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<sun.text.normalizer.UBiDiProps: void <init>()>-><java.io.InputStream: void close()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Boolean: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.Document: void putAll(java.util.Map)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<org.springframework.security.web.savedrequest.SavedRequestAwareWrapper: void <clinit>()>-><java.util.Locale: java.util.Locale getDefault()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.OptionalInt: java.lang.String toString()>
<org.springframework.boot.actuate.info.EnvironmentInfoContributor: void <clinit>()>-><org.springframework.boot.context.properties.bind.Bindable: org.springframework.boot.context.properties.bind.Bindable mapOf(java.lang.Class,java.lang.Class)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.lettuce.core.RedisURI: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.LinkedList: int size()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>-><java.util.HashSet: int size()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.beans.factory.config.DependencyDescriptor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void add(java.util.Collection,byte[][])>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.rabbitmq.client.impl.AMQChannel: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.metrics.web.servlet.WebMvcTags: void <clinit>()>-><io.micrometer.core.instrument.Tag: io.micrometer.core.instrument.Tag of(java.lang.String,java.lang.String)>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.data.util.ReflectionUtils: java.lang.reflect.Field findRequiredField(java.lang.Class,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.logging.log4j.util.PropertyFilePropertySource: java.util.Properties loadPropertiesFile(java.lang.String)>-><sun.net.www.MeteredStream: void close()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonUndefined: int hashCode()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.EnumMap: int hashCode()>
<java.util.HashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.CloudFoundrySecurityInterceptor: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse success()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String toString(java.util.Map)>-><org.springframework.data.mongodb.util.BsonUtils: java.lang.String iterableToDelimitedString(java.lang.Iterable,java.lang.String,java.lang.String,org.springframework.core.convert.converter.Converter)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.Provider$UString: java.lang.String toString()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.ArrayList$SubList: boolean addAll(java.util.Collection)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: int hashCode()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void doWithAssociations(org.springframework.data.mapping.SimpleAssociationHandler)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<cn.hutool.core.map.MapProxy: void putAll(java.util.Map)>-><org.bson.BasicBSONObject: void putAll(java.util.Map)>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.io.InputStream lambda$newBundle$0(boolean,java.lang.ClassLoader,java.lang.String)>-><java.net.URLConnection: void setUseCaches(boolean)>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.management.ImmutableDescriptor: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.Nodes$SizedCollectorTask: void <init>(java.util.Spliterator,java.util.stream.PipelineHelper,int)>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: float floatValue()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<sun.net.httpserver.ServerImpl$Dispatcher: void run()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.node.FloatNode: boolean equals(java.lang.Object)>
<org.springframework.boot.web.client.ClientHttpRequestFactorySupplier: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.Extension: java.lang.String toString()>
<java.util.ArrayList$Itr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.security.x509.AVA: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<springfox.documentation.schema.TypeNameExtractor: void <init>(com.fasterxml.classmate.TypeResolver,org.springframework.plugin.core.PluginRegistry,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: java.lang.String toString()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.Vector: void forEach(java.util.function.Consumer)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.schema.property.field.FieldProvider: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: int hashCode()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.BasicPersistentEntity: void addAssociation(org.springframework.data.mapping.Association)>-><java.util.HashSet: boolean add(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.lettuce.core.protocol.CommandArgs$CharArrayArgument: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: java.lang.String getPolicy()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: int hashCode()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><reactor.util.function.Tuple4: int hashCode()>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><sun.net.www.http.KeepAliveStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.ZoneOffset: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.types.MaxKey: java.lang.String toString()>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.asm.Label: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void unsubscribeChannel(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver: void lambda$resolveIndexesForDbrefs$4(java.util.List,java.lang.String,java.lang.String,org.springframework.data.mapping.Association)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver: void resolveAndAddIndexesForAssociation(org.springframework.data.mapping.Association,java.util.List,java.lang.String,java.lang.String)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.types.Decimal128: java.lang.String toString()>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.net.URL: java.lang.String getFile()>
<register-finalize <org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.bson.json.JsonMode: void <clinit>()>-><org.bson.json.JsonMode: void <init>(java.lang.String,int)>
<cn.hutool.core.convert.impl.DateConverter: java.util.Date convertInternal(java.lang.Object)>-><org.bson.types.Decimal128: long longValue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.OperationParameterHeadersConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>-><springfox.documentation.spring.web.readers.operation.AbstractOperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<java.util.stream.Nodes$CollectorTask$OfLong: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$CollectorTask: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,java.util.function.LongFunction,java.util.function.BinaryOperator)>
<org.springframework.security.authentication.ProviderManager: void checkState()>-><java.util.AbstractCollection: boolean contains(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonInt32: int hashCode()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map retrieveMetrics()>-><org.bson.BsonDocumentWrapper: java.util.Collection values()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><java.util.ArrayList: void <init>(java.util.Collection)>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity: org.springframework.data.mapping.PersistentProperty returnPropertyIfBetterIdPropertyCandidateOrNull(org.springframework.data.mapping.PersistentProperty)>-><org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity: org.springframework.data.mongodb.core.mapping.MongoPersistentProperty returnPropertyIfBetterIdPropertyCandidateOrNull(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.Property: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: int hashCode()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<java.net.URLClassLoader: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.core.JsonLocation: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.sql.Timestamp: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><java.lang.UnsupportedOperationException: void <init>()>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.http.ChunkedInputStream: int read()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.Node$OfLong: void forEach(java.util.function.Consumer)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.text.ParsePosition: int hashCode()>
<org.springframework.boot.actuate.logging.LogFileWebEndpoint: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<sun.net.httpserver.FixedLengthInputStream: int readImpl(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><cn.hutool.json.JSONArray: java.lang.Object[] toArray()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonMinKey: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.publisher.MonoCallableOnAssembly: java.lang.String toString()>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<org.springframework.data.mongodb.core.MongoTemplate: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.rabbitmq.client.impl.TlsUtils: java.lang.String lambda$sans$0(java.util.List)>-><org.bson.BsonArray: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.AbstractCollection: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.OptionalInt: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.convert.DefaultConverterBuilder$ConfigurableGenericConverter: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.ParameterizedTypeInformation: java.lang.String toString()>
<sun.text.normalizer.NormalizerImpl: void <clinit>()>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><cn.hutool.core.lang.Tuple: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.publisher.FluxCreate$BufferAsyncSink: java.lang.String toString()>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.internal.Optional: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: int hashCode()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String,java.util.Locale)>-><java.time.format.DateTimeFormatterBuilder: void <init>()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<org.springframework.http.HttpHeaders: void <clinit>()>-><java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withZone(java.time.ZoneId)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.publisher.ConnectableFluxOnAssembly: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.Short: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.bson.Document: java.lang.String toJson(org.bson.json.JsonWriterSettings,org.bson.codecs.Encoder)>-><org.bson.json.JsonWriter: java.io.Writer getWriter()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: boolean fillBuffer()>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: void end()>
<com.rabbitmq.client.impl.ValueWriter: void writeArray(java.util.List)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: java.lang.String toString()>
<sun.net.httpserver.ChunkedInputStream: int readChunkHeader()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<io.jsonwebtoken.impl.JwtMap: java.util.Collection values()>-><org.bson.RawBsonDocument: java.util.Collection values()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter: void logWarningIfNecessary(java.lang.reflect.Type,java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ListableBeanFactory)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonDouble: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonDocumentWrapper: int hashCode()>
<ch.qos.logback.core.joran.conditional.PropertyEvalScriptBuilder: ch.qos.logback.core.joran.conditional.Condition build(java.lang.String)>-><org.codehaus.janino.ClassBodyEvaluator: void cook(java.lang.String)>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Set removeBindingsWithDestination(java.lang.String)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: void remove()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Hashtable: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.Validated: java.lang.Object orElse(java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.Object orElseGet(java.util.function.Supplier)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonString: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.mongodb.client.model.geojson.LineString: int hashCode()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.Vector$Itr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>
<com.sun.net.httpserver.Headers: java.lang.String getFirst(java.lang.String)>-><org.bson.RawBsonArray$RawBsonArrayList: java.lang.Object get(int)>
<com.google.common.collect.Maps: void <clinit>()>-><com.google.common.base.Joiner: com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.util.ClassTypeInformation: java.lang.Class getType()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ExtendedJsonDoubleConverter: void <init>()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.RawBsonDocument: int hashCode()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonRegularExpression: int hashCode()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineAddresses()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.math.BigDecimal: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.apache.logging.log4j.spi.Provider: int hashCode()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void visit(com.sun.jmx.mbeanserver.MBeanAnalyzer$MBeanVisitor)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.PropertyValue$Map: void assign(java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.util.Pair: int hashCode()>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<register-finalize <org.springframework.boot.web.servlet.server.Encoding$Type: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.apache.ibatis.builder.xml.XMLConfigBuilder: java.util.Properties settingsAsProperties(org.apache.ibatis.parsing.XNode)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.ImageBanner: org.springframework.boot.ImageBanner$Frame[] readFrames(int,int)>-><java.net.SocketInputStream: void close()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.net.SocketImpl: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<sun.text.normalizer.UBiDiProps: void <init>()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: void <init>()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void unsubscribePattern(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.management.openmbean.ArrayType: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.OperationType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator: void <init>(java.lang.String,int,java.lang.String[])>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<io.micrometer.core.instrument.config.MeterRegistryConfigValidator: io.micrometer.core.instrument.config.validate.Validated lambda$checkAll$0(io.micrometer.core.instrument.config.MeterRegistryConfig,java.util.function.Function)>-><reactor.core.publisher.FluxZip$PairwiseZipper: java.lang.Object apply(java.lang.Object)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map inspectClass(java.lang.Class)>-><java.io.BufferedInputStream: void close()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$DifferentManagementContextConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.actuate.autoconfigure.web.ManagementContextFactory)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><java.time.Duration: java.time.Duration ofMinutes(long)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeIndexedArgumentValue(java.lang.Integer,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>
<org.springframework.data.util.TypeDiscoverer: org.springframework.data.util.ClassTypeInformation getRawTypeInformation()>-><org.springframework.data.util.ClassTypeInformation: org.springframework.data.util.ClassTypeInformation from(java.lang.Class)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong collectLong(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>-><java.util.stream.Nodes: java.util.stream.Node$OfLong flattenLong(java.util.stream.Node$OfLong)>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.stream.AbstractPipeline: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator spliterator()>
<sun.net.www.protocol.http.DigestAuthentication: void <clinit>()>-><java.lang.Boolean: boolean booleanValue()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.mapping.model.Property: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<com.google.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>-><java.lang.String: int length()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.util.Optional lambda$doFindAnnotation$9(java.lang.Class)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Set removeBindingsWithDestination(java.lang.String)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler pickSoleHandler(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: java.lang.String toString()>
<org.springframework.web.server.adapter.ForwardedHeaderTransformer: void <clinit>()>-><java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<org.bson.json.ShellBinaryConverter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.core.io.ClassPathResource: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.Long: int hashCode()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder maximumSize(long)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<org.springframework.data.mongodb.core.convert.MappingMongoConverter: java.lang.Object getValueInternal(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty,org.bson.conversions.Bson,org.springframework.data.mapping.model.SpELExpressionEvaluator,org.springframework.data.mongodb.core.convert.ObjectPath)>-><org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider: java.lang.Object getPropertyValue(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>
<org.apache.ibatis.builder.xml.XMLMapperBuilder: void parsePendingStatements()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.DiscoveredOperationsFactory: void <clinit>()>-><java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.text.DateFormatSymbols: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: boolean isRestrictedHeader(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.bson.codecs.AtomicBooleanCodec: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration: void <init>()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.Boolean lambda$new$0()>-><java.lang.Enum: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.InetAddress: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration: void <init>()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><java.util.OptionalInt: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: java.lang.Object getCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map inspectClass(java.lang.Class)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void checkPulse()>-><org.springframework.data.redis.connection.RedisInvalidSubscriptionException: void <init>(java.lang.String)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.bson.codecs.PatternCodec$RegexFlag: void <clinit>()>-><org.bson.codecs.PatternCodec$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonDecimal128Codec: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<org.bson.json.ExtendedJsonObjectIdConverter: void <init>()>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration: void <init>()>
<register-finalize <org.springframework.boot.actuate.trace.http.Include: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonTimestamp: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.security.Provider: java.lang.String toString()>
<java.util.Collections$UnmodifiableList$1: java.lang.Object next()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.PropertyName _findParamName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter,com.fasterxml.jackson.databind.AnnotationIntrospector)>-><com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: java.lang.String findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map,boolean,java.util.Locale)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void doAcquireShared(int)>-><java.util.concurrent.Semaphore$NonfairSync: int tryAcquireShared(int)>
<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.jni.SSL: int fipsModeGet()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.text.StringCharacterIterator: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration: void <init>()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration$MvcRequestMatcherConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.scheduler.DelegateServiceScheduler$UnsupportedScheduledExecutorService: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonJavaScript: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.Object orElseGet(java.util.function.Supplier)>-><io.micrometer.core.instrument.config.validate.ValidationException: void <init>(io.micrometer.core.instrument.config.validate.Validated)>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: int determinePort()>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.math.BigDecimal: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonSymbol: int hashCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: void applyPropertyToBeanDefinition(java.lang.String,java.lang.Object)>-><org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.support.AbstractBeanDefinition getBeanDefinition()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.crypto.CryptoAllPermission: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonInt64: int hashCode()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: int compareTo(java.lang.Object)>
<io.jsonwebtoken.impl.JwtMap: void setValue(java.lang.String,java.lang.Object)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonObjectId: java.lang.String toString()>
<com.mongodb.MongoClientSettings: void <clinit>()>-><org.bson.codecs.IterableCodecProvider: void <init>(org.bson.Transformer)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonBoolean: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: void <clinit>()>-><javax.security.auth.SubjectDomainCombiner: boolean cachePolicy()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.Document: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.bson.BsonTimestamp: int compareTo(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.apache.ibatis.cache.decorators.LoggingCache: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<cn.hutool.json.JSONObject: void init(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.imageio.ImageTypeSpecifier$Interleaved: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.cache.support.AbstractCacheManager: void initializeCaches()>-><org.springframework.cache.concurrent.ConcurrentMapCache: java.lang.String getName()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.security.util.DerValue: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration: void <init>()>
<org.springframework.security.core.userdetails.User$UserBuilder: java.lang.String lambda$roles$1(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.JdkLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>-><io.micrometer.core.util.internal.logging.JdkLogger: void <init>(java.util.logging.Logger)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineAddresses()>-><java.util.ArrayList: void <init>()>
<java.util.concurrent.Executors$PrivilegedThreadFactory: void <init>()>-><java.util.concurrent.ForkJoinWorkerThread$InnocuousForkJoinWorkerThread: java.lang.ClassLoader getContextClassLoader()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><cn.hutool.core.date.format.FastDateFormat: java.lang.String toString()>
<com.mongodb.client.gridfs.codecs.GridFSFileCodecProvider: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.InetAddress: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.data.redis.connection.ReturnType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><org.springframework.http.server.DefaultPathContainer: void <init>(java.lang.String,java.util.List)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.Flux: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.Scannable$Attr$1: java.lang.String toString()>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.google.common.cache.LocalCache$LocalLoadingCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<org.springframework.http.HttpHeaders: void <clinit>()>-><java.time.ZoneId: java.time.ZoneId of(java.lang.String)>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeResolverBuilder: void <init>(com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping)>-><com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder allowIfSubType(java.lang.Class)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.mongodb.DBRef: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.amqp.rabbit.connection.CachingConnectionFactory$ChannelCachingConnectionProxy: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _convertNumberToInt(java.lang.Number)>-><org.bson.types.Decimal128: long longValue()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>
<java.util.stream.AbstractPipeline: java.util.stream.Node evaluate(java.util.Spliterator,boolean,java.util.function.IntFunction)>-><java.util.stream.LongPipeline: java.util.stream.Node evaluateToNode(java.util.stream.PipelineHelper,java.util.Spliterator,boolean,java.util.function.IntFunction)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><com.google.common.collect.ForwardingCollection: int size()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: boolean isSubscribed()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.TypeVariableTypeInformation: java.lang.String toString()>
<com.rabbitmq.client.impl.Frame: long tableSize(java.util.Map)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.Tag: int compareTo(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException negativeSize()>-><com.google.protobuf.InvalidProtocolBufferException: void <init>(java.lang.String)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration: void <init>()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonInt64: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Vector: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<org.bson.codecs.jsr310.Jsr310CodecProvider: void putCodec(org.bson.codecs.Codec)>-><org.bson.codecs.jsr310.LocalDateCodec: java.lang.Class getEncoderClass()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.naming.NamingException: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.DBRef: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>-><java.lang.String: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.web.reactive.AbstractWebFluxEndpointHandlerMapping: void <clinit>()>-><org.springframework.web.util.pattern.PathPatternParser: void <init>()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.lang.Math: double abs(double)>
<java.io.DataInputStream: int readUnsignedByte()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.MonthDay: int hashCode()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><org.springframework.data.mapping.model.BasicPersistentEntity: org.springframework.data.mapping.Alias getTypeAlias()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.mustache.MustacheReactiveWebConfiguration: void <init>()>
<org.springframework.boot.actuate.health.HealthEndpointSupport: void <clinit>()>-><org.springframework.boot.actuate.health.Health$Builder: org.springframework.boot.actuate.health.Health build()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.rabbitmq.client.UnknownClassOrMethodId: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiListingReferenceScanner getApiListingReferenceScanner()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void lambda$populateAnnotationCache$6(java.lang.reflect.Method)>-><java.lang.Class: java.lang.String getSimpleName()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.StringBuilder: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$PooledDataSourceConfiguration: void <init>()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonMinKey: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Collections$EmptyList: int hashCode()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void recoverConsumer(java.lang.String,com.rabbitmq.client.impl.recovery.RecordedConsumer,boolean)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.EndpointId: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong collectLong(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>-><java.util.stream.Nodes$SizedCollectorTask$OfLong: void <init>(java.util.Spliterator,java.util.stream.PipelineHelper,long[])>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void debug(java.lang.String)>-><io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void log(int,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.Document: java.lang.String toString()>
<org.bson.AbstractBsonWriter$State: void <clinit>()>-><org.bson.AbstractBsonWriter$State: void <init>(java.lang.String,int)>
<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>-><java.lang.Integer: int intValue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<java.util.stream.AbstractPipeline: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator spliterator()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonNull: java.lang.String toString()>
<org.springframework.boot.actuate.trace.http.HttpExchangeTracer: java.lang.Long lambda$sendingResponse$0(org.springframework.boot.actuate.trace.http.HttpTrace)>-><java.time.Instant: long toEpochMilli()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken: void <init>(java.lang.Object,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void setAuthenticated(boolean)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void <clinit>()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.bson.BsonArray: java.util.Iterator iterator()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.Document: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: int hashCode()>
<org.bson.codecs.IterableCodecProvider: void <init>(org.bson.Transformer)>-><org.bson.codecs.IterableCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap,org.bson.Transformer)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.beans.IndexedPropertyDescriptor: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.Document: int hashCode()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<java.util.stream.Nodes: java.util.stream.Node flatten(java.util.stream.Node,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: boolean fillBuffer()>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: void end()>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions weights(org.bson.conversions.Bson)>
<javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>-><javax.security.auth.Policy$4: void <init>()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<org.bson.codecs.DocumentCodec: void <clinit>()>-><org.bson.codecs.BsonTypeClassMap: void <init>()>
<com.rabbitmq.client.impl.ValueWriter: void writeArray(java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonDocument: java.lang.String toString()>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.types.Decimal128: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isUseSsl()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.URL: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Calendar: java.lang.String toString()>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void remove(java.util.Collection,byte[][])>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><org.bson.BsonArray: boolean remove(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.buffer.EmptyByteBuf: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void subscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void checkPulse()>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.springframework.data.mapping.model.BasicPersistentEntity: org.springframework.data.mapping.Alias getAliasFromAnnotation(java.lang.Class)>-><org.springframework.core.annotation.AnnotatedElementUtils: java.lang.annotation.Annotation findMergedAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.Document: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.OffsetDateTime: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettucePoolingConnectionProvider: void <init>(org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider,org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: org.apache.commons.pool2.impl.GenericObjectPoolConfig getPoolConfig()>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.web.filter.FormContentFilter: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.fasterxml.classmate.util.LRUTypeCache$CacheMap: void <init>(int)>-><java.util.LinkedHashMap: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.Character: int hashCode()>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonNull: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$ExtensionBean: java.lang.String lambda$new$0(java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getEnum(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.Class,java.lang.String)>-><io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated$Invalid invalid(java.lang.String,java.lang.Object,java.lang.String,io.micrometer.core.instrument.config.validate.InvalidReason)>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration: void setSuffixPatternMatch(boolean)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationDeprecatedReader: void <init>()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<io.netty.util.concurrent.ThreadPerTaskExecutor: void execute(java.lang.Runnable)>-><com.zaxxer.hikari.util.UtilityElf$DefaultThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: int hashCode()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<java.util.stream.Nodes$CollectionNode: java.util.Spliterator spliterator()>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<com.zaxxer.hikari.HikariConfig: void <init>(java.util.Properties)>-><com.zaxxer.hikari.HikariConfig: void <init>()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void lambda$new$0(org.springframework.security.core.userdetails.UserDetails)>-><org.springframework.security.authentication.LockedException: void <init>(java.lang.String)>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedList: java.lang.Object merge(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonDocument: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<com.google.common.base.Joiner: com.google.common.base.Joiner useForNull(java.lang.String)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.net.SocketInputStream: void close()>
<org.springframework.mail.javamail.ConfigurableMimeFileTypeMap: javax.activation.FileTypeMap createFileTypeMap(org.springframework.core.io.Resource,java.lang.String[])>-><sun.net.www.MeteredStream: void close()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.math.BigDecimal: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><com.mongodb.client.model.geojson.Polygon: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.ProtectionDomain)>-><java.util.Collections$3: java.lang.Object nextElement()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map inspectClass(java.lang.Class)>-><java.io.InputStream: void close()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: boolean indexSupportsIncludeFilters()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: long _convertNumberToLong(java.lang.Number)>-><org.bson.types.Decimal128: long longValue()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.asm.Handle: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<java.net.Socket: int getPort()>-><java.net.SocketImpl: int getPort()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.security.cert.Certificate: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>-><org.springframework.web.method.HandlerMethod: java.lang.Class getBeanType()>
<org.springframework.web.util.pattern.PathPattern: void <clinit>()>-><java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: boolean isAssociation()>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: boolean isAssociation()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.util.context.ContextN: java.lang.String toString()>
<jdk.internal.util.xml.impl.ReaderUTF16: void close()>-><sun.net.www.MeteredStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.types.MinKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.beans.IndexedPropertyDescriptor: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.types.Code: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdateStringKeyMap(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: java.lang.Object next()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonBinary: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.types.MaxKey: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation$AlternateWithMaxVariable: void <clinit>()>-><org.springframework.data.mongodb.core.query.Collation$AlternateWithMaxVariable: void <init>(java.lang.String)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String serializeValue(java.lang.Object)>-><org.bson.Document: void <init>(java.lang.String,java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><java.util.stream.SpinedBuffer$OfLong: java.util.Iterator iterator()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonInt64: java.lang.String toString()>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><cn.hutool.core.date.format.FastDateFormat: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.publisher.FluxCreate$LatestAsyncSink: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitRetryTemplateCustomizer$Target: void <clinit>()>-><org.springframework.boot.autoconfigure.amqp.RabbitRetryTemplateCustomizer$Target: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonDbPointer: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.JavaType _resolveAndValidateGeneric(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,int)>-><com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,java.lang.String)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Currency: java.lang.String toString()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions expireAfter(java.lang.Long,java.util.concurrent.TimeUnit)>
<org.springframework.data.domain.Sort$Order: void <init>(org.springframework.data.domain.Sort$Direction,java.lang.String,boolean,org.springframework.data.domain.Sort$NullHandling)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonNull: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.bootstrap.AbstractBootstrap: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonObjectId: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.types.MinKey: java.lang.String toString()>
<org.springframework.boot.availability.LivenessState: void <clinit>()>-><org.springframework.boot.availability.LivenessState: void <init>(java.lang.String,int)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.util.Iterator iterator()>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonBinaryCodec: java.lang.Class getEncoderClass()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.httpserver.ContextList: sun.net.httpserver.HttpContextImpl findContext(java.lang.String,java.lang.String,boolean)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><org.bson.RawBsonArray: boolean addAll(java.util.Collection)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<java.util.ArrayList$Itr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.types.MaxKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String iterableToDelimitedString(java.lang.Iterable,java.lang.String,java.lang.String,org.springframework.core.convert.converter.Converter)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.io.InputStream: void close()>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: boolean contains(java.lang.Object)>
<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String toJavaUncached0(java.lang.String,boolean)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<org.springframework.data.mongodb.core.mapping.ShardKey: void <clinit>()>-><java.util.Collections: java.util.List emptyList()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$DelegatingHandlerMappingDescriptionProvider: void <init>(java.util.List,org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$DelegatingHandlerMappingDescriptionProvider: void <init>(java.util.List)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.sun.net.httpserver.Headers: void add(java.lang.String,java.lang.String)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.util.ClassTypeInformation: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.locale.Extension: java.lang.String toString()>
<java.util.stream.LongPipeline: void <init>(java.util.stream.AbstractPipeline,int)>-><java.util.stream.AbstractPipeline: void <init>(java.util.stream.AbstractPipeline,int)>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber,java.util.Iterator,boolean,java.lang.Runnable)>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<java.util.TreeMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.ResolvedType: java.lang.Class getErasedType()>
<org.springframework.amqp.rabbit.connection.RabbitResourceHolder: void rollbackAll()>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int readUnsignedByte()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.HashMap: void <init>(int)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonInt32: java.lang.String toString()>
<sun.awt.DebugSettings: java.lang.String toString()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<jdk.internal.util.xml.impl.Parser: void dtd()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: void <clinit>()>-><org.springframework.data.redis.FallbackExceptionTranslationStrategy: void <init>(org.springframework.core.convert.converter.Converter)>
<org.apache.ibatis.io.Resources: java.util.Properties getResourceAsProperties(java.lang.String)>-><sun.net.www.http.KeepAliveStream: void close()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.util.Map mapAnnotations(java.lang.annotation.Annotation[])>
<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory: boolean isTypeInjectable(org.springframework.data.mapping.PersistentEntity)>-><java.lang.Class: java.lang.Package getPackage()>
<com.zaxxer.hikari.pool.HikariPool: java.util.concurrent.ThreadFactory lambda$initializeHouseKeepingExecutorService$3()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.String lambda$addExtensionBean$4(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean,org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$ExtensionBean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.io.BufferedInputStream: int read1(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonMaxKey: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$13(com.mongodb.client.model.Collation$Builder,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><com.mongodb.client.model.CollationStrength: com.mongodb.client.model.CollationStrength fromInt(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterMultiplesReader: void <init>()>
<org.springframework.core.annotation.TypeMappedAnnotation: java.lang.Object extractFromMap(java.lang.reflect.Method,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonSymbol: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.text.RuleBasedCollator: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.temporal.WeekFields: int hashCode()>
<java.time.format.DateTimeTextProvider$LocaleStore: java.util.Iterator getTextIterator(java.time.format.TextStyle)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.mongodb.DBRef: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions defaultLanguage(java.lang.String)>
<register-finalize <org.springframework.http.HttpStatus: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.BsonArray: boolean isEmpty()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: java.lang.Object getCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder builder()>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration: void setTrailingSlashMatch(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.PermissionCollection: java.lang.String toString()>
<org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.util.List)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.Integer: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<io.micrometer.core.util.internal.logging.JdkLogger: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.AtomicLongCodec: java.lang.Class getEncoderClass()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder,org.springframework.data.mapping.model.FieldNamingStrategy)>-><org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: boolean hasExplicitFieldName()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<reactor.core.publisher.Mono: reactor.core.publisher.Mono onAssembly(reactor.core.publisher.Mono)>-><reactor.core.scheduler.ParallelScheduler: java.lang.Object get()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: void load(java.lang.String,java.lang.ClassLoader)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>-><java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.JdkLogger: void <init>(java.util.logging.Logger)>-><java.util.logging.Logger: java.lang.String getName()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.rmi.server.LoaderHandler$Loader: java.lang.String toString()>
<org.springframework.core.SpringProperties: void <clinit>()>-><sun.net.www.http.ChunkedInputStream: void close()>
<io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.management.openmbean.CompositeType: int hashCode()>
<org.bson.json.ShellMinKeyConverter: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.RDN: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><io.netty.buffer.SwappedByteBuf: boolean equals(java.lang.Object)>
<java.util.Collection: java.util.stream.Stream parallelStream()>-><java.util.concurrent.LinkedBlockingQueue: java.util.Spliterator spliterator()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity: org.springframework.data.mongodb.core.mapping.MongoPersistentProperty returnPropertyIfBetterIdPropertyCandidateOrNull(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.Sanitizer: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void closeIfUnsubscribed()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.types.MaxKey: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.mongodb.BasicDBObject: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber: boolean tryOnNext(java.lang.Object)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Optional: java.lang.String toString()>
<register-finalize <org.bson.json.StrictCharacterStreamJsonWriter$State: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.web.servlet.view.ResourceBundleViewResolver: org.springframework.beans.factory.BeanFactory initFactory(java.util.Locale)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt64: int compareTo(java.lang.Object)>
<org.bson.io.ByteBufferBsonInput: void <clinit>()>-><java.lang.String: java.lang.String valueOf(char)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.LocalDate: boolean equals(java.lang.Object)>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Calendar: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.MonthDay: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.text.AttributedCharacterIterator$Attribute: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.pool.ProxyLeakTask: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: java.lang.String toString()>
<org.bson.json.RelaxedExtendedJsonDateTimeConverter: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.nio.ByteOrder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonTimestamp: int hashCode()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonInt64: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.HashMap$Node: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.sun.net.httpserver.Filter$Chain: void doFilter(com.sun.net.httpserver.HttpExchange)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$TypeMatcher: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonNull: java.lang.String toString()>
<com.google.protobuf.CodedInputStream$ArrayDecoder: int pushLimit(int)>-><com.google.protobuf.CodedInputStream$ArrayDecoder: int getTotalBytesRead()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong collectLong(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>-><java.util.stream.Nodes: java.util.stream.Node$OfLong node(long[])>
<org.springframework.web.util.HierarchicalUriComponents$Type$3: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<reactor.core.publisher.Flux: reactor.core.publisher.Flux onAssembly(reactor.core.publisher.Flux)>-><reactor.core.scheduler.ParallelScheduler: java.lang.Object get()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<org.apache.catalina.startup.FailedContext: void <init>()>-><org.apache.catalina.util.LifecycleMBeanBase: void <init>()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<org.apache.catalina.core.StandardWrapper: void <init>()>-><java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<java.util.LinkedList$ListItr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonNull: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.node.DecimalNode: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationTagsReader: void <init>(springfox.documentation.spring.web.readers.operation.DefaultTagsProvider)>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.Document: java.lang.String toString()>
<java.util.Collections$UnmodifiableCollection: java.util.Spliterator spliterator()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Spliterator spliterator()>
<sun.security.util.Password: char[] readPassword(java.io.InputStream,boolean)>-><java.net.SocketInputStream: int read()>
<org.springframework.mail.javamail.ConfigurableMimeFileTypeMap: javax.activation.FileTypeMap createFileTypeMap(org.springframework.core.io.Resource,java.lang.String[])>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.bson.codecs.DecoderContext: void <clinit>()>-><org.bson.codecs.DecoderContext$Builder: org.bson.codecs.DecoderContext build()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: void load(java.lang.String,java.lang.ClassLoader)>-><java.net.SocketInputStream: int read(byte[])>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void initMaps(java.lang.Class,com.sun.jmx.mbeanserver.MBeanIntrospector)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.math.BigInteger: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.nio.charset.Charset: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.util.Iterator iterator()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation: com.mongodb.client.model.Collation lambda$toMongoCollationConverter$16(org.springframework.data.mongodb.core.query.Collation)>-><com.mongodb.client.model.Collation: com.mongodb.client.model.Collation$Builder builder()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonUndefined: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.Permission: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.paths.OperationPathDecorator: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>
<com.zaxxer.hikari.pool.ProxyConnection: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.ibatis.executor.ErrorContext: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonSymbol: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.bson.BsonArray: int size()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.Byte: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated validate(java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated$Valid valid(java.lang.String,java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.lang.String: int indexOf(int)>
<com.github.pagehelper.PageSerializable: void <init>(java.util.List)>-><java.util.Collections$SingletonList: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.LegacyHealthEndpointCompatibilityConfiguration: void <init>()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.lang.reflect.Parameter: java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class)>-><java.lang.reflect.Parameter: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.core.style.StylerUtils: void <clinit>()>-><org.springframework.core.style.DefaultValueStyler: void <init>()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.cglib.core.ClassInfo: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder,org.springframework.data.mapping.model.FieldNamingStrategy)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<org.bson.codecs.BsonValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BsonJavaScriptCodec: java.lang.Class getEncoderClass()>
<java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.String: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$EnableSameManagementContextConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientName()>
<org.springframework.web.servlet.function.RouterFunctionDsl$filter$1: void <init>(kotlin.jvm.functions.Function2)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonMaxKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String iterableToDelimitedString(java.lang.Iterable,java.lang.String,java.lang.String,org.springframework.core.convert.converter.Converter)>-><java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.AVA: java.lang.String toString()>
<sun.net.httpserver.ChunkedInputStream: void consumeCRLF()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void recoverQueue(java.lang.String,com.rabbitmq.client.impl.recovery.RecordedQueue,boolean)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping: void <clinit>()>-><java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: int hashCode()>
<io.micrometer.core.instrument.config.MeterRegistryConfigValidator: io.micrometer.core.instrument.config.validate.Validated lambda$check$3(java.lang.String,java.util.function.Function,io.micrometer.core.instrument.config.MeterRegistryConfig)>-><org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimplePropertiesConfigAdapter: java.lang.String prefix()>
<java.util.stream.ReferencePipeline$Head: boolean opIsStateful()>-><java.lang.UnsupportedOperationException: void <init>()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.ApiListingReferenceScanner: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.mail.MailHealthContributorAutoConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.security.cert.Certificate: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map,boolean,java.util.Locale)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.boot.actuate.trace.http.Include: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<com.mongodb.MongoClientSettings: void <clinit>()>-><com.mongodb.client.model.geojson.codecs.GeoJsonCodecProvider: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.Document: java.util.Set entrySet()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.management.ObjectName: int hashCode()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.security.core.authority.SimpleGrantedAuthority: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>
<org.springframework.data.mongodb.core.DefaultIndexOperations: java.lang.String lambda$ensureIndex$0(org.springframework.data.mongodb.core.index.IndexDefinition,com.mongodb.client.MongoCollection)>-><org.springframework.data.mongodb.core.DefaultIndexOperations: org.springframework.data.mongodb.core.mapping.MongoPersistentEntity lookupPersistentEntity(java.lang.Class,java.lang.String)>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.IntegerCodec: void <init>()>
<com.zaxxer.hikari.SQLExceptionOverride$Override: void <clinit>()>-><com.zaxxer.hikari.SQLExceptionOverride$Override: void <init>(java.lang.String,int)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SingletonList: void forEach(java.util.function.Consumer)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.ParsePosition: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.transaction.support.TransactionSynchronizationManager: java.lang.Object doUnbindResource(java.lang.Object)>-><org.bson.Document: java.lang.Object remove(java.lang.Object)>
<io.netty.util.internal.NativeLibraryLoader: void closeQuietly(java.io.Closeable)>-><sun.net.www.http.ChunkedInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonDocument: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated validateChronoUnit(java.lang.String,java.lang.String,java.lang.String)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>-><java.util.concurrent.TimeUnit$6: long toNanos(long)>
<org.springframework.boot.actuate.metrics.http.Outcome: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.google.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.cglib.core.Signature: int hashCode()>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void addAllowedOrigin(java.lang.String)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>-><java.util.concurrent.CopyOnWriteArrayList: void add(int,java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.bson.BsonContextType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<org.bson.types.Decimal128: void <clinit>()>-><java.util.HashSet: void <init>(java.util.Collection)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.apache.tomcat.util.buf.CharsetCache$DummyCharset: void <init>(java.lang.String,java.lang.String[])>-><java.nio.charset.Charset: void <init>(java.lang.String,java.lang.String[])>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.web.bind.annotation.RequestMethod: void <clinit>()>-><org.springframework.web.bind.annotation.RequestMethod: void <init>(java.lang.String,int)>
<org.bson.codecs.jsr310.DateTimeBasedCodec: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.lang.StringBuilder: void <init>()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration$ReactiveUserDetailsServiceCondition$ReactiveWebApplicationCondition: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.misc.Signal: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.lang.Error: void <init>(java.lang.String)>
<org.springframework.data.redis.connection.jedis.JedisConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisConnection: boolean isQueueing()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean isReadable()>-><java.net.SocketInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.stream.Nodes: java.util.stream.Node$OfInt flattenInt(java.util.stream.Node$OfInt)>-><java.util.stream.Nodes$AbstractConcNode: int getChildCount()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.EnumMap: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.mongodb.DBRef: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.Double: java.lang.String toString()>
<com.google.common.collect.ForwardingConcurrentMap: void <init>()>-><com.google.common.collect.ForwardingMap: void <init>()>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><java.lang.Object: void <init>()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: int hashCode()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)>
<org.bson.codecs.MapCodec: void <clinit>()>-><org.bson.codecs.BsonTypeClassMap: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.AtomicIntegerCodec: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: int hashCode()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.core.io.ClassPathResource: int hashCode()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.types.CodeWithScope: int hashCode()>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><java.util.ArrayList: void <init>(int)>
<sun.text.normalizer.UBiDiProps: void <init>()>-><sun.net.www.MeteredStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<register-finalize <org.springframework.data.mapping.model.PropertyNameFieldNamingStrategy: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><org.springframework.util.Assert: void isTrue(boolean,java.util.function.Supplier)>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><java.util.HashSet: void <init>()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.lettuce.core.masterslave.RedisMasterSlaveNode: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator verifyBaseTypeValidity(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType)>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BinaryCodec: java.lang.Class getEncoderClass()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.zaxxer.hikari.HikariDataSource: void <init>()>-><java.util.concurrent.atomic.AtomicBoolean: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.zone.ZoneRules: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isVerifyPeer()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings$Mapping: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><cn.hutool.core.date.DateTime: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.Log4J2MetricsAutoConfiguration: void <init>()>
<com.google.protobuf.Internal: void <clinit>()>-><java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<register-finalize <org.bson.json.JsonTokenType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<java.util.concurrent.Executors$PrivilegedThreadFactory: void <init>()>-><java.util.concurrent.Executors$DefaultThreadFactory: void <init>()>
<org.springframework.context.expression.MapAccessor: boolean canRead(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><org.bson.BsonDocument: boolean containsKey(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<java.util.zip.GZIPInputStream: int readUByte(java.io.InputStream)>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.types.MinKey: int hashCode()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.mapping.model.Property: java.util.Optional getWither()>-><org.springframework.data.util.Lazy: java.lang.Object get()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.LinkedList: boolean addAll(java.util.Collection)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<com.sun.jmx.mbeanserver.Introspector: javax.management.NotCompliantMBeanException throwException(java.lang.Class,java.lang.Throwable)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.buffer.WrappedByteBuf: java.lang.String toString()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$EmptyList: void forEach(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator build()>-><com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator: void <init>(java.util.Set,com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$TypeMatcher[],com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$NameMatcher[],com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$TypeMatcher[])>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.OperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>-><springfox.documentation.spring.web.readers.operation.AbstractOperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.BsonString: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.Document: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<com.rabbitmq.client.impl.ValueWriter: void writeArray(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.core.io.SerializedString: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: void <init>()>
<java.util.zip.CheckedInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<com.zaxxer.hikari.util.IsolationLevel: void <init>(java.lang.String,int,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<org.bson.json.ShellDecimal128Converter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.jdbc.config.SortedResourcesFactoryBean: int lambda$createInstance$0(org.springframework.core.io.Resource,org.springframework.core.io.Resource)>-><java.lang.String: int compareTo(java.lang.String)>
<org.springframework.data.redis.connection.jedis.JedisClientUtils: void <clinit>()>-><org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.types.MaxKey: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: boolean isCandidateComponent(org.springframework.core.type.classreading.MetadataReader)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonJavaScript: int hashCode()>
<com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><org.springframework.data.domain.Sort$Direction: org.springframework.data.domain.Sort$Direction[] values()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<java.util.stream.SpinedBuffer$OfPrimitive: long capacity()>-><java.util.stream.SpinedBuffer$OfDouble: int arrayLength(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.types.ObjectId: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isVerifyPeer()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonNull: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getEnum(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.Class,java.lang.String)>-><io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated$Valid valid(java.lang.String,java.lang.Object)>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonStringCodec: void <init>()>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonSymbolCodec: void <init>()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdate(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointDiscoverer: java.lang.String lambda$createOperationKey$0(org.springframework.boot.actuate.endpoint.web.WebOperation)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.util.MongoDbErrorCodes: void <clinit>()>-><java.util.HashMap: void putAll(java.util.Map)>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <clinit>()>-><java.util.LinkedHashSet: void <init>(java.util.Collection)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.security.CodeSource: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: java.lang.String toString()>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<java.io.BufferedInputStream: int read1(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.io.InputStream: void close()>
<java.util.ResourceBundle$Control$1: java.io.InputStream run()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Object: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><cn.hutool.core.date.format.FastDateFormat: int hashCode()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.net.HttpConnectSocketImpl: void <clinit>()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.management.MBeanInfo: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<io.jsonwebtoken.impl.JwtMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object remove(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.types.Decimal128: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.management.ThreadDumpEndpointAutoConfiguration: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertyFilePropertySource: java.util.Properties loadPropertiesFile(java.lang.String)>-><java.io.BufferedInputStream: void close()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.AbstractCollection: java.lang.String toString()>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<java.util.zip.CheckedInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<org.springframework.context.support.GenericApplicationContext: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.context.support.GenericApplicationContext: void <init>()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.actuate.health.Health: org.springframework.boot.actuate.health.Health$Builder status(org.springframework.boot.actuate.health.Status)>-><org.springframework.boot.actuate.health.Health$Builder: void <init>(org.springframework.boot.actuate.health.Status)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.LinkedHashMap: void afterNodeInsertion(boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$1: boolean removeEldestEntry(java.util.Map$Entry)>
<org.springframework.boot.actuate.endpoint.annotation.DiscoveredOperationsFactory: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<org.springframework.boot.web.client.ClientHttpRequestFactorySupplier: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.bson.BsonString: int compareTo(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.Class: java.lang.String getName()>
<org.bson.json.JsonReader$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><java.util.ArrayList: void clear()>
<register-finalize <org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: void <init>()>
<org.springframework.data.mapping.model.BasicPersistentEntity: org.springframework.data.mapping.Alias getAliasFromAnnotation(java.lang.Class)>-><java.util.Optional: java.util.Optional filter(java.util.function.Predicate)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.RawBsonArray: int hashCode()>
<org.apache.logging.log4j.util.PropertyFilePropertySource: java.util.Properties loadPropertiesFile(java.lang.String)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.types.Symbol: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.reflect.Method: java.lang.String toString()>
<com.google.common.base.Joiner$MapJoiner: void <init>(com.google.common.base.Joiner,java.lang.String)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: int determinePort()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.core.type.classreading.SimpleMetadataReader: org.springframework.asm.ClassReader getClassReader(org.springframework.core.io.Resource)>-><java.io.InputStream: void close()>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: void <init>()>-><java.lang.NoClassDefFoundError: void <init>(java.lang.String)>
<springfox.documentation.spring.web.readers.operation.AbstractOperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveSetterConflicts(java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.CountDownLatch: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><sun.net.ProgressSource: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.security.Provider: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<java.util.stream.ReferencePipeline: void forEachWithCancel(java.util.Spliterator,java.util.stream.Sink)>-><java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.Period: int hashCode()>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><com.google.protobuf.LazyStringArrayList: void <init>()>
<org.springframework.http.HttpStatus: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<com.mongodb.DBObjectCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap)>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,int)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<register-finalize <org.springframework.boot.autoconfigure.amqp.RabbitRetryTemplateCustomizer$Target: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><io.micrometer.core.instrument.config.validate.Validated$None: java.util.Iterator iterator()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.String: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void put(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mongodb.core.DefaultIndexOperations: java.lang.String lambda$ensureIndex$0(org.springframework.data.mongodb.core.index.IndexDefinition,com.mongodb.client.MongoCollection)>-><org.springframework.data.mongodb.core.DefaultIndexOperations: com.mongodb.client.model.IndexOptions addDefaultCollationIfRequired(com.mongodb.client.model.IndexOptions,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><org.bson.BsonArray: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.internal.Optional: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.TreeMap$Entry: boolean equals(java.lang.Object)>
<reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><reactor.core.scheduler.ParallelScheduler: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>
<org.springframework.boot.actuate.endpoint.Sanitizer: void <clinit>()>-><java.util.LinkedHashSet: void <init>(java.util.Collection)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.types.BSONTimestamp: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonMinKey: int hashCode()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonDateTime: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<com.mongodb.MongoClientSettings: void <clinit>()>-><com.mongodb.DBRefCodecProvider: void <init>()>
<com.mongodb.client.model.geojson.Geometry: void <clinit>()>-><com.mongodb.client.model.geojson.codecs.GeoJsonCodecProvider: void <init>()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<java.util.stream.SpinedBuffer$OfPrimitive: long capacity()>-><java.util.stream.SpinedBuffer$OfLong: int arrayLength(java.lang.Object)>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.locale.Extension: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void recoverExchange(com.rabbitmq.client.impl.recovery.RecordedExchange,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><io.netty.buffer.WrappedByteBuf: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.LocalDateTime: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineHost()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String getHost()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Label: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<org.bson.internal.ProvidersCodecRegistry: void <init>(java.util.List)>-><org.bson.internal.CodecCache: void <init>()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.Frame: long tableSize(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.slf4j.event.Level: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map,boolean,java.util.Locale)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<cn.hutool.core.map.MapUtil: java.lang.Object get(java.util.Map,java.lang.Object,java.lang.Class,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.apache.ibatis.cache.decorators.LoggingCache: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><org.springframework.data.mapping.model.BasicPersistentEntity: org.springframework.data.util.TypeInformation getTypeInformation()>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler pickSoleHandler(java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration: void <init>()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.SubList$1: java.lang.Object next()>
<org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$DifferentManagementContextConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.actuate.autoconfigure.web.ManagementContextFactory)>-><org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextFactory: void <init>()>
<cn.hutool.core.map.MapProxy: java.util.Collection values()>-><org.bson.BsonDocument: java.util.Collection values()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<java.util.Vector$VectorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: int determinePort()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.Integer getPort()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.jsonwebtoken.impl.JwtMap: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber: boolean tryOnNext(java.lang.Object)>-><reactor.core.publisher.ParallelPeek: java.util.function.Consumer onNextCall()>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void <init>(org.slf4j.spi.LocationAwareLogger)>-><ch.qos.logback.classic.Logger: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.StringJoiner: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: void <clinit>()>-><java.util.ArrayList: void <init>(int)>
<jdk.internal.util.xml.impl.Parser: void dtd()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.Collections$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<java.util.stream.AbstractPipeline: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator spliterator()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong flattenLong(java.util.stream.Node$OfLong)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.security.util.DerInputBuffer: int hashCode()>
<java.util.LinkedList$LLSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.boot.web.error.ErrorAttributeOptions getErrorAttributeOptions(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.WeakHashMap$Entry: int hashCode()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonNull: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: int hashCode()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: java.lang.Object manageMapIfNecessary(java.util.Map)>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void close()>-><org.springframework.data.redis.connection.jedis.JedisSubscription: void doClose()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><org.springframework.http.server.PathContainer$Options: boolean shouldDecodeAndParseSegments()>
<io.jsonwebtoken.impl.JwtMap: void setValue(java.lang.String,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<org.springframework.data.mongodb.core.convert.DocumentAccessor: java.lang.Object get(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType)>-><com.google.common.collect.ForwardingCollection: boolean contains(java.lang.Object)>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver: void resolveAndAddIndexesForAssociation(org.springframework.data.mapping.Association,java.util.List,java.lang.String,java.lang.String)>-><org.springframework.data.mapping.MappingException: void <init>(java.lang.String)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonTimestampCodec: void <init>()>
<sun.net.www.protocol.http.AuthCacheImpl: void <init>()>-><java.lang.Object: void <init>()>
<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>-><sun.net.www.http.ChunkedInputStream: void close()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<io.jsonwebtoken.impl.JwtMap: void setValue(java.lang.String,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object remove(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.ZoneOffset: java.lang.String toString()>
<org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator: void createAndRegisterProperty(org.springframework.data.mapping.model.Property)>-><org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: boolean isTransient()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonInt32: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.beans.factory.config.RuntimeBeanReference: boolean equals(java.lang.Object)>
<org.springframework.boot.ImageBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Hashtable: int hashCode()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated flatMap(java.util.function.Function)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: io.micrometer.core.instrument.config.validate.Validated flatMap(java.util.function.BiFunction)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<javax.security.auth.Policy$4: void <init>()>-><java.lang.Object: void <init>()>
<register-finalize <com.mongodb.client.model.geojson.CoordinateReferenceSystemType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.TreeMap$Entry: java.lang.String toString()>
<org.bson.Document: java.lang.String toJson(org.bson.json.JsonWriterSettings)>-><org.bson.Document: java.lang.String toJson(org.bson.json.JsonWriterSettings,org.bson.codecs.Encoder)>
<io.lettuce.core.ReadFromImpl$ReadFromNearest: void <init>()>-><io.lettuce.core.ReadFrom: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void closeIfUnsubscribed()>-><java.util.ArrayList: boolean isEmpty()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.bson.AbstractBsonReader$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions max(java.lang.Double)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><java.lang.ThreadGroup: java.lang.String getName()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.Document: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<org.apache.catalina.core.ApplicationFilterConfig: void registerJMX()>-><org.apache.catalina.startup.FailedContext: java.lang.String getName()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.util.TreeMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Set removeBindingsWithDestination(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.ApiDescriptionLookup: void <init>()>-><java.lang.Object: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksEndpointAutoConfiguration: void <init>()>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse success()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: void <init>(org.springframework.http.HttpStatus)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration: void <init>(org.springframework.mail.javamail.JavaMailSenderImpl)>-><org.springframework.mail.javamail.JavaMailSenderImpl: void <init>()>
<java.util.Collection: java.util.stream.Stream parallelStream()>-><java.util.SortedSet: java.util.Spliterator spliterator()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.util.Collections$UnmodifiableList$1: void <init>(java.util.Collections$UnmodifiableList,int)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.ListIterator listIterator(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: java.lang.Object next()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.Class)>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<jdk.internal.util.xml.impl.Parser: void dtd()>-><sun.net.www.http.KeepAliveStream: void close()>
<jdk.internal.util.xml.impl.ReaderUTF8: void close()>-><java.io.BufferedInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.CompletableFuture: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<java.util.concurrent.Executors$DelegatedExecutorService: java.util.List shutdownNow()>-><java.util.concurrent.ScheduledThreadPoolExecutor: java.util.List shutdownNow()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.RawBsonArray: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.node.POJONode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>-><java.util.HashSet: void <init>(int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><java.util.ArrayList: int size()>
<springfox.documentation.schema.property.bean.AccessorsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.slf4j.helpers.SubstituteLogger: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisSubscription: void doClose()>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getChannels()>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void visit(com.sun.jmx.mbeanserver.MBeanAnalyzer$MBeanVisitor)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.util.ParentTypeAwareTypeInformation: java.lang.Class getType()>
<com.rabbitmq.client.impl.Frame: long arraySize(java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.PermissionCollection: java.lang.String toString()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.bson.codecs.BsonDecimal128Codec: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.net.URLClassLoader: void close()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.CharacterCodec: void <init>()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: long _convertNumberToLong(java.lang.Number)>-><org.bson.types.Decimal128: double doubleValue()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.types.Symbol: java.lang.String toString()>
<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>-><java.io.FileInputStream: void close()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$1: void <init>(java.lang.String,int,java.lang.String)>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String,org.springframework.context.annotation.MBeanExportConfiguration$1)>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpointAutoConfiguration: void <init>()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ExtendedJsonMaxKeyConverter: void <init>()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonInt32: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisClientUtils: void <clinit>()>-><org.springframework.data.redis.connection.jedis.JedisClientUtils$1: void <init>()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.bson.BsonString: int compareTo(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<sun.awt.DebugSettings: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><cn.hutool.json.JSONArray: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.types.Code: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.management.MBeanAttributeInfo: int hashCode()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonJavaScript: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.sql.Date: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<java.util.stream.AbstractPipeline: java.util.stream.Node evaluate(java.util.Spliterator,boolean,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.util.stream.Node build()>
<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String toJavaUncached0(java.lang.String,boolean)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<java.time.format.ZoneName: void <clinit>()>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.text.PatternEntry: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity$MongoPersistentPropertyComparator: void <clinit>()>-><org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity$MongoPersistentPropertyComparator: void <init>(java.lang.String,int)>
<org.springframework.data.spel.ExtensionAwareEvaluationContextProvider$EvaluationContextExtensionAdapter: void <init>(org.springframework.data.spel.spi.EvaluationContextExtension,org.springframework.data.spel.EvaluationContextExtensionInformation)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.LegacyExtendedJsonBinaryConverter: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeMessage(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><java.lang.Enum: int ordinal()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisConnection: boolean isPipelined()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdate(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.ImageBanner: org.springframework.boot.ImageBanner$Frame[] readFrames(int,int)>-><sun.net.www.http.ChunkedInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.sql.Time: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Calendar: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.health.HealthProperties$Show: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthProperties$Show: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.Instant: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.annotation.Annotation findPropertyOrOwnerAnnotation(java.lang.Class)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.annotation.Annotation findAnnotation(java.lang.Class)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: int hashCode()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void validateAnnotation(java.lang.annotation.Annotation,java.lang.String,java.lang.Object[])>-><java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxCreate$LatestAsyncSink: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.publisher.FluxCreate$IgnoreSink: java.lang.String toString()>
<org.springframework.data.mapping.model.BasicPersistentEntity: org.springframework.data.mapping.Alias lambda$new$0()>-><org.springframework.data.mapping.model.BasicPersistentEntity: org.springframework.data.mapping.Alias getAliasFromAnnotation(java.lang.Class)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.types.MaxKey: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.LinkedList: int size()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.JwtMap: java.util.Collection values()>-><org.bson.Document: java.util.Collection values()>
<sun.net.www.http.HttpClient: void <clinit>()>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.text.DigitList: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonBoolean: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonDecimal128: int hashCode()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.BitSet: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<org.apache.ibatis.io.Resources: java.util.Properties getUrlAsProperties(java.lang.String)>-><java.io.InputStream: void close()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.server.EnableChildManagementContextConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.ArrayList: int size()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isUseSsl()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: int determinePort()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: int access$100(org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.lettuce.core.event.metrics.CommandLatencyEvent: java.lang.String toString()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonNull: int hashCode()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.nio.charset.Charset: int hashCode()>
<com.google.common.cache.LocalCache$LocalManualCache: void <init>(com.google.common.cache.LocalCache)>-><java.lang.Object: void <init>()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.UriComponentsBuilder: java.lang.Object lambda$buildInternal$0(java.lang.String)>-><java.util.HashMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>
<io.jsonwebtoken.impl.JwtMap: java.util.Date getDate(java.lang.String)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><com.google.common.collect.ForwardingCollection: int size()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>-><java.lang.String: java.lang.String valueOf(char)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserializeUsingCustom(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection,com.fasterxml.jackson.databind.JsonDeserializer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.apache.logging.log4j.Level: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.StringCodec: void <init>()>
<register-finalize <org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisConnection: boolean isSubscribed()>-><org.springframework.data.redis.connection.util.AbstractSubscription: boolean isAlive()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Character: java.lang.String toString()>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.MeteredStream: int read()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.management.MBeanInfo: int hashCode()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.mongodb.client.model.geojson.Position: int hashCode()>
<org.bson.codecs.DocumentCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap,org.bson.Transformer)>-><org.bson.assertions.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.types.MinKey: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.asm.Type: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.jsonwebtoken.impl.JwtMap: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: void <init>()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.CloudFoundrySecurityInterceptor: void <clinit>()>-><reactor.core.publisher.Mono: reactor.core.publisher.Mono just(java.lang.Object)>
<org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter: java.util.Map lambda$new$0(javax.servlet.http.HttpServletRequest)>-><java.util.Collections: java.util.Map emptyMap()>
<javax.security.auth.SubjectDomainCombiner: boolean cachePolicy()>-><javax.security.auth.SubjectDomainCombiner$4: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.util.LazyStreamable: java.lang.String toString()>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<org.springframework.context.expression.MapAccessor: void write(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.asm.Type: java.lang.String toString()>
<sun.misc.Resource: byte[] getBytes()>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: java.lang.Object get(int)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonDbPointer: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonDbPointer: int hashCode()>
<org.bson.codecs.CodeCodec: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.codecs.ValueCodecProvider: int hashCode()>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.bson.codecs.jsr310.Jsr310CodecProvider: void putCodec(org.bson.codecs.Codec)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: int hashCode()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber,java.util.Iterator,boolean,java.lang.Runnable)>-><java.util.Spliterators$3Adapter: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.net.AbstractPlainSocketImpl: void doConnect(java.net.InetAddress,int,int)>-><java.net.AbstractPlainSocketImpl: void close()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonMaxKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.RegularEnumSet: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: void <clinit>()>-><java.util.HashMap: void <init>()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineAddresses()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.bson.json.JsonScanner$NumberState: org.bson.json.JsonScanner$NumberState[] values()>-><java.lang.Object: java.lang.Object clone()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.util.LinkedMultiValueMap: java.lang.String toString()>
<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String toJavaUncached0(java.lang.String,boolean)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: void <clinit>()>-><sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.asm.Handle: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler pickSoleHandler(java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.IdentityHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.io.DataInputStream: char readChar()>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.CodeCodec: java.lang.Class getEncoderClass()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>-><java.util.HashSet: java.util.Iterator iterator()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonString: int compareTo(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientName()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientName()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration: void <init>()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><com.mongodb.client.model.geojson.MultiLineString: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: int compareTo(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.Character: java.lang.Character valueOf(char)>
<org.bson.internal.Optional: void <clinit>()>-><org.bson.internal.Optional$1: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <clinit>()>-><org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <init>(org.springframework.security.web.server.csrf.CsrfWebFilter$1)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.Float: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void unsubscribeChannel(byte[][])>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Properties: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.redis.connection.util.ByteArrayWrapper: boolean equals(java.lang.Object)>
<io.netty.util.internal.NativeLibraryLoader: void closeQuietly(java.io.Closeable)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.data.mapping.model.BasicPersistentEntity: java.util.Optional lambda$doFindAnnotation$8(java.lang.Class)>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean isExternalMessageHeaderAllowed(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: boolean isRestrictedHeader(java.lang.String,java.lang.String)>
<java.util.SubList$1: void <init>(java.util.SubList,int)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.ListIterator listIterator(int)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions background(boolean)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>-><ch.qos.logback.classic.Logger: java.lang.String getName()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isUseSsl()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler pickSoleHandler(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<springfox.documentation.schema.property.bean.AccessorsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void recoverExchange(com.rabbitmq.client.impl.recovery.RecordedExchange,boolean)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<com.rabbitmq.client.impl.ValueWriter: void writeArray(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<sun.misc.Resource: byte[] getBytes()>-><java.io.BufferedInputStream: void close()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase: com.fasterxml.jackson.databind.JsonDeserializer _findDeserializer(com.fasterxml.jackson.databind.DeserializationContext,java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonTimestamp: java.lang.String toString()>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><org.springframework.data.mapping.model.BasicPersistentEntity: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration: void <init>()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.reflect.Parameter: int hashCode()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void doWithAssociations(org.springframework.data.mapping.SimpleAssociationHandler)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: boolean indexSupportsIncludeFilters()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.types.MinKey: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<io.netty.util.internal.NativeLibraryLoader: void load(java.lang.String,java.lang.ClassLoader)>-><java.io.FilterInputStream: int read(byte[])>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonJavaScriptWithScope: int hashCode()>
<java.util.PrimitiveIterator$OfInt: void forEachRemaining(java.util.function.IntConsumer)>-><java.util.stream.ReduceOps$6ReducingSink: void accept(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<org.springframework.context.expression.MapAccessor: boolean canRead(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><org.bson.RawBsonDocument: boolean containsKey(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: int hashCode()>
<org.springframework.data.mongodb.core.MongoTemplate: void <clinit>()>-><java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$ExtensionBean: java.lang.String lambda$new$0(java.lang.Class)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.temporal.WeekFields: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonMinKey: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<register-finalize <sun.net.www.http.HttpClient: sun.net.www.http.HttpClient New(java.net.URL,java.net.Proxy,int,boolean,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<com.rabbitmq.client.impl.ValueWriter: void writeArray(java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.apache.ibatis.builder.xml.XMLConfigBuilder: java.util.Properties settingsAsProperties(org.apache.ibatis.parsing.XNode)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void recoverTopology(java.util.concurrent.ExecutorService)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.springframework.boot.actuate.metrics.web.client.MetricsClientHttpRequestInterceptor$UrlTemplateThreadLocal: void <init>()>-><org.springframework.core.NamedThreadLocal: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: boolean isFactoryMethod(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>-><com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: com.fasterxml.jackson.annotation.JsonCreator$Mode findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.apache.ibatis.type.TypeHandlerRegistry: java.util.Map getJdbcHandlerMapForEnumInterfaces(java.lang.Class,java.lang.Class)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.util.List)>-><java.util.AbstractCollection: boolean isEmpty()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndBind(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.context.support.StaticMessageSource: void <init>()>-><org.springframework.context.support.AbstractMessageSource: void <init>()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper addProperty(java.lang.String,java.lang.Object)>-><org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.support.AbstractBeanDefinition getBeanDefinition()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<org.springframework.boot.security.servlet.ApplicationContextRequestMatcher: void <init>(java.lang.Class)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>-><com.google.protobuf.InvalidProtocolBufferException: void <init>(java.lang.String)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: int hashCode()>
<java.util.Collections$SynchronizedMap: void putAll(java.util.Map)>-><org.bson.BsonDocument: void putAll(java.util.Map)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultSeparator: void <init>(char,java.lang.String)>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonDouble: int hashCode()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.security.ProtectionDomain: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.codecs.ValueCodecProvider: int hashCode()>
<org.springframework.data.mongodb.core.query.Collation: com.mongodb.client.model.Collation lambda$toMongoCollationConverter$16(org.springframework.data.mongodb.core.query.Collation)>-><java.lang.Object: java.lang.Class getClass()>
<io.micrometer.core.util.internal.logging.JdkLogger: void debug(java.lang.String)>-><io.micrometer.core.util.internal.logging.JdkLogger: void log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<sun.net.httpserver.FixedLengthInputStream: int readImpl(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.io.DataOutputStream: void writeBoolean(boolean)>-><java.io.PrintStream: void write(int)>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.RedisURI createRedisURIAndApplySettings(java.lang.String,int)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isVerifyPeer()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: java.lang.String lambda$setDatabase$0(int)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonObjectId: java.lang.String toString()>
<com.mongodb.MongoClientSettings: void <clinit>()>-><org.bson.codecs.configuration.CodecRegistries: org.bson.codecs.configuration.CodecRegistry fromProviders(java.util.List)>
<org.springframework.http.converter.feed.AtomFeedHttpMessageConverter: boolean supports(java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><org.bson.Document: java.util.Set entrySet()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<org.springframework.data.mapping.model.BasicPersistentEntity: org.springframework.data.mapping.Alias getAliasFromAnnotation(java.lang.Class)>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver: void resolveAndAddIndexesForAssociation(org.springframework.data.mapping.Association,java.util.List,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonDocument: java.lang.String toString()>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$2(org.bson.Document,java.lang.Boolean)>-><org.bson.Document: org.bson.Document append(java.lang.String,java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonNull: int hashCode()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.Collation fromDocument(org.bson.Document)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.String: java.lang.String substring(int)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.Vector$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)>-><org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation findAnnotation(java.lang.Class,java.lang.Class)>
<org.springframework.boot.actuate.health.HealthEndpointSupport: void <clinit>()>-><org.springframework.boot.actuate.health.Health: org.springframework.boot.actuate.health.Health$Builder up()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong collectLong(java.util.stream.PipelineHelper,java.util.Spliterator,boolean)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<cn.hutool.core.map.MapProxy: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Enum: java.lang.String toString()>
<org.apache.ibatis.mapping.ResultMap$Builder: java.util.List getArgNames(java.lang.reflect.Constructor)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>
<org.bson.codecs.Decimal128Codec: void <init>()>-><java.lang.Object: void <init>()>
<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getName()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void addClassIfPresent(java.util.Collection,java.lang.String)>-><java.util.HashSet: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.AbstractRedisClient createClient()>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientOptions()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdate(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.node.ObjectNode: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.node.BinaryNode: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonNull: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.nio.ByteOrder: java.lang.String toString()>
<org.springframework.web.servlet.view.ResourceBundleViewResolver: org.springframework.beans.factory.BeanFactory initFactory(java.util.Locale)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonArray: java.lang.String toString()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><ch.qos.logback.classic.Logger: void info(java.lang.String,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.nio.ByteOrder: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.Document: java.lang.String toString()>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: int characteristics()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void lambda$populateAnnotationCache$6(java.lang.reflect.Method)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Enum: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type$2: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<reactor.core.publisher.ParallelPeek: void <init>(reactor.core.publisher.ParallelFlux,java.util.function.Consumer,java.util.function.Consumer,java.util.function.Consumer,java.lang.Runnable,java.lang.Runnable,java.util.function.Consumer,java.util.function.LongConsumer,java.lang.Runnable)>-><reactor.core.publisher.ParallelFlux: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController$1: void <clinit>()>-><org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeAttribute: org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeAttribute[] values()>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: java.lang.Object getCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<com.mongodb.client.model.CollationStrength: com.mongodb.client.model.CollationStrength fromInt(int)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.types.MinKey: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.text.AttributeEntry: int hashCode()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.data.mapping.model.BeanWrapperPropertyAccessorFactory: void <clinit>()>-><org.springframework.data.mapping.model.BeanWrapperPropertyAccessorFactory: void <init>(java.lang.String,int)>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><org.springframework.data.mongodb.core.index.IndexInfo: void <init>(java.util.List,java.lang.String,boolean,boolean,java.lang.String)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.asm.Handle: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><org.springframework.http.server.DefaultPathContainer$DefaultSeparator: java.lang.String value()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.management.MBeanOperationInfo: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$4Adapter: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCreate$DropAsyncSink: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<org.bson.codecs.MapCodec: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<springfox.documentation.spring.web.readers.parameter.ParameterRequiredReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: boolean supportsTransparentAuth()>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.ZoneId: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.action.AbstractEventEvaluatorAction: void end(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.bson.Document: java.lang.String toJson(org.bson.json.JsonWriterSettings,org.bson.codecs.Encoder)>-><java.io.StringWriter: void <init>()>
<java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String lambda$toString$1(java.util.Map$Entry)>-><org.springframework.data.mongodb.util.BsonUtils: java.lang.String toJson(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: void closeQuietly(java.io.Closeable)>-><java.io.BufferedInputStream: void close()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.util.TypeKey: int hashCode()>
<io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated$Invalid invalid(java.lang.String,java.lang.Object,java.lang.String,io.micrometer.core.instrument.config.validate.InvalidReason,java.lang.Throwable)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: void <init>(java.lang.String,java.lang.Object,java.lang.String,io.micrometer.core.instrument.config.validate.InvalidReason,java.lang.Throwable)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<org.springframework.data.mapping.PreferredConstructor$Parameter: java.lang.Boolean lambda$new$0(org.springframework.data.mapping.PersistentEntity,org.springframework.data.util.TypeInformation)>-><java.lang.IllegalStateException: void <init>()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.net.URLConnection: void setUseCaches(boolean)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.bson.RawBsonArray$RawBsonArrayList: java.lang.Object get(int)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.util.StringJoiner: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation: org.springframework.data.mongodb.core.query.Collation$Alternate lambda$alternate$1(java.lang.String)>-><java.util.Optional: java.util.Optional empty()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonBinary: int hashCode()>
<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>-><org.springframework.ui.ModelMap: org.springframework.ui.ModelMap addAllAttributes(java.util.Map)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.BsonArray: int size()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.ConcurrentBag: boolean lambda$values$2(int,com.zaxxer.hikari.util.ConcurrentBag$IConcurrentBagEntry)>-><com.zaxxer.hikari.pool.PoolEntry: int getState()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Double: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertyFilePropertySource: java.util.Properties loadPropertiesFile(java.lang.String)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><io.netty.util.AbstractConstant: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<org.springframework.core.type.classreading.SimpleMetadataReader: org.springframework.asm.ClassReader getClassReader(org.springframework.core.io.Resource)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.NTLMAuthenticationProxy tryLoadNTLMAuthentication()>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><org.springframework.data.mongodb.core.index.IndexField: org.springframework.data.mongodb.core.index.IndexField create(java.lang.String,org.springframework.data.domain.Sort$Direction)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.data.spel.Functions: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonTimestamp: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.io.FileInputStream: void close()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: java.lang.String substring(int,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void addClassIfExists(java.util.List,java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><com.google.common.collect.ForwardingCollection: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void debug(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: int hashCode()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.beans.factory.config.DependencyDescriptor: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Collections$EmptyList: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Generic: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.beans.factory.config.RuntimeBeanReference: int hashCode()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<sun.net.httpserver.ChunkedInputStream: void consumeCRLF()>-><sun.net.www.MeteredStream: int read()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.ProcessEnvironment$ExternalData: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: int length()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.util.Map mapAnnotations(java.lang.annotation.Annotation[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<org.springframework.security.core.userdetails.User$UserBuilder: java.lang.String lambda$roles$1(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.catalina.core.ApplicationFilterConfig: void registerJMX()>-><org.apache.catalina.startup.FailedContext: org.apache.catalina.Container getParent()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.actuate.trace.http.Include: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<register-finalize <org.bson.AbstractBsonReader$State: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<javax.servlet.ServletOutputStream: void <clinit>()>-><java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.URL: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.Vector$Itr: java.lang.Object next()>
<reactor.util.function.Tuple3: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.ibatis.executor.ErrorContext: java.lang.String toString()>
<org.springframework.context.expression.MapAccessor: void write(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.security.BasicPermission: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: boolean fillBuffer()>-><java.util.stream.Sink$ChainedLong: boolean cancellationRequested()>
<org.springframework.data.redis.connection.RedisGeoCommands$GeoRadiusCommandArgs$Flag: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.pool.HikariPool: void <init>(com.zaxxer.hikari.HikariConfig)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: boolean isExplicitIdProperty()>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: boolean isAnnotationPresent(java.lang.Class)>
<org.springframework.security.authentication.AccountStatusException: void <init>(java.lang.String,java.lang.Throwable)>-><org.springframework.security.core.AuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>-><sun.net.www.protocol.http.HttpURLConnection: java.util.Set schemesListToSet(java.lang.String)>
<io.micrometer.core.instrument.util.StringUtils: boolean isEmpty(java.lang.String)>-><java.lang.String: boolean isEmpty()>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.text.DigitList: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.mongodb.BasicDBObject: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRef: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.types.Code: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisConnection: boolean isSubscribed()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.Tag: int compareTo(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated detect(java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.DurationValidator[] values()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.sun.net.httpserver.Headers: java.lang.String getFirst(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.springframework.boot.web.embedded.tomcat.TldSkipPatterns: void <clinit>()>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.Duration: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.LinkedList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.ibatis.mapping.ResultMapping: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonDbPointer: java.lang.String toString()>
<org.springframework.transaction.support.TransactionSynchronizationManager: java.lang.Object doUnbindResource(java.lang.Object)>-><org.bson.RawBsonDocument: boolean isEmpty()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonMinKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator: void <init>(java.lang.String,int,java.lang.String[])>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.management.MBeanInfo: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Calendar: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonMinKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<com.google.common.util.concurrent.SerializingExecutor: void <init>(java.util.concurrent.Executor)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.AbstractByteBufAllocator: java.lang.String toString()>
<com.mongodb.MongoClientSettings: void <clinit>()>-><org.bson.codecs.ValueCodecProvider: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonUndefined: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonTimestamp: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.EnumResolver: com.fasterxml.jackson.databind.util.EnumResolver constructUsingMethod(java.lang.Class,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.AnnotationIntrospector)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.data.redis.cache.CacheKeyPrefix: java.lang.String lambda$simple$0(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.net.HttpConnectSocketImpl$1: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.HashSet: java.util.Iterator iterator()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Hashtable: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.Provider$Service: java.lang.String toString()>
<com.alibaba.druid.support.logging.LogFactory: void <clinit>()>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean isRestrictedHeader(java.lang.String,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.x509.RDN: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.security.web.debug.DebugRequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>-><javax.servlet.http.HttpServletRequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: boolean isEmpty()>
<java.util.stream.Streams$StreamBuilderImpl: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.lettuce.core.metrics.CommandMetrics: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonBoolean: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.CodeCodec: void <init>()>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.Duration: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: int hashCode()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler getTypeHandler(java.lang.reflect.Type,org.apache.ibatis.type.JdbcType)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>-><springfox.documentation.spring.web.readers.operation.HandlerMethodResolver: void <init>(com.fasterxml.classmate.TypeResolver)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<com.mongodb.DBObjectCodec: org.bson.codecs.BsonTypeClassMap createDefaultBsonTypeClassMap()>-><java.util.HashMap: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><ch.qos.logback.core.status.StatusBase: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.nio.ByteBuffer: int hashCode()>
<org.springframework.data.redis.connection.RedisNode$NodeType: void <clinit>()>-><org.springframework.data.redis.connection.RedisNode$NodeType: void <init>(java.lang.String,int)>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$13(com.mongodb.client.model.Collation$Builder,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$TertiaryICUComparisonLevel: java.util.Optional getCaseFirst()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void validateAnnotation(java.lang.annotation.Annotation,java.lang.String,java.lang.Object[])>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.bson.json.ShellDateTimeConverter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection getPatterns()>
<register-finalize <org.springframework.web.bind.annotation.RequestMethod: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<io.netty.util.internal.NativeLibraryLoader: byte[] classToByteArray(java.lang.Class)>-><java.io.InputStream: int read(byte[])>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator: boolean lambda$fetchIndexInformation$0(java.lang.Object,org.springframework.data.mongodb.core.index.IndexInfo)>-><org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<io.lettuce.core.RedisConnectionException: io.lettuce.core.RedisConnectionException create(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.util.DerValue: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.Scannable$Attr$1: java.lang.String toString()>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: java.util.Set addCandidateComponentsFromIndex(org.springframework.context.index.CandidateComponentsIndex,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonNull: int hashCode()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.util.ArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<java.util.zip.CheckedInputStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.springframework.data.redis.core.StringRedisTemplate: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.core.StringRedisTemplate: void <init>()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration: void <init>()>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String,java.util.Locale)>-><java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendPattern(java.lang.String)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: int hashCode()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<io.micrometer.core.instrument.config.validate.ValidationException: java.lang.String lambda$new$0(io.micrometer.core.instrument.config.validate.Validated$Invalid)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String getProperty()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.util.LRUTypeCache: void <init>(int)>-><com.fasterxml.classmate.util.LRUTypeCache$CacheMap: void <init>(int)>
<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<sun.util.locale.provider.LocaleServiceProviderPool: java.util.List findProviders(java.util.Locale)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <init>(java.lang.String[])>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)>-><com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.cfg.MapperConfig getConfig()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><java.util.Spliterators$3Adapter: boolean hasNext()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void recoverQueue(java.lang.String,com.rabbitmq.client.impl.recovery.RecordedQueue,boolean)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><reactor.util.Loggers$Slf4JLogger: void error(java.lang.String,java.lang.Throwable)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.Short: java.lang.String toString()>
<com.mongodb.DBObjectCodec: org.bson.codecs.BsonTypeClassMap createDefaultBsonTypeClassMap()>-><org.bson.codecs.BsonTypeClassMap: void <init>(java.util.Map)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ParameterTypeReader: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.SymbolCodec: void <init>()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.util.stream.Stream getAccessors()>-><org.springframework.data.mapping.model.AbstractPersistentProperty: java.lang.reflect.Method getSetter()>
<java.lang.Void: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale)>-><java.text.DateFormat: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$13(com.mongodb.client.model.Collation$Builder,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$PrimaryICUComparisonLevel: int getLevel()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.util.ResourceLeakDetector$Record: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<org.apache.ibatis.builder.xml.XMLMapperBuilder: void parsePendingResultMaps()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><cn.hutool.json.JSONArray: int size()>
<java.util.stream.Streams$StreamBuilderImpl: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.JsonSymbolConverter: void <init>()>
<org.apache.catalina.util.LifecycleBase: void init()>-><org.apache.catalina.core.StandardWrapperValve: void initInternal()>
<io.micrometer.core.util.internal.logging.JdkLoggerFactory: void <init>()>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: void <init>()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<springfox.documentation.schema.TypeNameExtractor: void <init>(com.fasterxml.classmate.TypeResolver,org.springframework.plugin.core.PluginRegistry,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><cn.hutool.core.lang.Tuple: java.lang.String toString()>
<org.bson.codecs.DocumentCodec: void <clinit>()>-><org.bson.codecs.DocumentCodecProvider: void <init>()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.types.Symbol: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: int compareTo(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: void afterPropertiesSet()>-><redis.clients.jedis.JedisShardInfo: void setSoTimeout(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Optional: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonInt64: int hashCode()>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.types.CodeWScope: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.sql.Timestamp: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <clinit>()>-><java.util.EnumMap: void <init>(java.lang.Class)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean isReadable()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnect()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.awt.image.ColorModel: int hashCode()>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: int getMaxIdle()>
<springfox.documentation.spring.web.scanners.CachingOperationReader$1: void <init>(springfox.documentation.spring.web.scanners.CachingOperationReader,springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheLoader: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration: void <init>()>
<com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>-><com.google.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.YearMonth: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.Flux: java.lang.String toString()>
<io.jsonwebtoken.impl.JwtMap: java.util.Date getDate(java.lang.String)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$2: void <init>(java.lang.String,int)>
<org.springframework.data.mongodb.core.query.Collation: com.mongodb.client.model.Collation lambda$toMongoCollationConverter$16(org.springframework.data.mongodb.core.query.Collation)>-><com.mongodb.client.model.Collation$Builder: com.mongodb.client.model.Collation build()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: io.micrometer.core.instrument.config.validate.Validated map(java.util.function.Function)>
<springfox.documentation.spring.web.readers.parameter.ParameterDefaultReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><springfox.documentation.spring.web.DescriptionResolver: void <init>(org.springframework.core.env.Environment)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonElement: int hashCode()>
<org.springframework.data.mongodb.core.query.Collation: com.mongodb.client.model.Collation lambda$toMongoCollationConverter$16(org.springframework.data.mongodb.core.query.Collation)>-><org.springframework.data.mongodb.core.query.Collation$CollationLocale: java.lang.String asString()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.PropertyName _findParamName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter,com.fasterxml.jackson.databind.AnnotationIntrospector)>-><java.lang.String: boolean isEmpty()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.redis.connection.RedisNode: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.io.File: java.lang.String toString()>
<com.google.common.cache.LocalCache$LocalLoadingCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>-><com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.bson.BsonBoolean: void <clinit>()>-><org.bson.BsonBoolean: void <init>(boolean)>
<org.springframework.data.redis.connection.jedis.JedisClientUtils: void <clinit>()>-><java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.x509.Extension: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.bson.json.ExtendedJsonInt32Converter: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><java.util.OptionalInt: int hashCode()>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver: java.lang.String lambda$resolveIndexForEntity$0(org.springframework.data.mongodb.core.mapping.MongoPersistentEntity)>-><org.springframework.data.mapping.model.BasicPersistentEntity: java.lang.String getName()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.lettuce.core.protocol.CommandArgs$CharArrayArgument: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties: void <init>()>-><java.time.Duration: java.time.Duration ofMinutes(long)>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: void forEachRemaining(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<springfox.documentation.schema.property.field.FieldProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonSymbol: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.SignalType: java.lang.String toString()>
<org.bson.codecs.BsonObjectIdCodec: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.types.ObjectId: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.jedis.JedisConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,redis.clients.jedis.BinaryJedisPubSub,byte[][],byte[][])>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper$Source whenNonNull(org.springframework.boot.context.properties.PropertyMapper$Source)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source whenNonNull()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void remove(java.util.Collection,byte[][])>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonSymbol: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getNetProperty(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.security.MessageDigest: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: void <init>(org.springframework.http.HttpStatus)>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: void <init>(org.springframework.http.HttpStatus,java.lang.String)>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.lang.String: int length()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisStringCommands$SetOption: org.springframework.data.redis.connection.RedisStringCommands$SetOption[] values()>-><java.lang.Object: java.lang.Object clone()>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineAddresses()>-><org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pSubscribe(byte[][])>-><org.springframework.data.redis.connection.jedis.JedisSubscription: void doPsubscribe(byte[][])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonArray: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.lettuce.core.RedisURI: java.lang.String toString()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.bson.Document: java.util.Set entrySet()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.redis.connection.RedisNode: java.lang.String toString()>
<org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator: void createAndRegisterProperty(org.springframework.data.mapping.model.Property)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: java.lang.Class getRawType()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.lang.invoke.ProxyClassesDumper: java.lang.invoke.ProxyClassesDumper getInstance(java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<io.micrometer.core.instrument.config.validate.Validated: boolean isInvalid()>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: boolean isValid()>
<com.mongodb.client.model.Collation: com.mongodb.client.model.Collation$Builder builder()>-><com.mongodb.client.model.Collation$Builder: void <init>(com.mongodb.client.model.Collation$1)>
<org.springframework.data.util.TypeDiscoverer: org.springframework.data.util.ClassTypeInformation getRawTypeInformation()>-><org.springframework.data.util.ClassTypeInformation: org.springframework.data.util.ClassTypeInformation getRawTypeInformation()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonDateTime: int hashCode()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><com.mongodb.client.model.geojson.GeometryCollection: int hashCode()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonBinary: java.lang.String toString()>
<com.alibaba.druid.util.JdbcUtils: void close(java.io.Closeable)>-><java.io.FileInputStream: void close()>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler pickSoleHandler(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.scheduler.ParallelScheduler: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.query.Collation: void <clinit>()>-><org.springframework.data.mongodb.core.query.Collation: org.springframework.data.mongodb.core.query.Collation of(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.AbstractByteBufAllocator: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.types.Code: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.SubList: java.util.Iterator iterator()>
<register-finalize <org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><cn.hutool.core.lang.Tuple: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode: void <clinit>()>-><org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode: void <init>(java.lang.String,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.ReactiveHealthEndpointConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>-><org.slf4j.helpers.NOPLogger: java.lang.String getName()>
<org.springframework.web.util.pattern.PatternParseException$PatternMessage: void <clinit>()>-><org.springframework.web.util.pattern.PatternParseException$PatternMessage: void <init>(java.lang.String,int,java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonMinKey: java.lang.String toString()>
<org.bson.codecs.DocumentCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap)>-><org.bson.codecs.DocumentCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap,org.bson.Transformer)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><java.util.OptionalInt: java.lang.String toString()>
<sun.text.normalizer.UCharacter: void <clinit>()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.rabbitmq.client.Address: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonDecimal128: java.lang.String toString()>
<org.bson.codecs.IterableCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap)>-><org.bson.codecs.IterableCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap,org.bson.Transformer)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<com.google.protobuf.Internal: void <clinit>()>-><com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(byte[])>
<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.lang.String[] doGetParameterNames(java.lang.reflect.Executable)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: void setCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<org.apache.ibatis.mapping.ResultMap$Builder: java.util.List getArgNames(java.lang.reflect.Constructor)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner,boolean)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.cglib.core.MethodInfo: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.LocalDateTime: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.apache.ibatis.builder.xml.XMLConfigBuilder: java.util.Properties settingsAsProperties(org.apache.ibatis.parsing.XNode)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<jdk.internal.util.xml.impl.ReaderUTF16: int read()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<sun.misc.Resource: byte[] getBytes()>-><sun.net.www.http.ChunkedInputStream: void close()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void _addDeserializerFactoryMethods(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><com.mongodb.DBRef: int hashCode()>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void add(java.lang.Object)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><java.util.stream.SpinedBuffer$OfLong: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArrayList$COWIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.io.BufferedInputStream: void close()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>-><sun.net.www.http.ChunkedInputStream: void close()>
<com.sun.net.httpserver.Headers: java.lang.String getFirst(java.lang.String)>-><org.bson.BsonArray: java.lang.Object get(int)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<org.springframework.util.LinkedCaseInsensitiveMap$1: boolean removeEldestEntry(java.util.Map$Entry)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean removeEldestEntry(java.util.Map$Entry)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<com.google.common.collect.MapMakerInternalMap$SerializationProxy: void <init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap)>-><com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: void <init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap)>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$12: void <init>(java.lang.String,int)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$TextIndexIncludeOptions$IncludeStrategy: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: boolean equals(java.lang.Object)>
<com.mongodb.MongoClientSettings: void <clinit>()>-><org.bson.codecs.BsonCodecProvider: void <init>()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><java.lang.Double: java.lang.Double valueOf(double)>
<org.bson.json.LegacyExtendedJsonBinaryConverter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.function.RouterFunctions$FilteredRouterFunction: void <init>(org.springframework.web.servlet.function.RouterFunction,org.springframework.web.servlet.function.HandlerFilterFunction)>-><java.lang.Object: void <init>()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.IdentityHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<org.bson.json.ExtendedJsonMinKeyConverter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.bson.RawBsonDocument: void putAll(java.util.Map)>-><java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: boolean isAlive()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.Nodes$SizedCollectorTask: void <init>(java.util.Spliterator,java.util.stream.PipelineHelper,int)>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.types.Code: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.lettuce.core.protocol.CommandArgs$CharArrayArgument: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.Enum: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.types.Code: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.Float: int hashCode()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.awt.image.ComponentColorModel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyStatement: java.sql.SQLWarning getWarnings()>-><com.zaxxer.hikari.pool.HikariProxyStatement: java.sql.SQLWarning getWarnings()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void recoverBinding(com.rabbitmq.client.impl.recovery.RecordedBinding,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.data.mapping.model.PropertyNameFieldNamingStrategy: void <clinit>()>-><org.springframework.data.mapping.model.PropertyNameFieldNamingStrategy: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.invoke.LambdaForm: int hashCode()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.lang.String determineAddresses()>-><java.lang.StringBuilder: void <init>()>
<org.apache.ibatis.builder.annotation.MapperAnnotationBuilder: void parsePendingMethods()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String lambda$getNetProperty$0(java.lang.String)>-><sun.net.NetProperties: java.lang.String get(java.lang.String)>
<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String toJava(java.lang.String,java.lang.String)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><io.netty.util.concurrent.PromiseTask: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.DisabledException: void <init>(java.lang.String)>-><org.springframework.security.authentication.AccountStatusException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver: void resolveAndAddIndexesForAssociation(org.springframework.data.mapping.Association,java.util.List,java.lang.String,java.lang.String)>-><org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: java.lang.String getFieldName()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController$1: void <clinit>()>-><org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeStacktrace: org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeStacktrace[] values()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.redis.connection.util.ByteArrayWrapper: int hashCode()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: int size()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<org.springframework.jdbc.core.support.JdbcDaoSupport: void <init>()>-><org.springframework.dao.support.DaoSupport: void <init>()>
<org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointDiscoverer: java.lang.String lambda$createOperationKey$0(org.springframework.boot.actuate.endpoint.web.WebOperation)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.awt.image.ColorModel: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: boolean addDeferredProperty(java.lang.String,java.lang.Object)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.x509.Extension: java.lang.String toString()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<org.apache.catalina.core.ApplicationFilterConfig: void initFilter()>-><org.apache.catalina.startup.FailedContext: boolean getSwallowOutput()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: void setCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object,java.lang.Object)>-><org.bson.BsonArray: java.lang.Object set(int,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.lettuce.core.RedisURI: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.node.FloatNode: int hashCode()>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.EnumMap$EntryIterator$Entry: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterRequiredReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.Permission: java.lang.String toString()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder builder()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.Provider$Service: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object)>
<io.jsonwebtoken.impl.JwtMap: void setValue(java.lang.String,java.lang.Object)>-><org.bson.Document: java.lang.Object remove(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationTagsReader: void <init>(springfox.documentation.spring.web.readers.operation.DefaultTagsProvider)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.operation.DefaultTagsProvider getDefaultTagsProvider()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration$ReactiveUserDetailsServiceCondition$ReactiveWebApplicationCondition: void <init>()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.Collections$SynchronizedCollection: int size()>
<ch.qos.logback.core.joran.spi.SimpleRuleStore: void addRule(ch.qos.logback.core.joran.spi.ElementSelector,ch.qos.logback.core.joran.action.Action)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonInt64: java.lang.String toString()>
<org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases: boolean lambda$getNameForAlias$1(org.springframework.boot.context.properties.source.ConfigurationPropertyName,java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.slf4j.event.Level: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration: void <init>()>
<com.google.protobuf.InvalidProtocolBufferException: void <init>(java.lang.String)>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><sun.net.ProgressSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.types.Symbol: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.ZonedDateTime: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.text.FieldPosition: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.util.Map mapAnnotations(java.lang.annotation.Annotation[])>-><sun.reflect.annotation.AnnotationType: sun.reflect.annotation.AnnotationType getInstance(java.lang.Class)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><io.netty.buffer.EmptyByteBuf: int hashCode()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.Double: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.IndexField: org.springframework.data.mongodb.core.index.IndexField text(java.lang.String,java.lang.Float)>-><org.springframework.data.mongodb.core.index.IndexField: void <init>(java.lang.String,org.springframework.data.domain.Sort$Direction,org.springframework.data.mongodb.core.index.IndexField$Type,java.lang.Float)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.bson.json.ExtendedJsonMaxKeyConverter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.publisher.FluxCreate$IgnoreSink: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<com.zaxxer.hikari.HikariDataSource: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void <clinit>()>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.NTLMAuthenticationProxy tryLoadNTLMAuthentication()>
<org.springframework.data.mongodb.core.query.Collation$PrimaryICUComparisonLevel: void <init>(boolean)>-><org.springframework.data.mongodb.core.query.Collation$ICUComparisonLevel: void <init>(int,java.util.Optional,java.util.Optional)>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><java.util.Spliterators$4Adapter: boolean hasNext()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonDateTime: java.lang.String toString()>
<org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.util.List)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<java.util.stream.Node$OfPrimitive: java.lang.Object[] asArray(java.util.function.IntFunction)>-><java.util.stream.Node$OfDouble: void copyInto(java.lang.Object[],int)>
<org.springframework.boot.actuate.endpoint.annotation.DiscoveredOperationsFactory: void <clinit>()>-><java.util.EnumMap: void <init>(java.lang.Class)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.BsonArray: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: java.lang.String toString()>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: boolean equals(java.lang.Object)>
<com.google.common.cache.CacheBuilder: void checkWeightWithWeigher()>-><com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.zone.ZoneRules: int hashCode()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonSymbol: java.lang.String toString()>
<org.apache.ibatis.reflection.wrapper.MapWrapper: java.lang.Object get(org.apache.ibatis.reflection.property.PropertyTokenizer)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.internal.Optional: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: int hashCode()>
<org.springframework.data.redis.connection.jedis.JedisConnection: void <clinit>()>-><org.springframework.data.redis.connection.jedis.JedisConverters: org.springframework.core.convert.converter.Converter exceptionConverter()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.rabbitmq.client.UnknownClassOrMethodId: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.lang.Object next()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray()>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.lang.Object next()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.query.Collation$PrimaryICUComparisonLevel: void <clinit>()>-><org.springframework.data.mongodb.core.query.Collation$PrimaryICUComparisonLevel: void <init>()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.Collections$SynchronizedMap: void putAll(java.util.Map)>-><org.bson.RawBsonDocument: void putAll(java.util.Map)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.ConnectableFluxOnAssembly: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.GregorianCalendar: int hashCode()>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.mapping.model.Property: java.util.Optional getGetter()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.asm.Label: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<com.mongodb.client.model.Collation: void <init>(com.mongodb.client.model.Collation$Builder)>-><com.mongodb.client.model.Collation$Builder: com.mongodb.client.model.CollationCaseFirst access$500(com.mongodb.client.model.Collation$Builder)>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<sun.net.httpserver.ExchangeImpl: void write(com.sun.net.httpserver.Headers,java.io.OutputStream)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper addProperty(java.lang.String,java.lang.Object)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>
<org.bson.BsonDocumentReader$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.ResponseMessagesReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.jsonwebtoken.impl.JwtMap: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.bson.BsonType: org.bson.BsonType[] values()>-><java.lang.Object: java.lang.Object clone()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.EmptyByteBuf: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <init>(java.lang.String,int)>
<org.springframework.jmx.export.MBeanExporter: void <clinit>()>-><org.springframework.core.Constants: void <init>(java.lang.Class)>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler pickSoleHandler(java.util.Map)>-><org.bson.Document: java.util.Collection values()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.bootstrap.AbstractBootstrap: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.Package: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.apache.ibatis.mapping.ResultMapping: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<sun.net.httpserver.ChunkedInputStream: int readChunkHeader()>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.bson.RawBsonArray: void add(int,org.bson.BsonValue)>-><java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<io.jsonwebtoken.impl.crypto.RsaSignatureValidator: boolean isValid(byte[],byte[])>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><java.util.ArrayList: int size()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void doWithProperties(org.springframework.data.mapping.SimplePropertyHandler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<io.jsonwebtoken.impl.JwtMap: void setDate(java.lang.String,java.util.Date)>-><org.bson.BsonDocumentWrapper: java.lang.Object remove(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><ch.qos.logback.core.subst.Node: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue: java.lang.String toString()>
<javax.security.auth.Policy: boolean isCustomPolicySet(sun.security.util.Debug)>-><sun.security.util.Debug: void println(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider: java.lang.Object getPropertyValue(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>-><org.springframework.data.mongodb.core.convert.DocumentAccessor: java.lang.Object get(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>
<springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.web.context.request.async.CallableProcessingInterceptor: void <clinit>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.jsontype.NamedType: boolean equals(java.lang.Object)>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.types.MaxKey: java.lang.String toString()>
<org.bson.codecs.jsr310.Jsr310CodecProvider: void <clinit>()>-><java.util.HashMap: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonBinary: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: byte[] classToByteArray(java.lang.Class)>-><java.io.FilterInputStream: int read(byte[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.web.method.HandlerMethod$HandlerMethodParameter: void <init>(org.springframework.web.method.HandlerMethod,int)>-><org.springframework.core.annotation.SynthesizingMethodParameter: void <init>(java.lang.reflect.Method,int)>
<org.springframework.data.mongodb.core.index.IndexField: void <init>(java.lang.String,org.springframework.data.domain.Sort$Direction,org.springframework.data.mongodb.core.index.IndexField$Type,java.lang.Float)>-><org.springframework.util.Assert: void isNull(java.lang.Object,java.lang.String)>
<com.mongodb.client.model.CollationStrength: com.mongodb.client.model.CollationStrength fromInt(int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.ByteCodec: java.lang.Class getEncoderClass()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.springframework.util.CollectionUtils: void lambda$unmodifiableMultiValueMap$0(java.util.Map,java.lang.Object,java.util.List)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.AbstractMap: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.mongodb.client.model.geojson.Position: java.lang.String toString()>
<org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>-><java.lang.Object: void <init>()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: int hashCode()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<org.apache.ibatis.builder.annotation.MapperAnnotationBuilder: java.util.Optional getAnnotationWrapper(java.lang.reflect.Method,boolean,java.util.Collection)>-><org.bson.BsonDocument: boolean isEmpty()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: int hashCode()>
<cn.hutool.core.map.MapProxy: java.util.Collection values()>-><org.bson.Document: java.util.Collection values()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><com.mongodb.client.model.geojson.PolygonCoordinates: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<sun.misc.Resource: byte[] getBytes()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.io.BufferedInputStream: int read1(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<sun.net.httpserver.FixedLengthInputStream: int readImpl(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><java.util.Arrays$ArrayList: boolean contains(java.lang.Object)>
<org.springframework.jdbc.datasource.init.ScriptUtils: void executeSqlScript(java.sql.Connection,org.springframework.core.io.support.EncodedResource,boolean,boolean,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.pool.ProxyStatement: void close()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonDateTime: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiDescriptionLookup getApiDescriptionLookup()>
<register-finalize <org.bson.json.JsonMode: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonJavaScript: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: java.lang.Object manageMapIfNecessary(java.util.Map)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.zip.ZipEntry: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.jsonwebtoken.impl.JwtMap: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonDbPointer: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.MapConverter: void convertMapToMap(java.util.Map,java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.types.MinKey: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.ObjectIdCodec: java.lang.Class getEncoderClass()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.data.redis.connection.RedisPassword: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonSymbol: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.MeteredStream: void close()>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: void <init>()>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.PropertyValue$Map: void assign(java.lang.Object)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisConnection: boolean isPipelined()>
<org.springframework.aop.framework.ProxyCreatorSupport: void adviceChanged()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.mapping.model.Property: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonDateTime: java.lang.String toString()>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: int compareTo(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisMessageListener: void <init>(org.springframework.data.redis.connection.MessageListener)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.support.AbstractBeanDefinition createBeanDefinition()>-><org.springframework.beans.factory.support.GenericBeanDefinition: void setParentName(java.lang.String)>
<org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes: void <init>(java.util.List,java.util.List)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonObjectId: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: void <clinit>()>-><org.springframework.data.redis.connection.jedis.JedisConverters: org.springframework.core.convert.converter.Converter exceptionConverter()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeDeserializer buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>-><org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeIdResolver idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,java.util.Collection,boolean,boolean)>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.security.x509.RDN: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,redis.clients.jedis.BinaryJedisPubSub,byte[][],byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>
<java.util.Collections$SynchronizedMap: java.lang.Object remove(java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.mapping.CachingMongoPersistentProperty: boolean isAssociation()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.util.LRUTypeCache: void <init>(int)>-><com.fasterxml.classmate.util.ResolvedTypeCache: void <init>()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.lettuce.core.RedisURI: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.OperationPathDecorator: void <init>()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[],java.security.AccessControlContext)>-><java.lang.Object: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type$1: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: int hashCode()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String toJson(java.lang.Object)>-><org.bson.json.JsonParseException: void <init>(java.lang.Throwable)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken: void <init>(java.lang.Object,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.WeakHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.rabbitmq.client.impl.Frame: long arraySize(java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: boolean _hasCreatorAnnotation(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.introspect.Annotated)>-><com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: com.fasterxml.jackson.annotation.JsonCreator$Mode findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<cn.hutool.core.map.CaseInsensitiveMap: void <init>(float,java.util.Map)>-><org.bson.Document: int size()>
<org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter: void logWarningIfNecessary(java.lang.reflect.Type,java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.springframework.core.env.CommandLineArgs: void addOptionArg(java.lang.String,java.lang.String)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><com.zaxxer.hikari.util.PropertyElf: void setTargetFromProperties(java.lang.Object,java.util.Properties)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$2: void <init>(java.lang.String,int,java.lang.String)>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String,org.springframework.context.annotation.MBeanExportConfiguration$1)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.types.Symbol: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.OffsetDateTime: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void populateAnnotationCache(org.springframework.data.mapping.model.Property)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.types.MinKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.Scannable$Attr$2: java.lang.String toString()>
<com.fasterxml.jackson.databind.type.TypeFactory: java.lang.Class findClass(java.lang.String)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.springframework.data.mongodb.core.query.Collation$PrimaryICUComparisonLevel: void <init>()>-><org.springframework.data.mongodb.core.query.Collation$ICUComparisonLevel: void <init>(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<java.util.zip.CheckedInputStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class)>-><java.lang.reflect.Constructor: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.node.BooleanNode: int hashCode()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.types.Decimal128: int hashCode()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.support.AbstractBeanDefinition createBeanDefinition()>-><org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl: void <init>()>-><org.springframework.jdbc.core.support.JdbcDaoSupport: void <init>()>
<org.apache.ibatis.io.ResolverUtil: void addIfMatching(org.apache.ibatis.io.ResolverUtil$Test,java.lang.String)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<java.lang.Package: java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class)>-><java.lang.Package: java.lang.Class getPackageInfo()>
<com.google.common.cache.LocalCache$LocalManualCache: void <init>(com.google.common.cache.LocalCache,com.google.common.cache.LocalCache$1)>-><com.google.common.cache.LocalCache$LocalManualCache: void <init>(com.google.common.cache.LocalCache)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.ArrayList$SubList: boolean addAll(java.util.Collection)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiListingReader: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.bson.json.JsonScanner$RegularExpressionState: org.bson.json.JsonScanner$RegularExpressionState[] values()>-><java.lang.Object: java.lang.Object clone()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: void lambda$entryConsumer$0(java.util.function.Consumer,java.util.Map$Entry)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CompletableFuture: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver: void resolveAndAddIndexesForAssociation(org.springframework.data.mapping.Association,java.util.List,java.lang.String,java.lang.String)>-><org.springframework.data.mapping.Association: org.springframework.data.mapping.PersistentProperty getInverse()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.boot.ansi.Ansi8BitColor: int hashCode()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes: void <init>(java.util.List)>-><org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes: void <init>(java.util.List,java.util.List)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.awt.AppContext: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<org.springframework.context.support.GenericApplicationContext: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.context.support.GenericApplicationContext: void setParent(org.springframework.context.ApplicationContext)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.ProtectionDomain: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.internal.Optional: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.mongodb.DBRef: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: int size()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.util.context.ContextN: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.amqp.rabbit.connection.CachingConnectionFactory: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.Document: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean containsKey(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.JavaType resolveAndValidateSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>-><com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,java.lang.String)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonDateTime: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.management.openmbean.TabularType: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonArray: java.lang.Object get(int)>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.net.InetSocketAddress: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonSymbol: int hashCode()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.mongodb.DBRef: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.BsonArray: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated validateChronoUnit(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap,org.springframework.http.HttpStatus)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Vector$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type$12: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.security.Provider$Service: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.StringBuffer: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.NumberConverter: java.lang.Number convertInternal(java.lang.Object,java.lang.Class)>-><org.bson.types.Decimal128: int intValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.core.StringRedisTemplate: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.core.RedisTemplate: void afterPropertiesSet()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitTemplateConfiguration: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonDocument: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.paths.PathSanitizer: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.amqp.rabbit.connection.RabbitResourceHolder: void rollbackAll()>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.http.KeepAliveStream: void close()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.util.MimeType: java.lang.String toString()>
<java.util.stream.AbstractPipeline: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator spliterator()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$UrlHandlerMappingDescriptionProvider: void <init>(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$UrlHandlerMappingDescriptionProvider: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.net.Inet4Address: int hashCode()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.bson.types.Symbol: java.lang.String toString()>
<org.bson.Document: java.lang.String toJson(org.bson.json.JsonWriterSettings,org.bson.codecs.Encoder)>-><java.io.StringWriter: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.Clock$SystemClock: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<org.springframework.web.filter.ForwardedHeaderFilter: void <clinit>()>-><java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.rabbitmq.client.impl.TlsUtils: void logPeerCertificateInfo(javax.net.ssl.SSLSession)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.Vector: java.lang.Object[] toArray()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.PrimitiveIterator$OfDouble: java.lang.Object next()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong flattenLong(java.util.stream.Node$OfLong)>-><java.util.stream.Nodes: java.util.stream.Node$OfLong node(long[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.SocketImpl: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonMaxKey: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void _addDeserializerConstructors(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.util.Collection values()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.codecs.MapCodecProvider: int hashCode()>
<com.zaxxer.hikari.util.ClockSource$Factory: com.zaxxer.hikari.util.ClockSource create()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: int size()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory: boolean isClassLoaderDefineClassAvailable(org.springframework.data.mapping.PersistentEntity)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><cn.hutool.json.JSONArray: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.Year: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.springframework.data.redis.core.convert.PathIndexResolver: void <init>()>-><org.springframework.data.redis.core.mapping.RedisMappingContext: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Label: java.lang.String toString()>
<cn.hutool.json.JSONObject: void init(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters: void addClassIfExists(java.util.List,java.lang.String)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.mongodb.client.model.geojson.MultiPolygon: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler getTypeHandler(java.lang.reflect.Type,org.apache.ibatis.type.JdbcType)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<com.sun.net.httpserver.Headers: java.lang.String getFirst(java.lang.String)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: java.lang.Object get(int)>
<org.springframework.data.mongodb.core.index.IndexInfo: void <init>(java.util.List,java.lang.String,boolean,boolean,java.lang.String)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.Document: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.URI: java.lang.String toString()>
<org.apache.ibatis.builder.xml.XMLMapperBuilder: void parsePendingCacheRefs()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: void remove()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<org.springframework.data.mongodb.core.query.Collation$CollationLocale: java.lang.String asString()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.apache.ibatis.type.TypeHandlerRegistry: java.util.Map getJdbcHandlerMapForEnumInterfaces(java.lang.Class,java.lang.Class)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: void <init>()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.types.MinKey: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.LongPipeline$StatefulOp: void <init>(java.util.stream.AbstractPipeline,java.util.stream.StreamShape,int)>-><java.util.stream.LongPipeline: void <init>(java.util.stream.AbstractPipeline,int)>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger wrapLogger(org.slf4j.Logger)>-><io.micrometer.core.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$ExtensionBean: java.lang.String lambda$new$0(java.lang.Class)>-><java.lang.StringBuilder: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonMinKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.bson.codecs.BsonUndefinedCodec: void <init>()>-><java.lang.Object: void <init>()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ExtendedJsonDecimal128Converter: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Collections$SynchronizedSet: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.BsonDouble: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Optional: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.StringBuilder: void <init>()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<org.bson.internal.ProvidersCodecRegistry: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration$BaseConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.util.RawValue: int hashCode()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.rmi.server.LoaderHandler$Loader: java.lang.String toString()>
<java.util.TreeMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><java.util.OptionalInt: java.lang.String toString()>
<org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter: java.lang.Object convertLongStringIfNecessary(java.lang.Object,java.lang.String)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonString: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$PatternSubscriptionTask: void run()>-><org.springframework.data.redis.connection.util.AbstractSubscription: void pSubscribe(byte[][])>
<org.bson.codecs.ByteCodec: void <init>()>-><java.lang.Object: void <init>()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.BsonArray: boolean add(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: int hashCode()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.simple.SimpleConfig: java.time.Duration step()>-><io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getDuration(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<org.springframework.data.mongodb.core.convert.DocumentAccessor: java.lang.Object get(org.springframework.data.mongodb.core.mapping.MongoPersistentProperty)>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] values()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.bson.internal.CodecCache: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getTraceParameter(javax.servlet.http.HttpServletRequest)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.StackTraceElement: java.lang.String toString()>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<org.springframework.data.redis.connection.util.AbstractSubscription: java.util.Collection clone(java.util.Collection)>-><java.lang.Object: java.lang.Object clone()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.rmi.server.LogStream: java.lang.String toString()>
<java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase: com.fasterxml.jackson.databind.JavaType _handleUnknownTypeId(com.fasterxml.jackson.databind.DeserializationContext,java.lang.String)>-><org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: java.lang.String getDescForKnownTypeIds()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonMinKey: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.PropertyValidator: java.lang.String lambda$getEnum$0(java.lang.Enum)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.text.AttributedString$AttributedStringIterator: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: void <init>(int)>
<org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers: void <clinit>()>-><org.springframework.core.DefaultParameterNameDiscoverer: void <init>()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>
<org.springframework.boot.context.properties.PropertyMapper$Source: boolean lambda$whenHasText$3(java.lang.Object)>-><java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.BigDecimalCodec: void <init>()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong node(long[])>-><java.util.stream.Nodes$LongArrayNode: void <init>(long[])>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.ZoneId: int hashCode()>
<springfox.documentation.spring.web.plugins.ResolvedMethodParameterEquivalence: void <init>()>-><com.google.common.base.Equivalence: void <init>()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ShellObjectIdConverter: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.types.Code: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.types.BSONTimestamp: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.nio.ByteBuffer: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryConfiguration: void <init>()>
<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder _appendSubClassMatcher(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$TypeMatcher)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.Decimal128Codec: void <init>()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.Scannable$Attr$1: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.types.Binary: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.Throwable: java.lang.String toString()>
<jdk.internal.util.xml.impl.ReaderUTF8: int read()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean _hasNullKey(java.util.Map)>-><org.bson.RawBsonDocument: boolean containsKey(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.mongodb.client.gridfs.model.GridFSFile: int hashCode()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.Arrays$ArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: int hashCode()>
<org.bson.codecs.DocumentCodec: void <clinit>()>-><org.bson.codecs.configuration.CodecRegistries: org.bson.codecs.configuration.CodecRegistry fromProviders(java.util.List)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag: void <clinit>()>-><io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag: void <init>(java.lang.String,int)>
<org.apache.ibatis.reflection.wrapper.BaseWrapper: void setCollectionValue(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.model.PropertyNameFieldNamingStrategy: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<org.bson.codecs.BsonMaxKeyCodec: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.types.BSONTimestamp: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><java.io.FileInputStream: void close()>
<io.lettuce.core.RedisConnectionException: io.lettuce.core.RedisConnectionException create(java.lang.String,java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder,org.springframework.data.mapping.model.FieldNamingStrategy)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Object[])>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void recoverQueue(java.lang.String,com.rabbitmq.client.impl.recovery.RecordedQueue,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void _addDeserializerFactoryMethods(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,java.util.Map)>-><com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: com.fasterxml.jackson.annotation.JsonCreator$Mode findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)>
<org.springframework.data.redis.connection.jedis.JedisConnection: void pSubscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.RedisSubscribedConnectionException: void <init>(java.lang.String)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.math.BigDecimal: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.util.LinkedMultiValueMap: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.node.BigIntegerNode: int hashCode()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ExtendedJsonUndefinedConverter: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.type.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.nio.charset.Charset: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>
<com.mongodb.client.model.Collation: void <init>(com.mongodb.client.model.Collation$Builder)>-><com.mongodb.client.model.Collation$Builder: java.lang.Boolean access$1100(com.mongodb.client.model.Collation$Builder)>
<com.zaxxer.hikari.util.ClockSource$MillisecondClockSource: void <init>()>-><java.lang.Object: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.apache.ibatis.mapping.ParameterMapping: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: int compareTo(java.lang.Object)>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$4(org.bson.Document,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><org.springframework.data.mongodb.core.query.Collation$PrimaryICUComparisonLevel: java.util.Optional getCaseFirst()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.Boolean: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<cn.hutool.core.map.MapProxy: void putAll(java.util.Map)>-><org.bson.RawBsonDocument: void putAll(java.util.Map)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.types.Code: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: int size()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.Class: int getModifiers()>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated detect(java.lang.String,java.lang.String)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><cn.hutool.json.JSONNull: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<io.micrometer.core.instrument.config.validate.DurationValidator: void <init>(java.lang.String,int,java.lang.String[])>-><java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.security.CodeSigner: java.lang.String toString()>
<org.springframework.web.bind.annotation.RequestMethod: org.springframework.web.bind.annotation.RequestMethod[] values()>-><java.lang.Object: java.lang.Object clone()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.jersey.JerseyManagementContextConfiguration: void <init>()>
<com.zaxxer.hikari.util.SuspendResumeLock: void <clinit>()>-><com.zaxxer.hikari.util.SuspendResumeLock$1: void <init>(boolean)>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: int compareTo(java.lang.Object)>
<java.util.stream.Nodes$DoubleFixedNodeBuilder: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<org.springframework.http.converter.ResourceRegionHttpMessageConverter: boolean canWrite(java.lang.Class,org.springframework.http.MediaType)>-><org.springframework.http.converter.ResourceRegionHttpMessageConverter: boolean canWrite(java.lang.reflect.Type,java.lang.Class,org.springframework.http.MediaType)>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<com.mongodb.DBObjectCodec$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration: void <init>()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: int hashCode()>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated detect(java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated$Valid valid(java.lang.String,java.lang.Object)>
<io.micrometer.core.instrument.simple.SimpleConfig: io.micrometer.core.instrument.simple.CountingMode mode()>-><io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getEnum(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.Class,java.lang.String)>
<org.apache.ibatis.reflection.wrapper.MapWrapper: void set(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.httpserver.ChunkedInputStream: int readImpl(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><io.micrometer.core.instrument.config.validate.Validated$None: java.util.Iterator iterator()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.Boolean lambda$new$0()>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean usePropertyAccess()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.publisher.FluxCreate$ErrorAsyncSink: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.asm.Type: int hashCode()>
<com.zaxxer.hikari.pool.ProxyConnection: void <clinit>()>-><java.util.HashSet: void <init>()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><java.util.PrimitiveIterator$OfDouble: java.lang.Object next()>
<org.bson.codecs.BsonDoubleCodec: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Short: java.lang.String toString()>
<register-finalize <org.springframework.data.mongodb.core.WriteResultChecking: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean _hasNullKey(java.util.Map)>-><org.bson.BsonDocumentWrapper: boolean containsKey(java.lang.Object)>
<springfox.documentation.schema.property.field.FieldProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.io.ObjectStreamField: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.String lambda$createEndpointBeans$0(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean,org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean: java.lang.String getBeanName()>
<org.springframework.util.CollectionUtils$MultiValueMapAdapter: java.util.List lambda$add$0(java.lang.Object)>-><java.util.LinkedList: void <init>()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addGenericArgumentValue(java.lang.Object)>-><org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: void <init>(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<org.springframework.jdbc.datasource.init.ScriptUtils: void executeSqlScript(java.sql.Connection,org.springframework.core.io.support.EncodedResource,boolean,boolean,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyConnection: java.sql.Statement createStatement()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<org.bson.codecs.jsr310.Jsr310CodecProvider: void <clinit>()>-><org.bson.codecs.jsr310.Jsr310CodecProvider: void putCodec(org.bson.codecs.Codec)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.NTLMAuthenticationProxy tryLoadNTLMAuthentication()>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: void <init>(java.lang.reflect.Constructor,java.lang.reflect.Constructor)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.x509.AVA: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<org.apache.ibatis.type.TypeHandlerRegistry: java.util.Map getJdbcHandlerMapForEnumInterfaces(java.lang.Class,java.lang.Class)>-><org.bson.BsonDocumentWrapper: java.util.Set entrySet()>
<java.util.stream.Nodes$ToArrayTask$OfLong: void <init>(java.util.stream.Node$OfLong,long[],int,java.util.stream.Nodes$1)>-><java.util.stream.Nodes$ToArrayTask$OfLong: void <init>(java.util.stream.Node$OfLong,long[],int)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<org.bson.codecs.DocumentCodec: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.apache.ibatis.cache.decorators.SynchronizedCache: int hashCode()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><io.micrometer.core.instrument.config.validate.Validated$Invalid: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.zip.GZIPInputStream: boolean readTrailer()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map inspectClass(java.lang.Class)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void cancel()>-><org.springframework.data.redis.connection.jedis.JedisConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.util.ClassTypeInformation: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisInvalidSubscriptionException: void <init>(java.lang.String)>-><org.springframework.dao.InvalidDataAccessResourceUsageException: void <init>(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientName()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>-><org.springframework.web.servlet.ModelAndView: org.springframework.ui.ModelMap getModelMap()>
<jdk.internal.util.xml.impl.ReaderUTF8: int read()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void lambda$populateAnnotationCache$6(java.lang.reflect.Method)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void validateAnnotation(java.lang.annotation.Annotation,java.lang.String,java.lang.Object[])>
<io.jsonwebtoken.impl.crypto.EllipticCurveSignatureValidator: boolean isValid(byte[],byte[])>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Comparator: int lambda$comparingInt$7b0bb60$1(java.util.function.ToIntFunction,java.lang.Object,java.lang.Object)>-><java.lang.Integer: int compare(int,int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonNull: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<io.netty.util.internal.NativeLibraryLoader: boolean patchShadedLibraryId(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String)>-><java.io.FilterInputStream: int read(byte[])>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.ZoneOffset: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.config.validate.PropertyValidator: java.lang.String lambda$getEnum$0(java.lang.Enum)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonBinary: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><io.lettuce.core.masterslave.RedisMasterSlaveNode: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: void <clinit>()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdateStringKeyMap(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<org.springframework.data.mapping.model.BasicPersistentEntity: void doWithAssociations(org.springframework.data.mapping.SimpleAssociationHandler)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>-><sun.net.www.MeteredStream: void close()>
<org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.util.List)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Float: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.web.servlet.MultipartProperties)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getDuration(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>-><io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated validate(java.lang.String,java.lang.String)>
<org.springframework.boot.security.servlet.ApplicationContextRequestMatcher: void <init>(java.lang.Class)>-><java.lang.Object: void <init>()>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><java.io.InputStream: void close()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.util.Vector: java.lang.Object get(int)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonJavaScript: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonDocument: java.lang.String toString()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<java.util.zip.GZIPInputStream: boolean readTrailer()>-><sun.net.www.MeteredStream: int available()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.Semaphore: java.lang.String toString()>
<org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <clinit>()>-><org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <init>(java.lang.String[])>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.bson.json.JsonScanner$NumberState: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.MinKeyCodec: java.lang.Class getEncoderClass()>
<org.springframework.data.mongodb.core.index.IndexField$Type: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.Vector: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.JwtMap: void setValue(java.lang.String,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object remove(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void add(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<java.time.format.ZoneName: void <clinit>()>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.druid.util.JdbcUtils: void close(java.io.Closeable)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><org.springframework.data.mongodb.core.index.IndexField: org.springframework.data.mongodb.core.index.IndexField text(java.lang.String,java.lang.Float)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: int compareTo(java.lang.Object)>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><cn.hutool.json.JSONArray: boolean addAll(java.util.Collection)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.trace.http.HttpExchangeTracer: java.lang.Long lambda$sendingResponse$0(org.springframework.boot.actuate.trace.http.HttpTrace)>-><java.lang.System: long currentTimeMillis()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.sql.Time: java.lang.String toString()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String iterableToDelimitedString(java.lang.Iterable,java.lang.String,java.lang.String,org.springframework.core.convert.converter.Converter)>-><java.util.stream.ReferencePipeline: void forEach(java.util.function.Consumer)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.web.client.HttpClientMetricsAutoConfiguration: void <init>()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.bson.BsonObjectId: int compareTo(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.JavaType resolveAndValidateSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>-><com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)>
<org.springframework.data.annotation.AccessType$Type: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<jdk.internal.util.xml.impl.Parser: void dtd()>-><java.io.BufferedInputStream: void close()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: int hashCode()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.RawBsonArray: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonNull: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.types.CodeWithScope: int hashCode()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.Vector: boolean addAll(java.util.Collection)>
<org.springframework.data.mongodb.core.mapping.ShardingStrategy: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<sun.net.NetworkClient: boolean isASCIISuperset(java.lang.String)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Class[] getEarlySingletonInterfaces()>-><org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: java.lang.Class getObjectType()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map,boolean,java.util.Locale)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<org.springframework.asm.ClassReader: byte[] readStream(java.io.InputStream,boolean)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><java.util.OptionalInt: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated validateChronoUnit(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonObjectId: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: void <init>()>-><java.util.WeakHashMap: void <init>()>
<org.bson.json.ShellUndefinedConverter: void <init>()>-><java.lang.Object: void <init>()>
<reactor.core.publisher.Flux$3: void <init>(long,java.util.function.Predicate)>-><java.lang.Object: void <init>()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.AbstractConstant: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: int compareTo(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void run()>-><org.springframework.data.redis.connection.jedis.JedisConnection: boolean isSubscribed()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.util.Iterator)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.crypto.CryptoAllPermission: boolean equals(java.lang.Object)>
<jdk.internal.util.xml.impl.ReaderUTF16: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.bson.BsonType: void <clinit>()>-><org.bson.BsonType: org.bson.BsonType[] values()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><reactor.core.publisher.SignalType: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.bson.BsonBoolean: int compareTo(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Enum: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration: void <init>()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.security.UnresolvedPermission: int hashCode()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper: void <clinit>()>-><org.springframework.data.util.ClassTypeInformation: org.springframework.data.util.ClassTypeInformation from(java.lang.Class)>
<java.time.format.DateTimeTextProvider$LocaleStore: java.util.Iterator getTextIterator(java.time.format.TextStyle)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><org.springframework.web.context.support.StandardServletEnvironment: void <init>()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: org.springframework.dao.DataAccessException convertJedisAccessException(java.lang.Exception)>-><org.springframework.data.redis.FallbackExceptionTranslationStrategy: org.springframework.dao.DataAccessException translate(java.lang.Exception)>
<cn.hutool.json.JSONObject: void init(java.lang.Object)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonDouble: int hashCode()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void visit(com.sun.jmx.mbeanserver.MBeanAnalyzer$MBeanVisitor)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonMinKey: int hashCode()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String toJson(java.lang.Object)>-><org.springframework.util.ObjectUtils: java.lang.Object[] toObjectArray(java.lang.Object)>
<cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<java.util.concurrent.ThreadPoolExecutor: boolean isTerminated()>-><java.util.concurrent.atomic.AtomicInteger: int get()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.amqp.rabbit.connection.CachingConnectionFactory: java.lang.String toString()>
<org.springframework.data.mongodb.core.IndexConverters: com.mongodb.client.model.IndexOptions lambda$getIndexDefinitionIndexOptionsConverter$0(org.springframework.data.mongodb.core.index.IndexDefinition)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.IndexOptions languageOverride(java.lang.String)>
<cn.hutool.core.map.MapProxy: void putAll(java.util.Map)>-><org.bson.Document: void putAll(java.util.Map)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.internal.Optional: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonMinKey: int hashCode()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: int compareTo(java.lang.Object)>
<org.bson.json.ExtendedJsonRegularExpressionConverter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void handleErrorInObjectToString(java.lang.Object,java.lang.StringBuilder,java.lang.Throwable)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.types.Symbol: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<java.util.concurrent.Executors$PrivilegedThreadFactory: void <init>()>-><java.lang.Thread: java.lang.Thread currentThread()>
<java.util.stream.Nodes$SizedCollectorTask: void <init>(java.util.Spliterator,java.util.stream.PipelineHelper,int)>-><java.util.Spliterators$DoubleArraySpliterator: long estimateSize()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonDouble: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.lang.invoke.LambdaForm$Name: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdate(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.BsonDocumentWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.ResourceBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.lang.Object next()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.EventObject: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.YearMonth: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.security.Provider$Service: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.ProtectionDomain: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.node.ArrayNode: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression[] parseExpressions(java.lang.String,org.springframework.expression.ParserContext)>-><org.springframework.expression.ParserContext$1: java.lang.String getExpressionSuffix()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.bson.BsonString: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<org.springframework.data.redis.cache.CacheKeyPrefix: java.lang.String lambda$simple$0(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.util.LazyStreamable: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$SubscriptionPresentCondition: boolean passes()>-><org.springframework.data.redis.connection.jedis.JedisConnection: boolean isSubscribed()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonArray: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type$11: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><java.io.FileInputStream: void close()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.redis.listener.PatternTopic: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.AbstractPersistentProperty: java.lang.Iterable getPersistentEntityTypes()>-><org.springframework.data.util.Lazy: java.lang.Object get()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: org.springframework.dao.DataAccessException convertJedisAccessException(java.lang.Exception)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.EventObject: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Set removeBindingsWithDestination(java.lang.String)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonString: int hashCode()>
<org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory: boolean isClassLoaderDefineClassAvailable(org.springframework.data.mapping.PersistentEntity)>-><org.springframework.data.mapping.model.BasicPersistentEntity: java.lang.Class getType()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.boot.actuate.endpoint.EndpointId: void <clinit>()>-><java.util.HashSet: void <init>()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<jdk.internal.util.xml.impl.ReaderUTF8: int read()>-><java.io.BufferedInputStream: int read()>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<org.springframework.data.mapping.PersistentProperty: org.springframework.data.mapping.Association getRequiredAssociation()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<io.netty.util.internal.NativeLibraryLoader: void closeQuietly(java.io.Closeable)>-><java.net.SocketInputStream: void close()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: void terminateAPR()>
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping: void <clinit>()>-><java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.Long: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.UUID: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.bson.json.ExtendedJsonBinaryConverter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.util.List)>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: int characteristics()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.rabbitmq.client.impl.ValueWriter: void writeArray(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Collections$SynchronizedMap: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.zip.GZIPInputStream: int readUByte(java.io.InputStream)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$SubscriptionPresentCondition eventuallyPerformSubscription()>-><org.springframework.data.redis.connection.jedis.JedisConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void recoverExchange(com.rabbitmq.client.impl.recovery.RecordedExchange,boolean)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.springframework.boot.actuate.endpoint.OperationType: void <clinit>()>-><org.springframework.boot.actuate.endpoint.OperationType: void <init>(java.lang.String,int)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.util.locale.BaseLocale: int hashCode()>
<java.util.Collections$SynchronizedCollection: java.util.Spliterator spliterator()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Spliterator spliterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.lettuce.core.protocol.CommandArgs$CharArrayArgument: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Locale: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: boolean equals(java.lang.Object)>
<org.bson.codecs.MapCodecProvider: void <init>(org.bson.Transformer)>-><org.bson.codecs.BsonTypeClassMap: void <init>()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object)>
<org.bson.codecs.DocumentCodecProvider: void <init>(org.bson.Transformer)>-><org.bson.codecs.DocumentCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap,org.bson.Transformer)>
<org.springframework.data.mapping.context.AbstractMappingContext$PersistentPropertyCreator: void createAndRegisterProperty(org.springframework.data.mapping.model.Property)>-><java.util.Collections$EmptySet: void forEach(java.util.function.Consumer)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.mongodb.DBRef: java.lang.String toString()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.net.Socket: int getLocalPort()>-><java.net.SocketImpl: int getLocalPort()>
<java.net.Authenticator$RequestorType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: int hashCode()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.LocalDateTime: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.amqp.rabbit.connection.CachingConnectionFactory: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><java.util.OptionalInt: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonMaxKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeBindingErrors(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><java.lang.Enum: int ordinal()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxOnAssembly: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.String toString()>
<java.util.Collections$UnmodifiableCollection: java.util.Spliterator spliterator()>-><java.util.SortedSet: java.util.Spliterator spliterator()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.bson.codecs.MinKeyCodec: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.internal.Optional: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<java.io.DataOutputStream: void writeChar(int)>-><java.io.PrintStream: void write(int)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.data.domain.Sort$Order: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.Spliterators$4Adapter: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$RequestMappingInfoHandlerMappingDescriptionProvider: void <init>(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$RequestMappingInfoHandlerMappingDescriptionProvider: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.time.LocalTime: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.LocalTime: java.lang.String toString()>
<register-finalize <com.mongodb.client.model.geojson.GeoJsonObjectType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: void applyPropertyToBeanDefinition(java.lang.String,java.lang.Object)>-><org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: void <init>(java.lang.String)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Vector: int size()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void closeIfUnsubscribed()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonDateTime: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.MediaTypeReader: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonArray: java.lang.String toString()>
<org.apache.ibatis.io.Resources: java.util.Properties getUrlAsProperties(java.lang.String)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<com.mongodb.MongoClientSettings: void <clinit>()>-><org.bson.codecs.BsonValueCodecProvider: void <init>()>
<com.mongodb.MongoClientSettings: void <clinit>()>-><org.bson.codecs.MapCodecProvider: void <init>(org.bson.Transformer)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<java.util.stream.LongPipeline$StatefulOp: void <init>(java.util.stream.AbstractPipeline,java.util.stream.StreamShape,int)>-><java.lang.AssertionError: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer: void remove(org.springframework.data.redis.connection.MessageListener,org.springframework.data.redis.listener.Topic,org.springframework.data.redis.connection.util.ByteArrayWrapper,java.util.Map,java.util.List)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<com.github.pagehelper.autoconfigure.PageHelperProperties: void <init>()>-><java.util.Properties: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserializeUsingCustom(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection,com.fasterxml.jackson.databind.JsonDeserializer)>-><org.bson.BsonArray: int size()>
<org.springframework.data.mapping.Alias: int hashCode()>-><io.netty.buffer.SwappedByteBuf: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.asm.Type: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.HashMap$Node: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.bson.BsonInt64: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.image.ColorModel: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.data.util.TypeVariableTypeInformation: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.ByteArrayCodec: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.rabbitmq.client.impl.AMQChannel: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.rabbitmq.client.Address: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonJavaScriptCodec: void <init>()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.util.Iterator iterator()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.security.Provider$UString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<java.util.stream.Nodes$LongFixedNodeBuilder: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonTimestamp: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.FieldPosition: java.lang.String toString()>
<com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings emptyBindings()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.stream.Nodes: java.util.stream.Node flatten(java.util.stream.Node,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongArrayNode: long count()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.node.ObjectNode: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.domain.EntityScanPackages: void <init>(java.lang.String[])>-><java.util.ArrayList: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<sun.net.httpserver.ContextList: sun.net.httpserver.HttpContextImpl findContext(java.lang.String,java.lang.String,boolean)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonMaxKey: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.Document: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.Object: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserializeUsingCustom(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection,com.fasterxml.jackson.databind.JsonDeserializer)>-><org.bson.RawBsonArray: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonNull: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.OffsetDateTime: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$4: void <init>(java.lang.String,int)>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.bson.codecs.MapCodec: void <clinit>()>-><org.bson.codecs.ValueCodecProvider: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<org.springframework.data.spel.ExtensionAwareEvaluationContextProvider$EvaluationContextExtensionAdapter: void <init>(org.springframework.data.spel.spi.EvaluationContextExtension,org.springframework.data.spel.EvaluationContextExtensionInformation)>-><java.util.HashMap: void putAll(java.util.Map)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.rabbitmq.client.Address: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.Collections$EmptyMap: int hashCode()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.jni.SSL: int fipsModeSet(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration: void <init>()>
<reactor.core.publisher.FluxIterable: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<io.micrometer.core.instrument.distribution.DistributionStatisticConfig: void <clinit>()>-><io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder: io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder bufferLength(java.lang.Integer)>
<org.bson.codecs.BsonValueCodecProvider: void <init>()>-><java.util.HashMap: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil: void throwAsIAE(java.lang.Throwable)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<springfox.documentation.spring.web.plugins.DefaultConfiguration: void <init>(springfox.documentation.spi.service.contexts.Defaults,com.fasterxml.classmate.TypeResolver,javax.servlet.ServletContext)>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.bson.RawBsonArray: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.text.FieldPosition: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<org.springframework.data.mongodb.core.mapping.MongoMappingContext: org.springframework.data.mapping.PersistentProperty createPersistentProperty(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.model.MutablePersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.mongodb.core.mapping.MongoMappingContext: org.springframework.data.mongodb.core.mapping.MongoPersistentProperty createPersistentProperty(org.springframework.data.mapping.model.Property,org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.security.Permission: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.types.ObjectId: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.EmptyByteBuf: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.AbstractRedisClient createClient()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientResources()>
<org.springframework.jdbc.datasource.init.ScriptUtils: void executeSqlScript(java.sql.Connection,org.springframework.core.io.support.EncodedResource,boolean,boolean,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyStatement: java.sql.SQLWarning getWarnings()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonBoolean: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.convert.CustomConversions$StoreConversions: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonArray: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerJwtConfiguration: void <init>()>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isStartTls()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: boolean isStartTls()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.Nodes: java.util.stream.Node$OfInt flattenInt(java.util.stream.Node$OfInt)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<io.lettuce.core.metrics.DefaultCommandLatencyCollector: java.util.Map getMetrics(java.util.Map)>-><org.bson.Document: java.util.Set entrySet()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: int hashCode()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.security.x509.Extension: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><cn.hutool.core.date.DateTime: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><org.springframework.core.io.support.PropertiesLoaderUtils: java.util.Properties loadProperties(org.springframework.core.io.Resource)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.util.TypeVariableTypeInformation: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.util.LinkedList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.core.base.ParserMinimalBase: long getValueAsLong(long)>-><org.bson.types.Decimal128: long longValue()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.publisher.FluxCreate$DropAsyncSink: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonUndefined: int hashCode()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.LegacyExtendedJsonRegularExpressionConverter: void <init>()>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.bson.BsonDocumentWrapper: void putAll(java.util.Map)>-><org.bson.BsonDocument: void putAll(java.util.Map)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.sun.net.httpserver.Filter$Chain: void doFilter(com.sun.net.httpserver.HttpExchange)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.internal.Optional: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.types.Binary: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: int size()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: int size()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><java.util.stream.SpinedBuffer$OfDouble: java.util.Iterator iterator()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$3Adapter: boolean hasNext()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.redis.RedisReactiveHealthContributorAutoConfiguration: void <init>(java.util.Map)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: void <init>(java.util.concurrent.ConcurrentSkipListMap,java.lang.Object,boolean,java.lang.Object,boolean,boolean)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.types.Binary: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.bson.BsonDouble: java.lang.String toString()>
<io.lettuce.core.protocol.CommandExpiryWriter: void <init>(io.lettuce.core.RedisChannelWriter,io.lettuce.core.ClientOptions,io.lettuce.core.resource.ClientResources)>-><io.lettuce.core.TimeoutOptions$TimeoutSource: java.util.concurrent.TimeUnit getTimeUnit()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.codecs.ValueCodecProvider: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.sql.Date: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><java.io.InputStream: void close()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.listener.PatternTopic: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<java.util.stream.Nodes$ToArrayTask$OfRef: void copyNodeToArray()>-><java.util.stream.Nodes$EmptyNode$OfRef: void copyInto(java.lang.Object[],int)>
<com.fasterxml.jackson.databind.util.EnumResolver: com.fasterxml.jackson.databind.util.EnumResolver constructUsingMethod(java.lang.Class,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.AnnotationIntrospector)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.Document: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Date: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.BsonSymbol: java.lang.String toString()>
<java.util.Currency$1: java.lang.Void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.ibatis.io.Resources: java.util.Properties getResourceAsProperties(java.lang.String)>-><java.net.SocketInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$5(java.util.Map$Entry)>-><java.util.Collections$SingletonList: int size()>
<org.bson.codecs.MapCodecProvider: void <init>(org.bson.Transformer)>-><org.bson.codecs.MapCodecProvider: void <init>(org.bson.codecs.BsonTypeClassMap,org.bson.Transformer)>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Set removeBindingsWithDestination(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<org.springframework.mail.javamail.ConfigurableMimeFileTypeMap: javax.activation.FileTypeMap createFileTypeMap(org.springframework.core.io.Resource,java.lang.String[])>-><java.io.BufferedInputStream: void close()>
<java.util.Collections$SynchronizedMap: void putAll(java.util.Map)>-><org.bson.BsonDocumentWrapper: void putAll(java.util.Map)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<org.apache.ibatis.builder.xml.XMLMapperBuilder: void parsePendingCacheRefs()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<sun.awt.DebugSettings: java.lang.String toString()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<cn.hutool.core.map.MapUtil: boolean isNotEmpty(java.util.Map)>-><org.bson.BsonDocumentWrapper: boolean isEmpty()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: boolean getTestOnReturn()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<jdk.internal.util.xml.impl.ReaderUTF8: int read(char[],int,int)>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: void <init>(org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void <clinit>()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><org.bson.BsonArray: int size()>
<com.rabbitmq.client.impl.nio.NioLoop: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>
<org.springframework.data.domain.Sort$NullHandling: void <clinit>()>-><org.springframework.data.domain.Sort$NullHandling: void <init>(java.lang.String,int)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.util.LambdaSafe$InvocationResult: void <clinit>()>-><org.springframework.boot.util.LambdaSafe$InvocationResult: void <init>(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Handle: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.bson.types.Decimal128: java.lang.String toString()>
<cn.hutool.core.bean.copier.provider.MapValueProvider: boolean containsKey(java.lang.String)>-><org.bson.RawBsonDocument: boolean containsKey(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.web.context.support.ServletContextResource: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.data.mongodb.core.index.IndexField: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.Spliterators$DoubleArraySpliterator: long estimateSize()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.SubList$1: void set(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$ListItr: void set(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration: void <init>()>
<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.ibatis.builder.annotation.MapperAnnotationBuilder: java.util.Optional getAnnotationWrapper(java.lang.reflect.Method,boolean,java.util.Collection)>-><org.bson.BsonDocument: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.DelegateServiceScheduler$UnsupportedScheduledExecutorService: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SynchronizedCollection: void forEach(java.util.function.Consumer)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonInt32: int hashCode()>
<org.springframework.data.mongodb.util.BsonUtils: java.lang.String toJson(java.lang.Object)>-><org.springframework.data.mongodb.util.BsonUtils: java.lang.String toString(java.util.Map)>
<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String toJava(java.lang.String,java.lang.String)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.apache.ibatis.mapping.ResultMapping: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.PropertyValue$Map: void assign(java.lang.Object)>-><org.bson.BsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.NoOpSessionConfiguration: void <init>()>
<org.springframework.core.type.classreading.SimpleMetadataReader: org.springframework.asm.ClassReader getClassReader(org.springframework.core.io.Resource)>-><java.io.FileInputStream: void close()>
<org.springframework.data.mapping.Alias: int hashCode()>-><io.netty.buffer.AbstractByteBuf: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.net.URI: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.ArrayList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.sql.Time: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.bson.RawBsonDocument: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<jdk.internal.util.xml.impl.ReaderUTF8: void close()>-><java.io.InputStream: void close()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>
<org.springframework.mail.javamail.ConfigurableMimeFileTypeMap: javax.activation.FileTypeMap createFileTypeMap(org.springframework.core.io.Resource,java.lang.String[])>-><java.io.InputStream: void close()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.bson.RawBsonDocument: java.util.Collection values()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$SubscriptionPresentCondition eventuallyPerformSubscription()>-><org.springframework.data.redis.connection.jedis.JedisClusterConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.channel.ReflectiveChannelFactory: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>
<org.apache.logging.log4j.util.PropertyFilePropertySource: java.util.Properties loadPropertiesFile(java.lang.String)>-><java.io.FileInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.types.BSONTimestamp: int hashCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonNull: boolean equals(java.lang.Object)>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.ExtendedJsonDateTimeConverter: void <init>()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.util.ClassUtil: void throwAsIAE(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><java.util.OptionalInt: java.lang.String toString()>
<java.lang.invoke.MethodHandleImpl$BindCaller$2: java.lang.Void run()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.data.mapping.model.BasicPersistentEntity: void addPersistentProperty(org.springframework.data.mapping.PersistentProperty)>-><org.springframework.data.mapping.model.AbstractPersistentProperty: java.lang.reflect.Field getField()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.data.mapping.model.BasicPersistentEntity$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.Optional: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.bson.types.Code: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.Short: java.lang.String toString()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.annotation.Annotation findPropertyOrOwnerAnnotation(java.lang.Class)>-><org.springframework.data.mapping.model.BasicPersistentEntity: java.lang.annotation.Annotation findAnnotation(java.lang.Class)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.ZoneOffset: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><ch.qos.logback.classic.spi.ClassPackagingData: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void unsubscribeChannel(byte[][])>-><org.springframework.data.redis.connection.jedis.JedisConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy[] values()>
<cn.hutool.core.map.MapUtil: java.lang.Object get(java.util.Map,java.lang.Object,java.lang.Class,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonDoubleCodec: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.types.Code: java.lang.String toString()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.util.stream.Stream getAccessors()>-><org.springframework.data.util.Optionals: java.util.stream.Stream toStream(java.util.Optional[])>
<java.io.DataInputStream: char readChar()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.bson.codecs.EncoderContext: void <clinit>()>-><org.bson.codecs.EncoderContext: org.bson.codecs.EncoderContext$Builder builder()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.YearMonth: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.bson.BsonMinKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonRegularExpression: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$5: void <init>(java.lang.String,int)>
<org.springframework.data.redis.connection.lettuce.LettuceConverters$3: void <clinit>()>-><org.springframework.data.redis.connection.ReturnType: org.springframework.data.redis.connection.ReturnType[] values()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.boot.actuate.health.Health$Builder: void <init>(org.springframework.boot.actuate.health.Status)>-><java.util.LinkedHashMap: void <init>()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder customizers(java.util.Collection)>-><org.springframework.boot.web.client.RestTemplateBuilder: void <init>(org.springframework.boot.web.client.RestTemplateBuilder$RequestFactoryCustomizer,boolean,java.lang.String,java.util.Set,java.util.Set,java.util.function.Supplier,org.springframework.web.util.UriTemplateHandler,org.springframework.web.client.ResponseErrorHandler,org.springframework.boot.web.client.BasicAuthentication,java.util.Map,java.util.Set,java.util.Set)>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void <init>(org.slf4j.spi.LocationAwareLogger)>-><io.micrometer.core.util.internal.logging.AbstractInternalLogger: void <init>(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration: void <init>()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.beans.factory.support.NullBean: boolean equals(java.lang.Object)>
<java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.lang.Object next()>
<java.io.DataInputStream: short readShort()>-><sun.net.www.MeteredStream: int read()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Date: java.lang.String toString()>
<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getNetProperty(java.lang.String)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<java.util.zip.ZipInputStream: void readFully(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.JsonStringConverter: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonObjectId: java.lang.String toString()>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>-><java.util.concurrent.LinkedBlockingQueue: int size()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.BsonObjectId: int hashCode()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.BsonBinary: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.types.CodeWithScope: int hashCode()>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonInt64: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.RabbitResourceHolder: void rollbackAll()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonDouble: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.types.Code: int hashCode()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><springfox.documentation.spring.web.scanners.CachingOperationReader$1: void <init>(springfox.documentation.spring.web.scanners.CachingOperationReader,springfox.documentation.spring.web.readers.operation.OperationReader)>
<org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes: void <init>(java.util.List,java.util.List)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.RawBsonDocument: int size()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.Code: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: int compareTo(java.lang.Object)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException wrongTokenException(com.fasterxml.jackson.core.JsonParser,java.lang.Class,com.fasterxml.jackson.core.JsonToken,java.lang.String)>-><com.fasterxml.jackson.core.util.JsonParserDelegate: com.fasterxml.jackson.core.JsonToken getCurrentToken()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.DefaultTagsProvider: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.lang.Iterable)>-><io.micrometer.core.instrument.config.validate.Validated$None: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<org.springframework.jdbc.datasource.init.ScriptUtils: void executeSqlScript(java.sql.Connection,org.springframework.core.io.support.EncodedResource,boolean,boolean,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.pool.HikariProxyStatement: int getUpdateCount()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.bson.BsonMaxKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.mongodb.DBRef: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.AbstractMap: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.amqp.rabbit.connection.CachingConnectionFactory$ChannelCachingConnectionProxy: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<java.util.stream.SliceOps$3: void <init>(java.util.stream.AbstractPipeline,java.util.stream.StreamShape,int,long,long)>-><java.util.stream.LongPipeline$StatefulOp: void <init>(java.util.stream.AbstractPipeline,java.util.stream.StreamShape,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.internal.Optional: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDateTime: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.mongodb.client.model.geojson.Point: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: io.lettuce.core.AbstractRedisClient createClient()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientOptions()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<sun.security.x509.X509CertImpl: java.util.Collection cloneAltNames(java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList: java.lang.Object get(int)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pUnsubscribe(byte[][])>-><java.util.ArrayList: boolean isEmpty()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.bson.BsonArray: void add(int,org.bson.BsonValue)>-><java.util.AbstractList: void add(int,java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.invoke.MemberName: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonDouble: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<io.jsonwebtoken.impl.JwtMap: void setDate(java.lang.String,java.util.Date)>-><org.bson.Document: java.lang.Object remove(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><java.lang.Character: java.lang.Character valueOf(char)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.util.Pair: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.boot.ansi.Ansi8BitColor: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.TimeoutDeferredResultProcessingInterceptor: void <init>()>-><java.lang.Object: void <init>()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><org.springframework.security.web.util.OnCommittedResponseWrapper: void addHeader(java.lang.String,java.lang.String)>
<org.springframework.data.domain.Sort: void <init>(org.springframework.data.domain.Sort$Direction,java.util.List)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.mongodb.DBObjectCodec: void <clinit>()>-><com.mongodb.DBObjectCodec: org.bson.codecs.BsonTypeClassMap createDefaultBsonTypeClassMap()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<jdk.internal.util.xml.impl.ReaderUTF16: int read()>-><sun.net.www.MeteredStream: int read()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: int size()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonRegularExpression: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.bson.BsonDocument: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.SubList$1: boolean hasNext()>
<reactor.util.function.Tuple3: int hashCode()>-><com.mongodb.client.model.geojson.MultiPoint: int hashCode()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper: org.springframework.beans.factory.support.AbstractBeanDefinition createBeanDefinition()>-><org.springframework.beans.factory.config.ConstructorArgumentValues: void <init>()>
<org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.util.Optional getClientResources()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: java.util.Optional getClientResources()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.types.BSONTimestamp: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <init>()>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><java.util.HashMap: void <init>()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.text.DecimalFormat: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>-><org.bson.types.Decimal128: double doubleValue()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.BsonDocumentWrapper: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.SubList: boolean addAll(java.util.Collection)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><reactor.util.function.Tuple4: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.Thread: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.LocalDateTime: int hashCode()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdateStringKeyMap(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<reactor.core.publisher.FluxIterable: boolean checkFinite(java.lang.Iterable)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator spliterator()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonDbPointer: int hashCode()>
<org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder header(java.lang.String,java.lang.String[])>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexField: int hashCode()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap)>-><org.springframework.util.CollectionUtils: org.springframework.util.MultiValueMap unmodifiableMultiValueMap(org.springframework.util.MultiValueMap)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.String: java.lang.String substring(int)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundryActuatorAutoConfiguration$IgnoredPathsWebSecurityConfigurer: void <init>()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.Document: java.util.Set entrySet()>
<sun.net.www.protocol.http.Handler: void <init>(java.lang.String,int)>-><java.net.URLStreamHandler: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.MonoCallableOnAssembly: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.mongodb.DBRef: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.bson.RawBsonArray$RawBsonArrayList: java.lang.Object get(int)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.DBObjectCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>
<org.springframework.beans.propertyeditors.CustomMapEditor: void setValue(java.lang.Object)>-><org.bson.Document: int size()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$6: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList: int size()>
<org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes: void <init>(java.util.List,java.util.List)>-><java.lang.Object: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder allowIfSubType(java.lang.Class)>-><com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder _appendSubClassMatcher(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$TypeMatcher)>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler pickSoleHandler(java.util.Map)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><java.lang.String: java.lang.String substring(int)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonJavaScriptWithScope: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.HashMap: void <init>(int)>
<com.google.protobuf.CodedInputStream$ArrayDecoder: int pushLimit(int)>-><com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<org.apache.ibatis.reflection.Reflector: void resolveGetterConflicts(java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonTimestamp: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.mongodb.client.gridfs.model.GridFSFile: java.lang.String toString()>
<org.bson.BsonBinaryReader$1: void <clinit>()>-><org.bson.BsonContextType: org.bson.BsonContextType[] values()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<com.mongodb.client.model.geojson.CoordinateReferenceSystemType: void <clinit>()>-><com.mongodb.client.model.geojson.CoordinateReferenceSystemType: void <init>(java.lang.String,int,java.lang.String)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$DelegatingHandlerMappingDescriptionProvider: void <init>(java.util.List,org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>
<register-finalize <io.micrometer.core.instrument.config.validate.InvalidReason: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointDiscoverer: java.lang.String lambda$createOperationKey$0(org.springframework.boot.actuate.endpoint.web.WebOperation)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonObjectId: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.BasicPersistentEntity: void doWithProperties(org.springframework.data.mapping.SimplePropertyHandler)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonString: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: java.lang.String getURLFile()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.lang.Iterable)>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bson.types.Decimal128: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.Document: int hashCode()>
<register-finalize <org.springframework.web.util.pattern.PatternParseException$PatternMessage: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<cn.hutool.core.util.NumberUtil: java.lang.String toStr(java.lang.Number)>-><org.bson.types.Decimal128: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundrySecurityInterceptor: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.boot.actuate.autoconfigure.endpoint.EndpointIdTimeToLivePropertyFunction: void <clinit>()>-><org.springframework.boot.context.properties.bind.Bindable: org.springframework.boot.context.properties.bind.Bindable of(java.lang.Class)>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.BsonUndefined: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.util.BitSet: int hashCode()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.ConcurrentBag: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<org.bson.json.JsonReader$1: void <clinit>()>-><org.bson.BsonType: org.bson.BsonType[] values()>
<sun.security.util.Password: char[] readPassword(java.io.InputStream,boolean)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.bson.codecs.BsonInt64Codec: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers$2: boolean lambda$discover$0(java.lang.reflect.Constructor)>-><java.lang.reflect.Constructor: boolean isSynthetic()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxCallableOnAssembly: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: java.time.Duration getCommandTimeout()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.data.mongodb.core.index.TextIndexDefinition$TextIndexedFieldSpec: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndBind(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.RawBsonDocument: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.security.web.server.csrf.WebSessionServerCsrfTokenRepository: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.stream.Nodes: java.util.stream.Node$OfLong flattenLong(java.util.stream.Node$OfLong)>-><java.util.stream.Nodes$EmptyNode: long count()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardWrapper: void <init>()>-><javax.management.NotificationBroadcasterSupport: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.bson.BsonDecimal128: int hashCode()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.data.util.Lazy: org.springframework.data.util.Lazy of(java.util.function.Supplier)>
<io.lettuce.core.masterslave.MasterSlaveTopologyRefresh: void addPasswordIfNeeded(java.util.List,io.lettuce.core.RedisURI)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<java.net.URLStreamHandler: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxOnAssembly: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.bson.json.JsonInt32Converter: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.bson.Document: java.util.Collection values()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.bson.BsonArray: java.lang.Object get(int)>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.SymbolCodec: java.lang.Class getEncoderClass()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.lang.Enum: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.bson.codecs.BsonValueCodecProvider: void addCodecs()>-><org.bson.codecs.BsonBooleanCodec: void <init>()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.PolygonCoordinates: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.bson.internal.UuidHelper$1: void <clinit>()>-><org.bson.UuidRepresentation: org.bson.UuidRepresentation[] values()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,byte[][],byte[][])>-><java.util.ArrayList: void <init>(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<ch.qos.logback.core.joran.action.ConversionRuleAction: void begin(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String,org.xml.sax.Attributes)>-><org.bson.Document: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>-><org.bson.RawBsonArray: void add(int,java.lang.Object)>
<org.apache.logging.log4j.util.PropertiesUtil: java.util.Properties loadClose(java.io.InputStream,java.lang.Object)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration: void <init>()>
<cn.hutool.core.bean.copier.provider.MapValueProvider: boolean containsKey(java.lang.String)>-><org.bson.Document: boolean containsKey(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.Class: java.lang.String getName()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.alibaba.druid.util.JdbcUtils: void close(java.io.Closeable)>-><java.io.InputStream: void close()>
<org.springframework.data.redis.serializer.RedisSerializerToSerializationPairAdapter: void <clinit>()>-><org.springframework.data.redis.serializer.RedisSerializer: org.springframework.data.redis.serializer.RedisSerializer byteArray()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Calendar: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.bson.codecs.DocumentCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><org.springframework.http.server.DefaultPathContainer$DefaultSeparator: java.lang.String encodedSequence()>
<io.micrometer.core.instrument.config.validate.DurationValidator$1: io.micrometer.core.instrument.config.validate.Validated doParse(java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.springframework.data.mongodb.core.query.Collation$AlternateWithMaxVariable: void <clinit>()>-><org.springframework.data.mongodb.core.query.Collation$AlternateWithMaxVariable: void <init>(java.lang.String,java.lang.String)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><com.mongodb.client.gridfs.model.GridFSFile: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.MessageDigest: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.alibaba.druid.filter.FilterManager: void <clinit>()>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.util.HashMap$Node: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.bson.BsonJavaScript: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonDocument: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashSet: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><cn.hutool.json.JSONObject: java.lang.String toString()>
<java.util.ArrayList$Itr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<io.jsonwebtoken.impl.JwtMap: void setValue(java.lang.String,java.lang.Object)>-><org.bson.BsonDocumentWrapper: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonDbPointer: int hashCode()>
<java.io.DataInputStream: int readUnsignedByte()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.apache.ibatis.mapping.ResultMap$Builder: java.util.List getArgNames(java.lang.reflect.Constructor)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><com.mongodb.client.model.geojson.LineString: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.RawBsonDocument: boolean equals(java.lang.Object)>
<java.util.zip.GZIPInputStream: int readUByte(java.io.InputStream)>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.core.io.UrlResource: int hashCode()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<com.google.common.base.Joiner: com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String)>-><com.google.common.base.Joiner$MapJoiner: void <init>(com.google.common.base.Joiner,java.lang.String,com.google.common.base.Joiner$1)>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(byte[],int,int,boolean)>-><java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.bson.internal.UuidHelper$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask: void cancel()>-><org.springframework.data.redis.connection.util.AbstractSubscription: void close()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashSet: int size()>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.MinKeyCodec: void <init>()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.apache.ibatis.session.Configuration: void parsePendingResultMaps()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.mongodb.client.model.geojson.MultiPoint: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<register-finalize <reactor.core.scheduler.ParallelScheduler: java.util.concurrent.ScheduledExecutorService get()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><io.micrometer.core.instrument.config.validate.Validated$Valid: java.lang.String toString()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.bson.BsonJavaScriptWithScope: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.WrappedByteBuf: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<reactor.util.function.Tuple3: int hashCode()>-><org.bson.types.Symbol: int hashCode()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.mongodb.client.model.geojson.PolygonCoordinates: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntrySet: int size()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.util.LinkedMultiValueMap: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.io.BufferedInputStream: void close()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.bson.Document: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration: javax.servlet.DispatcherType lambda$getDispatcherTypes$0(org.springframework.boot.web.servlet.DispatcherType)>-><javax.servlet.DispatcherType: javax.servlet.DispatcherType valueOf(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.BsonArray: int size()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask$PatternSubscriptionTask: void run()>-><org.springframework.data.redis.connection.jedis.JedisConnection: org.springframework.data.redis.connection.Subscription getSubscription()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.types.ResolvedObjectType create(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.CachingConnectionFactory: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.mongodb.client.model.geojson.Point: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection _deserializeWithObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><com.mongodb.client.model.geojson.MultiPolygon: java.lang.String toString()>
<register-finalize <org.springframework.data.redis.connection.BitFieldSubCommands$BitFieldIncrBy$Overflow: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.data.mongodb.core.query.Collation: void lambda$null$13(com.mongodb.client.model.Collation$Builder,org.springframework.data.mongodb.core.query.Collation$ComparisonLevel)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.mongodb.BasicDBObject: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonRegularExpression: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber,java.util.Iterator,boolean,java.lang.Runnable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><io.jsonwebtoken.impl.JwtMap: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.types.MinKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<cn.hutool.core.collection.IterUtil: java.util.List toList(java.lang.Iterable)>-><java.util.stream.SpinedBuffer$OfLong: java.util.Iterator iterator()>
<org.bson.BsonNull: void <init>()>-><org.bson.BsonValue: void <init>()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: boolean isAlive()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.io.BufferedInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.bson.Document: java.util.Set entrySet()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: java.lang.Object next()>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <clinit>()>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$1: void <init>(java.lang.String,int,java.lang.String)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: int hashCode()>
<java.net.HttpConnectSocketImpl: void <clinit>()>-><java.net.HttpConnectSocketImpl$1: void <init>()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.Polygon: int hashCode()>
<java.util.HashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.mongodb.client.model.geojson.LineString: boolean equals(java.lang.Object)>
<com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.bson.codecs.ValueCodecProvider: void addCodec(org.bson.codecs.Codec)>-><org.bson.codecs.BigDecimalCodec: java.lang.Class getEncoderClass()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.bson.BsonBoolean: java.lang.String toString()>
<jdk.internal.util.xml.impl.ReaderUTF16: int read(char[],int,int)>-><java.io.BufferedInputStream: int read()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><sun.net.www.MeteredStream: void close()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.types.CodeWithScope: int hashCode()>
<org.bson.BsonBinaryReader$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<jdk.internal.util.xml.impl.ReaderUTF8: int read(char[],int,int)>-><sun.net.www.MeteredStream: int read()>
<com.mongodb.MongoClientSettings: void <clinit>()>-><com.mongodb.DBObjectCodecProvider: void <init>()>
<register-finalize <org.springframework.data.mongodb.core.index.IndexField$Type: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<org.springframework.data.mongodb.core.DefaultIndexOperations: com.mongodb.client.model.IndexOptions addDefaultCollationIfRequired(com.mongodb.client.model.IndexOptions,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity)>-><com.mongodb.client.model.IndexOptions: com.mongodb.client.model.Collation getCollation()>
<org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.mongodb.client.gridfs.model.GridFSFile: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><cn.hutool.core.date.format.FastDateFormat: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.bson.types.MaxKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: java.lang.String toString()>
<com.alibaba.druid.util.JdbcUtils: void close(java.io.Closeable)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated validateChronoUnit(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.data.redis.listener.PatternTopic: java.lang.String toString()>
<org.springframework.expression.spel.ast.AstUtils: java.util.List getPropertyAccessorsToTry(java.lang.Class,java.util.List)>-><org.springframework.data.spel.ExtensionAwareEvaluationContextProvider$ExtensionAwarePropertyAccessor: java.lang.Class[] getSpecificTargetClasses()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><org.bson.BsonDocumentWrapper: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.bson.BsonInt64: int hashCode()>
<com.rabbitmq.client.impl.AMQChannel: void cleanRpcChannelState()>-><java.net.URISyntaxException: java.lang.String getMessage()>
<jdk.internal.util.xml.impl.ReaderUTF16: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.BitSet: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<register-finalize <org.bson.BsonType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiLineString: java.lang.String toString()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<com.rabbitmq.client.impl.Frame: long tableSize(java.util.Map)>-><org.bson.Document: java.util.Set entrySet()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.math.BigDecimal: int hashCode()>
<org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointDiscoverer: java.lang.String lambda$createOperationKey$0(org.springframework.boot.actuate.endpoint.web.WebOperation)>-><java.lang.StringBuilder: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.model.BasicPersistentEntity: void doWithProperties(org.springframework.data.mapping.SimplePropertyHandler)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><com.mongodb.client.model.geojson.Polygon: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.HashMap$Node: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.net.SocketPermission: int hashCode()>
<com.google.common.collect.Maps: java.util.HashMap newHashMap()>-><java.util.HashMap: void <init>()>
<org.bson.json.JsonTokenType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: java.lang.String toString()>
<org.bson.codecs.jsr310.LocalDateCodec: void <init>()>-><org.bson.codecs.jsr310.DateTimeBasedCodec: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bson.codecs.UuidCodec: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void lambda$getSentinelRedisURI$10(io.lettuce.core.RedisURI)>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: boolean isStartTls()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.bson.codecs.MapCodecProvider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CompletableFuture: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><cn.hutool.json.JSONObject: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.GeometryCollection: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><cn.hutool.json.JSONObject: java.lang.String toString()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.BsonNull: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.io.FileInputStream: void close()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><java.util.ArrayList: boolean isEmpty()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.concurrent.CopyOnWriteArraySet: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.InetAddress: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.core.io.FileSystemResource: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonDouble: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.bson.BsonArray: boolean equals(java.lang.Object)>
<org.apache.ibatis.session.Configuration: void parsePendingResultMaps()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><javax.imageio.ImageTypeSpecifier$Interleaved: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonUndefined: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><cn.hutool.json.JSONNull: boolean equals(java.lang.Object)>
<org.springframework.http.HttpEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap)>-><org.springframework.http.HttpHeaders: void <init>()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum findEnum(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.bson.BsonSymbol: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.lettuce.core.event.metrics.CommandLatencyEvent: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.types.Symbol: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonDecimal128: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: int hashCode()>
<com.mongodb.client.model.Collation: void <init>(com.mongodb.client.model.Collation$Builder)>-><com.mongodb.client.model.Collation$Builder: java.lang.String access$300(com.mongodb.client.model.Collation$Builder)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBRefCodecProvider: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.bson.BsonJavaScript: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int skipBytes(int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.Document: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.core.annotation.TypeMappedAnnotation: java.lang.Object extractFromMap(java.lang.reflect.Method,java.lang.Object)>-><org.bson.RawBsonDocument: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.data.domain.Sort$Order: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>-><com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.lang.Byte: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.bson.RawBsonArray$RawBsonArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<org.apache.ibatis.type.TypeHandlerRegistry: org.apache.ibatis.type.TypeHandler pickSoleHandler(java.util.Map)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder$BuildState: void <clinit>()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder$BuildState: void <init>(java.lang.String,int,int)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><io.netty.util.ResourceLeakDetector$Record: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.time.zone.ZoneOffsetTransitionRule: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.data.mapping.Alias: int hashCode()>-><sun.security.x509.RDN: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.data.mapping.PreferredConstructor$Parameter: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.mongodb.DBRef: java.lang.String toString()>
<org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases: boolean lambda$getNameForAlias$1(org.springframework.boot.context.properties.source.ConfigurationPropertyName,java.util.Map$Entry)>-><org.bson.BsonArray: boolean contains(java.lang.Object)>
<org.apache.ibatis.reflection.wrapper.MapWrapper: java.lang.Object get(org.apache.ibatis.reflection.property.PropertyTokenizer)>-><org.bson.Document: java.lang.Object get(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.data.redis.connection.util.AbstractSubscription: void pSubscribe(byte[][])>-><org.springframework.data.redis.connection.util.AbstractSubscription: void checkPulse()>
<org.bson.codecs.ValueCodecProvider: void addCodecs()>-><org.bson.codecs.LongCodec: void <init>()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.bson.BsonSymbol: java.lang.String toString()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.FluxCallableOnAssembly: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPolygon: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.bson.BsonDateTime: int hashCode()>
<org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver: com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)>-><com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver: com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.RabbitResourceHolder: void rollbackAll()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.NoOpMeterRegistryConfiguration: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><java.nio.ByteBuffer: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,int)>-><com.google.protobuf.RepeatedFieldBuilderV3$BuilderExternalList: java.lang.Object get(int)>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.TypeNameExtractor getTypeNameExtractor()>
<com.google.protobuf.CodedInputStream: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue: java.lang.String toString()>
<org.bson.json.JsonWriterSettings: void <clinit>()>-><org.bson.json.LegacyExtendedJsonDateTimeConverter: void <init>()>
<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void recoverBinding(com.rabbitmq.client.impl.recovery.RecordedBinding,boolean)>-><org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver$CyclicPropertyReferenceException: java.lang.String getMessage()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: boolean fillBuffer()>-><java.util.stream.Nodes$LongFixedNodeBuilder: void end()>
<org.apache.ibatis.builder.annotation.MapperAnnotationBuilder: void parsePendingMethods()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: void remove()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><com.mongodb.DBRef: java.lang.String toString()>
<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.util.Map mapAnnotations(java.lang.annotation.Annotation[])>-><java.util.LinkedHashMap: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.ibatis.type.TypeReference: java.lang.String toString()>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: java.lang.annotation.Annotation lambda$null$8(java.lang.Class,java.lang.reflect.AnnotatedElement)>-><org.springframework.core.annotation.AnnotatedElementUtils: java.lang.annotation.Annotation findMergedAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList$COWIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<ch.qos.logback.core.joran.conditional.PropertyEvalScriptBuilder: ch.qos.logback.core.joran.conditional.Condition build(java.lang.String)>-><org.codehaus.janino.ClassBodyEvaluator: void setImplementedInterfaces(java.lang.Class[])>
<org.springframework.data.mapping.model.AnnotationBasedPersistentProperty: void validateAnnotation(java.lang.annotation.Annotation,java.lang.String,java.lang.Object[])>-><java.util.Optional: java.util.Optional of(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.bson.BsonElement: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.data.mapping.model.Property: java.lang.String toString()>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.String toString()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><com.fasterxml.jackson.databind.node.IntNode: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.bson.BsonNull: java.lang.String toString()>
<org.springframework.data.mapping.model.AbstractPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mapping.PersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder)>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.mongodb.BasicDBObject: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.mongodb.client.model.geojson.Position: boolean equals(java.lang.Object)>
<org.bson.json.JsonSymbolConverter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<cn.hutool.core.map.MapUtil: boolean isNotEmpty(java.util.Map)>-><org.bson.RawBsonDocument: boolean isEmpty()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.SubList$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.mongodb.client.model.geojson.MultiPoint: java.lang.String toString()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.bson.types.Symbol: java.lang.String toString()>
<cn.hutool.core.collection.CollUtil: java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)>-><java.util.Spliterators$3Adapter: boolean hasNext()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.data.mongodb.core.index.IndexInfo: boolean equals(java.lang.Object)>
<org.springframework.http.server.ServletServerHttpResponse: void lambda$writeHeaders$0(java.lang.String,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertiesUtil: java.util.Properties loadClose(java.io.InputStream,java.lang.Object)>-><java.io.InputStream: void close()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.security.AccessControlContext)>-><java.lang.StringBuilder: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration$WebEndpointServletConfiguration: void <init>()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.bson.BsonBoolean: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.bson.codecs.IterableCodecProvider: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.data.mongodb.core.index.IndexField: boolean equals(java.lang.Object)>
<org.bson.json.JsonMode: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.data.mapping.Alias: int hashCode()>-><com.fasterxml.jackson.databind.jsontype.NamedType: int hashCode()>
<org.springframework.data.mongodb.core.convert.DocumentAccessor: void <init>(org.bson.conversions.Bson)>-><org.springframework.util.Assert: void isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String)>
<io.micrometer.core.instrument.config.validate.DurationValidator: io.micrometer.core.instrument.config.validate.Validated detect(java.lang.String,java.lang.String)>-><io.micrometer.core.instrument.config.validate.Validated: io.micrometer.core.instrument.config.validate.Validated$Invalid invalid(java.lang.String,java.lang.Object,java.lang.String,io.micrometer.core.instrument.config.validate.InvalidReason)>
<io.lettuce.core.masterslave.SentinelConnector: reactor.core.publisher.Mono lambda$connectAsync$0(io.lettuce.core.masterslave.SentinelTopologyRefresh,io.lettuce.core.masterslave.MasterSlaveConnectionProvider,java.lang.Runnable,java.util.List)>-><org.bson.BsonArray: boolean isEmpty()>
<com.zaxxer.hikari.pool.ProxyConnection$ClosedConnection: void <clinit>()>-><com.zaxxer.hikari.pool.ProxyConnection$ClosedConnection: java.sql.Connection getClosedConnection()>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.bson.types.CodeWithScope: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: java.lang.String connectionName()>-><org.bson.types.Decimal128: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisClusterConnection: void subscribe(org.springframework.data.redis.connection.MessageListener,byte[][])>-><org.springframework.data.redis.connection.jedis.JedisSubscription: void <init>(org.springframework.data.redis.connection.MessageListener,redis.clients.jedis.BinaryJedisPubSub,byte[][],byte[][])>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<com.fasterxml.classmate.util.ResolvedTypeCache: com.fasterxml.classmate.util.ResolvedTypeCache lruCache(int)>-><com.fasterxml.classmate.util.LRUTypeCache: void <init>(int)>
<org.bson.codecs.jsr310.LocalTimeCodec: void <init>()>-><org.bson.codecs.jsr310.DateTimeBasedCodec: void <init>()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.bson.BsonDocument: java.util.Set entrySet()>
<cn.hutool.json.JSONArray: void init(java.lang.Object)>-><java.util.stream.SpinedBuffer$OfDouble: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>-><java.lang.Boolean: boolean booleanValue()>
<org.springframework.context.expression.MapAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>-><org.bson.BsonDocumentWrapper: boolean containsKey(java.lang.Object)>
<org.springframework.data.redis.connection.util.AbstractSubscription: void unsubscribe(byte[][])>-><java.util.ArrayList: boolean isEmpty()>
<org.springframework.web.servlet.FrameworkServlet: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void lambda$onDiscardMultiple$4(java.util.function.Consumer,java.lang.Object)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><com.rabbitmq.client.Address: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.util.Map$Entry)>-><java.lang.Object: void <init>()>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><java.util.concurrent.ConcurrentSkipListMap: boolean equals(java.lang.Object)>
<org.springframework.data.mongodb.core.index.IndexInfo: org.springframework.data.mongodb.core.index.IndexInfo indexInfoOf(org.bson.Document)>-><org.springframework.data.mongodb.core.index.IndexInfo: java.lang.String extractPartialFilterString(org.bson.Document)>
<java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.bson.json.JsonReader$1: void <clinit>()>-><org.bson.json.JsonTokenType: org.bson.json.JsonTokenType[] values()>
<org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <clinit>()>-><java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><reactor.core.publisher.FluxOnAssembly: java.lang.String toString()>
<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>-><java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void <init>()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.net.URLClassLoader: void close()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.bson.types.CodeWScope: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.Clock$SystemClock: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.bson.BsonMaxKey: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: boolean isPresentButDifferent(org.springframework.data.mapping.Alias)>-><org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.boot.web.error.ErrorAttributeOptions getErrorAttributeOptions(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.ErrorProperties: boolean isIncludeException()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<java.util.Collections$UnmodifiableList$1: java.lang.Object next()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><org.springframework.util.ConcurrentReferenceHashMap$EntryIterator: boolean hasNext()>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.sql.Date: java.lang.String toString()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><org.bson.RawBsonArray$RawBsonArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bson.types.Decimal128: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: java.lang.String toString()>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.bson.BsonSymbol: java.lang.String toString()>
<org.bson.codecs.BsonArrayCodec: void <clinit>()>-><org.bson.codecs.configuration.CodecRegistries: org.bson.codecs.configuration.CodecRegistry fromProviders(org.bson.codecs.configuration.CodecProvider[])>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.bson.BsonInt32: boolean equals(java.lang.Object)>
<org.springframework.data.mapping.Alias: int hashCode()>-><org.bson.codecs.DocumentCodecProvider: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><com.mongodb.DBRef: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<io.lettuce.core.support.CommonsPool2ConfigConverter: io.lettuce.core.support.BoundedPoolConfig bounded(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: boolean getTestOnBorrow()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><org.bson.RawBsonArray$RawBsonArrayList: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><com.mongodb.client.model.geojson.Polygon: int hashCode()>
<sun.net.httpserver.ChunkedInputStream: int readImpl(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<cn.hutool.core.bean.copier.BeanCopier: void beanToMap(java.lang.Object,java.util.Map)>-><org.bson.BsonDecimal128: boolean equals(java.lang.Object)>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.bson.BsonBoolean: boolean equals(java.lang.Object)>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.springframework.context.support.StaticApplicationContext: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.springframework.http.server.DefaultPathContainer: void <init>(java.lang.String,java.util.List)>-><java.lang.Object: void <init>()>
<org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: void handleReturn(int,java.lang.String,java.lang.String,java.lang.String,com.rabbitmq.client.AMQP$BasicProperties,byte[])>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<org.springframework.data.mapping.Alias: int hashCode()>-><java.lang.reflect.Proxy$Key1: int hashCode()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.bson.internal.Optional$Some: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.Provider: java.lang.String toString()>
<cn.hutool.core.bean.copier.provider.MapValueProvider: java.lang.Object value(java.lang.String,java.lang.reflect.Type)>-><org.bson.BsonDocumentWrapper: java.lang.Object get(java.lang.Object)>
<org.springframework.data.util.ReflectionUtils: java.lang.reflect.Field findRequiredField(java.lang.Class,java.lang.String)>-><org.springframework.util.ReflectionUtils: java.lang.reflect.Field findField(java.lang.Class,java.lang.String)>
<org.springframework.data.convert.MappingContextTypeInformationMapper: void <init>(org.springframework.data.mapping.context.MappingContext)>-><org.bson.BsonArray: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.http.KeepAliveStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings$Mapping: void <init>(java.lang.String,java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentProperty: void <init>(org.springframework.data.mapping.model.Property,org.springframework.data.mongodb.core.mapping.MongoPersistentEntity,org.springframework.data.mapping.model.SimpleTypeHolder,org.springframework.data.mapping.model.FieldNamingStrategy)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Object[])>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.google.common.base.Joiner$MapJoiner: void <init>(com.google.common.base.Joiner,java.lang.String,com.google.common.base.Joiner$1)>-><com.google.common.base.Joiner$MapJoiner: void <init>(com.google.common.base.Joiner,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.bson.BsonDbPointer: boolean equals(java.lang.Object)>
<com.mongodb.client.model.Collation: void <init>(com.mongodb.client.model.Collation$Builder)>-><com.mongodb.client.model.Collation$Builder: com.mongodb.client.model.CollationMaxVariable access$900(com.mongodb.client.model.Collation$Builder)>
<org.bson.BasicBSONObject: void putAll(java.util.Map)>-><java.time.Period: java.lang.String toString()>
<org.springframework.data.projection.ProxyProjectionFactory$MapAccessingMethodInterceptorFactory: void <clinit>()>-><org.springframework.data.projection.ProxyProjectionFactory$MapAccessingMethodInterceptorFactory: void <init>(java.lang.String,int)>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><com.mongodb.client.model.geojson.MultiPoint: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.bson.BsonTimestamp: boolean equals(java.lang.Object)>
