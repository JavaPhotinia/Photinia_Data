<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><freemarker.ext.beans.SequenceAdapter: int size()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.reference.zone.Zone: void setName(java.lang.String)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData getShoppingCartData(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.Long getOrderId()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart mergeCart(com.salesmanager.core.model.customer.Customer,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setCustomerId(java.lang.Long)>
<com.salesmanager.core.business.services.catalog.category.CategoryServiceImpl: void addChild(com.salesmanager.core.model.catalog.category.Category,com.salesmanager.core.model.catalog.category.Category)>-><com.salesmanager.core.model.catalog.category.Category: java.lang.Integer getDepth()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.mapper.catalog.PersistableCatalogCategoryEntryMapper getPersistableCatalogCategoryEntryMapper()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.Set getShoppingCartItems(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.system.MerchantConfigurationServiceImpl: com.salesmanager.core.model.system.MerchantConfig getMerchantConfig(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.system.MerchantConfiguration: java.lang.String getValue()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getPopulatedShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.TreeMap: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><org.apache.http.impl.client.RedirectLocations: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.salesmanager.shop.populator.store.ReadableMerchantStorePopulatorWithDetails: void <init>()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: java.util.List createContentDescriptionEntitys(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.content.Content,com.salesmanager.core.model.reference.language.Language)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.salesmanager.core.business.services.system.MerchantConfigurationServiceImpl: void delete(com.salesmanager.core.model.system.MerchantConfiguration)>-><com.salesmanager.core.model.system.MerchantConfiguration: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><org.apache.commons.collections.FastHashMap: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.v0.ReadableOrder getReadableOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.order.Order: java.util.Set getOrderProducts()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart removeShoppingCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.lang.Long getId()>
<com.salesmanager.shop.store.controller.search.facade.SearchFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategory convertCategoryToReadableCategory(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Map,com.salesmanager.core.model.catalog.category.Category)>-><com.salesmanager.shop.populator.catalog.ReadableCategoryPopulator: com.salesmanager.shop.model.catalog.category.ReadableCategory populate(com.salesmanager.core.model.catalog.category.Category,com.salesmanager.shop.model.catalog.category.ReadableCategory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.common.audit.AuditSection: void setModifiedBy(java.lang.String)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart mergeShoppingCarts(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: void setQuantity(java.lang.Integer)>
<com.salesmanager.core.business.services.tax.TaxServiceImpl: java.util.List calculateTax(com.salesmanager.core.model.order.OrderSummary,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.tax.taxrate.TaxRate: boolean isPiggyback()>
<com.salesmanager.core.business.services.reference.country.CountryServiceImpl: java.util.List getCountries(com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.common.description.Description: java.lang.String getName()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void authorizedGroups(java.lang.String,com.salesmanager.shop.model.user.PersistableUser)>-><java.util.Vector$Itr: boolean hasNext()>
<com.salesmanager.core.business.services.order.OrderServiceImpl: boolean hasDownloadFiles(com.salesmanager.core.model.order.Order)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.product.ProductOptionFacadeImpl: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList getAttributesList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.address.Address,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.customer.Customer: com.salesmanager.core.model.common.Delivery getDelivery()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.security.SocialCustomerServicesImpl getSocialCustomerServicesImpl()>
<com.salesmanager.core.business.services.reference.country.CountryServiceImpl: java.util.List getCountries(java.util.List,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.reference.country.Country: java.lang.String getIsoCode()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: java.util.List listTransactions(com.salesmanager.core.model.order.Order)>-><com.salesmanager.core.model.payments.Transaction: java.lang.String getDetails()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.Order processOrder(com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Locale)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.shop.store.facade.product.ProductOptionFacadeImpl: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.catalog.product.Product: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.catalog.CatalogFacadeImpl: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog getCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>
<com.salesmanager.shop.store.facade.manufacturer.ManufacturerFacadeImpl: java.util.List getByProductInCategory(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: boolean lambda$getShoppingCart$0(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.Long getOrderId()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$EmptyList: int size()>
<com.salesmanager.core.business.services.tax.TaxServiceImpl: java.util.List calculateTax(com.salesmanager.core.model.order.OrderSummary,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.tax.taxrate.TaxRate: java.math.BigDecimal getTaxRate()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.salesmanager.core.model.order.Order: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.product.ProductVariationFacadeImpl: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.variation.ProductVariation: void setCode(java.lang.String)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.core.model.user.User verifyUserLink(java.lang.String,java.lang.String)>-><com.salesmanager.core.model.user.User: com.salesmanager.core.model.common.CredentialsReset getCredentialsResetRequest()>
<com.salesmanager.shop.store.facade.product.ProductOptionFacadeImpl: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.catalog.product.Product: com.salesmanager.core.model.merchant.MerchantStore getMerchantStore()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.apache.commons.collections.FastHashMap: java.util.Collection values()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><org.infinispan.cache.impl.EncoderCache: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.address.Address,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.customer.Customer: com.salesmanager.core.model.common.Billing getBilling()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><freemarker.ext.beans.HashAdapter: boolean containsKey(java.lang.Object)>
<com.salesmanager.core.business.services.payments.PaymentServiceImpl: void removePaymentModuleConfiguration(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.system.MerchantConfiguration: void setValue(java.lang.String)>
<com.salesmanager.shop.store.facade.product.ProductOptionFacadeImpl: void removeOptionValueImage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue: java.lang.String getProductOptionValueImage()>
<com.salesmanager.core.business.services.search.SearchServiceImpl: void index(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.catalog.product.Product)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Arrays$ArrayList: int size()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: java.util.List categoryProductVariants(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.attribute.ProductAttribute: com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue getProductOptionValue()>
<com.salesmanager.core.business.services.reference.country.CountryServiceImpl: java.util.List getCountries(com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.reference.country.Country: void setName(java.lang.String)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionValueServiceImpl: void delete(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData updateCartItems(java.util.Optional,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setLineItems(java.util.Set)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean authorizedStore(java.lang.String,java.lang.String)>-><com.salesmanager.core.model.user.User: com.salesmanager.core.model.merchant.MerchantStore getMerchantStore()>
<com.salesmanager.core.business.services.shipping.ShippingServiceImpl: void removeShippingQuoteModuleConfiguration(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.system.MerchantConfiguration: void setValue(java.lang.String)>
<com.salesmanager.shop.store.controller.shipping.facade.ShippingFacadeImpl: com.salesmanager.shop.model.references.ReadableAddress getShippingOrigin(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.shipping.ShippingOrigin: java.lang.String getState()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.core.model.user.User verifyUserLink(java.lang.String,java.lang.String)>-><com.salesmanager.core.model.common.CredentialsReset: java.util.Date getCredentialsRequestExpiry()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void authorizedGroups(java.lang.String,com.salesmanager.shop.model.user.PersistableUser)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: boolean isObsolete()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction lastTransaction(com.salesmanager.core.model.order.Order,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.lang.Integer getQuantity()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: void updateOrderCustomre(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.order.Order: void setDelivery(com.salesmanager.core.model.common.Delivery)>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.util.Collection values()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction lastTransaction(com.salesmanager.core.model.order.Order,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart removeShoppingCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.salesmanager.shop.application.config.MultipleEntryPointsSecurityConfig$CustomeApiConfigurationAdapter: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.security.SocialCustomerServicesImpl getSocialCustomerServicesImpl()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.core.model.catalog.category.Category getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.salesmanager.core.business.services.shipping.ShippingServiceImpl: com.salesmanager.core.model.shipping.ShippingQuote getShippingQuote(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.common.Delivery,java.util.List,com.salesmanager.core.model.reference.language.Language)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.catalog.product.ProductServiceImpl: void delete(com.salesmanager.core.model.catalog.product.Product)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.Order processOrder(com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Locale)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setPromoAdded(java.util.Date)>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: java.util.List createContentDescriptionEntitys(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.content.Content,com.salesmanager.core.model.reference.language.Language)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCart(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.user.ReadableUserList listByCriteria(com.salesmanager.core.model.user.UserCriteria,int,int,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void deleteCustomerReview(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.customer.review.CustomerReview: com.salesmanager.core.model.customer.Customer getReviewedCustomer()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void authenticate(com.salesmanager.core.model.customer.Customer,java.lang.String,java.lang.String)>-><com.salesmanager.core.model.user.Permission: java.lang.String getPermissionName()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><java.lang.Enum: java.lang.String name()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getPopulatedShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><net.sf.ehcache.store.cachingtier.PooledBasedBackEnd: java.lang.Object get(java.lang.Object)>
<com.salesmanager.core.business.services.reference.language.LanguageServiceImpl: java.util.Map getLanguagesMap()>-><com.salesmanager.core.model.reference.language.Language: java.lang.String getCode()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.salesmanager.core.model.order.orderstatus.OrderStatusHistory: com.salesmanager.core.model.order.orderstatus.OrderStatus getStatus()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><java.util.Vector: java.lang.Object get(int)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeCartItem(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.customer.CustomerFacadeImpl: void authorize(com.salesmanager.core.model.customer.Customer,java.security.Principal)>-><com.salesmanager.core.model.customer.Customer: java.lang.String getNick()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><org.apache.http.impl.client.RedirectLocations: int size()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.infinispan.cache.impl.EncoderCache: java.util.Collection values()>
<com.salesmanager.core.business.services.reference.country.CountryServiceImpl: java.util.List getCountries(com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.infinispan.util.WriteableCacheCollectionMapper: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><io.jsonwebtoken.impl.JwtMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void authorizedGroups(java.lang.String,com.salesmanager.shop.model.user.PersistableUser)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: java.util.List findPermissionsByGroups(java.util.List)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.facade.manufacturer.ManufacturerFacadeImpl: java.util.List getByProductInCategory(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long)>-><com.salesmanager.core.model.catalog.category.Category: com.salesmanager.core.model.merchant.MerchantStore getMerchantStore()>
<com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionValueServiceImpl: void delete(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.List createShippingProduct(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.util.Set getLineItems()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: boolean isObsolete()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void resetPassword(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.common.Billing: java.lang.String getLastName()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.OrderTotalSummary calculateOrderTotal(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.customer.Customer,com.salesmanager.shop.model.order.v0.PersistableOrder,com.salesmanager.core.model.reference.language.Language)>-><java.time.ZonedDateTime: java.time.LocalDate toLocalDate()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.infinispan.cache.impl.SimpleCacheImpl$EntrySet: java.util.stream.Stream stream()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.security.ReadablePermission convertPermissionToReadablePermission(com.salesmanager.core.model.user.Permission)>-><com.salesmanager.core.model.user.Permission: java.lang.String getPermissionName()>
<com.salesmanager.core.business.services.shipping.ShippingServiceImpl: java.util.List getSupportedCountries(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.system.MerchantConfiguration: java.lang.String getValue()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$SingletonList: int size()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: java.util.List createContentDescriptionEntitys(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.content.Content,com.salesmanager.core.model.reference.language.Language)>-><java.util.Vector$Itr: boolean hasNext()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.Order processOrder(com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Locale)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi: void <init>()>-><com.salesmanager.shop.store.facade.product.ProductInventoryFacadeImpl: void <init>()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCartMulti(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.google.common.collect.ImmutableCollection: boolean add(java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCartItem getEntryToUpdate(long,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.lang.Long getId()>
<com.salesmanager.core.business.services.order.OrderServiceImpl: com.salesmanager.core.model.order.Order process(com.salesmanager.core.model.order.Order,com.salesmanager.core.model.customer.Customer,java.util.List,com.salesmanager.core.model.order.OrderTotalSummary,com.salesmanager.core.model.payments.Payment,com.salesmanager.core.model.payments.Transaction,com.salesmanager.core.model.merchant.MerchantStore)>-><com.google.common.collect.DescendingImmutableSortedSet: int size()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><org.infinispan.commons.util.Immutables$ImmutableTypedProperties: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCartItem getEntryToUpdate(long,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: com.salesmanager.shop.model.content.ContentDescriptionEntity create(com.salesmanager.core.model.content.ContentDescription)>-><java.lang.Long: long longValue()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCart(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.google.common.collect.ImmutableCollection: boolean add(java.lang.Object)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void resetPasswordRequest(com.salesmanager.core.model.user.User,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,java.util.Locale)>-><com.salesmanager.core.model.user.User: java.lang.String getAdminEmail()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCartMulti(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.HashSet: boolean remove(java.lang.Object)>
<com.salesmanager.shop.store.facade.order.OrderFacadeImpl: void <init>()>-><com.salesmanager.shop.utils.LabelUtils: void <init>()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.v0.ReadableOrder getReadableOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCartMulti(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.util.Optional findFirst()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart removeShoppingCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean)>-><java.util.HashSet: void clear()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><com.salesmanager.shop.model.catalog.category.CategoryEntity: com.salesmanager.shop.model.catalog.category.Category getParent()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><org.infinispan.cache.impl.StatsCollectingCache: java.lang.Object get(java.lang.Object)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart mergeShoppingCarts(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.Long getCustomerId()>
<com.salesmanager.core.business.services.customer.review.CustomerReviewServiceImpl: void saveOrUpdate(com.salesmanager.core.model.customer.review.CustomerReview)>-><com.salesmanager.core.model.customer.Customer: java.lang.Integer getCustomerReviewCount()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.shipping.ShippingQuote getShippingQuote(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.order.ShopOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Arrays$ArrayList: int size()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getRefundableTransaction(com.salesmanager.core.model.order.Order)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><java.util.ArrayList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><org.apache.http.impl.client.RedirectLocations: java.lang.Object get(int)>
<com.salesmanager.core.business.services.content.ContentServiceImpl: void delete(com.salesmanager.core.model.content.Content)>-><com.salesmanager.core.model.content.Content: java.lang.Long getId()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: java.util.List listTransactions(com.salesmanager.core.model.order.Order)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.core.business.services.catalog.category.CategoryServiceImpl: void delete(com.salesmanager.core.model.catalog.category.Category)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData updateCartItems(java.util.Optional,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.Product: java.util.Set getAttributes()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean authorizedStore(java.lang.String,java.lang.String)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: com.salesmanager.shop.model.content.ContentDescriptionEntity create(com.salesmanager.core.model.content.ContentDescription)>-><com.salesmanager.core.model.common.description.Description: java.lang.String getTitle()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.reference.country.CountryServiceImpl: java.util.List getCountries(com.salesmanager.core.model.reference.language.Language)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><java.util.Vector: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void authorizedGroups(java.lang.String,com.salesmanager.shop.model.user.PersistableUser)>-><com.salesmanager.core.model.user.User: java.util.List getGroups()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.user.UserServiceImpl: void delete(com.salesmanager.core.model.user.User)>-><com.salesmanager.core.model.user.User: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: com.salesmanager.shop.model.content.ReadableContentFull convertContentToReadableContentFull(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.content.Content)>-><com.salesmanager.core.model.content.Content: java.lang.String getCode()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><org.apache.commons.collections.FastHashMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><java.util.Vector: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void authorizedGroups(java.lang.String,com.salesmanager.shop.model.user.PersistableUser)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.reference.country.CountryServiceImpl: java.util.List getCountries(com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void authorizedGroups(java.lang.String,com.salesmanager.shop.model.user.PersistableUser)>-><com.salesmanager.core.model.user.Group: java.lang.String getGroupName()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: java.util.List getAllCustomerReviewsByReviewed(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.core.business.services.reference.country.CountryServiceImpl: java.util.List getCountries(com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.reference.country.Country: java.util.Set getDescriptions()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><net.sf.ehcache.store.cachingtier.PooledBasedBackEnd: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getPopulatedShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setLineItems(java.util.Set)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: void validateOrder(com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,java.util.Map,com.salesmanager.core.model.merchant.MerchantStore,java.util.Locale)>-><org.springframework.validation.BindException: boolean hasErrors()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.user.ReadableUserList listByCriteria(com.salesmanager.core.model.user.UserCriteria,int,int,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.String getCode()>
<com.salesmanager.core.business.services.catalog.product.attribute.ProductAttributeServiceImpl: java.util.List getByOptionId(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.Integer getId()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: boolean passwordMatch(java.lang.String,com.salesmanager.core.model.customer.Customer)>-><com.salesmanager.core.model.customer.Customer: java.lang.String getPassword()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.security.Provider: java.lang.Object get(java.lang.Object)>
<com.salesmanager.core.business.services.reference.country.CountryServiceImpl: java.util.List getCountries(com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: com.salesmanager.shop.model.content.ReadableContentFull convertContentToReadableContentFull(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.content.Content)>-><java.lang.Enum: java.lang.String name()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void resetPassword(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.common.Billing: java.lang.String getFirstName()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.infinispan.commons.util.Immutables$ImmutableTypedProperties: java.util.Collection values()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><freemarker.ext.beans.SequenceAdapter: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.infinispan.cache.impl.SimpleCacheImpl$KeySet: java.util.stream.Stream stream()>
<com.salesmanager.core.business.services.shipping.ShippingServiceImpl: java.util.Map getShippingModulesConfigured(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.system.MerchantConfiguration: java.lang.String getValue()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.catalog.product.attribute.ProductAttribute: com.salesmanager.core.model.catalog.product.Product getProduct()>
<com.salesmanager.core.business.services.catalog.product.image.ProductImageServiceImpl: void removeProductImage(com.salesmanager.core.model.catalog.product.image.ProductImage)>-><com.salesmanager.core.model.catalog.product.image.ProductImage: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean lambda$update$4(com.salesmanager.core.model.user.Group)>-><com.salesmanager.core.model.user.Group: java.lang.String getGroupName()>
<com.salesmanager.core.business.services.tax.TaxServiceImpl: java.util.List calculateTax(com.salesmanager.core.model.order.OrderSummary,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.tax.taxrate.TaxRate: java.util.List getDescriptions()>
<com.salesmanager.core.business.services.reference.country.CountryServiceImpl: java.util.List getCountries(com.salesmanager.core.model.reference.language.Language)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><com.salesmanager.shop.model.catalog.category.ReadableCategory: java.util.List getChildren()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.product.ProductTypeFacadeImpl: void update(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.type.ProductType: java.lang.Long getId()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getCapturableTransaction(com.salesmanager.core.model.order.Order)>-><com.salesmanager.core.model.payments.Transaction: void setTransactionDetails(java.util.Map)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.infinispan.stream.impl.local.LocalCacheStream: void forEach(java.util.function.Consumer)>
<com.salesmanager.shop.store.facade.product.ProductOptionFacadeImpl: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList getAttributesList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$SingletonList: int size()>
<com.salesmanager.core.business.services.merchant.MerchantStoreServiceImpl: com.salesmanager.core.model.merchant.MerchantStore getParent(java.lang.String)>-><java.lang.Integer: int intValue()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.security.ReadablePermission convertPermissionToReadablePermission(com.salesmanager.core.model.user.Permission)>-><com.salesmanager.shop.model.security.PermissionEntity: void setName(java.lang.String)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.user.ReadableUserList listByCriteria(com.salesmanager.core.model.user.UserCriteria,int,int,com.salesmanager.core.model.reference.language.Language)>-><java.lang.Boolean: boolean booleanValue()>
<com.salesmanager.core.business.services.catalog.category.CategoryServiceImpl: void addChild(com.salesmanager.core.model.catalog.category.Category,com.salesmanager.core.model.catalog.category.Category)>-><java.util.Collections$SingletonList: int size()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<com.salesmanager.core.business.services.customer.attribute.CustomerOptionValueServiceImpl: void delete(com.salesmanager.core.model.customer.attribute.CustomerOptionValue)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.Set getShoppingCartItems(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.catalog.product.attribute.ProductAttribute: com.salesmanager.core.model.catalog.product.Product getProduct()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><java.util.ArrayList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><com.salesmanager.shop.model.catalog.category.CategoryEntity: com.salesmanager.shop.model.catalog.category.Category getParent()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart mergeShoppingCarts(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart mergeCart(com.salesmanager.core.model.customer.Customer,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.lang.Long: long longValue()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: com.salesmanager.shop.model.content.ContentDescriptionEntity create(com.salesmanager.core.model.content.ContentDescription)>-><com.salesmanager.core.model.common.description.Description: java.lang.String getName()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.LinkedHashMap: java.util.Collection values()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><net.bytebuddy.matcher.FilterableList$Empty: int size()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><com.salesmanager.shop.model.catalog.category.CategoryEntity: com.salesmanager.shop.model.catalog.category.Category getParent()>
<com.salesmanager.core.business.services.order.OrderServiceImpl: void addOrderStatusHistory(com.salesmanager.core.model.order.Order,com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.salesmanager.core.model.order.Order: java.util.Set getOrderHistory()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><java.util.Vector: int size()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getCapturableTransaction(com.salesmanager.core.model.order.Order)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean authorizedStore(java.lang.String,java.lang.String)>-><org.infinispan.stream.impl.local.LocalCacheStream: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.security.SocialCustomerServicesImpl: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.security.SocialCustomerServicesImpl getSocialCustomerServicesImpl()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeCartItem(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.util.Set getLineItems()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionServiceImpl: void delete(com.salesmanager.core.model.catalog.product.attribute.ProductOption)>-><com.salesmanager.core.model.catalog.product.attribute.ProductOption: com.salesmanager.core.model.merchant.MerchantStore getMerchantStore()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.Collections$UnmodifiableCollection: int size()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.common.description.Description: java.lang.String getName()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void authenticate(com.salesmanager.core.model.customer.Customer,java.lang.String,java.lang.String)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: com.salesmanager.shop.model.customer.PersistableCustomer updateAuthCustomer(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.customer.Customer: java.lang.Long getId()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData getShoppingCartData(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.String getShoppingCartCode()>
<com.salesmanager.shop.store.facade.customer.CustomerFacadeImpl: void requestPasswordReset(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.customer.Customer: void setCredentialsResetRequest(com.salesmanager.core.model.common.CredentialsReset)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.Collections$SingletonMap: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.controller.store.facade.StoreFacadeImpl: com.salesmanager.shop.model.store.ReadableMerchantStore convertMerchantStoreToReadableMerchantStore(com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore)>-><org.springframework.mail.MailSendException: java.lang.String getMessage()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.Collections$SynchronizedMap: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.ShopOrder initializeOrder(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.util.Set getLineItems()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeCartItem(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.salesmanager.core.business.services.catalog.product.PricingServiceImpl: java.math.BigDecimal calculatePriceQuantity(java.math.BigDecimal,int)>-><java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>
<com.salesmanager.shop.store.facade.manufacturer.ManufacturerFacadeImpl: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturer getManufacturer(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer: com.salesmanager.core.model.merchant.MerchantStore getMerchantStore()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: java.util.List createContentDescriptionEntitys(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.content.Content,com.salesmanager.core.model.reference.language.Language)>-><java.util.Vector$Itr: java.lang.Object next()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean authorizedStore(java.lang.String,java.lang.String)>-><org.infinispan.stream.impl.local.LocalCacheStream: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><freemarker.ext.beans.SequenceAdapter: int size()>
<com.salesmanager.shop.store.facade.catalog.CatalogFacadeImpl: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog saveCatalog(com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Optional: java.lang.Object get()>
<com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionValueServiceImpl: void delete(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue)>-><com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><org.springframework.util.LinkedMultiValueMap: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.salesmanager.core.model.order.orderstatus.OrderStatusHistory: java.lang.String getComments()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void authenticate(com.salesmanager.core.model.customer.Customer,java.lang.String,java.lang.String)>-><java.util.Vector$Itr: boolean hasNext()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.OrderTotalSummary calculateOrderTotal(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.customer.Customer,com.salesmanager.shop.model.order.v0.PersistableOrder,com.salesmanager.core.model.reference.language.Language)>-><java.time.LocalDate: boolean isBefore(java.time.chrono.ChronoLocalDate)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void authorizedGroups(java.lang.String,com.salesmanager.shop.model.user.PersistableUser)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.core.business.services.shipping.ShippingServiceImpl: void removeShippingQuoteModuleConfiguration(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.system.MerchantConfiguration: java.lang.String getValue()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.controller.store.facade.StoreFacadeImpl: java.util.List getMerchantConfigEntities(com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><java.util.LinkedList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.catalog.product.PricingServiceImpl: java.lang.String getStringAmount(java.math.BigDecimal,com.salesmanager.core.model.merchant.MerchantStore)>-><java.math.BigDecimal: java.lang.String toString()>
<com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionValueServiceImpl: void delete(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean authorizedStore(java.lang.String,java.lang.String)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.core.business.services.shipping.ShippingServiceImpl: java.math.BigDecimal calculateOrderTotal(java.util.List,com.salesmanager.core.model.merchant.MerchantStore)>-><java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void authenticate(com.salesmanager.core.model.customer.Customer,java.lang.String,java.lang.String)>-><com.salesmanager.core.model.customer.Customer: java.util.List getGroups()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: java.util.List categoryProductVariants(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.attribute.ProductAttribute: java.lang.Long getId()>
<com.salesmanager.core.business.services.tax.TaxServiceImpl: java.util.List calculateTax(com.salesmanager.core.model.order.OrderSummary,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Vector: java.lang.Object get(int)>
<com.salesmanager.core.business.services.catalog.product.ProductServiceImpl: void saveOrUpdate(com.salesmanager.core.model.catalog.product.Product)>-><com.google.common.collect.DescendingImmutableSortedSet: int size()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><com.salesmanager.core.model.customer.Customer: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.product.ProductOptionFacadeImpl: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.catalog.product.attribute.ProductAttribute: com.salesmanager.core.model.catalog.product.Product getProduct()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.stream.ReferencePipeline: void forEach(java.util.function.Consumer)>
<com.salesmanager.shop.store.controller.shipping.facade.ShippingFacadeImpl: com.salesmanager.shop.model.references.ReadableAddress getShippingOrigin(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.shipping.ShippingOrigin: java.lang.String getCity()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.catalog.product.Product: java.lang.Long getId()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void deleteCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.Long getId()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.salesmanager.core.model.order.orderstatus.OrderStatusHistory: java.lang.Long getId()>
<com.salesmanager.shop.store.controller.country.facade.CountryFacadeImpl: java.util.List getListCountryZones(com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.v0.ReadableOrder getReadableOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: java.util.List listTransactions(com.salesmanager.core.model.order.Order)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.merchant.MerchantStoreServiceImpl: com.salesmanager.core.model.merchant.MerchantStore getParent(java.lang.String)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.Integer getId()>
<com.salesmanager.core.business.services.order.OrderServiceImpl: com.salesmanager.core.model.order.OrderTotalSummary caculateOrder(com.salesmanager.core.model.order.OrderSummary,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.price.FinalPrice: java.math.BigDecimal getFinalPrice()>
<com.salesmanager.core.business.services.tax.TaxServiceImpl: java.util.List calculateTax(com.salesmanager.core.model.order.OrderSummary,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$SingletonList: int size()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void resetPassword(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.customer.Customer: void setPassword(java.lang.String)>
<com.salesmanager.shop.store.facade.manufacturer.ManufacturerFacadeImpl: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.mapper.catalog.PersistableCatalogCategoryEntryMapper getPersistableCatalogCategoryEntryMapper()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.Order processOrder(com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Locale)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void authenticate(com.salesmanager.core.model.customer.Customer,java.lang.String,java.lang.String)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart mergeCart(com.salesmanager.core.model.customer.Customer,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.core.model.catalog.category.Category getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.business.services.catalog.category.CategoryServiceImpl: com.salesmanager.core.model.catalog.category.Category getByCode(com.salesmanager.core.model.merchant.MerchantStore,java.lang.String)>
<com.salesmanager.core.business.services.payments.PaymentServiceImpl: void savePaymentModuleConfiguration(com.salesmanager.core.model.system.IntegrationConfiguration,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.system.MerchantConfiguration: java.lang.String getValue()>
<com.salesmanager.core.business.services.order.OrderServiceImpl: void addOrderStatusHistory(com.salesmanager.core.model.order.Order,com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><com.salesmanager.shop.model.entity.Entity: java.lang.Long getId()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeCartItem(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setLineItems(java.util.Set)>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: com.salesmanager.shop.model.content.ReadableContentFull convertContentToReadableContentFull(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.content.Content)>-><com.salesmanager.core.model.content.Content: com.salesmanager.core.model.content.ContentType getContentType()>
<com.salesmanager.core.business.modules.email.EmailComponent: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.core.business.modules.email.DefaultEmailSenderImpl getDefaultEmailSenderImpl()>
<com.salesmanager.shop.store.facade.product.ProductOptionFacadeImpl: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.Product: java.lang.Long getId()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: com.salesmanager.shop.model.customer.PersistableCustomerReview updateCustomerReview(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.customer.Customer: java.lang.Long getId()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getCapturableTransaction(com.salesmanager.core.model.order.Order)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.salesmanager.core.business.services.customer.CustomerServiceImpl: void delete(com.salesmanager.core.model.customer.Customer)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.reference.zone.Zone: java.util.List getDescriptions()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void delete(java.lang.Long,java.lang.String)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: java.util.List createCartItems(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.catalog.product.Product: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: int size()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.core.model.tax.taxrate.TaxRate taxRateByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.tax.taxrate.TaxRate: com.salesmanager.core.model.merchant.MerchantStore getMerchantStore()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData updateCartItems(java.util.Optional,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: com.salesmanager.core.model.catalog.product.Product getProduct()>
<com.salesmanager.shop.store.api.v1.product.ProductApi: void <init>()>-><com.salesmanager.shop.store.facade.product.ProductFacadeImpl: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi: void <init>()>-><com.salesmanager.shop.store.facade.product.ProductFacadeImpl: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController: void <init>()>-><com.salesmanager.shop.store.facade.product.ProductFacadeImpl: void <init>()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.tax.ReadableTaxClass taxClass(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.salesmanager.core.business.services.merchant.MerchantStoreServiceImpl: com.salesmanager.core.model.merchant.MerchantStore getParent(java.lang.String)>-><java.lang.Boolean: boolean booleanValue()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void authenticate(com.salesmanager.core.model.customer.Customer,java.lang.String,java.lang.String)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void resetPassword(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.customer.Customer: com.salesmanager.core.model.common.Billing getBilling()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><java.lang.Integer: int intValue()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><java.util.Arrays$ArrayList: int size()>
<com.salesmanager.core.business.services.order.OrderServiceImpl: com.salesmanager.core.model.order.Order process(com.salesmanager.core.model.order.Order,com.salesmanager.core.model.customer.Customer,java.util.List,com.salesmanager.core.model.order.OrderTotalSummary,com.salesmanager.core.model.payments.Payment,com.salesmanager.core.model.payments.Transaction,com.salesmanager.core.model.merchant.MerchantStore)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.Set getShoppingCartItems(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.lang.Integer getQuantity()>
<com.salesmanager.core.business.services.catalog.category.CategoryServiceImpl: java.util.List listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.reference.language.Language: java.lang.Integer getId()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void delete(java.lang.Long,java.lang.String)>-><java.util.Vector: boolean contains(java.lang.Object)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><org.apache.http.impl.client.RedirectLocations: java.lang.Object get(int)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><java.lang.Long: long longValue()>
<com.salesmanager.core.business.services.catalog.category.CategoryServiceImpl: java.util.List listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.Integer getId()>
<com.salesmanager.core.business.services.order.OrderServiceImpl: com.salesmanager.core.model.order.OrderTotalSummary caculateOrder(com.salesmanager.core.model.order.OrderSummary,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.price.FinalPrice: boolean isDefaultPrice()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.reference.language.Language: java.lang.Integer getId()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCart(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setLineItems(java.util.Set)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><org.infinispan.cache.impl.EncoderCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.shop.store.facade.catalog.CatalogFacadeImpl: com.salesmanager.core.model.catalog.catalog.Catalog getCatalog(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.business.services.catalog.catalog.CatalogServiceImpl: java.util.Optional getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getPopulatedShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.HashSet: int size()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><java.util.SubList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.Order processOrder(com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Locale)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.controller.search.facade.SearchFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategory convertCategoryToReadableCategory(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Map,com.salesmanager.core.model.catalog.category.Category)>-><com.salesmanager.shop.populator.catalog.ReadableCategoryPopulator: void <init>()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.core.business.services.order.OrderServiceImpl: void saveOrUpdate(com.salesmanager.core.model.order.Order)>-><java.lang.Long: long longValue()>
<com.salesmanager.core.business.services.order.OrderServiceImpl: java.util.List getCapturableOrders(com.salesmanager.core.model.merchant.MerchantStore,java.util.Date,java.util.Date)>-><com.salesmanager.core.model.order.Order: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void <init>()>-><com.salesmanager.shop.utils.LabelUtils: void <init>()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.reference.zone.Zone: java.util.List getDescriptions()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.HashMap: java.util.Collection values()>
<com.salesmanager.core.business.services.tax.TaxServiceImpl: java.util.List calculateTax(com.salesmanager.core.model.order.OrderSummary,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.ArrayList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><net.bytebuddy.matcher.FilterableList$Empty: java.lang.Object get(int)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getRefundableTransaction(com.salesmanager.core.model.order.Order)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.controller.store.facade.StoreFacadeImpl: com.salesmanager.shop.model.store.ReadableMerchantStore convertMerchantStoreToReadableMerchantStore(com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore)>-><java.lang.Long: long longValue()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: java.util.List createContentDescriptionEntitys(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.content.Content,com.salesmanager.core.model.reference.language.Language)>-><java.util.Vector: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.tax.TaxServiceImpl: com.salesmanager.core.model.tax.TaxConfiguration getTaxConfiguration(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.system.MerchantConfiguration: java.lang.String getValue()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart mergeShoppingCarts(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.util.Set getAttributes()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: void setProduct(com.salesmanager.core.model.catalog.product.Product)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.security.ReadablePermission convertPermissionToReadablePermission(com.salesmanager.core.model.user.Permission)>-><com.salesmanager.shop.model.security.PermissionEntity: void setId(java.lang.Integer)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.Set getShoppingCartItems(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.List createShippingProduct(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><org.infinispan.cache.impl.EncoderCache: java.lang.Object get(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.salesmanager.shop.store.api.exception.RestErrorHandler: void <init>()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: com.salesmanager.shop.model.content.ReadableContentFull convertContentToReadableContentFull(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.content.Content)>-><com.salesmanager.core.model.content.Content: boolean isLinkToMenu()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.Order processOrder(com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Locale)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.util.Set getLineItems()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.List createShippingProduct(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.Collections$UnmodifiableMap: java.util.Collection values()>
<com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionValueServiceImpl: void delete(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue)>-><com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue: com.salesmanager.core.model.merchant.MerchantStore getMerchantStore()>
<com.salesmanager.shop.store.facade.customer.CustomerFacadeImpl: void resetPasswordRequest(com.salesmanager.core.model.customer.Customer,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,java.util.Locale)>-><com.salesmanager.core.model.customer.Customer: com.salesmanager.core.model.common.Billing getBilling()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: void setObsolete(boolean)>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: java.util.List listTransactions(com.salesmanager.core.model.order.Order)>-><com.salesmanager.core.model.payments.Transaction: void setTransactionDetails(java.util.Map)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCart(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: void setQuantity(java.lang.Integer)>
<com.salesmanager.core.business.services.customer.attribute.CustomerOptionValueServiceImpl: void delete(com.salesmanager.core.model.customer.attribute.CustomerOptionValue)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.core.business.services.catalog.product.price.ProductPriceServiceImpl: void saveOrUpdate(com.salesmanager.core.model.catalog.product.price.ProductPrice)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.salesmanager.shop.utils.DateUtil: java.lang.String formatLongDate(java.util.Date)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData updateCartItems(java.util.Optional,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setPromoAdded(java.util.Date)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><net.bytebuddy.matcher.FilterableList$Empty: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.user.ReadableUserList listByCriteria(com.salesmanager.core.model.user.UserCriteria,int,int,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean lambda$userInRoles$7(java.util.List,org.springframework.security.core.GrantedAuthority)>-><java.util.Arrays$ArrayList: boolean contains(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.salesmanager.shop.store.controller.error.ShopErrorController: void <init>()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><java.util.ArrayList: int size()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$categoryProductVariants$13(com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.catalog.product.attribute.ProductOptionValueDescription)>-><com.salesmanager.core.model.common.description.Description: com.salesmanager.core.model.reference.language.Language getLanguage()>
<com.salesmanager.core.business.services.payments.PaymentServiceImpl: void removePaymentModuleConfiguration(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.system.MerchantConfiguration: java.lang.String getValue()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getRefundableTransaction(com.salesmanager.core.model.order.Order)>-><com.salesmanager.core.model.payments.Transaction: void setTransactionDetails(java.util.Map)>
<com.salesmanager.shop.store.facade.product.ProductOptionFacadeImpl: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList getAttributesList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void deleteCustomerReview(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.lang.Long: boolean equals(java.lang.Object)>
<com.salesmanager.shop.store.controller.store.facade.StoreFacadeImpl: java.util.List getMerchantConfigEntities(com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: com.salesmanager.shop.model.customer.PersistableCustomerReview updateCustomerReview(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.customer.review.CustomerReview: com.salesmanager.core.model.customer.Customer getReviewedCustomer()>
<com.salesmanager.core.business.services.customer.attribute.CustomerOptionSetServiceImpl: void delete(com.salesmanager.core.model.customer.attribute.CustomerOptionSet)>-><com.salesmanager.core.model.customer.attribute.CustomerOptionSet: java.lang.Long getId()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCartMulti(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getCapturableTransaction(com.salesmanager.core.model.order.Order)>-><com.salesmanager.core.model.payments.Transaction: java.lang.String getDetails()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void setCustomerModelDefaultProperties(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.SubList: int size()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: java.util.List categoryProductVariants(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue: java.util.Set getDescriptions()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void changePassword(com.salesmanager.core.model.customer.Customer,java.lang.String)>-><com.salesmanager.core.model.customer.Customer: void setPassword(java.lang.String)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.reference.zone.Zone: java.util.List getDescriptions()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getPopulatedShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setObsolete(boolean)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.util.Date getPromoAdded()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void resetPasswordRequest(com.salesmanager.core.model.user.User,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,java.util.Locale)>-><com.salesmanager.core.model.user.User: java.lang.String getFirstName()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><java.util.Vector: java.lang.Object get(int)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCartItem getEntryToUpdate(long,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.salesmanager.shop.store.controller.store.facade.StoreFacadeImpl: com.salesmanager.shop.model.store.ReadableMerchantStore convertMerchantStoreToReadableMerchantStoreWithFullDetails(com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.salesmanager.shop.store.facade.product.ProductOptionFacadeImpl: void removeOptionValueImage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue: void setProductOptionValueImage(java.lang.String)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart mergeShoppingCarts(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.util.Set getLineItems()>
<com.salesmanager.shop.store.controller.shipping.facade.ShippingFacadeImpl: com.salesmanager.shop.model.references.ReadableAddress getShippingOrigin(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.shipping.ShippingOrigin: java.lang.String getAddress()>
<com.salesmanager.core.business.services.catalog.category.CategoryServiceImpl: void addChild(com.salesmanager.core.model.catalog.category.Category,com.salesmanager.core.model.catalog.category.Category)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.customer.CustomerServiceImpl: java.util.List getListByStore(com.salesmanager.core.model.merchant.MerchantStore)>-><java.lang.Integer: int intValue()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.core.model.catalog.category.Category getById(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long)>-><com.salesmanager.core.model.catalog.category.Category: com.salesmanager.core.model.merchant.MerchantStore getMerchantStore()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.List createShippingProduct(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: com.salesmanager.core.model.catalog.product.Product getProduct()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: java.util.List buildDescriptions(com.salesmanager.core.model.content.Content,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void authenticate(com.salesmanager.core.model.customer.Customer,java.lang.String,java.lang.String)>-><java.util.Collections$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.salesmanager.shop.application.ShopApplication: void <init>()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.OrderTotalSummary calculateOrderTotal(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.customer.Customer,com.salesmanager.shop.model.order.v0.PersistableOrder,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setPromoCode(java.lang.String)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.Order processOrder(com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Locale)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.security.ReadablePermission convertPermissionToReadablePermission(com.salesmanager.core.model.user.Permission)>-><com.salesmanager.shop.model.security.ReadablePermission: void <init>()>
<com.salesmanager.core.business.services.shipping.ShippingServiceImpl: java.math.BigDecimal calculateOrderTotal(java.util.List,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.catalog.product.price.FinalPrice: java.math.BigDecimal getFinalPrice()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction lastTransaction(com.salesmanager.core.model.order.Order,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.order.Order: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getRefundableTransaction(com.salesmanager.core.model.order.Order)>-><java.util.Date: boolean before(java.util.Date)>
<com.salesmanager.shop.store.controller.shipping.facade.ShippingFacadeImpl: com.salesmanager.shop.model.references.ReadableAddress getShippingOrigin(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.shipping.ShippingOrigin: boolean isActive()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean authorizedStore(java.lang.String,java.lang.String)>-><org.infinispan.util.AbstractDelegatingCacheStream: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><java.util.SubList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi: void <init>()>-><com.salesmanager.shop.store.facade.product.ProductFacadeImpl: void <init>()>
<com.salesmanager.core.business.services.content.ContentServiceImpl: void addImage(java.lang.String,com.salesmanager.core.model.content.InputContentFile)>-><org.apache.xerces.impl.XMLEntityManager$RewindableInputStream: void close()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><net.sf.ehcache.store.cachingtier.PooledBasedBackEnd: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.WeakHashMap: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><org.apache.commons.collections.FastHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getPopulatedShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$5(com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><com.salesmanager.shop.model.catalog.category.CategoryEntity: int getDepth()>
<com.salesmanager.core.business.services.shipping.ShippingServiceImpl: com.salesmanager.core.model.shipping.ShippingQuote getShippingQuote(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.common.Delivery,java.util.List,com.salesmanager.core.model.reference.language.Language)>-><org.springframework.mail.MailSendException: java.lang.String getMessage()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Vector: int size()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: boolean lambda$modifyCartMulti$4(com.salesmanager.core.model.shoppingcart.ShoppingCartItem,com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><java.lang.Long: int intValue()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: java.util.List createCartItems(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.catalog.product.attribute.ProductAttribute: com.salesmanager.core.model.catalog.product.Product getProduct()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><org.infinispan.cache.impl.EncoderCache: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void delete(java.lang.Long,java.lang.String)>-><java.util.Collections$SingletonList: boolean contains(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData getShoppingCartData(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><java.lang.Long: long longValue()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.List createShippingProduct(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.catalog.product.Product: boolean isProductShipeable()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.Set getShoppingCartItems(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.salesmanager.shop.store.controller.currency.facade.CurrencyFacadeImpl: java.util.List getList()>-><java.util.AbstractCollection: boolean isEmpty()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><org.infinispan.util.AbstractDelegatingCacheStream: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><javax.management.openmbean.TabularDataSupport: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCartMulti(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void deleteCustomerReview(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.customer.Customer: java.lang.Long getId()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart removeShoppingCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: com.salesmanager.core.model.catalog.product.Product getProduct()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.v0.ReadableOrderList getReadableOrderList(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.customer.Customer,int,int,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.customer.Customer: java.lang.Long getId()>
<com.salesmanager.shop.store.api.v1.product.ProductApi: void <init>()>-><com.salesmanager.shop.store.facade.product.ProductDefinitionFacadeImpl: void <init>()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.merchant.MerchantStoreServiceImpl: com.salesmanager.core.model.merchant.MerchantStore getParent(java.lang.String)>-><com.salesmanager.core.model.merchant.MerchantStore: com.salesmanager.core.model.merchant.MerchantStore getParent()>
<com.salesmanager.shop.store.facade.product.ProductOptionSetFacadeImpl: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: java.util.List getReadableOrderHistory(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.order.Order: java.util.Set getOrderHistory()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.salesmanager.shop.store.facade.manufacturer.ManufacturerFacadeImpl: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList getAllManufacturers(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.ListCriteria,int,int)>-><java.util.Collections$SingletonList: int size()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>
<com.salesmanager.core.business.services.customer.CustomerServiceImpl: void delete(com.salesmanager.core.model.customer.Customer)>-><com.salesmanager.core.model.customer.Customer: com.salesmanager.core.model.merchant.MerchantStore getMerchantStore()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.salesmanager.shop.model.order.history.OrderStatusHistory: void setOrderStatus(java.lang.String)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.Set getShoppingCartItems(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$categoryProductVariants$13(com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.catalog.product.attribute.ProductOptionValueDescription)>-><com.salesmanager.core.model.reference.language.Language: java.lang.Integer getId()>
<com.salesmanager.shop.store.facade.product.ProductOptionSetFacadeImpl: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.attribute.ProductOptionSet: java.lang.String getCode()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.String getPromoCode()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: java.util.List getReadableOrderHistory(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void deleteShoppingCartItem(java.lang.Long)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.util.Set getAttributes()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: int size()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: boolean lambda$modifyCartMulti$4(com.salesmanager.core.model.shoppingcart.ShoppingCartItem,com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.lang.Long getProductId()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.security.ReadablePermission convertPermissionToReadablePermission(com.salesmanager.core.model.user.Permission)>-><com.salesmanager.core.model.user.Permission: java.lang.Integer getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.core.model.catalog.category.Category getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.shop.store.api.exception.ServiceRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getRefundableTransaction(com.salesmanager.core.model.order.Order)>-><com.salesmanager.core.model.payments.Transaction: java.util.Date getTransactionDate()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><com.salesmanager.shop.model.entity.Entity: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getPopulatedShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: java.util.List getContents(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.SubList: int size()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.salesmanager.shop.model.order.history.OrderStatusHistory: void setComments(java.lang.String)>
<com.salesmanager.core.business.services.payments.PaymentServiceImpl: java.util.List getPaymentMethods(com.salesmanager.core.model.merchant.MerchantStore)>-><com.google.common.collect.DescendingImmutableSortedSet: boolean contains(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><io.jsonwebtoken.impl.JwtMap: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.address.Address,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.common.Delivery: void setCountry(com.salesmanager.core.model.reference.country.Country)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.EnumMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$SingletonList: int size()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCartMulti(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Optional: boolean isPresent()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.user.ReadableUser update(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.user.PersistableUser)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.security.Provider: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.product.ProductOptionFacadeImpl: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.Product: com.salesmanager.core.model.merchant.MerchantStore getMerchantStore()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><io.jsonwebtoken.impl.JwtMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><freemarker.ext.beans.SequenceAdapter: java.lang.Object get(int)>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.address.Address,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.common.Billing: void setState(java.lang.String)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.math.BigDecimal getItemPrice()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.controller.shipping.facade.ShippingFacadeImpl: com.salesmanager.shop.model.references.ReadableAddress getShippingOrigin(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.reference.zone.Zone: java.lang.String getCode()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.catalog.category.Category: com.salesmanager.core.model.catalog.category.Category getParent()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getRefundableTransaction(com.salesmanager.core.model.order.Order)>-><com.salesmanager.core.model.payments.Transaction: com.salesmanager.core.model.payments.TransactionType getTransactionType()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.salesmanager.shop.store.facade.manufacturer.ManufacturerFacadeImpl: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList getAllManufacturers(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.ListCriteria,int,int)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCart(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.String getPromoCode()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart mergeCart(com.salesmanager.core.model.customer.Customer,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.String getShoppingCartCode()>
<com.salesmanager.core.business.services.customer.attribute.CustomerAttributeServiceImpl: java.util.List getByCustomer(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.customer.Customer)>-><com.salesmanager.core.model.customer.Customer: java.lang.Long getId()>
<com.salesmanager.shop.store.controller.search.facade.SearchFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategory convertCategoryToReadableCategory(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Map,com.salesmanager.core.model.catalog.category.Category)>-><com.salesmanager.shop.model.catalog.category.Category: java.lang.String getCode()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.OrderTotalSummary calculateOrderTotal(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.customer.Customer,com.salesmanager.shop.model.order.v0.PersistableOrder,com.salesmanager.core.model.reference.language.Language)>-><java.time.Instant: java.time.ZonedDateTime atZone(java.time.ZoneId)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.reference.zone.Zone: void setName(java.lang.String)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: boolean containsKey(java.lang.Object)>
<com.salesmanager.core.business.services.order.OrderServiceImpl: java.util.List getCapturableOrders(com.salesmanager.core.model.merchant.MerchantStore,java.util.Date,java.util.Date)>-><com.salesmanager.core.model.payments.Transaction: com.salesmanager.core.model.order.Order getOrder()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.Collections$EmptyMap: java.util.Collection values()>
<com.salesmanager.core.business.services.catalog.category.CategoryServiceImpl: void delete(com.salesmanager.core.model.catalog.category.Category)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.core.business.services.customer.attribute.CustomerAttributeServiceImpl: java.util.List getByCustomer(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.customer.Customer)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.Integer getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><io.jsonwebtoken.impl.JwtMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.manufacturer.ManufacturerFacadeImpl: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList getAllManufacturers(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.ListCriteria,int,int)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.customer.review.CustomerReviewServiceImpl: void saveOrUpdate(com.salesmanager.core.model.customer.review.CustomerReview)>-><com.salesmanager.core.model.customer.Customer: java.math.BigDecimal getCustomerReviewAvg()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.user.ReadableUser update(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.user.PersistableUser)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.EnumMap: boolean containsKey(java.lang.Object)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><java.util.ArrayList: java.lang.Object get(int)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setPromoCode(java.lang.String)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.v0.ReadableOrder getReadableOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getPopulatedShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.common.description.Description: java.lang.String getName()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: com.salesmanager.shop.model.content.ContentDescriptionEntity create(com.salesmanager.core.model.content.ContentDescription)>-><com.salesmanager.core.model.reference.language.Language: java.lang.String getCode()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><java.util.HashSet: int size()>
<com.salesmanager.core.business.services.customer.attribute.CustomerOptionServiceImpl: void delete(com.salesmanager.core.model.customer.attribute.CustomerOption)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData addItemsToShoppingCart(com.salesmanager.shop.model.shoppingcart.ShoppingCartData,com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.customer.Customer)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.security.Provider: java.util.Collection values()>
<com.salesmanager.shop.store.facade.customer.CustomerFacadeImpl: com.salesmanager.core.model.customer.Customer verifyCustomerLink(java.lang.String,java.lang.String)>-><com.salesmanager.core.model.customer.Customer: com.salesmanager.core.model.common.CredentialsReset getCredentialsResetRequest()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.Collections$SynchronizedMap: java.util.Collection values()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.SubList: int size()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.infinispan.cache.impl.SimpleCacheImpl$Values: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: java.lang.Object getKeyValue(java.lang.String)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.Object getAttribute(java.lang.String)>
<com.salesmanager.shop.mapper.catalog.PersistableCatalogCategoryEntryMapper: com.salesmanager.core.model.catalog.catalog.CatalogCategoryEntry merge(com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.catalog.catalog.CatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.core.model.catalog.category.Category getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCartMulti(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.salesmanager.core.business.services.catalog.category.CategoryServiceImpl: void addChild(com.salesmanager.core.model.catalog.category.Category,com.salesmanager.core.model.catalog.category.Category)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><net.bytebuddy.matcher.FilterableList$Empty: int size()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: int size()>
<com.salesmanager.shop.store.facade.customer.CustomerFacadeImpl: void authorize(com.salesmanager.core.model.customer.Customer,java.security.Principal)>-><com.salesmanager.core.model.customer.Customer: java.lang.Long getId()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: java.util.List createCartItems(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore)>-><java.lang.Long: long longValue()>
<com.salesmanager.shop.store.facade.catalog.CatalogFacadeImpl: com.salesmanager.shop.store.api.exception.ResourceNotFoundException lambda$addCatalogEntry$6(com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry)>-><com.salesmanager.shop.model.catalog.catalog.CatalogEntryEntity: java.lang.String getCatalog()>
<com.salesmanager.shop.store.facade.product.ProductOptionFacadeImpl: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity saveAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.attribute.ProductAttribute: com.salesmanager.core.model.catalog.product.Product getProduct()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><org.infinispan.stream.impl.local.LocalCacheStream: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><org.infinispan.stream.impl.local.LocalCacheStream: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean authorizedStore(java.lang.String,java.lang.String)>-><org.infinispan.util.AbstractDelegatingCacheStream: java.util.stream.Stream map(java.util.function.Function)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.salesmanager.shop.store.api.exception.FileUploadExceptionAdvice: void <init>()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: java.util.List categoryProductVariants(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.attribute.ProductAttribute: com.salesmanager.core.model.catalog.product.attribute.ProductOption getProductOption()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getPopulatedShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: boolean isObsolete()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><org.infinispan.stream.impl.local.LocalCacheStream: java.util.stream.Stream filter(java.util.function.Predicate)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.infinispan.stream.impl.local.LocalCacheStream: java.util.stream.Stream sorted(java.util.Comparator)>
<com.salesmanager.core.business.services.catalog.category.CategoryServiceImpl: com.salesmanager.core.model.catalog.category.Category getById(java.lang.Long,int)>-><com.salesmanager.core.model.catalog.category.Category: void setDescriptions(java.util.Set)>
<com.salesmanager.core.business.services.reference.country.CountryServiceImpl: java.util.List getCountries(com.salesmanager.core.model.reference.language.Language)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart mergeShoppingCarts(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartAttributeItem: void setProductAttribute(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.salesmanager.core.model.order.orderstatus.OrderStatusHistory: com.salesmanager.core.model.order.Order getOrder()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.TreeMap: java.util.Collection values()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.infinispan.util.AbstractDelegatingCacheStream: java.util.stream.Stream filter(java.util.function.Predicate)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean authorizedStore(java.lang.String,java.lang.String)>-><org.springframework.mail.MailSendException: java.lang.String getMessage()>
<com.salesmanager.core.business.services.shipping.ShippingServiceImpl: com.salesmanager.core.model.shipping.ShippingQuote getShippingQuote(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.common.Delivery,java.util.List,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shipping.ShippingOrigin: boolean isActive()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void deleteShoppingCartItem(java.lang.Long)>-><java.lang.Iterable: void forEach(java.util.function.Consumer)>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: java.util.List listTransactions(com.salesmanager.core.model.order.Order)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: java.util.List categoryProductVariants(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.attribute.ProductAttribute: java.lang.String getAttributeSortOrder()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getPopulatedShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><org.springframework.mail.MailSendException: java.lang.String getMessage()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.tax.ReadableTaxClass taxClass(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.tax.taxclass.TaxClass: com.salesmanager.core.model.merchant.MerchantStore getMerchantStore()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: java.util.List buildDescriptions(com.salesmanager.core.model.content.Content,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.List createShippingProduct(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.lang.Integer getQuantity()>
<com.salesmanager.core.business.services.catalog.category.CategoryServiceImpl: void delete(com.salesmanager.core.model.catalog.category.Category)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.manufacturer.ManufacturerFacadeImpl: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList getAllManufacturers(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.ListCriteria,int,int)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeCartItem(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><org.infinispan.cache.impl.SimpleCacheImpl: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategory getById(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart removeShoppingCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.util.Set getLineItems()>
<com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionServiceImpl: void delete(com.salesmanager.core.model.catalog.product.attribute.ProductOption)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart mergeCart(com.salesmanager.core.model.customer.Customer,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.Long getCustomerId()>
<com.salesmanager.shop.store.facade.product.ProductOptionSetFacadeImpl: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart mergeCart(com.salesmanager.core.model.customer.Customer,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartAttributeItem: java.lang.Long getProductAttributeId()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getRefundableTransaction(com.salesmanager.core.model.order.Order)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void authenticate(com.salesmanager.core.model.customer.Customer,java.lang.String,java.lang.String)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><java.util.SubList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><net.bytebuddy.matcher.FilterableList$Empty: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void resetPassword(java.lang.String,java.lang.String,java.lang.String)>-><com.salesmanager.core.model.user.User: void setAdminPassword(java.lang.String)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.springframework.util.LinkedMultiValueMap: java.util.Collection values()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: java.util.List getContents(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: java.util.List buildDescriptions(com.salesmanager.core.model.content.Content,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategory getById(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.shop.mapper.catalog.PersistableCatalogCategoryEntryMapper: java.lang.Object convert(java.lang.Object,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean authorizedStore(java.lang.String,java.lang.String)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.facade.manufacturer.ManufacturerFacadeImpl: java.util.List getByProductInCategory(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.List createShippingProduct(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.catalog.product.attribute.ProductAttribute: com.salesmanager.core.model.catalog.product.Product getProduct()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void <init>()>-><com.salesmanager.shop.utils.LabelUtils: void <init>()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.Order processOrder(com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Locale)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.String getShoppingCartCode()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void authenticate(com.salesmanager.core.model.customer.Customer,java.lang.String,java.lang.String)>-><java.util.Vector$Itr: java.lang.Object next()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.infinispan.util.AbstractDelegatingCacheStream: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.apache.http.impl.client.RedirectLocations: int size()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getRefundableTransaction(com.salesmanager.core.model.order.Order)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: java.util.List createContentDescriptionEntitys(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.content.Content,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.content.Content: java.util.List getDescriptions()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.core.business.services.catalog.product.manufacturer.ManufacturerServiceImpl: void delete(com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer)>-><com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer: java.lang.Long getId()>
<com.salesmanager.core.business.services.catalog.catalog.CatalogEntryServiceImpl: void add(com.salesmanager.core.model.catalog.catalog.CatalogCategoryEntry,com.salesmanager.core.model.catalog.catalog.Catalog)>-><com.salesmanager.core.model.catalog.catalog.CatalogCategoryEntry: void setCatalog(com.salesmanager.core.model.catalog.catalog.Catalog)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void setVisible(com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.catalog.category.Category: void setVisible(boolean)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.Hashtable: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart mergeCart(com.salesmanager.core.model.customer.Customer,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.customer.Customer: java.lang.Long getId()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: void delete(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long)>-><com.salesmanager.core.model.content.Content: com.salesmanager.core.model.merchant.MerchantStore getMerchantStore()>
<com.salesmanager.core.business.services.shipping.ShippingServiceImpl: java.util.List getShippingMethods(com.salesmanager.core.model.merchant.MerchantStore)>-><com.google.common.collect.DescendingImmutableSortedSet: boolean contains(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean authorizedStore(java.lang.String,java.lang.String)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.String getCode()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><com.salesmanager.shop.model.entity.Entity: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategory getById(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.shipping.ShippingQuote getShippingQuote(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.order.v0.PersistableOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.Long getId()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><freemarker.ext.beans.SequenceAdapter: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.product.ProductOptionFacadeImpl: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.attribute.ProductAttribute: com.salesmanager.core.model.catalog.product.Product getProduct()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData updateCartItems(java.util.Optional,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: void setItemPrice(java.math.BigDecimal)>
<com.salesmanager.core.business.services.customer.attribute.CustomerOptionServiceImpl: void delete(com.salesmanager.core.model.customer.attribute.CustomerOption)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><freemarker.ext.beans.HashAdapter: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><org.infinispan.util.AbstractDelegatingCacheStream: java.util.stream.Stream filter(java.util.function.Predicate)>
<com.salesmanager.core.business.services.catalog.category.CategoryServiceImpl: org.springframework.data.domain.Page getListByDepth(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,int,int,int)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.Integer getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.address.Address,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.common.Delivery: void setState(java.lang.String)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi: void <init>()>-><com.salesmanager.shop.store.facade.product.ProductInventoryFacadeImpl: void <init>()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.salesmanager.core.model.order.orderstatus.OrderStatusHistory: java.util.Date getDateAdded()>
<com.salesmanager.core.business.services.order.OrderServiceImpl: com.salesmanager.core.model.order.OrderTotalSummary caculateOrder(com.salesmanager.core.model.order.OrderSummary,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.price.ProductPrice: java.lang.String getCode()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCart(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setPromoCode(java.lang.String)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.Collections$UnmodifiableMap: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><javax.management.openmbean.TabularDataSupport: java.util.Collection values()>
<com.salesmanager.core.business.services.reference.country.CountryServiceImpl: java.util.List getCountries(com.salesmanager.core.model.reference.language.Language)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart readableShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.order.OrderServiceImpl: com.salesmanager.core.model.order.OrderTotalSummary caculateOrder(com.salesmanager.core.model.order.OrderSummary,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.price.ProductPrice: com.salesmanager.core.model.catalog.product.price.ProductPriceType getProductPriceType()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction lastTransaction(com.salesmanager.core.model.order.Order,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: java.util.List createContentDescriptionEntitys(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.content.Content,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.common.description.Description: com.salesmanager.core.model.reference.language.Language getLanguage()>
<com.salesmanager.core.business.services.system.EmailServiceImpl: com.salesmanager.core.business.modules.email.EmailConfig getEmailConfiguration(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.system.MerchantConfiguration: java.lang.String getValue()>
<com.salesmanager.core.business.services.catalog.product.manufacturer.ManufacturerServiceImpl: java.util.List listByProductsInCategory(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.catalog.category.Category,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.category.Category: java.lang.String getLineage()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.WeakHashMap: java.util.Collection values()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.core.model.catalog.category.Category getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>-><java.lang.StringBuilder: void <init>()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction lastTransaction(com.salesmanager.core.model.order.Order,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.TreeMap: java.util.Map$Entry lastEntry()>
<com.salesmanager.shop.store.facade.manufacturer.ManufacturerFacadeImpl: java.util.List getByProductInCategory(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.v0.ReadableOrder getReadableOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void lambda$deleteShoppingCartItem$1(com.salesmanager.core.model.shoppingcart.ShoppingCartAttributeItem)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartAttributeItem: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.salesmanager.shop.model.order.history.OrderStatusHistory: void setOrderId(long)>
<com.salesmanager.core.business.services.order.OrderServiceImpl: java.io.ByteArrayOutputStream generateInvoice(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.order.Order,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.order.Order: java.util.Set getOrderTotal()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCartMulti(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.google.common.collect.ImmutableCollection: boolean remove(java.lang.Object)>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Vector: int size()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.Vector: int size()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart removeShoppingCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.salesmanager.core.business.services.order.OrderServiceImpl: com.salesmanager.core.model.order.OrderTotalSummary caculateOrder(com.salesmanager.core.model.order.OrderSummary,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.price.FinalPrice: com.salesmanager.core.model.catalog.product.price.ProductPrice getProductPrice()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getPopulatedShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getRefundableTransaction(com.salesmanager.core.model.order.Order)>-><com.salesmanager.core.model.payments.Transaction: java.lang.String getDetails()>
<com.salesmanager.core.business.services.content.ContentServiceImpl: void addFile(java.lang.String,com.salesmanager.core.model.content.InputContentFile)>-><org.apache.xerces.impl.XMLEntityManager$RewindableInputStream: void close()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.LinkedList: int size()>
<com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionServiceImpl: void delete(com.salesmanager.core.model.catalog.product.attribute.ProductOption)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><org.infinispan.cache.impl.StatsCollectingCache: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: com.salesmanager.shop.model.content.ContentDescriptionEntity create(com.salesmanager.core.model.content.ContentDescription)>-><com.salesmanager.core.model.common.description.Description: java.lang.Long getId()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><java.util.LinkedList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getPopulatedShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.catalog.category.Category: com.salesmanager.core.model.common.audit.AuditSection getAuditSection()>
<com.salesmanager.core.business.services.system.MerchantConfigurationServiceImpl: void saveMerchantConfig(com.salesmanager.core.model.system.MerchantConfig,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.Integer getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: void setAttributes(java.util.Set)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart removeShoppingCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void requestPasswordReset(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.user.User: void setCredentialsResetRequest(com.salesmanager.core.model.common.CredentialsReset)>
<com.salesmanager.shop.application.config.MultipleEntryPointsSecurityConfig$CustomerConfigurationAdapter: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.security.SocialCustomerServicesImpl getSocialCustomerServicesImpl()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.infinispan.cache.impl.SimpleCacheImpl: java.util.Collection values()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.List createShippingProduct(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.catalog.product.Product: boolean isProductVirtual()>
<com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionServiceImpl: void delete(com.salesmanager.core.model.catalog.product.attribute.ProductOption)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.order.OrderServiceImpl: void saveOrUpdate(com.salesmanager.core.model.order.Order)>-><com.salesmanager.core.model.order.Order: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.OrderTotalSummary calculateOrderTotal(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.customer.Customer,com.salesmanager.shop.model.order.v0.PersistableOrder,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.util.Date getPromoAdded()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: int size()>
<com.salesmanager.shop.store.controller.shipping.facade.ShippingFacadeImpl: com.salesmanager.shop.model.references.ReadableAddress getShippingOrigin(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.shipping.ShippingOrigin: java.lang.String getPostalCode()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeCartItem(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.user.ReadableUserList listByCriteria(com.salesmanager.core.model.user.UserCriteria,int,int,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.Boolean isRetailer()>
<com.salesmanager.shop.store.facade.customer.CustomerFacadeImpl: void <init>()>-><com.salesmanager.shop.utils.LabelUtils: void <init>()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: com.salesmanager.shop.model.content.ReadableContentFull convertContentToReadableContentFull(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.content.Content)>-><com.salesmanager.core.model.content.Content: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.manufacturer.ManufacturerFacadeImpl: java.util.List getByProductInCategory(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream sorted(java.util.Comparator)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCartItem getEntryToUpdate(long,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.util.Set getLineItems()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.List createShippingProduct(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: com.salesmanager.core.model.catalog.product.price.FinalPrice getFinalPrice()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.IdentityHashMap: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.facade.customer.CustomerFacadeImpl: void resetPasswordRequest(com.salesmanager.core.model.customer.Customer,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,java.util.Locale)>-><com.salesmanager.core.model.common.Billing: java.lang.String getFirstName()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: int size()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: java.util.List getReadableOrderHistory(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart removeShoppingCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getCapturableTransaction(com.salesmanager.core.model.order.Order)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><org.apache.commons.collections.FastHashMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.core.business.services.shipping.ShippingServiceImpl: com.salesmanager.core.model.shipping.ShippingConfiguration getShippingConfiguration(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.system.MerchantConfiguration: java.lang.String getValue()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean authorizedStore(java.lang.String,java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.address.Address,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.common.Billing: void setCountry(com.salesmanager.core.model.reference.country.Country)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><java.util.ArrayList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getPopulatedShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.util.Set getLineItems()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><freemarker.ext.beans.SequenceAdapter: int size()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.lang.Long getProductId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: void <init>()>-><com.salesmanager.shop.utils.LabelUtils: void <init>()>
<com.salesmanager.shop.store.facade.catalog.CatalogFacadeImpl: com.salesmanager.shop.model.catalog.catalog.ReadableCatalogCategoryEntry addCatalogEntry(com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: java.util.List getContents(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.ArrayList: int size()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCartItem getEntryToUpdate(long,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.salesmanager.core.business.services.catalog.product.manufacturer.ManufacturerServiceImpl: java.lang.Long getCountManufAttachedProducts(com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer)>-><com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.user.ReadableUser update(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.user.PersistableUser)>-><com.salesmanager.core.model.user.User: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.core.business.services.customer.review.CustomerReviewServiceImpl: void saveOrUpdate(com.salesmanager.core.model.customer.review.CustomerReview)>-><com.salesmanager.core.model.customer.Customer: void setCustomerReviewCount(java.lang.Integer)>
<com.salesmanager.shop.store.controller.search.facade.SearchFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategory lambda$getCategoryFacets$3(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Map,com.salesmanager.core.model.catalog.category.Category)>-><com.salesmanager.shop.store.controller.search.facade.SearchFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategory convertCategoryToReadableCategory(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Map,com.salesmanager.core.model.catalog.category.Category)>
<com.salesmanager.shop.store.controller.shipping.facade.ShippingFacadeImpl: com.salesmanager.shop.model.references.ReadableAddress getShippingOrigin(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.shipping.ShippingOrigin: com.salesmanager.core.model.reference.zone.Zone getZone()>
<com.salesmanager.shop.store.security.admin.JWTAdminAuthenticationManager: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.security.SocialCustomerServicesImpl getSocialCustomerServicesImpl()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.Set getShoppingCartItems(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.util.Set getLineItems()>
<com.salesmanager.core.business.services.catalog.product.ProductServiceImpl: void delete(com.salesmanager.core.model.catalog.product.Product)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart mergeShoppingCarts(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore)>-><java.lang.Long: boolean equals(java.lang.Object)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: void validateOrder(com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,java.util.Map,com.salesmanager.core.model.merchant.MerchantStore,java.util.Locale)>-><org.springframework.validation.BindException: void addError(org.springframework.validation.ObjectError)>
<com.salesmanager.core.business.services.customer.review.CustomerReviewServiceImpl: void saveOrUpdate(com.salesmanager.core.model.customer.review.CustomerReview)>-><com.salesmanager.core.model.customer.Customer: void setCustomerReviewAvg(java.math.BigDecimal)>
<com.salesmanager.shop.store.security.customer.JWTCustomerAuthenticationManager: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.security.SocialCustomerServicesImpl getSocialCustomerServicesImpl()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.List createShippingProduct(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.salesmanager.shop.store.controller.shipping.facade.ShippingFacadeImpl: com.salesmanager.shop.model.references.ReadableAddress getShippingOrigin(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.shipping.ShippingOrigin: com.salesmanager.core.model.reference.country.Country getCountry()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><java.util.LinkedList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.catalog.CatalogFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList listCatalogEntry(java.util.Optional,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int)>-><java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>
<com.salesmanager.shop.store.controller.store.facade.StoreFacadeImpl: com.salesmanager.shop.model.store.ReadableMerchantStore convertMerchantStoreToReadableMerchantStoreWithFullDetails(com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore)>-><org.springframework.mail.MailSendException: java.lang.String getMessage()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory lambda$getReadableOrderHistory$0(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.content.ContentServiceImpl: com.salesmanager.core.model.content.Content getById(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.content.Content: com.salesmanager.core.model.merchant.MerchantStore getMerchantStore()>
<com.salesmanager.shop.store.facade.catalog.CatalogFacadeImpl: com.salesmanager.shop.model.catalog.catalog.ReadableCatalogCategoryEntry addCatalogEntry(com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.shop.mapper.catalog.PersistableCatalogCategoryEntryMapper: java.lang.Object convert(java.lang.Object,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void setCustomerModelDefaultProperties(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.Set getShoppingCartItems(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.LinkedList: int size()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.product.ProductOptionFacadeImpl: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity saveAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.Product: java.lang.Long getId()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart removeShoppingCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: int size()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getPopulatedShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.google.common.collect.DescendingImmutableSortedSet: int size()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.address.Address,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.common.Delivery: void setZone(com.salesmanager.core.model.reference.zone.Zone)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.List createShippingProduct(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: void setSubTotal(java.math.BigDecimal)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.user.ReadableUser update(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.user.PersistableUser)>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getById(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: boolean isObsolete()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.reference.zone.Zone: java.lang.String getCode()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: java.util.List findPermissionsByGroups(java.util.List)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.util.Set getAttributes()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction lastTransaction(com.salesmanager.core.model.order.Order,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.core.business.services.catalog.product.image.ProductImageServiceImpl: void addProductImage(com.salesmanager.core.model.catalog.product.Product,com.salesmanager.core.model.catalog.product.image.ProductImage,com.salesmanager.core.model.content.ImageContentFile)>-><org.apache.xerces.impl.XMLEntityManager$RewindableInputStream: void close()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.reference.language.Language: java.lang.String getCode()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><java.util.SubList: int size()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.catalog.product.Product: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream sorted(java.util.Comparator)>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: com.salesmanager.shop.model.content.ContentDescriptionEntity create(com.salesmanager.core.model.content.ContentDescription)>-><com.salesmanager.core.model.common.description.Description: java.lang.String getDescription()>
<com.salesmanager.core.business.services.order.OrderServiceImpl: java.io.ByteArrayOutputStream generateInvoice(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.order.Order,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.order.Order: java.util.Set getOrderProducts()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.infinispan.stream.impl.local.LocalCacheStream: java.util.stream.Stream filter(java.util.function.Predicate)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: void setFinalPrice(com.salesmanager.core.model.catalog.product.price.FinalPrice)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCartMulti(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$UnmodifiableCollection: int size()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.Order processOrder(com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Locale)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setOrderId(java.lang.Long)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: java.util.List categoryProductVariants(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.lang.Long: int intValue()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: com.salesmanager.shop.model.customer.PersistableCustomer update(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.customer.Customer: java.lang.Long getId()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getCapturableTransaction(com.salesmanager.core.model.order.Order)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><java.lang.Long: long longValue()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void setCustomerModelDefaultProperties(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.Vector: boolean add(java.lang.Object)>
<com.salesmanager.core.business.services.catalog.product.ProductServiceImpl: void saveOrUpdate(com.salesmanager.core.model.catalog.product.Product)>-><org.springframework.mail.MailSendException: java.lang.String getMessage()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void setCustomerModelDefaultProperties(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void authorizedGroups(java.lang.String,com.salesmanager.shop.model.user.PersistableUser)>-><java.util.Vector: java.util.Iterator iterator()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void resetPassword(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.String getStorename()>
<com.salesmanager.core.business.services.customer.attribute.CustomerOptionServiceImpl: void delete(com.salesmanager.core.model.customer.attribute.CustomerOption)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.customer.CustomerFacadeImpl: com.salesmanager.core.model.customer.Customer verifyCustomerLink(java.lang.String,java.lang.String)>-><com.salesmanager.core.model.common.CredentialsReset: java.util.Date getCredentialsRequestExpiry()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.security.ReadablePermission lambda$findPermissionsByGroups$0(com.salesmanager.core.model.user.Permission)>-><com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.security.ReadablePermission convertPermissionToReadablePermission(com.salesmanager.core.model.user.Permission)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<com.salesmanager.shop.store.controller.store.facade.StoreFacadeImpl: java.util.List getMerchantStoreNames(com.salesmanager.core.model.merchant.MerchantStoreCriteria)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: int size()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.Hashtable: java.util.Collection values()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><org.infinispan.stream.impl.local.LocalCacheStream: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.google.common.collect.DescendingImmutableSortedSet: int size()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCartItem getEntryToUpdate(long,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.salesmanager.core.business.services.shipping.ShippingServiceImpl: void saveShippingQuoteModuleConfiguration(com.salesmanager.core.model.system.IntegrationConfiguration,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.system.MerchantConfiguration: java.lang.String getValue()>
<com.salesmanager.shop.store.facade.catalog.CatalogFacadeImpl: com.salesmanager.core.model.catalog.catalog.Catalog getCatalog(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>-><org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>
<com.salesmanager.shop.store.controller.search.facade.SearchFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategory convertCategoryToReadableCategory(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Map,com.salesmanager.core.model.catalog.category.Category)>-><com.salesmanager.shop.model.catalog.category.ReadableCategory: void setProductCount(int)>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$UnmodifiableCollection: int size()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart mergeShoppingCarts(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore)>-><com.google.common.collect.ImmutableCollection: boolean add(java.lang.Object)>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.LinkedList: int size()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><java.util.SubList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.content.ContentServiceImpl: void addContentFiles(java.lang.String,java.util.List)>-><org.apache.xerces.impl.XMLEntityManager$RewindableInputStream: void close()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.List createShippingProduct(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.lang.Integer: int intValue()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.catalog.category.Category: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.core.model.catalog.category.Category getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: com.salesmanager.shop.model.content.ContentDescriptionEntity create(com.salesmanager.core.model.content.ContentDescription)>-><com.salesmanager.core.model.content.ContentDescription: java.lang.String getSeUrl()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><net.bytebuddy.matcher.FilterableList$Empty: int size()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCartMulti(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: void setQuantity(java.lang.Integer)>
<com.salesmanager.core.business.services.customer.CustomerServiceImpl: void delete(com.salesmanager.core.model.customer.Customer)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.user.ReadableUser update(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.user.PersistableUser)>-><com.salesmanager.core.model.user.User: java.util.List getGroups()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><freemarker.ext.beans.HashAdapter: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: com.salesmanager.shop.model.content.ContentDescriptionEntity create(com.salesmanager.core.model.content.ContentDescription)>-><com.salesmanager.core.model.common.description.Description: com.salesmanager.core.model.reference.language.Language getLanguage()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.payments.TransactionType nextTransaction(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.payments.Transaction: com.salesmanager.core.model.payments.TransactionType getTransactionType()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCartMulti(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.lang.Long getId()>
<com.salesmanager.core.business.services.tax.TaxServiceImpl: java.util.List calculateTax(com.salesmanager.core.model.order.OrderSummary,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.tax.taxrate.TaxRate: java.lang.String getCode()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.Collections$EmptyMap: boolean containsKey(java.lang.Object)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.product.ProductOptionSetFacadeImpl: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void resetPassword(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.customer.Customer: java.lang.String getEmailAddress()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxRates(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$EmptyList: int size()>
<com.salesmanager.shop.store.facade.product.ProductOptionFacadeImpl: void addOptionValueImage(org.springframework.web.multipart.MultipartFile,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue: void setProductOptionValueImage(java.lang.String)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: void updateOrderCustomre(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.order.Order: void setCustomerEmailAddress(java.lang.String)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.core.business.services.order.OrderServiceImpl: java.util.List getCapturableOrders(com.salesmanager.core.model.merchant.MerchantStore,java.util.Date,java.util.Date)>-><com.salesmanager.core.model.payments.Transaction: com.salesmanager.core.model.payments.TransactionType getTransactionType()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><com.salesmanager.shop.model.catalog.category.ReadableCategory: java.util.List getChildren()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: int size()>
<com.salesmanager.core.business.services.reference.country.CountryServiceImpl: java.util.Map getCountriesMap(com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.reference.country.Country: java.lang.String getIsoCode()>
<com.salesmanager.core.business.services.catalog.category.CategoryServiceImpl: void addChild(com.salesmanager.core.model.catalog.category.Category,com.salesmanager.core.model.catalog.category.Category)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.v0.ReadableOrder getReadableOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart removeShoppingCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.Set getShoppingCartItems(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.salesmanager.core.business.services.customer.CustomerServiceImpl: java.util.List getListByStore(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.Integer getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.payments.TransactionType nextTransaction(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void setCustomerModelDefaultProperties(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.AbstractList: boolean add(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.Collections$SingletonList: int size()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.Arrays$ArrayList: int size()>
<com.salesmanager.shop.store.facade.catalog.CatalogFacadeImpl: com.salesmanager.core.model.catalog.catalog.Catalog getCatalog(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.Optional: java.lang.Object get()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.EnumMap: java.util.Collection values()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><org.infinispan.util.AbstractDelegatingCacheStream: java.lang.Object collect(java.util.stream.Collector)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.salesmanager.shop.store.controller.error.AdminErrorController: void <init>()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void updateEnabled(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.user.PersistableUser)>-><com.salesmanager.core.model.user.User: void setActive(boolean)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.shipping.ShippingQuote getShippingQuote(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.infinispan.util.AbstractDelegatingCacheStream: java.util.stream.Stream sorted(java.util.Comparator)>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: java.util.List listTransactions(com.salesmanager.core.model.order.Order)>-><com.salesmanager.core.model.order.Order: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.jar.Attributes: java.util.Collection values()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: void updateOrderCustomre(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.order.Order: void setBilling(com.salesmanager.core.model.common.Billing)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.infinispan.stream.impl.local.LocalCacheStream: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.product.ProductVariationFacadeImpl: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.variation.ProductVariation: void setId(java.lang.Long)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><org.apache.http.impl.client.RedirectLocations: int size()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: java.util.List getAllCustomerReviewsByReviewed(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.controller.search.facade.SearchFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategory convertCategoryToReadableCategory(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Map,com.salesmanager.core.model.catalog.category.Category)>-><com.salesmanager.shop.model.catalog.category.ReadableCategory: void <init>()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCart(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setPromoAdded(java.util.Date)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory: void <init>()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.catalog.category.Category: com.salesmanager.core.model.merchant.MerchantStore getMerchantStore()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.IdentityHashMap: java.util.Collection values()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void setCustomerModelDefaultProperties(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.user.Group: java.lang.String getGroupName()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void authenticate(com.salesmanager.core.model.customer.Customer,java.lang.String,java.lang.String)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData updateCartItems(java.util.Optional,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setPromoCode(java.lang.String)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCart(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.Long getId()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.controller.store.facade.StoreFacadeImpl: java.util.List getMerchantConfigEntities(com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: java.util.List getReadableOrderHistory(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.v0.ReadableOrder getReadableOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.order.Order: java.lang.Long getCustomerId()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.address.Address,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.common.Billing: void setZone(com.salesmanager.core.model.reference.zone.Zone)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean authorizedStore(java.lang.String,java.lang.String)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.controller.search.facade.SearchFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategory convertCategoryToReadableCategory(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Map,com.salesmanager.core.model.catalog.category.Category)>-><com.salesmanager.shop.store.api.exception.ConversionRuntimeException: void <init>(java.lang.Throwable)>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><freemarker.ext.beans.SequenceAdapter: int size()>
<com.salesmanager.core.business.services.catalog.product.ProductServiceImpl: void delete(com.salesmanager.core.model.catalog.product.Product)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.salesmanager.core.business.services.order.OrderServiceImpl: void addOrderStatusHistory(com.salesmanager.core.model.order.Order,com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.google.common.collect.ImmutableCollection: boolean add(java.lang.Object)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.user.ReadableUser findByUserName(java.lang.String)>-><com.salesmanager.core.model.user.User: com.salesmanager.core.model.reference.language.Language getDefaultLanguage()>
<com.salesmanager.core.business.services.catalog.category.CategoryServiceImpl: void delete(com.salesmanager.core.model.catalog.category.Category)>-><java.util.AbstractList: boolean add(java.lang.Object)>
<com.salesmanager.shop.mapper.catalog.PersistableCatalogCategoryEntryMapper: com.salesmanager.core.model.catalog.catalog.CatalogCategoryEntry merge(com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.catalog.catalog.CatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.shop.store.facade.catalog.CatalogFacadeImpl: com.salesmanager.core.model.catalog.catalog.Catalog getCatalog(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore)>
<com.salesmanager.shop.store.facade.customer.CustomerFacadeImpl: void resetPassword(java.lang.String,java.lang.String,java.lang.String)>-><com.salesmanager.core.model.customer.Customer: void setPassword(java.lang.String)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCartItem getEntryToUpdate(long,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.controller.country.facade.CountryFacadeImpl: java.util.List getListCountryZones(com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.v0.ReadableOrder getReadableOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.salesmanager.core.business.services.customer.attribute.CustomerOptionValueServiceImpl: void delete(com.salesmanager.core.model.customer.attribute.CustomerOptionValue)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: java.util.List createContentDescriptionEntitys(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.content.Content,com.salesmanager.core.model.reference.language.Language)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getPopulatedShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.Collections$SingletonMap: java.util.Collection values()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void delete(java.lang.Long,java.lang.String)>-><com.salesmanager.core.model.user.User: java.util.List getGroups()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.Set getShoppingCartItems(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.catalog.product.Product: java.lang.Long getId()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore)>-><java.lang.Long: long longValue()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategory getById(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.AbstractMap: java.util.Collection values()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void deleteShoppingCartItem(java.lang.Long)>-><java.util.HashSet: void clear()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: void setItemPrice(java.math.BigDecimal)>
<com.salesmanager.core.business.services.customer.CustomerServiceImpl: void delete(com.salesmanager.core.model.customer.Customer)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.product.ProductOptionFacadeImpl: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList getAttributesList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCartItem getEntryToUpdate(long,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.Collections$EmptyList: int size()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.user.ReadableUser update(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.user.PersistableUser)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: int size()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void authenticate(com.salesmanager.core.model.customer.Customer,java.lang.String,java.lang.String)>-><com.salesmanager.core.model.user.Group: java.lang.Integer getId()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCartMulti(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.Optional: java.lang.Object get()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: java.util.List findPermissionsByGroups(java.util.List)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.facade.customer.CustomerFacadeImpl: void resetPasswordRequest(com.salesmanager.core.model.customer.Customer,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,java.util.Locale)>-><com.salesmanager.core.model.customer.Customer: java.lang.String getEmailAddress()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.core.model.shoppingcart.ShoppingCartItem getEntryToUpdate(long,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.lang.Long: long longValue()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void deleteShoppingCartItem(java.lang.Long)>-><com.google.common.collect.ImmutableCollection: void clear()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: com.salesmanager.shop.model.customer.PersistableCustomerReview updateCustomerReview(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.lang.Long: boolean equals(java.lang.Object)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: int size()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><io.jsonwebtoken.impl.JwtMap: java.util.Collection values()>
<com.salesmanager.core.business.services.payments.TransactionServiceImpl: com.salesmanager.core.model.payments.Transaction getCapturableTransaction(com.salesmanager.core.model.order.Order)>-><com.salesmanager.core.model.payments.Transaction: com.salesmanager.core.model.payments.TransactionType getTransactionType()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.reference.zone.Zone: void setName(java.lang.String)>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void authenticate(com.salesmanager.core.model.customer.Customer,java.lang.String,java.lang.String)>-><java.util.Vector: java.util.Iterator iterator()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: void getPopulatedItem(com.salesmanager.core.model.shoppingcart.ShoppingCartItem)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: void setProductVirtual(boolean)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCart(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.util.Set getLineItems()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void setCustomerModelDefaultProperties(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.Collections$1: boolean hasNext()>
<com.salesmanager.shop.store.facade.manufacturer.ManufacturerFacadeImpl: void saveOrUpdateManufacturer(com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer: com.salesmanager.core.model.merchant.MerchantStore getMerchantStore()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: java.util.List getAllCustomerReviewsByReviewed(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.OrderTotalSummary calculateOrderTotal(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.customer.Customer,com.salesmanager.shop.model.order.v0.PersistableOrder,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.lang.String getPromoCode()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><org.apache.http.impl.client.RedirectLocations: java.lang.Object get(int)>
<com.salesmanager.shop.store.controller.shipping.facade.ShippingFacadeImpl: com.salesmanager.shop.model.references.ReadableAddress getShippingOrigin(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.reference.country.Country: java.lang.String getIsoCode()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><java.util.LinkedList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.catalog.product.attribute.ProductAttributeServiceImpl: java.util.List getByOptionValueId(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.Integer getId()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.salesmanager.shop.model.entity.Entity: void setId(java.lang.Long)>
<com.salesmanager.core.business.services.catalog.product.image.ProductImageServiceImpl: void removeProductImage(com.salesmanager.core.model.catalog.product.image.ProductImage)>-><com.salesmanager.core.model.catalog.product.image.ProductImage: java.lang.String getProductImage()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeCartItem(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.salesmanager.core.business.services.catalog.product.file.DigitalProductServiceImpl: void addProductFile(com.salesmanager.core.model.catalog.product.Product,com.salesmanager.core.model.catalog.product.file.DigitalProduct,com.salesmanager.core.model.content.InputContentFile)>-><org.apache.xerces.impl.XMLEntityManager$RewindableInputStream: void close()>
<com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionServiceImpl: void delete(com.salesmanager.core.model.catalog.product.attribute.ProductOption)>-><com.salesmanager.core.model.catalog.product.attribute.ProductOption: java.lang.Long getId()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getShoppingCart(com.salesmanager.core.model.customer.Customer)>-><freemarker.ext.beans.SequenceAdapter: java.lang.Object get(int)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory mapToReadbleOrderStatusHistory(com.salesmanager.core.model.order.orderstatus.OrderStatusHistory)>-><com.salesmanager.shop.model.order.history.ReadableOrderStatusHistory: void setDate(java.lang.String)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><org.apache.http.impl.client.RedirectLocations: java.lang.Object get(int)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: int size()>
<com.salesmanager.core.business.services.tax.TaxServiceImpl: java.util.List calculateTax(com.salesmanager.core.model.order.OrderSummary,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.common.description.Description: java.lang.String getName()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData updateCartItems(java.util.Optional,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: void setQuantity(java.lang.Integer)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><org.infinispan.cache.impl.SimpleCacheImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><org.infinispan.util.AbstractDelegatingCacheStream: void forEach(java.util.function.Consumer)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.user.ReadableUser update(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.user.PersistableUser)>-><java.util.stream.ReferencePipeline: java.util.Optional findAny()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.EnumMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.core.business.services.merchant.MerchantStoreServiceImpl: com.salesmanager.core.model.merchant.MerchantStore getParent(java.lang.String)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.Boolean isRetailer()>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.security.SocialCustomerServicesImpl getSocialCustomerServicesImpl()>
<com.salesmanager.core.business.services.catalog.category.CategoryServiceImpl: java.util.List getListByDepthFilterByFeatured(com.salesmanager.core.model.merchant.MerchantStore,int,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.Integer getId()>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.OrderTotalSummary calculateOrderTotal(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.customer.Customer,com.salesmanager.shop.model.order.v0.PersistableOrder,com.salesmanager.core.model.reference.language.Language)>-><java.util.Date: java.time.Instant toInstant()>
<com.salesmanager.shop.store.controller.country.facade.CountryFacadeImpl: java.util.List getListCountryZones(com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: com.salesmanager.shop.model.user.ReadableUserList listByCriteria(com.salesmanager.core.model.user.UserCriteria,int,int,com.salesmanager.core.model.reference.language.Language)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.controller.order.facade.OrderFacadeImpl: com.salesmanager.core.model.order.Order processOrder(com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Locale)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: java.lang.Integer lambda$listByCriteria$5(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.Integer getId()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: java.util.List categoryProductVariants(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.category.Category: java.lang.String getLineage()>
<com.salesmanager.shop.store.facade.product.ProductTypeFacadeImpl: void update(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.catalog.product.type.ProductType: java.lang.String getCode()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$3(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.jar.Attributes: boolean containsKey(java.lang.Object)>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><org.infinispan.util.AbstractDelegatingCacheStream: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart removeShoppingCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean)>-><com.salesmanager.core.model.catalog.product.Product: java.lang.Long getId()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: void authorizedGroups(java.lang.String,com.salesmanager.shop.model.user.PersistableUser)>-><java.util.Vector$Itr: java.lang.Object next()>
<com.salesmanager.shop.store.controller.customer.facade.CustomerFacadeImpl: void resetPassword(com.salesmanager.core.model.customer.Customer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.String getStoreEmailAddress()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><net.bytebuddy.matcher.FilterableList$Empty: int size()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.Vector: boolean contains(java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeCartItem(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><java.util.LinkedList: int size()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart removeShoppingCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setLineItems(java.util.Set)>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: com.salesmanager.core.model.shoppingcart.ShoppingCart getById(java.lang.Long)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: boolean isObsolete()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.core.model.tax.taxrate.TaxRate taxRateByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.Set getShoppingCartItems(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.util.Set getAttributes()>
<com.salesmanager.shop.store.facade.catalog.CatalogFacadeImpl: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.mapper.catalog.PersistableCatalogCategoryEntryMapper getPersistableCatalogCategoryEntryMapper()>
<com.salesmanager.core.business.services.catalog.product.ProductServiceImpl: void saveOrUpdate(com.salesmanager.core.model.catalog.product.Product)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.List createShippingProduct(com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.salesmanager.core.business.services.catalog.product.attribute.ProductAttributeServiceImpl: void delete(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute)>-><com.salesmanager.core.model.catalog.product.attribute.ProductAttribute: java.lang.Long getId()>
<com.salesmanager.shop.store.controller.store.facade.StoreFacadeImpl: java.util.List getMerchantStoreNames(com.salesmanager.core.model.merchant.MerchantStoreCriteria)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeCartItem(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.lang.Long getId()>
<com.salesmanager.core.business.services.payments.PaymentServiceImpl: java.util.Map getPaymentModulesConfigured(com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.system.MerchantConfiguration: java.lang.String getValue()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart modifyCartMulti(com.salesmanager.core.model.shoppingcart.ShoppingCart,java.util.List,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: java.util.Set getLineItems()>
<com.salesmanager.core.business.services.shipping.ShippingServiceImpl: java.util.List getShipToCountryList(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.system.MerchantConfiguration: java.lang.String getValue()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: boolean lambda$getCategoryHierarchy$2(com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><com.salesmanager.shop.model.catalog.category.CategoryEntity: com.salesmanager.shop.model.catalog.category.Category getParent()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(java.lang.String,com.salesmanager.core.model.reference.language.Language)>-><net.bytebuddy.matcher.FilterableList$Empty: java.lang.Object get(int)>
<com.salesmanager.shop.store.controller.store.facade.StoreFacadeImpl: java.util.List getMerchantStoreNames(com.salesmanager.core.model.merchant.MerchantStoreCriteria)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.Map getZones(com.salesmanager.core.model.reference.language.Language)>-><com.salesmanager.core.model.common.description.Description: java.lang.String getName()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void lambda$getCategoryHierarchy$4(java.util.Map,com.salesmanager.shop.model.catalog.category.ReadableCategory)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<com.salesmanager.core.business.services.reference.zone.ZoneServiceImpl: java.util.List getZones(com.salesmanager.core.model.reference.country.Country,com.salesmanager.core.model.reference.language.Language)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.salesmanager.core.business.services.merchant.MerchantStoreServiceImpl: org.springframework.data.domain.Page listByGroup(java.util.Optional,java.lang.String,int,int)>-><com.salesmanager.core.model.merchant.MerchantStore: java.lang.Integer getId()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: void setOrderId(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>-><com.salesmanager.core.model.shoppingcart.ShoppingCart: void setOrderId(java.lang.Long)>
<com.salesmanager.shop.store.facade.tax.TaxFacadeImpl: com.salesmanager.shop.model.entity.ReadableEntityList taxClasses(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>-><java.util.ArrayList: int size()>
<com.salesmanager.core.business.services.shoppingcart.ShoppingCartServiceImpl: java.util.Set getShoppingCartItems(com.salesmanager.core.model.shoppingcart.ShoppingCart,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.shoppingcart.ShoppingCart)>-><com.salesmanager.core.model.shoppingcart.ShoppingCartItem: java.lang.Long getProductId()>
<com.salesmanager.shop.store.facade.content.ContentFacadeImpl: com.salesmanager.shop.model.content.ReadableContentFull convertContentToReadableContentFull(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.content.Content)>-><com.salesmanager.core.model.content.Content: boolean isVisible()>
<com.salesmanager.shop.store.controller.shoppingCart.facade.ShoppingCartFacadeImpl: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart removeShoppingCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean)>-><com.google.common.collect.ImmutableCollection: void clear()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: com.salesmanager.shop.model.catalog.category.ReadableCategoryList getCategoryHierarchy(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.entity.ListCriteria,int,com.salesmanager.core.model.reference.language.Language,java.util.List,int,int)>-><java.util.ArrayList: int size()>
<com.salesmanager.core.business.services.catalog.product.ProductServiceImpl: void saveOrUpdate(com.salesmanager.core.model.catalog.product.Product)>-><com.google.common.collect.DescendingImmutableSortedSet: java.util.Iterator iterator()>
<com.salesmanager.shop.store.facade.user.UserFacadeImpl: boolean userInRoles(java.lang.String,java.util.List)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.salesmanager.shop.store.facade.category.CategoryFacadeImpl: void addChildToParent(com.salesmanager.shop.model.catalog.category.ReadableCategory,java.util.List)>-><java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
