<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String sendEmail(com.salesmanager.shop.model.shop.ContactForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore store(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String unauthorized(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction refundPayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser update(com.salesmanager.shop.model.user.PersistableUser,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getByfriendlyUrl(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity removeUser(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity setCredentials(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.http.ResponseEntity delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String displayShippingOrigin(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v0.product.ShopProductRESTController getShopProductRESTController()>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String saveSystemConfigurations(com.salesmanager.core.model.system.MerchantConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List permissions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.security.SecurityApi: java.util.List permissions()>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.shop.model.customer.address.AddressLocation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductQuantity(java.lang.String,java.lang.String,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String listContentBoxes(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getCreditCardDates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImagesUrl(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxRatesController: org.springframework.http.ResponseEntity pageTaxRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayLogon(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String updateTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void create(com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus rename(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String addKeyword(com.salesmanager.shop.admin.model.catalog.Keyword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.ProductKeywordsController: java.lang.String addKeyword(com.salesmanager.shop.admin.model.catalog.Keyword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImagesUrl(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteContent(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: void deleteContent(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayStores(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShipping(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.util.List list(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String listContentPages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCategoryCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController getProductItemsRESTController()>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage pageByName(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: void deleteProduct(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController getShoppingCartController()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String listContentPages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.controller.ReferenceController getReferenceController()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShipping(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayStores(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController: java.lang.String displayStores(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeEdit(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getLanguages(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.references.ReferencesApi: java.util.List getLanguages()>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi getCustomerNewsletterApi()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String updateCustomerAddress(com.salesmanager.shop.model.customer.address.Address,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity createAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.FeaturedItemsController: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String jsonLogon(com.salesmanager.shop.model.customer.SecuredCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(int,int,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String saveMerchantStore(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendDownloadEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String editCustomShipping(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity checkAttributeType(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct addProductToCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List supportedLanguages(com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayFileBrowser(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi: void update(java.lang.Long,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview create(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption createProductOption(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String displaySysyemConfgurations(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String displayCreateProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.StaticContentController: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayContentImagesCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String jsonLogon(com.salesmanager.shop.model.customer.SecuredCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity listTransactions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.content.ContentPagesController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createV2(com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductApi: com.salesmanager.shop.model.entity.Entity createV2(com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction authorizePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory update(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShipping(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String displayProductReview(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String sendEmail(com.salesmanager.shop.model.shop.ContactForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String getDigitalProduct(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void create(com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity checkStoreCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController: org.springframework.http.ResponseEntity checkStoreCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProductWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void updateV2(java.lang.Long,com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity checkRegionCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity delete(org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void uploadMultipleFiles(org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String saveShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder images(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCountries(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String countryName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductPrice(java.lang.String,com.salesmanager.shop.model.catalog.product.ProductPriceEntity,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer createCustomer(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveEmailSettings(com.salesmanager.core.business.modules.email.EmailConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity removeMerchantStore(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableBrand getStoreMarketing(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox manageBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayLogon(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createPage(com.salesmanager.shop.model.content.page.PersistableContentPage,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List shippingModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList boxes(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: void saveExpedition(com.salesmanager.shop.model.shipping.ExpeditionConfiguration,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi: void saveExpedition(com.salesmanager.shop.model.shipping.ExpeditionConfiguration,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void uploadMultipleFiles(org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String editTaxRate(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String savePaymentMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptinCustomer(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage page(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.controller.FilesController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct create(com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStoreCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String displaySysyemConfgurations(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeShoppingCartItem(java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String download(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: void deleteProduct(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String displayCheckout(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageKeywords(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction refundPayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: java.util.List paymentModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List pagesSummary(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String basicLogon(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerLoginController: java.lang.String basicLogon(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String createPage(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String submitProductReview(com.salesmanager.shop.model.catalog.product.PersistableProductReview,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOptionValue(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser getAuthUser(com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxRate(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String saveAttribute(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getProduct(java.lang.String,java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct createProduct(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProduct,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductFromCategory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String saveShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String saveShippingPackaging(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity createOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity createOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerBillingAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: java.util.List getCountry(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void updateV2(java.lang.Long,com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(java.lang.Integer,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCurrency(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ValueList autocomplete(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.search.SearchApi: com.salesmanager.shop.model.entity.ValueList autocomplete(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog createCatalog(com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog createCatalog(com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void deleteGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String listOrders(org.springframework.ui.Model,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser getAuthUser(com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore storeFull(java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryHierarchy(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.shipping.ShippingOriginController getShippingOriginController()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: void updateOrderCustomer(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.util.List getCustomers(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void updateGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String deletePaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.payments.PaymentsController: java.lang.String deletePaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPasswordSecurityQtn(com.salesmanager.shop.admin.model.userpassword.UserReset,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerBillingAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxRate get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void create(com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPasswordSecurityQtn(com.salesmanager.shop.admin.model.userpassword.UserReset,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void addOptionValueImage(java.lang.Long,org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxClasses(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity register(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: java.lang.String displayContent(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.content.ShopContentController: java.lang.String displayContent(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(java.lang.Integer,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: java.lang.String displayListingPage(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.items.ListItemsController: java.lang.String displayListingPage(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage pageByName(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.order.OrderTotalApi getOrderTotalApi()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList attributes(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List pagesSummary(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String displayProductReview(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAuthUserAddress(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String listOrders(org.springframework.ui.Model,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshAndGetAuthenticationToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String saveProduct(com.salesmanager.shop.admin.model.catalog.Product,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder getOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listPaymentConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi: java.util.List listPaymentConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void updateGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String save(com.salesmanager.shop.admin.model.permission.GroupDetails,org.springframework.validation.BindingResult,java.util.Locale,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listPaymentConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String saveTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.lang.Long,java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String display(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity register(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImagesUrl(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeCreate(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductAttributeController: java.lang.String displayAttributeCreate(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.variation.ReadableProductVariation get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String displayShippingConfigs(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController: java.lang.String displayShippingConfigs(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeCustomProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ReadableContentFull content(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String saveShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayEmailSettings(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayAddProductToCategories(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategories(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.products.DigitalProductController getDigitalProductController()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendDownloadEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueList optionsValues(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String deletePaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String createPage(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryNoReference(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String getProductPrices(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v0.search.SearchRESTController getSearchRESTController()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void createPackage(com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.tax.TaxConfigurationController getTaxConfigurationController()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveStoreBranding(org.springframework.web.multipart.MultipartFile,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void saveStoreMarketing(java.lang.String,com.salesmanager.shop.model.store.PersistableBrand,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updateBox(com.salesmanager.shop.model.content.box.PersistableContentBox,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser getAuthUser(com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi: com.salesmanager.shop.model.user.ReadableUser getAuthUser(com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageKeywords(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteBox(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: java.lang.String displayAccounts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCategoryCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.entity.NameEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String saveTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: void deleteCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController: void deleteCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity checkUserCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String editCustomShipping(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct update(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeCreate(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxClass get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String displaySysyemConfgurations(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadProduct(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updateBox(com.salesmanager.shop.model.content.box.PersistableContentBox,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: void updateBox(com.salesmanager.shop.model.content.box.PersistableContentBox,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String saveTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity checkRegionCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.http.ResponseEntity delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxRate get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String displayShippingOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(java.lang.Integer,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String getManufacturers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalogCategoryEntry addCatalogEntry(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: java.lang.String displayAccounts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String saveShippingConfiguration(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String saveShippingPackaging(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String listOrders(org.springframework.ui.Model,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController: java.lang.String displayUserEdit(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.system.IntegrationConfiguration shippingModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: java.util.List paymentModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.payment.PaymentApi: java.util.List paymentModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.order.OrderApi: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String zoneName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct update(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus remove(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus remove(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProduct(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getLanguages(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore store(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String displayShippingPackaging(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory create(com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStores(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController: org.springframework.http.ResponseEntity pageStores(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String saveStoreLanding(com.salesmanager.shop.admin.model.merchant.StoreLanding,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String displayCheckout(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage pageByName(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: com.salesmanager.shop.model.content.page.ReadableContentPage pageByName(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity changePassword(com.salesmanager.shop.store.security.PasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.customer.CustomerRegistrationController getCustomerRegistrationController()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createBox(com.salesmanager.shop.model.content.box.PersistableContentBox,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: java.util.List categoryVariantList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createV2(com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.shop.model.references.ReadableAddress shippingOrigin(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi: com.salesmanager.shop.model.references.ReadableAddress shippingOrigin(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getWeightBasedShippingMethod(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageManufacturers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String saveProduct(com.salesmanager.shop.admin.model.catalog.Product,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String updateCustomerAddress(com.salesmanager.shop.model.customer.address.Address,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String saveProductPrice(com.salesmanager.shop.admin.model.catalog.ProductPrice,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.ProductPriceController: java.lang.String saveProductPrice(com.salesmanager.shop.admin.model.catalog.ProductPrice,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity setCredentials(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.product.ProductInstanceApi: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String editTaxRate(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary payment(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List contents(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity updateOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController: org.springframework.http.ResponseEntity updateOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String updateCustomerAddress(com.salesmanager.shop.model.customer.address.Address,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String displayTaxClasses(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOrUpdateModule(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: java.lang.String displayConfirmation(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String duplicateProduct(java.lang.Long,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String editTaxClass(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage page(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String listContentBoxes(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String saveContentImages(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.shop.model.references.ReadableAddress shippingOrigin(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity captureOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer createManufacturer(java.lang.String,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeCreate(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: java.lang.String displayProductReviews(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOrders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String displayShippingConfigs(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String paymentAction(com.salesmanager.shop.model.order.ShopOrder,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity listTransactions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAuthUserAddress(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory update(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValues(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity refundOrder(com.salesmanager.shop.admin.model.orders.Refund,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.payments.PaymentsController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: byte[] downloadFile(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getCategory(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getProvinces(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController: org.springframework.http.ResponseEntity getProvinces(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomer(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String displayTaxClasses(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveStoreBranding(org.springframework.web.multipart.MultipartFile,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview create(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductReviewApi: com.salesmanager.shop.model.catalog.product.PersistableProductReview create(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void saveShippingOrigin(com.salesmanager.shop.model.references.PersistableAddress,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity createOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse store(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List supportedLanguages(com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalogCategoryEntry addCatalogEntry(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String saveTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser update(com.salesmanager.shop.model.user.PersistableUser,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.tax.TaxClassApi getTaxClassApi()>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String saveTaxConfiguration(com.salesmanager.core.model.tax.TaxConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void updatePackage(java.lang.String,com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayEmailSettings(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity checkStoreCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser getAuthUser(com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePermissions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerBillingAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProduct(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(java.lang.Long,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(java.lang.Long,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.customer.CustomerOrdersController getCustomerOrdersController()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void addOptionValueImage(java.lang.Long,org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deletePrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryNoReference(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String getDigitalProduct(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.DigitalProductController: java.lang.String getDigitalProduct(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayStoreLanding(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.product.ProductInventoryApi: void <init>()>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse contact(java.lang.String,com.salesmanager.shop.model.shop.ContactForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: void saveExpedition(com.salesmanager.shop.model.shipping.ExpeditionConfiguration,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String saveFiles(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(java.lang.Integer,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: void deleteCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String saveShippingPackaging(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShippingDetails(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity checkAttributeType(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayFileBrowser(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deletePage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUserList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: byte[] downloadFile(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.category.CategoryApi getCategoryApi()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox manageBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController: java.lang.String displayUserCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeShoppingCartItem(java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: java.lang.String displayRelatedItems(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayStoreLanding(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer create(com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer create(com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getWeightBasedShippingMethod(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.FilesController: byte[] downloadFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi: void <init>()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String editCustomShipping(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogs(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Optional,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptionsSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String autocomplete(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptinCustomer(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController: com.salesmanager.shop.model.catalog.ProductList getProducts(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String displayCreateProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList addProductToGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String removeShoppingCartItem(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String saveMerchantStore(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getZones(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.http.ResponseEntity contact(com.salesmanager.shop.model.shop.ContactForm,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeCustomProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayCustomProductGroup(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: java.util.List getCountry(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deletePrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String saveTaxConfiguration(com.salesmanager.core.model.tax.TaxConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ValueList autocomplete(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory update(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getProduct(java.lang.String,java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String saveFiles(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculatePrice(java.lang.Long[],java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listCapturableOrders(java.time.LocalDate,java.time.LocalDate,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder images(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi: org.springframework.http.ResponseEntity refreshToken(javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String addKeyword(com.salesmanager.shop.admin.model.catalog.Keyword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice price(java.lang.Long,com.salesmanager.shop.model.catalog.product.ProductPriceRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void updatePackage(java.lang.String,com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.orders.OrderActionsControler: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.http.ResponseEntity delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateOrderTotal(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String listOrders(org.springframework.ui.Model,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteBox(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity checkStoreCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStoreCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.lang.Void create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.categories.CategoryController: java.lang.String displayCategoryEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String jsonLogon(com.salesmanager.shop.model.customer.SecuredCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayProductAttributes(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.entity.NameEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String saveUser(com.salesmanager.core.model.user.User,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getProduct(java.lang.String,java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: java.lang.String displayContent(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String unauthorized(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteBox(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String jsonLogon(com.salesmanager.shop.model.customer.SecuredCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculateVariant(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.ReadableSelectedProductVariant,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductVariantApi: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculateVariant(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.ReadableSelectedProductVariant,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProduct(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductVariationApi: com.salesmanager.shop.model.entity.ReadableEntityList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getCreditCardDates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String returnPayPalPayment(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String displaySysyemConfgurations(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity moveCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String removeShoppingCartItem(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory create(com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.shop.model.references.ReadableAddress shippingOrigin(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addPrice(java.lang.String,com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuoteWeightItem,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController: java.lang.String addPrice(java.lang.String,com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuoteWeightItem,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String paymentAction(com.salesmanager.shop.model.order.ShopOrder,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableBrand getStoreMarketing(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct createProduct(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProduct,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String updateCustomerAddress(com.salesmanager.shop.model.customer.address.Address,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(java.lang.Integer,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogEntry(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.lang.Long,java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveCustomWeightBasedShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus upload(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String,java.lang.Long,java.lang.String,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImagesUrl(com.salesmanager.core.model.catalog.product.image.ProductImage,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList attributes(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: java.lang.String displayProductReviews(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.customer.CustomerLoginController getCustomerLoginController()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerAccount(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ReadableContentFull content(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageRelatedItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus remove(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void updateCatalog(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption createProductOption(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProduct(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList pages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateOrderTotal(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity setDefaultImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String registerCustomer(com.salesmanager.shop.model.customer.SecuredShopPersistableCustomer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValues(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void createPackage(com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImages(com.salesmanager.shop.admin.model.content.ProductImages,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: void deleteProduct(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductReview(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity getOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUserList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi: com.salesmanager.shop.model.user.ReadableUserList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,java.lang.String)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.entity.NameEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductImageApi: void deleteImage(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.entity.NameEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryHierarchy(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List permissions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String saveProduct(com.salesmanager.shop.admin.model.catalog.Product,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.UniqueEntity,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableAnonymousOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void deletePackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi getShippingConfigurationApi()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCountryToCustomRegion(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesRegion,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductPrice(java.lang.String,com.salesmanager.shop.model.catalog.product.ProductPriceEntity,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCurrency(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String displayTaxRates(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void password(com.salesmanager.shop.model.user.UserPassword,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus upload(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String,java.lang.Long,java.lang.String,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayAddProductToCategories(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController: java.lang.String displayAddProductToCategories(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductReview(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v0.system.SystemRESTController getSystemRESTController()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCustomRegion(java.lang.String,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog getCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String zoneName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer create(com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: java.lang.String displayFeaturedItems(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List pagesSummary(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImagesUrl(com.salesmanager.core.model.catalog.product.image.ProductImage,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void updateVisible(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImagesUrl(com.salesmanager.core.model.catalog.product.image.ProductImage,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController: java.lang.String saveProductImagesUrl(com.salesmanager.core.model.catalog.product.image.ProductImage,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void removeOptionValueImage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ValueList autocomplete(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity checkAttributeType(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity pageAttributes(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxClass(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String saveProduct(com.salesmanager.shop.admin.model.catalog.Product,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.orders.OrdersController getOrdersController()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getZones(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerBillingAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String getManufacturers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData displayMiniCart(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteRegion(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageKeywords(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity activateProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity checkRegionCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: java.util.List paymentModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateShipping(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.entity.NameEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: java.util.List getCountry(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus remove(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryHierarchy(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.populator.customer.ReadableCustomerList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.content.ContentImageController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity createOptionValue(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String createBox(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List listPackages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCategoryCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: java.lang.String displayProductReviews(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.categories.CategoryController: org.springframework.http.ResponseEntity deleteCategory(javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController: java.lang.String displayProductEdit(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: java.util.List categoryVariantList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.orders.OrderControler getOrderControler()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity createOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.content.ContentApi getContentApi()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogs(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Optional,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi: com.salesmanager.shop.model.customer.ReadableCustomer create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.customer.PersistableCustomer)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(com.salesmanager.shop.model.content.page.PersistableContentPage,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.category.CategoryApi: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity changePassword(com.salesmanager.shop.store.security.PasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayStores(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity captureOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.system.IntegrationConfiguration shippingModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi: org.springframework.http.ResponseEntity resetPassword(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String registerCustomer(com.salesmanager.shop.model.customer.SecuredShopPersistableCustomer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity moveCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus rename(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitPreAuthorizedOrder(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String removeShoppingCartItem(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController: java.lang.String removeShoppingCartItem(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.FilesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity setCredentials(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getProvinces(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List pagesSummary(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String saveManufacturer(com.salesmanager.shop.admin.model.catalog.Manufacturer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.LandingController getLandingController()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String displayShippingOrigin(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductVariationApi: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder images(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void updatePackage(java.lang.String,com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCurrency(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomer(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String saveCustomProductGroup(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer customerInformation(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String jsonLogon(com.salesmanager.shop.model.customer.SecuredCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void upload(org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveEmailSettings(com.salesmanager.core.business.modules.email.EmailConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void deleteGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePrices(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getCategory(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryNoReference(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: java.lang.String displayRelatedItems(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getProduct(java.lang.String,java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void addLogo(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct createProduct(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProduct,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List groups(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String display(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder folder(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayEmailSettings(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String displaySearch(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayLogon(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: java.util.List getCountry(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi: java.util.List getCountry(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void addFolder(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String getPaymentMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createPage(com.salesmanager.shop.model.content.page.PersistableContentPage,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String displayKeywords(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteBox(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(com.salesmanager.shop.model.content.page.PersistableContentPage,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: void updatePage(com.salesmanager.shop.model.content.page.PersistableContentPage,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getCategory(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String saveOptionSet(com.salesmanager.core.model.customer.attribute.CustomerOptionSet,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory create(com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductInventoryApi: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory create(com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice price(java.lang.Long,com.salesmanager.shop.model.catalog.product.ProductPriceRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String registerCustomer(com.salesmanager.shop.model.customer.SecuredShopPersistableCustomer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(java.lang.Integer,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String orderDetails(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String displayTaxClasses(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity createOptionValue(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity createOptionValue(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProduct(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.product.ShopProductController: java.lang.String displayProduct(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByManufacturer(int,int,java.lang.String,java.lang.String,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void uploadImages(java.lang.Long,org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void removeOptionValueImage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List pagesSummary(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String returnPayPalPayment(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayEmailSettings(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String saveManufacturer(com.salesmanager.shop.admin.model.catalog.Manufacturer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayLogon(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct addProductToCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String saveCategory(com.salesmanager.shop.admin.model.catalog.Category,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listCapturableOrders(java.time.LocalDate,java.time.LocalDate,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String displayRegistration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.UniqueEntity,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProductWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String editCustomShipping(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listCapturableOrders(java.time.LocalDate,java.time.LocalDate,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayCustomProductGroup(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String displayTaxClasses(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void addFolder(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer customerInformation(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List groups(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String addProductToCategory(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController: java.lang.String addProductToCategory(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeCustomProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.lang.Void create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.PersistableOrder createOrder(java.lang.String,com.salesmanager.shop.model.order.v0.PersistableOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String saveAttribute(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(com.salesmanager.shop.model.content.page.PersistableContentPage,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String unauthorized(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.shipping.PackageDetails getPackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String saveAttribute(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: void deleteOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String displayOrderEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse indexProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductReviews(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductReviewController: org.springframework.http.ResponseEntity pageProductReviews(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList list(java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.Long,java.util.List,java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String paymentAction(com.salesmanager.shop.model.order.ShopOrder,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateOrderTotal(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,org.springframework.ui.Model,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.system.IntegrationConfiguration shippingModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi: com.salesmanager.core.model.system.IntegrationConfiguration shippingModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadProduct(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImages(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductType get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String editTaxClass(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists pageExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void addOptionValueImage(java.lang.Long,org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: void addOptionValueImage(java.lang.Long,org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ValueList autocomplete(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct addProductToCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryNoReference(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.customers.CustomerController: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct createProduct(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProduct,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists pageExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: com.salesmanager.shop.model.shipping.ExpeditionConfiguration expedition(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String saveProductPrice(com.salesmanager.shop.admin.model.catalog.ProductPrice,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveCustomWeightBasedShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore store(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void removeCatalogEntry(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String saveFile(com.salesmanager.shop.admin.model.digital.ProductFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCountryToCustomRegion(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesRegion,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: byte[] downloadFile(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview create(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList removeProductFromGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.products.FeaturedItemsController: void <init>()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity listTransactions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderActionsControler: org.springframework.http.ResponseEntity listTransactions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImagesUrl(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeShoppingCartItem(java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.shoppingCart.MiniCartController: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeShoppingCartItem(java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getProvinces(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary calculateTotal(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createV2(com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.PersistableOrder createOrder(java.lang.String,com.salesmanager.shop.model.order.v0.PersistableOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void updatePackage(java.lang.String,com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview create(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview createProductReview(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProductReview,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.http.ResponseEntity contact(com.salesmanager.shop.model.shop.ContactForm,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity updateCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String saveCustomProductGroup(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImagesUrl(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayProductAttributes(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculateVariant(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.ReadableSelectedProductVariant,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String editCustomShipping(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController: java.lang.String editCustomShipping(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: java.util.List getCountry(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.order.OrderApi: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShippingDetails(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeKeyword(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomer(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction capturePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateShipping(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String displayRegistration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerRegistrationController: java.lang.String displayRegistration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductPrice(java.lang.String,com.salesmanager.shop.model.catalog.product.ProductPriceEntity,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.shop.model.references.ReadableAddress shippingOrigin(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog getCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog getCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String saveOrder(com.salesmanager.shop.admin.model.orders.Order,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void removeOptionValueImage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.util.List getCategories(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: com.salesmanager.shop.model.references.SizeReferences measures(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(java.lang.Integer,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogEntry(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: com.salesmanager.shop.model.references.SizeReferences measures(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.references.ReferencesApi: com.salesmanager.shop.model.references.SizeReferences measures()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void password(com.salesmanager.shop.model.user.UserPassword,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String displayCheckout(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void create(com.salesmanager.shop.model.customer.optin.PersistableCustomerOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptionsSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: void printInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.payment.PaymentApi getPaymentApi()>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculatePrice(java.lang.Long[],java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String displayShippingPackaging(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getByfriendlyUrl(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ValueList autocomplete(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity removeMerchantStore(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getWeightBasedShippingMethod(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void updateCatalog(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String updateTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getCreditCardDates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String unauthorized(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductType get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder images(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList list(java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.Long,java.util.List,java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAuthUserAddress(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController getCustomShippingMethodsController()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void updateGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryHierarchy(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculatePrice(java.lang.Long[],java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: java.lang.String displayRelatedItems(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderShippingApi: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValues(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitOrder(java.lang.String,com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List supportedLanguages(com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList addProductToGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendDownloadEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(java.lang.Integer,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculateVariant(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.ReadableSelectedProductVariant,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct removeProductFromCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity listTransactions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void updateGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImagesUrl(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void updatePackage(java.lang.String,com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List listPackages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.http.ResponseEntity contact(com.salesmanager.shop.model.shop.ContactForm,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.product.definition.ReadableProductDefinition getV2(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCountryToCustomRegion(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesRegion,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void upload(org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void uploadMultipleFiles(org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String unauthorized(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String removeShoppingCartItem(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductPrice(java.lang.String,com.salesmanager.shop.model.catalog.product.ProductPriceEntity,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse contact(java.lang.String,com.salesmanager.shop.model.shop.ContactForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists pageExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogs(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Optional,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogs(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Optional,java.lang.Integer,java.lang.Integer)>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.system.OptinApi: void <init>()>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void storeSignupVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductType get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteBox(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void deleteCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductReview(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity checkStoreCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String deletePaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData addShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByManufacturer(int,int,java.lang.String,java.lang.String,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshAndGetAuthenticationToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi: org.springframework.http.ResponseEntity refreshAndGetAuthenticationToken(javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List listPermissions(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.shop.model.customer.address.AddressLocation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImages(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void createPackage(com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String countryName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateShipping(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String saveSystemConfigurations(com.salesmanager.core.model.system.MerchantConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCategoryCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void deleteStoreLogo(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImagesUrl(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeKeyword(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String displayShippingOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController getShoppingOrderConfirmationController()>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse store(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: byte[] downloadFile(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductReviews(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deletePrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveEmailSettings(com.salesmanager.core.business.modules.email.EmailConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitOrder(java.lang.String,com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String displayTaxConfiguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadProduct(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: void updateOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeEdit(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void create(com.salesmanager.shop.model.customer.optin.PersistableCustomerOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.variation.ReadableProductVariation get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayStoreLanding(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi: void create(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitOrder(java.lang.String,com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity register(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String updateTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.tax.TaxRatesController: java.lang.String updateTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog createCatalog(com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: java.util.List getCountry(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(java.lang.Integer,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: void saveExpedition(com.salesmanager.shop.model.shipping.ExpeditionConfiguration,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void deleteStoreLogo(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.products.OptionsValueController: void <init>()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String saveCategory(com.salesmanager.shop.admin.model.catalog.Category,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String getManufacturers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.optionset.ReadableProductOptionSet get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String saveFiles(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void removeCatalogEntry(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse store(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String displayOrderEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String saveShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption createProductOption(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String listOrders(org.springframework.ui.Model,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v0.order.OrderRESTController getOrderRESTController()>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse contact(java.lang.String,com.salesmanager.shop.model.shop.ContactForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveEmailSettings(com.salesmanager.core.business.modules.email.EmailConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionValueExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse deleteOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImagesUrl(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateShipping(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayContentImagesCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity checkAttributeType(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void updateVisible(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.shop.model.references.ReadableAddress shippingOrigin(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayStores(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String displayShippingOrigin(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse store(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadProduct(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview create(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProductWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: com.salesmanager.shop.model.marketplace.ReadableMarketPlace marketPlace(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String updateShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem[],javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String deleteShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayAddProductToCategories(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: com.salesmanager.shop.model.system.ReadableOptin create(com.salesmanager.shop.model.system.PersistableOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProductWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList removeProductFromGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsController: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity pageAttributes(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductAttributeController: org.springframework.http.ResponseEntity pageAttributes(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String basicLogon(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer createManufacturer(java.lang.String,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteRegion(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadProduct(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String jsonLogon(com.salesmanager.shop.model.customer.SecuredCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductFromCategory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List listPackages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImagesUrl(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void updateEnabled(java.lang.Long,com.salesmanager.shop.model.user.PersistableUser,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi: void updateEnabled(java.lang.Long,com.salesmanager.shop.model.user.PersistableUser,com.salesmanager.core.model.merchant.MerchantStore)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableAnonymousOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String saveStoreLanding(com.salesmanager.shop.admin.model.merchant.StoreLanding,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void createPackage(com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: java.util.List categoryVariantList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updateBox(com.salesmanager.shop.model.content.box.PersistableContentBox,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void updateEnabled(java.lang.Long,com.salesmanager.shop.model.user.PersistableUser,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.UniqueEntity,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi: org.springframework.http.ResponseEntity exists(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.UniqueEntity)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getZones(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,org.springframework.ui.Model,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.search.SearchController: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,org.springframework.ui.Model,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayFileBrowser(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableBrand getStoreMarketing(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValues(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: java.lang.String displayRelatedItems(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(int,int,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory update(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addPrice(java.lang.String,com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuoteWeightItem,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxRate(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List shippingModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.product.definition.ReadableProductDefinition getV2(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: java.lang.String displayRelatedItems(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.RelatedItemsController: java.lang.String displayRelatedItems(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity removeMerchantStore(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity changePassword(com.salesmanager.shop.store.security.PasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi: org.springframework.http.ResponseEntity changePassword(com.salesmanager.shop.store.security.PasswordRequest,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String saveOptionSet(com.salesmanager.core.model.customer.attribute.CustomerOptionSet,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveCustomWeightBasedShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.entity.NameEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String createPage(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String displayTaxRates(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity pageAttributes(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeShoppingCartItem(java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteManufacturer(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getCategory(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory create(com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void deleteStoreLogo(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity getOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void upload(org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: void upload(org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProduct(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void create(com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOptionValue(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUsers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory create(com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getWeightBasedShippingMethod(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String listOrders(org.springframework.ui.Model,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction capturePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageManufacturers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updateBox(com.salesmanager.shop.model.content.box.PersistableContentBox,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void password(com.salesmanager.shop.model.user.UserPassword,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createV2(com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayStoreLanding(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String unauthorized(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getProduct(java.lang.String,java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController: com.salesmanager.shop.model.catalog.product.ReadableProduct getProduct(java.lang.String,java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String autocomplete(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.shop.model.references.ReadableAddress shippingOrigin(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview create(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList list(java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.Long,java.util.List,java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String displayShippingConfigs(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String getPaymentMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController: java.lang.String displayShoppingCart(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String deleteShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity checkAttributeType(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity checkStoreCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String jsonLogon(com.salesmanager.shop.model.customer.SecuredCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogEntry(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String basicLogon(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: void deleteProduct(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String getProductPrices(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse store(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity updateOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.lang.Void create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImagesUrl(com.salesmanager.core.model.catalog.product.image.ProductImage,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getLanguages(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String saveProduct(com.salesmanager.shop.admin.model.catalog.Product,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.ProductController: java.lang.String saveProduct(com.salesmanager.shop.admin.model.catalog.Product,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String basicLogon(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: com.salesmanager.shop.model.system.IntegrationModuleConfiguration paymentModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteFile(com.salesmanager.shop.model.content.ContentName,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: void updateOrderCustomer(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.system.IntegrationConfiguration shippingModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String addProductToCategory(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String autocomplete(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: java.lang.String displayOrders(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.lang.Long,java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption createProductOption(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxRate get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshAndGetAuthenticationToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList removeProductFromGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData displayMiniCart(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.shoppingCart.MiniCartController: com.salesmanager.shop.model.shoppingcart.ShoppingCartData displayMiniCart(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer create(com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder images(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getProduct(java.lang.String,java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(java.lang.Integer,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: com.salesmanager.shop.model.system.ReadableOptin create(com.salesmanager.shop.model.system.PersistableOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String getProductPrices(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeCreate(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalogCategoryEntry addCatalogEntry(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProductWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCountries(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.merchant.StoreBrandingController: void <init>()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculateVariant(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.ReadableSelectedProductVariant,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listCapturableOrders(java.time.LocalDate,java.time.LocalDate,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeCreate(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String displayStoreLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: java.util.List paymentModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeCreate(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCountryToCustomRegion(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesRegion,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse indexProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus upload(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String,java.lang.Long,java.lang.String,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage pageByName(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: void updateOrderCustomer(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.variation.ReadableProductVariation get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(int,int,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteFile(com.salesmanager.shop.model.content.ContentName,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String saveShippingOptions(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: void updateOrderCustomer(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadProduct(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity delete(org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String editProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void saveShippingOrigin(com.salesmanager.shop.model.references.PersistableAddress,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct removeProductFromCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String displayStoreLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.controller.ReferenceController: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void saveShippingOrigin(com.salesmanager.shop.model.references.PersistableAddress,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listCapturableOrders(java.time.LocalDate,java.time.LocalDate,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi: com.salesmanager.shop.model.order.v0.ReadableOrderList listCapturableOrders(java.time.LocalDate,java.time.LocalDate,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus remove(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImagesUrl(com.salesmanager.core.model.catalog.product.image.ProductImage,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void uploadImages(java.lang.Long,org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveConfigurations(com.salesmanager.shop.admin.model.web.ConfigListWrapper,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxRate get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct removeProductFromCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity setDefaultImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct removeProductFromCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String basicLogon(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void createPackage(com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.lang.String nextTransaction(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeEdit(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductAttributeController: java.lang.String displayAttributeEdit(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayStoreLanding(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.LandingController: java.lang.String displayStoreLanding(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage pageByName(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox getBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.lang.String nextTransaction(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProduct(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String returnPayPalPayment(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String saveShippingOptions(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder images(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String autocomplete(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCustomRegion(java.lang.String,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePrices(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getByfriendlyUrl(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUserList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShippingDetails(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOrders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPasswordSecurityQtn(com.salesmanager.shop.admin.model.userpassword.UserReset,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.shipping.PackageDetails getPackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi: com.salesmanager.core.model.shipping.PackageDetails getPackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void deletePackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.products.OptionsValueController getOptionsValueController()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void deletePackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.customer.CustomerAccountController getCustomerAccountController()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(java.lang.Long,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerBillingAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryHierarchy(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayStoreLanding(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOrders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore storeFull(java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getLanguages(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String saveSystemConfigurations(com.salesmanager.core.model.system.MerchantConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController: java.lang.String saveSystemConfigurations(com.salesmanager.core.model.system.MerchantConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String addKeyword(com.salesmanager.shop.admin.model.catalog.Keyword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: void printInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity getOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.customer.CustomerRegistrationController: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveCustomWeightBasedShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.products.ProductReviewController getProductReviewController()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.LightPersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductApi: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.LightPersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String createManufacturer(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory create(com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteFile(com.salesmanager.shop.model.content.ContentName,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: java.lang.String displayFeaturedItems(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void deleteCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity removeMerchantStore(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxClass(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String displayPaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ReadableContentFull content(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory create(com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void updateV2(java.lang.Long,com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity pageAttributes(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.group.ProductGroup creteGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity setDefaultImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxClasses(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void deleteCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.optionset.ReadableProductOptionSet get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createBox(com.salesmanager.shop.model.content.box.PersistableContentBox,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String saveTaxConfiguration(com.salesmanager.core.model.tax.TaxConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog createCatalog(com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProduct(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue createProductOptionValue(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueList optionsValues(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createBox(com.salesmanager.shop.model.content.box.PersistableContentBox,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser update(com.salesmanager.shop.model.user.PersistableUser,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String updateTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.http.ResponseEntity contact(com.salesmanager.shop.model.shop.ContactForm,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: java.lang.String displayConfirmation(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity updateStatus(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeCreate(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String saveOrder(com.salesmanager.shop.admin.model.orders.Order,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.store.MerchantStoreApi getMerchantStoreApi()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategories(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String displayStoreLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.StoreLandingController: java.lang.String displayStoreLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.optionset.ReadableProductOptionSet get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore store(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.optionset.ReadableProductOptionSet get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String createManufacturer(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.model.customer.CustomerPassword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists boxExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductQuantity(java.lang.String,java.lang.String,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity getOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.variation.ReadableProductVariation get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.lang.Void create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayEmailSettings(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController: java.lang.String saveShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.entity.NameEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayDenied(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList children(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String saveProductPrice(com.salesmanager.shop.admin.model.catalog.ProductPrice,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String saveShippingOptions(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getProvinces(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptinCustomer(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String displayOrderEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: java.util.List paymentModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.search.SearchApi getSearchApi()>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: java.lang.String displayListingPage(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String saveShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addPrice(java.lang.String,com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuoteWeightItem,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteContent(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String saveFiles(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList boxes(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductReview(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String listOrders(org.springframework.ui.Model,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerOrdersController: java.lang.String listOrders(org.springframework.ui.Model,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String editCustomShipping(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listPaymentConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus remove(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.system.PublicConfigsApi getPublicConfigsApi()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String savePaymentMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.http.ResponseEntity contact(com.salesmanager.shop.model.shop.ContactForm,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.system.ContactApi: org.springframework.http.ResponseEntity contact(com.salesmanager.shop.model.shop.ContactForm,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.content.StaticContentController getStaticContentController()>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse store(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getAuthUser(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueList optionsValues(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getProvinces(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeCreate(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct update(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImagesUrl(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitOrder(java.lang.String,com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String saveShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity updateOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayStoreLanding(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String displayCreateProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String saveShippingConfiguration(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCustomRegion(java.lang.String,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String autocomplete(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity getOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String saveCategory(com.salesmanager.shop.admin.model.catalog.Category,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String saveTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String updateShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem[],javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCurrency(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAuthUserAddress(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.categories.CategoryController getCategoryController()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists boxExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.shoppingCart.MiniCartController getMiniCartController()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: void updateAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String saveAttribute(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayCustomProductGroup(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController: java.lang.String displayCustomProductGroup(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addPrice(java.lang.String,com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuoteWeightItem,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: com.salesmanager.shop.model.references.SizeReferences measures(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String getPaymentMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.payments.PaymentsController: java.lang.String getPaymentMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity pageAttributes(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.shipping.PackageDetails getPackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.AdminController: java.lang.String displayDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxClass(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void updateVisible(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.user.PersistableUser,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.content.StaticContentController: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProductWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: void updateOrderCustomer(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus upload(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String,java.lang.Long,java.lang.String,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List contents(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listShippingConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitPreAuthorizedOrder(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: java.lang.String displayConfirmation(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: com.salesmanager.shop.model.references.SizeReferences measures(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String orderDetails(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerOrdersController: java.lang.String orderDetails(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.String)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void addFolder(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStores(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculateVariant(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.ReadableSelectedProductVariant,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteBox(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: void deleteBox(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCountries(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(java.lang.Long,com.salesmanager.shop.model.content.PersistableContentEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: com.salesmanager.shop.model.marketplace.ReadableMarketPlace marketPlace(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String deleteShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity changePassword(com.salesmanager.shop.store.security.PasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayContentImagesCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.util.List getCategories(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.shipping.PackageDetails getPackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void signup(com.salesmanager.shop.model.marketplace.SignupStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueList optionsValues(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitOrder(java.lang.String,com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createV2(com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsValueController: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.optionset.ReadableProductOptionSet get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayCustomProductGroup(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer createCustomer(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxClass get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createPage(com.salesmanager.shop.model.content.page.PersistableContentPage,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOrders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String editAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity listTransactions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.admin.model.secutity.Password,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer createCustomer(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendDownloadEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String saveContentImages(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.store.ContactController getContactController()>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview create(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity setDefaultImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController: org.springframework.http.ResponseEntity setDefaultImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String editTaxClass(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void upload(org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductTypeList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.user.PersistableUser,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductType get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction authorizePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxRate get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData displayMiniCart(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.util.List getCustomers(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity refundOrder(com.salesmanager.shop.admin.model.orders.Refund,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void uploadMultipleFiles(org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String saveOrder(com.salesmanager.shop.admin.model.orders.Order,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String updateTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveStoreBranding(org.springframework.web.multipart.MultipartFile,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void uploadImages(java.lang.Long,org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String returnPayPalPayment(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String displayShippingPackaging(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void password(com.salesmanager.shop.model.user.UserPassword,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String sendEmail(com.salesmanager.shop.model.shop.ContactForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategoryList list(java.util.List,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionList options(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void deleteCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCountryToCustomRegion(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesRegion,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.product.definition.ReadableProductDefinition getV2(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String registerCustomer(com.salesmanager.shop.model.customer.SecuredShopPersistableCustomer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deletePrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController: org.springframework.http.ResponseEntity deletePrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteRegion(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption createProductOption(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String displayCreateProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity changePassword(com.salesmanager.shop.store.security.PasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void saveStoreMarketing(java.lang.String,com.salesmanager.shop.model.store.PersistableBrand,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getLanguages(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptinCustomer(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String displayTaxRates(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUsers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String duplicateProduct(java.lang.Long,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.system.IntegrationConfiguration shippingModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayProductGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse contact(java.lang.String,com.salesmanager.shop.model.shop.ContactForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOrders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrdersController: org.springframework.http.ResponseEntity pageOrders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: java.lang.String displayFeaturedItems(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogs(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Optional,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity captureOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.categories.CategoryController: java.lang.String displayCategoryCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: void deleteCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox manageBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCountryToCustomRegion(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesRegion,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.products.FeaturedItemsController getFeaturedItemsController()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getMonthsOfYear(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String saveAttribute(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitOrder(java.lang.String,com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxClasses(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue createProductOptionValue(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore store(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List groups(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayEmailSettings(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.configurations.ConfigurationController: java.lang.String displayEmailSettings(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayStoreLanding(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCountries(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController: org.springframework.http.ResponseEntity pageCountries(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList list(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionList options(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: void deleteCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deletePage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxClass get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.user.PersistableUser,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse indexProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayProductAttributes(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void storeSignupVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList children(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer create(com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String deleteShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String createPage(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.shop.model.customer.address.AddressLocation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String displayCreateProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.references.ReferencesApi: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createPage(com.salesmanager.shop.model.content.page.PersistableContentPage,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxRate(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.tax.TaxRatesController: org.springframework.http.ResponseEntity removeTaxRate(javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getByfriendlyUrl(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi: com.salesmanager.shop.model.catalog.category.ReadableCategory getByfriendlyUrl(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String editProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProduct(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity updateOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStoreCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder getOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer create(com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String saveOptionSet(com.salesmanager.core.model.customer.attribute.CustomerOptionSet,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage page(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: com.salesmanager.shop.model.content.page.ReadableContentPage page(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCountries(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.util.List getCustomers(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.user.PermissionController: void <init>()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: com.salesmanager.shop.model.marketplace.ReadableMarketPlace marketPlace(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer createCustomer(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List listPermissions(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String saveTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String addKeyword(com.salesmanager.shop.admin.model.catalog.Keyword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview create(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi: com.salesmanager.shop.model.customer.PersistableCustomerReview create(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String editTaxClass(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser update(com.salesmanager.shop.model.user.PersistableUser,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption createCustomerOption(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteContent(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: java.lang.String displayConfirmation(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: java.lang.String displayCustomerDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.optionset.ReadableProductOptionSet get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String editManufacturer(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary payment(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity checkContentCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentPagesController: org.springframework.http.ResponseEntity checkContentCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String listContentPages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct removeProductFromCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(int,int,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController: com.salesmanager.shop.model.catalog.ProductList getProducts(int,int,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String displayShippingOrigin(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingOriginController: java.lang.String displayShippingOrigin(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String saveShippingConfiguration(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController: java.lang.String saveShippingConfiguration(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String saveUser(com.salesmanager.core.model.user.User,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.shop.model.references.ReadableAddress shippingOrigin(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.admin.model.secutity.Password,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getCategory(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController: com.salesmanager.shop.model.catalog.category.ReadableCategory getCategory(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity updateStatus(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void updateVisible(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi: void updateVisible(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String deletePaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.system.IntegrationConfiguration shippingModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculateVariant(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.ReadableSelectedProductVariant,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String saveShippingConfiguration(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.content.ContentBoxesController: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updateBox(com.salesmanager.shop.model.content.box.PersistableContentBox,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerController: org.springframework.http.ResponseEntity pageCustomers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController: java.lang.String displayShoppingCart(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayHomeStub(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void removeOptionValueImage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: java.lang.String displayFeaturedItems(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxRate get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity createOptionValue(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStoreCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String saveOptionSet(com.salesmanager.core.model.customer.attribute.CustomerOptionSet,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController: java.lang.String saveOptionSet(com.salesmanager.core.model.customer.attribute.CustomerOptionSet,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String displayTaxConfiguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageKeywords(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String displayShippingOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController: java.lang.String displayShippingOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder folder(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi: com.salesmanager.shop.model.content.ContentFolder folder(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: java.lang.String displayListingPage(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductReviews(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: java.util.List categoryVariantList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getByfriendlyUrl(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct create(com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateOrderTotal(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer createManufacturer(java.lang.String,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.tax.TaxRatesController: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteContent(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.merchant.MerchantStoreController getMerchantStoreController()>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: java.util.List categoryVariantList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String saveStoreLanding(com.salesmanager.shop.admin.model.merchant.StoreLanding,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductReviews(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: java.util.List categoryVariantList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String displayShippingOrigin(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendDownloadEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String displayShippingOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController: void <init>()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.controller.ImagesController: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String displayPaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductApi: com.salesmanager.shop.model.catalog.product.ReadableProduct get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List contents(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String displayShippingConfigs(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: com.salesmanager.shop.model.system.ReadableOptin create(com.salesmanager.shop.model.system.PersistableOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String download(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listCapturableOrders(java.time.LocalDate,java.time.LocalDate,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValues(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeKeyword(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayProductGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAuthUserAddress(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String displayCheckout(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String displayKeywords(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder folder(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String saveContentImages(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(com.salesmanager.shop.model.content.page.PersistableContentPage,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getCategory(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController getCustomerOptionsValueController()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createPage(com.salesmanager.shop.model.content.page.PersistableContentPage,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxClasses(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: com.salesmanager.shop.model.system.Configs getConfig(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.optionset.ReadableProductOptionSet get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String saveUser(com.salesmanager.core.model.user.User,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String displayOrderEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: com.salesmanager.shop.model.marketplace.ReadableMarketPlace marketPlace(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String registerCustomer(com.salesmanager.shop.model.customer.SecuredShopPersistableCustomer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore storeFull(java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: com.salesmanager.shop.model.store.ReadableMerchantStore storeFull(java.lang.String,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String removeShoppingCartItem(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String saveStoreLanding(com.salesmanager.shop.admin.model.merchant.StoreLanding,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage pageByName(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity register(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi: org.springframework.http.ResponseEntity register(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String listContentBoxes(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview create(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.system.PublicConfigsApi: void <init>()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductPrice(java.lang.String,com.salesmanager.shop.model.catalog.product.ProductPriceEntity,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateOrderTotal(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: java.lang.String displayProducts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void password(com.salesmanager.shop.model.user.UserPassword,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String editCustomShipping(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists boxExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String paymentAction(com.salesmanager.shop.model.order.ShopOrder,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList addProductToGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxClass(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String saveTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder getOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String display(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOrUpdateModule(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getProvinces(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listCapturableOrders(java.time.LocalDate,java.time.LocalDate,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog getCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayEmailSettings(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void saveShippingOrigin(com.salesmanager.shop.model.references.PersistableAddress,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendDownloadEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi: void <init>()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String createBox(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity getOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity getOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createPage(com.salesmanager.shop.model.content.page.PersistableContentPage,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct addProductToCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer createManufacturer(java.lang.String,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayDenied(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.LoginController: java.lang.String displayDenied(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.products.ProductsController: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String orderDetails(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String addProductToCategory(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPasswordSecurityQtn(com.salesmanager.shop.admin.model.userpassword.UserReset,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendDownloadEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity refundOrder(com.salesmanager.shop.admin.model.orders.Refund,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String updateCustomerAddress(com.salesmanager.shop.model.customer.address.Address,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculatePrice(java.lang.Long[],java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: void printInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: void deleteCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory create(com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.admin.model.secutity.Password,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController: java.lang.String changePassword(com.salesmanager.shop.admin.model.secutity.Password,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByManufacturer(int,int,java.lang.String,java.lang.String,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void saveShippingOrigin(com.salesmanager.shop.model.references.PersistableAddress,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String getManufacturers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getLanguages(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List listPermissions(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductReviewApi: com.salesmanager.shop.model.catalog.product.PersistableProductReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void removeCatalogEntry(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogs(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Optional,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogEntry(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory create(com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: com.salesmanager.shop.model.system.IntegrationModuleConfiguration paymentModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder folder(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String getDigitalProduct(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayStoreLanding(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse deleteOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity pageUsers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController: org.springframework.http.ResponseEntity pageUsers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview createProductReview(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProductReview,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void addOptionValueImage(java.lang.Long,org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: byte[] downloadFile(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController: byte[] downloadFile(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String displayRegistration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCurrency(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayStoreLanding(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void upload(org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.FilesController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveStoreBranding(org.springframework.web.multipart.MultipartFile,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteRegion(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: void init(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.controller.ImagesController: void init()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi getAuthenticateCustomerApi()>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAuthUserAddress(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi: void updateAuthUserAddress(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String saveTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String download(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(int,int,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: java.lang.String displayProductReviews(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deletePage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayStores(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String displayTaxClasses(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayAddProductToCategories(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController: org.springframework.http.ResponseEntity deleteImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProduct(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductsController: org.springframework.http.ResponseEntity deleteProduct(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: java.lang.String displayConfirmation(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.controller.ImagesController: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String displayKeywords(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUsers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String saveTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity moveCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void updateEnabled(java.lang.Long,com.salesmanager.shop.model.user.PersistableUser,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox getBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void signup(com.salesmanager.shop.model.marketplace.SignupStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshAndGetAuthenticationToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String displaySysyemConfgurations(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void storeSignupVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi: void storeSignupVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String displayProductReview(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse contact(java.lang.String,com.salesmanager.shop.model.shop.ContactForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: com.salesmanager.shop.model.shipping.ExpeditionConfiguration expedition(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String updateTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList list(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getMonthsOfYear(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayDenied(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String displayShippingOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void removeOptionValueImage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: void removeOptionValueImage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductFromCategory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getZones(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.references.ReferencesApi: java.util.List getZones(java.lang.String,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary payment(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderTotalApi: com.salesmanager.shop.model.order.ReadableOrderTotalSummary payment(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String display(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayContentImagesCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageRelatedItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptionsSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOrUpdateModule(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: java.lang.String displayOrders(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists boxExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeShoppingCartItem(java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPasswordSecurityQtn(com.salesmanager.shop.admin.model.userpassword.UserReset,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayEmailSettings(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerAccount(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.lang.Long,java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.lang.Long,java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(java.lang.Integer,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser getAuthUser(com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void create(com.salesmanager.shop.model.customer.optin.PersistableCustomerOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.products.ProductController getProductController()>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.PersistableOrder createOrder(java.lang.String,com.salesmanager.shop.model.order.v0.PersistableOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.order.OrderRESTController: com.salesmanager.shop.model.order.v0.PersistableOrder createOrder(java.lang.String,com.salesmanager.shop.model.order.v0.PersistableOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: java.util.List categoryVariantList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox manageBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void deleteStoreLogo(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayDenied(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList attributes(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void removeCatalogEntry(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String displayShippingOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String sendEmail(com.salesmanager.shop.model.shop.ContactForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList list(java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.Long,java.util.List,java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductApi: com.salesmanager.shop.model.catalog.product.ReadableProductList list(java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.Long,java.util.List,java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String listOrders(org.springframework.ui.Model,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void saveStoreMarketing(java.lang.String,com.salesmanager.shop.model.store.PersistableBrand,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalogCategoryEntry addCatalogEntry(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(java.lang.Integer,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.GroupsController: java.lang.String displayGroup(java.lang.Integer,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: java.lang.String displayRelatedItems(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice price(java.lang.Long,com.salesmanager.shop.model.catalog.product.ProductPriceRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductVariationApi: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.items.ListItemsController getListItemsController()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String editAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList pages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShipping(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getZones(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String returnPayPalPayment(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductReviews(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getProvinces(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductFromCategory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveConfigurations(com.salesmanager.shop.admin.model.web.ConfigListWrapper,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.configurations.ConfigurationController: java.lang.String saveConfigurations(com.salesmanager.shop.admin.model.web.ConfigListWrapper,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList removeProductFromGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.lang.String nextTransaction(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void deleteGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.http.ResponseEntity contact(com.salesmanager.shop.model.shop.ContactForm,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.UniqueEntity,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String saveContentImages(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: java.util.List getCountry(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveTemplate(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getByfriendlyUrl(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: com.salesmanager.shop.model.references.SizeReferences measures(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(java.lang.Integer,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStores(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImagesUrl(com.salesmanager.core.model.catalog.product.image.ProductImage,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.product.definition.ReadableProductDefinition getV2(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption createCustomerOption(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: java.lang.String displayProducts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptinCustomer(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus remove(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer customerInformation(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String saveTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists boxExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void addLogo(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: void addLogo(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String submitProductReview(com.salesmanager.shop.model.catalog.product.PersistableProductReview,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary payment(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String saveOptionSet(com.salesmanager.core.model.customer.attribute.CustomerOptionSet,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String displayKeywords(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List groups(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void removeCatalogEntry(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String saveShippingPackaging(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxClasses(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue createCustomerOptionValue(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String displayStoreLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void removeOptionValueImage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String displayTaxRates(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder images(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.LightPersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void password(com.salesmanager.shop.model.user.UserPassword,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String saveStoreLanding(com.salesmanager.shop.admin.model.merchant.StoreLanding,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.StoreLandingController: java.lang.String saveStoreLanding(com.salesmanager.shop.admin.model.merchant.StoreLanding,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String listContentBoxes(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductQuantity(java.lang.String,java.lang.String,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductQuantity(java.lang.String,java.lang.String,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog getCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateShipping(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayStores(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryNoReference(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String saveTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void deleteCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String saveTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String displayTaxRates(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: void printInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShippingDetails(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String getProductPrices(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductPriceController: java.lang.String getProductPrices(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity getOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity getOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String displayTaxRates(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxRatesController: java.lang.String displayTaxRates(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List contents(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity pageUsers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String saveAttribute(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.ProductAttributeController: java.lang.String saveAttribute(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateShipping(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String listContentPages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitOrder(java.lang.String,com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String displayTaxConfiguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImagesUrl(com.salesmanager.core.model.catalog.product.image.ProductImage,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String listContentBoxes(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.lang.Long,java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptionsSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayEmailSettings(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listCapturableOrders(java.time.LocalDate,java.time.LocalDate,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategoryList list(java.util.List,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi: com.salesmanager.shop.model.catalog.category.ReadableCategoryList list(java.util.List,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String displayShippingConfigs(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayLogon(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePrices(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity setCredentials(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.model.customer.CustomerPassword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.shop.model.references.ReadableAddress shippingOrigin(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void updateCatalog(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: void updateOrderCustomer(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderApi: void updateOrderCustomer(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog getCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String addProductToCategory(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue createCustomerOptionValue(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getCategory(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValues(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listPaymentConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsValueController: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.http.ResponseEntity delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String listContentBoxes(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShippingDetails(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionValueExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductApi: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String basicLogon(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity getOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ValueList autocomplete(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList list(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void deleteCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(java.lang.Long,com.salesmanager.shop.model.content.PersistableContentEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void uploadImages(java.lang.Long,org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String saveCustomer(com.salesmanager.core.model.customer.Customer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void removeCatalogEntry(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String displayTaxClasses(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePrices(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductPriceController: org.springframework.http.ResponseEntity pagePrices(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageKeywords(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductKeywordsController: org.springframework.http.ResponseEntity pageKeywords(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.LightPersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.user.UserController: void <init>()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser update(com.salesmanager.shop.model.user.PersistableUser,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder getOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String saveFile(com.salesmanager.shop.admin.model.digital.ProductFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateOrderTotal(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController: com.salesmanager.shop.model.order.ReadableShopOrder calculateOrderTotal(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.model.customer.CustomerPassword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList list(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox manageBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList removeProductFromGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String display(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.LightPersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity listTransactions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayContentImagesCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void saveShippingOrigin(com.salesmanager.shop.model.references.PersistableAddress,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String updateTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listShippingConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity checkRegionCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOptionValue(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeCustomProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String displayShippingOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void addFolder(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer createManufacturer(java.lang.String,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String saveShippingConfiguration(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void create(com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addPrice(java.lang.String,com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuoteWeightItem,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.product.ProductInstanceApi getProductInstanceApi()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String saveTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists boxExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.variation.ReadableProductVariation get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductVariationApi: com.salesmanager.shop.model.catalog.product.variation.ReadableProductVariation get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.LightPersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String editTaxRate(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List permissions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String save(com.salesmanager.shop.admin.model.permission.GroupDetails,org.springframework.validation.BindingResult,java.util.Locale,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeKeyword(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String autocomplete(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUsers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteFile(com.salesmanager.shop.model.content.ContentName,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: void deleteFile(com.salesmanager.shop.model.content.ContentName,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.UniqueEntity,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List groups(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deletePrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeShoppingCartItem(java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct update(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String editTaxClass(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String saveFile(com.salesmanager.shop.admin.model.digital.ProductFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String updateTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String saveContentImages(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.content.ContentImageController: java.lang.String saveContentImages(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxClass get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategoryList list(java.util.List,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.util.List getCustomers(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: void deleteProduct(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCurrency(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.references.ReferencesApi: java.util.List getCurrency()>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.user.SecurityController getSecurityController()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUsers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayDenied(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController: void <init>()>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String saveFile(com.salesmanager.shop.admin.model.digital.ProductFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview create(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void deletePackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.lang.Void create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.util.List list(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi: java.util.List list(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String displayPaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: java.lang.String displayContent(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String registerCustomer(com.salesmanager.shop.model.customer.SecuredShopPersistableCustomer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: java.util.List paymentModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity updateCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomer(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction authorizePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayProductAttributes(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getByfriendlyUrl(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String displayStoreBranding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList list(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: com.salesmanager.shop.model.store.ReadableMerchantStoreList list(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String saveShippingConfiguration(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String removeShoppingCartItem(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String saveTaxConfiguration(com.salesmanager.core.model.tax.TaxConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.lang.String nextTransaction(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeKeyword(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductKeywordsController: org.springframework.http.ResponseEntity removeKeyword(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String orderDetails(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void storeSignupVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteRegion(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController: java.lang.String deleteRegion(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,org.springframework.ui.Model,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: java.lang.String displayProductReviews(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: java.util.List paymentModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.lang.Void create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String saveProduct(com.salesmanager.shop.admin.model.catalog.Product,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.categories.CategoryController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductFromCategory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary calculateTotal(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getByfriendlyUrl(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadProduct(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.FilesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.shop.model.customer.address.AddressLocation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.util.List list(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String displayStoreBranding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity updateCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueList optionsValues(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore store(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String listContentBoxes(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String displayStoreBranding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: byte[] downloadFile(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getZones(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String editCustomShipping(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String editCustomShipping(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.system.IntegrationConfiguration shippingModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void storeSignupVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayHomeStub(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity refundOrder(com.salesmanager.shop.admin.model.orders.Refund,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderActionsControler: org.springframework.http.ResponseEntity refundOrder(com.salesmanager.shop.admin.model.orders.Refund,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String saveCustomer(com.salesmanager.core.model.customer.Customer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.shop.model.customer.address.AddressLocation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addPrice(java.lang.String,com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuoteWeightItem,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List listPackages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshAndGetAuthenticationToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController getShoppingCategoryRESTController()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUserList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String listContentPages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus rename(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: void deleteProduct(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct create(com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String saveShippingConfiguration(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String displayShippingPackaging(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController: java.lang.String displayShippingPackaging(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage page(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String saveOrder(com.salesmanager.shop.admin.model.orders.Order,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeKeyword(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String editTaxClass(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction refundPayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void create(com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeKeyword(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.LightPersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct addProductToCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.util.List getCustomers(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductQuantity(java.lang.String,java.lang.String,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayStoreLanding(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.AdminController: java.lang.String displayStoreLanding(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String displayCheckout(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.security.SecurityApi: void <init>()>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayStoreLanding(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductReview(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String saveContentImages(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String duplicateProduct(java.lang.Long,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listCapturableOrders(java.time.LocalDate,java.time.LocalDate,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogs(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Optional,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayDenied(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String saveShippingConfiguration(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String saveProductPrice(com.salesmanager.shop.admin.model.catalog.ProductPrice,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder images(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayEmailSettings(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayAccountsConfguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String editAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteManufacturer(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageManufacturers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String editManufacturer(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.products.RelatedItemsController: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage pageByName(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ReadableContentFull content(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory create(com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.catalog.CatalogApi getCatalogApi()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductFromCategory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String displayTaxRates(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOrders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser getAuthUser(com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String editAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity delete(org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void updateCatalog(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: void deleteCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategories(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory create(com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.products.ProductImagesController getProductImagesController()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.configurations.ConfigurationController getConfigurationController()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity checkUserCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.variation.ReadableProductVariation get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: java.lang.String displayCustomerDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.admin.model.secutity.Password,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getByfriendlyUrl(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProduct(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void addLogo(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.lang.String nextTransaction(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePermissions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxClasses(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String getPaymentMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String updateShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem[],javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity setDefaultImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String displayStoreBranding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.products.OptionsController getOptionsController()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String download(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String download(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi getShoppingCartApi()>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,org.springframework.ui.Model,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.system.ContactApi: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String saveTaxConfiguration(com.salesmanager.core.model.tax.TaxConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String saveOptionSet(com.salesmanager.core.model.customer.attribute.CustomerOptionSet,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createBox(com.salesmanager.shop.model.content.box.PersistableContentBox,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct removeProductFromCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitPreAuthorizedOrder(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableAnonymousOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList addProductToGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.populator.customer.ReadableCustomerList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String duplicateProduct(java.lang.Long,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String saveProduct(com.salesmanager.shop.admin.model.catalog.Product,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String saveTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updateBox(com.salesmanager.shop.model.content.box.PersistableContentBox,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayAddProductToCategories(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List listPackages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String removeShoppingCartItem(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String getDigitalProduct(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePrices(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String sendEmail(com.salesmanager.shop.model.shop.ContactForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayStores(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getByfriendlyUrl(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getMonthsOfYear(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeKeyword(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.products.ManufacturerController: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String editTaxClass(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer createCustomer(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController: com.salesmanager.shop.model.customer.PersistableCustomer createCustomer(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCategoryCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String returnPayPalPayment(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveStoreBranding(org.springframework.web.multipart.MultipartFile,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageManufacturers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveEmailSettings(com.salesmanager.core.business.modules.email.EmailConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addPrice(java.lang.String,com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuoteWeightItem,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder images(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: com.salesmanager.shop.model.content.ContentFolder images(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: java.util.List paymentModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.populator.customer.ReadableCustomerList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.model.customer.CustomerPassword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionList options(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: com.salesmanager.shop.model.system.Configs getConfig(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.admin.model.secutity.Password,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction authorizePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction refundPayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String displaySysyemConfgurations(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController: java.lang.String displaySysyemConfgurations(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayContentImagesCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: java.lang.String displayContent(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String returnPayPalPayment(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.system.SystemRESTController: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder folder(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getZones(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: java.lang.String displayConfirmation(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String download(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String display(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.store.ContactController: java.lang.String display(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction refundPayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayFileBrowser(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String getPaymentMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryHierarchy(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveTemplate(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomer(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.product.definition.ReadableProductDefinition getV2(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductApi: com.salesmanager.shop.model.catalog.product.product.definition.ReadableProductDefinition getV2(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.order.OrderPaymentApi getOrderPaymentApi()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayCustomProductGroup(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: void printInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ReadableContentFull content(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void uploadImages(java.lang.Long,org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogEntry(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: java.lang.String displayFeaturedItems(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageRelatedItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String displayShippingConfigs(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity pageImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(int,int,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List permissions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData addShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void upload(org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: void create(java.lang.Long,com.salesmanager.shop.model.order.history.PersistableOrderStatusHistory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi getCustomerReviewApi()>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductReviews(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.tax.TaxRatesApi getTaxRatesApi()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String deleteShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice price(java.lang.Long,com.salesmanager.shop.model.catalog.product.ProductPriceRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String displayTaxRates(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi: void <init>()>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.system.OptinApi getOptinApi()>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity updateCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String getManufacturers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayLogon(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void addOptionValueImage(java.lang.Long,org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void upload(org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList pages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String updateCustomerAddress(com.salesmanager.shop.model.customer.address.Address,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser update(com.salesmanager.shop.model.user.PersistableUser,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayStores(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String saveCustomer(com.salesmanager.core.model.customer.Customer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void saveStoreMarketing(java.lang.String,com.salesmanager.shop.model.store.PersistableBrand,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String createPage(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption createCustomerOption(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption createCustomerOption(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v0.search.SearchRESTController: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void createPackage(com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList removeProductFromGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteRegion(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayContentImagesCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: void create(java.lang.Long,com.salesmanager.shop.model.order.history.PersistableOrderStatusHistory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayStoreLanding(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String saveManufacturer(com.salesmanager.shop.admin.model.catalog.Manufacturer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.system.IntegrationConfiguration shippingModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController: org.springframework.http.ResponseEntity pageCustomGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshAndGetAuthenticationToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitOrder(java.lang.String,com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(java.lang.Integer,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductPrice(java.lang.String,com.salesmanager.shop.model.catalog.product.ProductPriceEntity,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteFile(com.salesmanager.shop.model.content.ContentName,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String saveAttribute(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayProductGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogEntry(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogEntry(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder images(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String displayOrderEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValues(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String getProductPrices(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String getManufacturers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ManufacturerController: java.lang.String getManufacturers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder images(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists pageExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: com.salesmanager.shop.model.entity.EntityExists pageExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList list(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer createCustomer(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOptionValue(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: com.salesmanager.shop.model.marketplace.ReadableMarketPlace marketPlace(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.customer.CustomerDashboardController getCustomerDashboardController()>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProductWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String saveTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategories(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void signup(com.salesmanager.shop.model.marketplace.SignupStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxClasses(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImagesUrl(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory create(com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: com.salesmanager.shop.model.system.IntegrationModuleConfiguration paymentModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePrices(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.http.ResponseEntity delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity createOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary calculateTotal(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity createAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculatePrice(java.lang.Long[],java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String displaySearch(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.lang.Long,java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String saveCustomer(com.salesmanager.core.model.customer.Customer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String basicLogon(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void deleteGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi: void deleteGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByManufacturer(int,int,java.lang.String,java.lang.String,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getProvinces(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi getProductRelationshipApi()>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi getResetUserPasswordApi()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageRelatedItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void uploadImages(java.lang.Long,org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void create(com.salesmanager.shop.model.customer.optin.PersistableCustomerOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi: void create(com.salesmanager.shop.model.customer.optin.PersistableCustomerOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity updateOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeShoppingCartItem(java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity updateCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: com.salesmanager.shop.model.system.IntegrationModuleConfiguration paymentModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void removeCatalogEntry(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShipping(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String save(com.salesmanager.shop.admin.model.permission.GroupDetails,org.springframework.validation.BindingResult,java.util.Locale,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayContentImagesCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData displayMiniCart(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String saveCustomProductGroup(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: java.util.List getCountry(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listShippingConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String download(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void removeCatalogEntry(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageRelatedItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.search.SearchController getSearchController()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: byte[] downloadFile(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity setDefaultImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String saveFile(com.salesmanager.shop.admin.model.digital.ProductFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: void create(java.lang.Long,com.salesmanager.shop.model.order.history.PersistableOrderStatusHistory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.RelatedItemsController: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getMonthsOfYear(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController: org.springframework.http.ResponseEntity getMonthsOfYear(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: java.lang.String displayConfirmation(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeCreate(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String displayKeywords(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String editTaxRate(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOrders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsController: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.populator.customer.ReadableCustomerList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List contents(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStoreCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryNoReference(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitPreAuthorizedOrder(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String displayTaxRates(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ValueList autocomplete(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String displayTaxConfiguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.UniqueEntity,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String updateShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem[],javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImages(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionValueExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: java.lang.String displayProducts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveTemplate(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String countryName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary payment(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createV2(com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ValueList autocomplete(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String saveManufacturer(com.salesmanager.shop.admin.model.catalog.Manufacturer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOptionValue(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: com.salesmanager.shop.model.system.Configs getConfig(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ValueList autocomplete(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.lang.String nextTransaction(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayStoreLanding(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayFileBrowser(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity refundOrder(com.salesmanager.shop.admin.model.orders.Refund,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: com.salesmanager.shop.model.system.IntegrationModuleConfiguration paymentModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.payment.PaymentApi: com.salesmanager.shop.model.system.IntegrationModuleConfiguration paymentModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String displayKeywords(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductKeywordsController: java.lang.String displayKeywords(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: void updateOrderCustomer(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(java.lang.Long,com.salesmanager.shop.model.content.PersistableContentEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: void updatePage(java.lang.Long,com.salesmanager.shop.model.content.PersistableContentEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String displayKeywords(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(java.lang.Integer,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deletePage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.GroupsController: org.springframework.http.ResponseEntity pageGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController getShoppingOrderDownloadController()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createBox(com.salesmanager.shop.model.content.box.PersistableContentBox,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPasswordSecurityQtn(com.salesmanager.shop.admin.model.userpassword.UserReset,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadProduct(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogs(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Optional,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox getBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addPrice(java.lang.String,com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuoteWeightItem,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deletePage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String registerCustomer(com.salesmanager.shop.model.customer.SecuredShopPersistableCustomer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayLogon(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity setCredentials(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePermissions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String saveUser(com.salesmanager.core.model.user.User,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview create(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createPage(com.salesmanager.shop.model.content.page.PersistableContentPage,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: com.salesmanager.shop.model.entity.Entity createPage(com.salesmanager.shop.model.content.page.PersistableContentPage,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getMonthsOfYear(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void updateVisible(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.util.List getCategories(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String displayRegistration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCurrency(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String displayOrderEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity checkContentCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteContent(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity changePassword(com.salesmanager.shop.store.security.PasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deletePage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxClass get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List permissions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAuthUserAddress(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(java.lang.Integer,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity removeMerchantStore(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createV2(com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.products.ProductController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.UniqueEntity,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCustomRegion(java.lang.String,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveConfigurations(com.salesmanager.shop.admin.model.web.ConfigListWrapper,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.admin.model.secutity.Password,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String saveShippingOptions(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getLanguages(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String saveManufacturer(com.salesmanager.shop.admin.model.catalog.Manufacturer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String displayProductReview(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getProvinces(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void addOptionValueImage(java.lang.Long,org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getAuthUser(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayCustomProductGroup(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.system.IntegrationConfiguration shippingModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList list(java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.Long,java.util.List,java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String displayShippingOrigin(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData displayMiniCart(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductReviews(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String removeShoppingCartItem(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String saveCustomProductGroup(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController: java.lang.String saveCustomProductGroup(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String displayPaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(com.salesmanager.shop.model.content.page.PersistableContentPage,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePermissions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String savePaymentMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.payments.PaymentsController: java.lang.String savePaymentMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview createProductReview(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProductReview,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String displayShippingConfigs(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List supportedLanguages(com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: java.util.List supportedLanguages(com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity pageAttributes(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.entity.NameEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity pageAttributes(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveEmailSettings(com.salesmanager.core.business.modules.email.EmailConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse indexProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(int,int,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveTemplate(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.StoreBrandingController: java.lang.String saveTemplate(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String countryName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByManufacturer(int,int,java.lang.String,java.lang.String,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByManufacturer(int,int,java.lang.String,java.lang.String,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String updateTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageKeywords(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void storeSignupVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getLanguages(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview createProductReview(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProductReview,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: com.salesmanager.shop.model.system.Configs getConfig(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCurrency(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductPriceController: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String submitProductReview(com.salesmanager.shop.model.catalog.product.PersistableProductReview,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.LightPersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getAuthUser(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController getShippingPackagingController()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createPage(com.salesmanager.shop.model.content.page.PersistableContentPage,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.shop.model.customer.address.AddressLocation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderApi: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists boxExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.admin.model.secutity.Password,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String returnPayPalPayment(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: java.util.List categoryVariantList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductVariantApi: java.util.List categoryVariantList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String removeShoppingCartItem(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.util.List list(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.product.ProductOptionApi getProductOptionApi()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String displaySearch(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore store(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String saveShippingPackaging(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String displayShippingPackaging(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getWeightBasedShippingMethod(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String getProductPrices(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String displayStoreBranding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxClass get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: com.salesmanager.shop.model.system.Configs getConfig(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayProductAttributes(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: void saveExpedition(com.salesmanager.shop.model.shipping.ExpeditionConfiguration,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String savePaymentMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(java.lang.Long,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deletePrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String zoneName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList boxes(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void deletePackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.UniqueEntity,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeCustomProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity createAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage pageByName(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.lang.Long,java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String displayProductReview(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList removeProductFromGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.shoppingCart.MiniCartController: void <init>()>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createV2(com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String getDigitalProduct(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.controller.ImagesController: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: java.lang.String displayFeaturedItems(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.FeaturedItemsController: java.lang.String displayFeaturedItems(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.shop.model.customer.address.AddressLocation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listPaymentConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void removeCatalogEntry(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore storeFull(java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayHomeStub(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String saveFile(com.salesmanager.shop.admin.model.digital.ProductFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.DigitalProductController: java.lang.String saveFile(com.salesmanager.shop.admin.model.digital.ProductFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue createProductOptionValue(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct create(com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity updateOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String countryName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductFromCategory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController: org.springframework.http.ResponseEntity deleteProductFromCategory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomer(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerController: java.lang.String displayCustomer(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: java.lang.String displayListingPage(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxRate get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxRatesApi: com.salesmanager.shop.model.tax.ReadableTaxRate get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogEntry(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.http.ResponseEntity contact(com.salesmanager.shop.model.shop.ContactForm,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary calculateTotal(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.http.ResponseEntity delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.populator.customer.ReadableCustomerList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String saveShippingConfiguration(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteFile(com.salesmanager.shop.model.content.ContentName,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder images(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue createCustomerOptionValue(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.http.ResponseEntity delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: java.lang.String displayOrders(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.controller.FilesController getFilesController()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createBox(com.salesmanager.shop.model.content.box.PersistableContentBox,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String editAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStores(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void updateGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String updateCustomerAddress(com.salesmanager.shop.model.customer.address.Address,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String saveFiles(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String displayPaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: com.salesmanager.shop.model.system.Configs getConfig(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getByfriendlyUrl(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String displayShippingConfigs(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void password(com.salesmanager.shop.model.user.UserPassword,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String saveCategory(com.salesmanager.shop.admin.model.catalog.Category,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer createManufacturer(java.lang.String,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: com.salesmanager.shop.model.system.IntegrationModuleConfiguration paymentModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List shippingModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi: java.util.List shippingModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String display(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox manageBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void upload(org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String saveTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveTemplate(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String countryName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity pageImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.LightPersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.product.definition.ReadableProductDefinition getV2(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getCreditCardDates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData displayMiniCart(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String displayShippingOrigin(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: com.salesmanager.shop.model.marketplace.ReadableMarketPlace marketPlace(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(com.salesmanager.shop.model.content.page.PersistableContentPage,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayDenied(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxClass(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String registerCustomer(com.salesmanager.shop.model.customer.SecuredShopPersistableCustomer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer customerInformation(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxClasses(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.entity.NameEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateOrderTotal(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadProduct(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getByfriendlyUrl(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: com.salesmanager.shop.model.references.SizeReferences measures(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.GroupsController: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.user.PersistableUser,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi: com.salesmanager.shop.model.user.ReadableUser create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.user.PersistableUser,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory update(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct createProduct(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProduct,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCountryToCustomRegion(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesRegion,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: java.lang.String displayContent(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.lang.Void create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: java.lang.String displayRelatedItems(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity removeUser(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageRelatedItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.group.ProductGroup creteGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.payment.PaymentApi: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder getOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategories(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus upload(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String,java.lang.Long,java.lang.String,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void create(com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: void create(com.salesmanager.shop.model.store.PersistableMerchantStore)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String saveProductPrice(com.salesmanager.shop.admin.model.catalog.ProductPrice,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList attributes(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList attributes(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory create(com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi: com.salesmanager.shop.model.catalog.category.PersistableCategory create(com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImagesUrl(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController: org.springframework.http.ResponseEntity pageProductImagesUrl(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.model.customer.CustomerPassword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String displayPaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String getManufacturers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValues(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity checkContentCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String createManufacturer(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImages(com.salesmanager.shop.admin.model.content.ProductImages,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImagesUrl(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String saveManufacturer(com.salesmanager.shop.admin.model.catalog.Manufacturer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ManufacturerController: java.lang.String saveManufacturer(com.salesmanager.shop.admin.model.catalog.Manufacturer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: java.lang.String displayFeaturedItems(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImagesUrl(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi: void <init>()>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String saveFile(com.salesmanager.shop.admin.model.digital.ProductFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String zoneName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct update(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String editTaxRate(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxRatesController: java.lang.String editTaxRate(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableBrand getStoreMarketing(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: com.salesmanager.shop.model.store.ReadableBrand getStoreMarketing(java.lang.String,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String registerCustomer(com.salesmanager.shop.model.customer.SecuredShopPersistableCustomer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerRegistrationController: java.lang.String registerCustomer(com.salesmanager.shop.model.customer.SecuredShopPersistableCustomer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String saveProduct(com.salesmanager.shop.admin.model.catalog.Product,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listCapturableOrders(java.time.LocalDate,java.time.LocalDate,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.model.customer.CustomerPassword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage page(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String updateTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(java.lang.Long,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: java.lang.String displayOrders(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrdersController: java.lang.String displayOrders(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.product.ProductVariantApi: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateOrderTotal(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getCategory(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String saveShippingConfiguration(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String saveTaxConfiguration(com.salesmanager.core.model.tax.TaxConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus rename(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice price(java.lang.Long,com.salesmanager.shop.model.catalog.product.ProductPriceRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listPaymentConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxClasses(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void upload(org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.user.UserApi getUserApi()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String addProductToCategory(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String saveSystemConfigurations(com.salesmanager.core.model.system.MerchantConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImagesUrl(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String saveContentImages(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String listContentPages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void updateEnabled(java.lang.Long,com.salesmanager.shop.model.user.PersistableUser,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayHomeStub(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String displayShippingPackaging(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction capturePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String getPaymentMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse indexProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary calculateTotal(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImagesUrl(com.salesmanager.core.model.catalog.product.image.ProductImage,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String saveShippingOptions(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayAccountsConfguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse deleteOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String getDigitalProduct(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String addProductToCategory(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String savePaymentMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String displaySearch(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: com.salesmanager.shop.model.system.ReadableOptin create(com.salesmanager.shop.model.system.PersistableOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.system.OptinApi: com.salesmanager.shop.model.system.ReadableOptin create(com.salesmanager.shop.model.system.PersistableOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveStoreBranding(org.springframework.web.multipart.MultipartFile,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: void saveExpedition(com.salesmanager.shop.model.shipping.ExpeditionConfiguration,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String savePaymentMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String saveTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByManufacturer(int,int,java.lang.String,java.lang.String,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity removeMerchantStore(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentPagesController: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImagesUrl(com.salesmanager.core.model.catalog.product.image.ProductImage,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProduct(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByManufacturer(int,int,java.lang.String,java.lang.String,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getAuthUser(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void create(com.salesmanager.shop.model.customer.optin.PersistableCustomerOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController: java.lang.String displayCategoryWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String saveMerchantStore(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String saveAttribute(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.group.ProductGroup creteGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxClasses(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(java.lang.Long,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity removeUser(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String jsonLogon(com.salesmanager.shop.model.customer.SecuredCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalogCategoryEntry addCatalogEntry(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List listPermissions(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayFileBrowser(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteRegion(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculatePrice(java.lang.Long[],java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.user.PersistableUser,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.util.List list(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser update(com.salesmanager.shop.model.user.PersistableUser,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategories(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void uploadMultipleFiles(org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void updateGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void removeOptionValueImage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity updateStatus(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController getCustomerOptionsSetController()>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity pageImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryNoReference(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.RelatedItemsController: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String editCustomShipping(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByManufacturer(int,int,java.lang.String,java.lang.String,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity updateStatus(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String returnPayPalPayment(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.PersistableOrder createOrder(java.lang.String,com.salesmanager.shop.model.order.v0.PersistableOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage page(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity checkAttributeType(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePermissions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue createProductOptionValue(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShipping(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStores(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: byte[] downloadFile(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryHierarchy(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity pageAttributes(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.util.List list(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitPreAuthorizedOrder(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableAnonymousOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadProduct(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.FilesController: byte[] downloadProduct(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue createCustomerOptionValue(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue createCustomerOptionValue(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue createCustomerOptionValue(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeKeyword(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByManufacturer(int,int,java.lang.String,java.lang.String,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptinCustomer(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue createProductOptionValue(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction authorizePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi: com.salesmanager.shop.model.order.transaction.ReadableTransaction authorizePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction capturePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteBox(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction authorizePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageKeywords(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String displayTaxConfiguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse store(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String displayKeywords(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: com.salesmanager.shop.model.shipping.ExpeditionConfiguration expedition(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxRate get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculatePrice(java.lang.Long[],java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue createCustomerOptionValue(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String createBox(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity captureOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: java.lang.String displayListingPage(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeKeyword(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox getBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(java.lang.Long,com.salesmanager.shop.model.content.PersistableContentEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String countryName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List contents(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(java.lang.Long,com.salesmanager.shop.model.content.PersistableContentEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse indexProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder getOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteRegion(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void deletePackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus rename(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCountryToCustomRegion(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesRegion,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.populator.customer.ReadableCustomerList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue createProductOptionValue(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: java.lang.String displayConfirmation(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController: java.lang.String displayConfirmation(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerAccount(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String orderDetails(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCountryToCustomRegion(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesRegion,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction authorizePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.group.ProductGroup creteGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview createProductReview(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProductReview,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity getOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void deleteGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList pages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String removeShoppingCartItem(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: java.lang.String displayListingPage(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteBox(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxClass(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: java.lang.String displayListingPage(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void addLogo(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.orders.OrderActionsControler getOrderActionsControler()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String editTaxRate(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String registerCustomer(com.salesmanager.shop.model.customer.SecuredShopPersistableCustomer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity updateCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct create(com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getWeightBasedShippingMethod(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOrUpdateModule(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayAddProductToCategories(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String saveShippingOptions(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList attributes(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptinCustomer(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayDenied(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String displayCheckout(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAuthUserAddress(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(int,int,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String editTaxRate(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void addLogo(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List listPermissions(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus remove(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getMonthsOfYear(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue createCustomerOptionValue(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity checkUserCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.tax.TaxConfigurationController: void <init>()>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity activateProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox manageBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: com.salesmanager.shop.model.content.box.ReadableContentBox manageBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listShippingConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductPrice(java.lang.String,com.salesmanager.shop.model.catalog.product.ProductPriceEntity,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductPrice(java.lang.String,com.salesmanager.shop.model.catalog.product.ProductPriceEntity,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteManufacturer(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity checkUserCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity getOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.tax.TaxRatesApi: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculateVariant(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.ReadableSelectedProductVariant,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage page(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.merchant.StoreLandingController getStoreLandingController()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity pageUsers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: java.lang.String displayRelatedItems(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void signup(com.salesmanager.shop.model.marketplace.SignupStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.configurations.CacheApi: org.springframework.http.ResponseEntity clearCache(java.lang.String,java.lang.String)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController: java.lang.String displayProductCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.shipping.PackageDetails getPackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteRegion(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList attributes(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String autocomplete(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.shop.model.references.ReadableAddress shippingOrigin(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog createCatalog(com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList addProductToGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi: com.salesmanager.shop.model.catalog.product.ReadableProductList addProductToGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStores(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.merchant.StoreBrandingController getStoreBrandingController()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.payment.PaymentApi: void <init>()>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ReadableContentFull content(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayAccountsConfguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxClassApi: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ValueList autocomplete(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: com.salesmanager.shop.model.system.Configs getConfig(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity updateOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveStoreBranding(org.springframework.web.multipart.MultipartFile,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(com.salesmanager.shop.model.content.page.PersistableContentPage,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: void updateOrderCustomer(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: void create(java.lang.Long,com.salesmanager.shop.model.order.history.PersistableOrderStatusHistory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi: void create(java.lang.Long,com.salesmanager.shop.model.order.history.PersistableOrderStatusHistory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String getPaymentMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.util.List getCountries(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerRegistrationController: java.util.List getCountries(javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String editAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog createCatalog(com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptinCustomer(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitOrder(java.lang.String,com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer createCustomer(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String createBox(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String editProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog createCatalog(com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(java.lang.Integer,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList addProductToGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String saveMerchantStore(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String listContentBoxes(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductTypeApi: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer create(com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(java.lang.Long,com.salesmanager.shop.model.content.PersistableContentEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayFileBrowser(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getCreditCardDates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity createOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController: java.lang.String displayOptionValueEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategoryList list(java.util.List,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.shipping.ShippingOriginController: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentBoxesController: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String saveManufacturer(com.salesmanager.shop.admin.model.catalog.Manufacturer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.product.ProductReviewApi: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.order.ShoppingOrderController getShoppingOrderController()>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v0.store.StoreContactRESTController: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List permissions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: java.lang.String displayCustomerDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String createPage(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List contents(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: com.salesmanager.shop.model.system.Configs getConfig(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus upload(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String,java.lang.Long,java.lang.String,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: void printInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: void saveExpedition(com.salesmanager.shop.model.shipping.ExpeditionConfiguration,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String displayRegistration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayStoreLanding(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String editTaxClass(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxClassController: java.lang.String editTaxClass(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String submitProductReview(com.salesmanager.shop.model.catalog.product.PersistableProductReview,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity removeUser(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPasswordSecurityQtn(com.salesmanager.shop.admin.model.userpassword.UserReset,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController: org.springframework.http.ResponseEntity resetPasswordSecurityQtn(com.salesmanager.shop.admin.model.userpassword.UserReset,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void uploadMultipleFiles(org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listShippingConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse store(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionList options(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String updateShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem[],javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse indexProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: void printInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: java.util.List paymentModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList pages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOrUpdateModule(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList list(java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.Long,java.util.List,java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.populator.customer.ReadableCustomerList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void create(com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayProductAttributes(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList boxes(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductTypeApi: void update(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.user.PermissionController getPermissionController()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String returnPayPalPayment(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList pages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity pageImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentImageController: org.springframework.http.ResponseEntity pageImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String deleteShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String displayRegistration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: com.salesmanager.shop.model.system.Configs getConfig(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer customerInformation(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculateVariant(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.ReadableSelectedProductVariant,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi: com.salesmanager.shop.model.customer.PersistableCustomer update(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String submitProductReview(com.salesmanager.shop.model.catalog.product.PersistableProductReview,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity createOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList removeProductFromGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi: com.salesmanager.shop.model.catalog.product.ReadableProductList removeProductFromGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.product.definition.ReadableProductDefinition getV2(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity activateProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String addProductToCategory(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String updateTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ReadableContentFull content(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: com.salesmanager.shop.model.content.ReadableContentFull content(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: java.lang.String displayProducts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductsController: java.lang.String displayProducts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.customer.CustomerLoginController: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerBillingAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity createOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction refundPayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String editManufacturer(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProductWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.product.ShopProductController: java.lang.String displayProductWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void signup(com.salesmanager.shop.model.marketplace.SignupStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxRate(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String saveProductPrice(com.salesmanager.shop.admin.model.catalog.ProductPrice,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity checkAttributeType(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxClass get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxClassApi: com.salesmanager.shop.model.tax.ReadableTaxClass get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductReview(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: java.lang.String displayProducts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculatePrice(java.lang.Long[],java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStores(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List listPermissions(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteBox(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList children(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.lang.Void create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteContent(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity pageUsers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity checkAttributeType(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductAttributeController: org.springframework.http.ResponseEntity checkAttributeType(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: void saveExpedition(com.salesmanager.shop.model.shipping.ExpeditionConfiguration,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity checkContentCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: java.lang.String displayProducts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCountryToCustomRegion(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesRegion,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: java.util.List categoryVariantList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer create(com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: java.lang.String displayContent(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.customers.CustomerController: java.lang.String displayCustomers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageRelatedItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayCustomProductGroup(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse contact(java.lang.String,com.salesmanager.shop.model.shop.ContactForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary calculateTotal(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.order.OrderTotalApi: com.salesmanager.shop.model.order.ReadableOrderTotalSummary calculateTotal(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity register(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: byte[] downloadFile(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List listPackages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi: java.util.List listPackages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption createCustomerOption(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse deleteOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void removeOptionValueImage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList boxes(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue createProductOptionValue(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser getAuthUser(com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUserList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String save(com.salesmanager.shop.admin.model.permission.GroupDetails,org.springframework.validation.BindingResult,java.util.Locale,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImages(com.salesmanager.shop.admin.model.content.ProductImages,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String editTaxRate(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShippingDetails(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: java.util.List categoryVariantList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity createAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: void printInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String displayShippingPackaging(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.StoreBrandingController: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity checkContentCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayFileBrowser(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String createManufacturer(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ManufacturerController: java.lang.String createManufacturer(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String orderDetails(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: org.springframework.http.ResponseEntity optionExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void updateV2(java.lang.Long,com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: java.lang.String displayProducts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteFile(com.salesmanager.shop.model.content.ContentName,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getMonthsOfYear(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.orders.OrderControler: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.util.List list(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData displayMiniCart(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String createPage(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductPrice(java.lang.String,com.salesmanager.shop.model.catalog.product.ProductPriceEntity,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String saveCustomer(com.salesmanager.core.model.customer.Customer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String createPage(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayCustomProductGroup(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.orders.OrdersController: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController: java.lang.String displayChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: void printInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.content.ContentApi: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction authorizePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer create(com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getWeightBasedShippingMethod(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPasswordSecurityQtn(com.salesmanager.shop.admin.model.userpassword.UserReset,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse deleteOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.system.SystemRESTController: com.salesmanager.core.business.utils.ajax.AjaxResponse deleteOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus rename(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus rename(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String zoneName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity checkStoreCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deletePage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String saveTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: java.lang.String displayConfirmation(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptionsSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: com.salesmanager.shop.model.marketplace.ReadableMarketPlace marketPlace(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void upload(org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void deleteStoreLogo(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList boxes(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String savePaymentMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String displaySearch(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.search.SearchController: java.lang.String displaySearch(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String listContentPages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore storeFull(java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: java.lang.String displayRelatedItems(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String saveTaxConfiguration(com.salesmanager.core.model.tax.TaxConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.lang.String nextTransaction(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi: java.lang.String nextTransaction(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateOrderTotal(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String returnPayPalPayment(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String createBox(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String displayShippingOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: com.salesmanager.shop.model.references.SizeReferences measures(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: byte[] downloadFile(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String saveStoreLanding(com.salesmanager.shop.admin.model.merchant.StoreLanding,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox getBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void storeSignupVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists pageExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueList optionsValues(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String displayProductReview(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerProductReviewController: java.lang.String displayProductReview(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void storeSignupVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableAnonymousOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderApi: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableAnonymousOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse contact(java.lang.String,com.salesmanager.shop.model.shop.ContactForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.store.StoreContactRESTController: com.salesmanager.core.business.utils.ajax.AjaxResponse contact(java.lang.String,com.salesmanager.shop.model.shop.ContactForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction capturePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi: com.salesmanager.shop.model.order.transaction.ReadableTransaction capturePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage pageByName(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitOrder(java.lang.String,com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String saveManufacturer(com.salesmanager.shop.admin.model.catalog.Manufacturer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsController: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUsers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController: java.lang.String displayUsers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse deleteOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String editProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductPriceController: java.lang.String editProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAuthUserAddress(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProduct(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData addShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteFile(com.salesmanager.shop.model.content.ContentName,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList list(java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.Long,java.util.List,java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String saveMerchantStore(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ReadableContentFull content(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void removeOptionValueImage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String countryName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getMonthsOfYear(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists pageExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: java.lang.String displayOrders(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: java.lang.String displayCustomerDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: java.lang.String displayAccounts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String saveManufacturer(com.salesmanager.shop.admin.model.catalog.Manufacturer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List shippingModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getMonthsOfYear(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct createProduct(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProduct,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController: com.salesmanager.shop.model.catalog.product.PersistableProduct createProduct(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProduct,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList attributes(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: com.salesmanager.shop.model.system.ReadableOptin create(com.salesmanager.shop.model.system.PersistableOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String displayCheckout(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: java.lang.String displayContent(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProductWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity createOptionValue(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.lang.String nextTransaction(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.shop.model.customer.address.AddressLocation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderShippingApi: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.shop.model.customer.address.AddressLocation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption createProductOption(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: java.lang.String displayProductReviews(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategoryList list(java.util.List,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList boxes(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: com.salesmanager.shop.model.entity.ReadableEntityList boxes(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String saveMerchantStore(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getByfriendlyUrl(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOrders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList removeProductFromGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.LandingController: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList pages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createV2(com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String displayCheckout(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController: java.lang.String displayCheckout(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerAccount(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController: java.lang.String deleteShippingMethod(org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String saveTaxConfiguration(com.salesmanager.core.model.tax.TaxConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String addKeyword(com.salesmanager.shop.admin.model.catalog.Keyword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String paymentAction(com.salesmanager.shop.model.order.ShopOrder,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity removeMerchantStore(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController: org.springframework.http.ResponseEntity removeMerchantStore(javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void deletePackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String savePaymentMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.product.ProductVariantApi getProductVariantApi()>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProduct(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: com.salesmanager.shop.model.store.ReadableMerchantStoreList get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.customers.CustomerOptionsController getCustomerOptionsController()>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList list(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String saveCustomProductGroup(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity captureOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderActionsControler: org.springframework.http.ResponseEntity captureOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse contact(java.lang.String,com.salesmanager.shop.model.shop.ContactForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerBillingAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeEdit(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction capturePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String submitProductReview(com.salesmanager.shop.model.catalog.product.PersistableProductReview,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerProductReviewController: java.lang.String submitProductReview(com.salesmanager.shop.model.catalog.product.PersistableProductReview,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory create(com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(java.lang.Integer,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity checkUserCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController: org.springframework.http.ResponseEntity checkUserCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listCapturableOrders(java.time.LocalDate,java.time.LocalDate,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayFileBrowser(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentImageController: java.lang.String displayFileBrowser(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption createCustomerOption(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String basicLogon(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity checkUserCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox getBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.products.OptionsController: void <init>()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity listTransactions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalogCategoryEntry addCatalogEntry(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String updateTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayLogon(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore storeFull(java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String displayStoreLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayAccountsConfguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageManufacturers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer createManufacturer(java.lang.String,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer createManufacturer(java.lang.String,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCustomRegion(java.lang.String,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String displayShippingOrigin(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveCustomWeightBasedShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void removeOptionValueImage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String updateTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImages(com.salesmanager.shop.admin.model.content.ProductImages,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity updateCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController: org.springframework.http.ResponseEntity updateCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String getDigitalProduct(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCountries(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(int,int,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsValueController: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String sendEmail(com.salesmanager.shop.model.shop.ContactForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.store.ContactController: java.lang.String sendEmail(com.salesmanager.shop.model.shop.ContactForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.util.List list(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPasswordSecurityQtn(com.salesmanager.shop.admin.model.userpassword.UserReset,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox getBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.lang.Long,java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption createProductOption(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxRate get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct removeProductFromCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.util.List list(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List pagesSummary(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String saveFiles(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.content.StaticContentController: java.lang.String saveFiles(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String zoneName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog getCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity pageAttributes(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteBox(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController: java.lang.String displayProductEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: void saveExpedition(com.salesmanager.shop.model.shipping.ExpeditionConfiguration,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer createManufacturer(java.lang.String,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity moveCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageRelatedItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategories(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.categories.CategoryController: java.lang.String displayCategories(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String saveOrder(com.salesmanager.shop.admin.model.orders.Order,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String updateShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem[],javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStoreCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String saveUser(com.salesmanager.core.model.user.User,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void updateV2(java.lang.Long,com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductApi: void updateV2(java.lang.Long,com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: void updateOrderCustomer(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String zoneName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void removeOptionValueImage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity removeUser(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.user.UserController: org.springframework.http.ResponseEntity removeUser(javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.shop.model.customer.address.AddressLocation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void deletePackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveTemplate(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeEdit(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductQuantity(java.lang.String,java.lang.String,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addPrice(java.lang.String,com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuoteWeightItem,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionValueExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsValueController: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.references.ReferencesApi getReferencesApi()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getCreditCardDates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String displaySearch(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController: org.springframework.http.ResponseEntity deleteCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.variation.ReadableProductVariation get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String listContentBoxes(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.lang.Long,java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String editCustomShipping(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String updateTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String countryName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v0.store.StoreContactRESTController getStoreContactRESTController()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String saveUser(com.salesmanager.core.model.user.User,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getWeightBasedShippingMethod(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String editProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listShippingConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayProductGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.products.ManufacturerController getManufacturerController()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer customerInformation(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController: com.salesmanager.shop.model.customer.ReadableCustomer customerInformation(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String zoneName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity delete(org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getByfriendlyUrl(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String sendEmail(com.salesmanager.shop.model.shop.ContactForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse store(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShippingDetails(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController: org.springframework.http.ResponseEntity pageCustomShippingDetails(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listShippingConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayDenied(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData displayMiniCart(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addPrice(java.lang.String,com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuoteWeightItem,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayFileBrowser(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(int,int,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String displayPaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String displayOrderEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList list(java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.Long,java.util.List,java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductInstanceApi: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.LoginController: java.lang.String displayLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayProductAttributes(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity pageImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getWeightBasedShippingMethod(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog getCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImages(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String saveManufacturer(com.salesmanager.shop.admin.model.catalog.Manufacturer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity checkContentCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: java.lang.String displayOrders(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: java.lang.String displayCustomerDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerDashboardController: java.lang.String displayCustomerDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: void deleteCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.PersistableOrder createOrder(java.lang.String,com.salesmanager.shop.model.order.v0.PersistableOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getCategory(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.products.ProductReviewController: void <init>()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity createOptionValue(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getByfriendlyUrl(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void uploadMultipleFiles(org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductInventoryApi: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction refundPayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList removeProductFromGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxRate(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayStores(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List permissions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(java.lang.Long,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi: org.springframework.http.ResponseEntity modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData displayMiniCart(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String saveShippingPackaging(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.user.SecurityController: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImagesUrl(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionList options(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction capturePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String getManufacturers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: java.lang.String displayContent(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getAuthUser(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOptionValue(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: void updateOptionValue(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionValueExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProductWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void updateVisible(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void updateVisible(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String saveProductPrice(com.salesmanager.shop.admin.model.catalog.ProductPrice,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProduct(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List listPermissions(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.security.SecurityApi: java.util.List listPermissions(java.lang.String)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void storeSignupVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity checkStoreCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsController: java.lang.String displayOptionCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi getShippingExpeditionApi()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String deletePaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary payment(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: java.lang.String displayOrders(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity setDefaultImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(java.lang.Long,com.salesmanager.shop.model.content.PersistableContentEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse contact(java.lang.String,com.salesmanager.shop.model.shop.ContactForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String unauthorized(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview create(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String getDigitalProduct(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList removeProductFromGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity updateOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCustomRegion(java.lang.String,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity checkStoreCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void updateCatalog(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptionsSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductQuantity(java.lang.String,java.lang.String,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentPagesController: org.springframework.http.ResponseEntity removeContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(java.lang.Integer,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String saveShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingOriginController: java.lang.String saveShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void updateCatalog(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String zoneName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController: java.lang.String zoneName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayEmailSettings(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity getOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String saveTaxConfiguration(com.salesmanager.core.model.tax.TaxConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String deletePaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createBox(com.salesmanager.shop.model.content.box.PersistableContentBox,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List shippingModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateShipping(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String editProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.configurations.ConfigurationController: void <init>()>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void updateGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder folder(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String displayShippingPackaging(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: java.lang.String displayProductReviews(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductReviewController: java.lang.String displayProductReviews(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateShipping(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.entity.NameEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void saveShippingOrigin(com.salesmanager.shop.model.references.PersistableAddress,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi: void saveShippingOrigin(com.salesmanager.shop.model.references.PersistableAddress,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList children(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String displayStoreBranding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity moveCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOrders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductQuantity(java.lang.String,java.lang.String,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.product.ProductApi getProductApi()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductPrice(java.lang.String,com.salesmanager.shop.model.catalog.product.ProductPriceEntity,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String editTaxRate(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.util.List getCategories(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser getAuthUser(com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getCreditCardDates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProduct(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitPreAuthorizedOrder(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List permissions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String saveFiles(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductQuantity(java.lang.String,java.lang.String,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List pagesSummary(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImagesUrl(com.salesmanager.core.model.catalog.product.image.ProductImage,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: java.lang.String displayConfirmation(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList children(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveTemplate(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void addLogo(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCustomRegion(java.lang.String,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String saveSystemConfigurations(com.salesmanager.core.model.system.MerchantConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.content.ContentImageController getContentImageController()>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void uploadImages(java.lang.Long,org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: void deleteOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPasswordSecurityQtn(com.salesmanager.shop.admin.model.userpassword.UserReset,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary calculateTotal(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCountries(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser update(com.salesmanager.shop.model.user.PersistableUser,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendDownloadEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptinCustomer(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption createCustomerOption(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore storeFull(java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String orderDetails(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String orderDetails(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.SecurityController: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: java.util.List getCountry(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deletePrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.controller.ImagesController: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayAccountsConfguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List listPackages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String displayCheckout(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController getShoppingOrderPaymentController()>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxClasses(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxClassController: org.springframework.http.ResponseEntity pageTaxClasses(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String displayPaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct removeProductFromCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String createPage(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: java.lang.String displayRelatedItems(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity createAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists boxExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: com.salesmanager.shop.model.entity.EntityExists boxExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.util.List getCategories(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.customer.CustomerDashboardController: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String displayRegistration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: byte[] downloadFile(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String createManufacturer(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore store(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getCreditCardDates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String displayKeywords(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice price(java.lang.Long,com.salesmanager.shop.model.catalog.product.ProductPriceRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.LightPersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.configurations.CacheController getCacheController()>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOrUpdateModule(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.system.SystemRESTController: com.salesmanager.core.business.utils.ajax.AjaxResponse createOrUpdateModule(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity delete(org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void addFolder(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void deleteGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOptionValue(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String saveSystemConfigurations(com.salesmanager.core.model.system.MerchantConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getCategory(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getLanguages(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity updateCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: void deleteProduct(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String saveShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox getBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: com.salesmanager.shop.model.content.box.ReadableContentBox getBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String saveCustomer(com.salesmanager.core.model.customer.Customer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String addProductToCategory(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.admin.model.secutity.Password,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String displayTaxClasses(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue createCustomerOptionValue(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void password(com.salesmanager.shop.model.user.UserPassword,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: java.lang.String displayListingPage(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: com.salesmanager.shop.model.system.IntegrationModuleConfiguration paymentModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePrices(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct update(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: com.salesmanager.shop.model.system.Configs getConfig(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayAccountsConfguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity setCredentials(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary calculateTotal(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String displayStoreBranding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity checkAttributeType(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getCategory(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addPrice(java.lang.String,com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuoteWeightItem,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void deleteStoreLogo(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void saveStoreMarketing(java.lang.String,com.salesmanager.shop.model.store.PersistableBrand,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCurrency(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String displayProductReview(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String updateShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem[],javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: com.salesmanager.shop.model.shipping.ExpeditionConfiguration expedition(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.content.ContentBoxesController getContentBoxesController()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity delete(org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void updatePackage(java.lang.String,com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.content.ShopContentController: void <init>()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String deletePaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayAccountsConfguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void addOptionValueImage(java.lang.Long,org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct addProductToCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValues(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxRate(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.LightPersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList boxes(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUserList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteRegion(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.customer.CustomerProductReviewController: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImages(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.UniqueEntity,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity updateOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String updateCustomerAddress(com.salesmanager.shop.model.customer.address.Address,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerAccount(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerBillingAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void signup(com.salesmanager.shop.model.marketplace.SignupStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction capturePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction authorizePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String deletePaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String saveUser(com.salesmanager.core.model.user.User,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.user.UserController: java.lang.String saveUser(com.salesmanager.core.model.user.User,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String deletePaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity getOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOrders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.variation.ReadableProductVariation get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.order.OrderRESTController: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUsers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void updateVisible(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void signup(com.salesmanager.shop.model.marketplace.SignupStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: java.lang.String displayConfirmation(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity createOptionValue(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String saveSystemConfigurations(com.salesmanager.core.model.system.MerchantConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayAddProductToCategories(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.util.List getCustomers(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteFile(com.salesmanager.shop.model.content.ContentName,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void addOptionValueImage(java.lang.Long,org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage page(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice price(java.lang.Long,com.salesmanager.shop.model.catalog.product.ProductPriceRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory create(com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String displayCreateProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String editProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi: void update(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String editAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalogCategoryEntry addCatalogEntry(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void updateCatalog(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage page(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi: void update(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage pageByName(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String addKeyword(com.salesmanager.shop.admin.model.catalog.Keyword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProduct(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void create(com.salesmanager.shop.model.customer.optin.PersistableCustomerOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updateBox(com.salesmanager.shop.model.content.box.PersistableContentBox,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculatePrice(java.lang.Long[],java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.product.ShopProductController: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculatePrice(java.lang.Long[],java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(java.lang.Long,com.salesmanager.shop.model.content.PersistableContentEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductType get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayLogon(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeEdit(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String editAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void addFolder(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.shipping.PackageDetails getPackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog getCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateShipping(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController: java.lang.String displayShippingMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: com.salesmanager.shop.model.marketplace.ReadableMarketPlace marketPlace(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData addShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String getProductPrices(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.products.ProductKeywordsController getProductKeywordsController()>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory create(com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void password(com.salesmanager.shop.model.user.UserPassword,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String saveContentImages(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String saveShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer createManufacturer(java.lang.String,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String updateShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem[],javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer customerInformation(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String displayStoreLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ReadableContentFull content(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxClass get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageManufacturers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategoryList list(java.util.List,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.admin.model.secutity.Password,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists pageExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String submitProductReview(com.salesmanager.shop.model.catalog.product.PersistableProductReview,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct createProduct(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProduct,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updateBox(com.salesmanager.shop.model.content.box.PersistableContentBox,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder folder(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateShipping(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String submitProductReview(com.salesmanager.shop.model.catalog.product.PersistableProductReview,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxRatesApi: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductTypeList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity removeMerchantStore(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.util.Set boxPositions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.content.ContentBoxesController: java.util.Set boxPositions()>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: java.lang.String displayRelatedItems(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi getOrderStatusHistoryApi()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String displayShippingOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController getShippingOptionsController()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void saveShippingOrigin(com.salesmanager.shop.model.references.PersistableAddress,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.product.ProductInventoryApi getProductInventoryApi()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList children(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductReviewApi: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePermissions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity createOptionValue(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.products.ProductPriceController: void <init>()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePermissions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.PermissionController: org.springframework.http.ResponseEntity pagePermissions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getProduct(java.lang.String,java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData addShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStoreCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String download(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateOrderTotal(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeKeyword(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayHomeStub(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: void printInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderActionsControler: void printInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteContent(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: java.lang.String displayListingPage(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity delete(org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue createCustomerOptionValue(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendDownloadEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity checkStoreCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void updatePackage(java.lang.String,com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableBrand getStoreMarketing(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductType get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice price(java.lang.Long,com.salesmanager.shop.model.catalog.product.ProductPriceRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String createBox(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getZones(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.util.List getCustomers(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController: java.util.List getCustomers(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList list(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getZones(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void addLogo(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void addOptionValueImage(java.lang.Long,org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String addProductToCategory(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity pageAttributes(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData addShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValues(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController: java.lang.String displayOptionValues(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String saveShippingOptions(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: java.lang.String displayListingPage(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List listPermissions(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImages(com.salesmanager.shop.admin.model.content.ProductImages,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity delete(org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption createProductOption(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption createProductOption(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void create(com.salesmanager.shop.model.customer.optin.PersistableCustomerOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String displayStoreLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void create(com.salesmanager.shop.model.customer.optin.PersistableCustomerOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getByfriendlyUrl(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.product.definition.ReadableProductDefinition getV2(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveEmailSettings(com.salesmanager.core.business.modules.email.EmailConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct addProductToCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String sendEmail(com.salesmanager.shop.model.shop.ContactForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayLogon(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.user.UserApi: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController: org.springframework.http.ResponseEntity pageProductCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void updateV2(java.lang.Long,com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: java.lang.String displayOrders(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog createCatalog(com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.PersistableOrder createOrder(java.lang.String,com.salesmanager.shop.model.order.v0.PersistableOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.content.ShopContentController getShopContentController()>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.AdminController getAdminController()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity getOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String saveFile(com.salesmanager.shop.admin.model.digital.ProductFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.products.ProductPriceController getProductPriceController()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity removeUser(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String saveMerchantStore(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController: java.lang.String saveMerchantStore(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String deleteShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void updatePackage(java.lang.String,com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi: void updatePackage(java.lang.String,com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String saveContentImages(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.populator.customer.ReadableCustomerList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void upload(org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProductWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: void deleteCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveEmailSettings(com.salesmanager.core.business.modules.email.EmailConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String getPaymentMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createV2(com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String updateTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.controller.ImagesController: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List pagesSummary(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List permissions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore storeFull(java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionList options(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryNoReference(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.optionset.ReadableProductOptionSet get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void deleteGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String displaySearch(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String saveAttribute(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String displayCheckout(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity createOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity listTransactions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction authorizePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getCreditCardDates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController: org.springframework.http.ResponseEntity getCreditCardDates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity removeMerchantStore(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueList optionsValues(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: void create(java.lang.Long,com.salesmanager.shop.model.order.history.PersistableOrderStatusHistory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue createProductOptionValue(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String saveAttribute(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption createCustomerOption(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String addKeyword(com.salesmanager.shop.admin.model.catalog.Keyword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity updateOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableBrand getStoreMarketing(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity getOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String saveFiles(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer customerInformation(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus rename(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCustomRegion(java.lang.String,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentPagesController: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity captureOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList boxes(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity pageImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayProductGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.shipping.PackageDetails getPackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String saveProduct(com.salesmanager.shop.admin.model.catalog.Product,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String saveUser(com.salesmanager.core.model.user.User,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.search.SearchApi: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOptionValue(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitPreAuthorizedOrder(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculateVariant(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.ReadableSelectedProductVariant,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,org.springframework.ui.Model,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listShippingConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.UniqueEntity,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct create(com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCustomRegion(java.lang.String,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists boxExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity pageAttributes(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayLogon(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController: java.lang.String displayLogon(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity createAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: java.lang.String displayRelatedItems(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String addKeyword(com.salesmanager.shop.admin.model.catalog.Keyword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteContent(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String orderDetails(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValues(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCountryToCustomRegion(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesRegion,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController: java.lang.String addCountryToCustomRegion(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesRegion,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction capturePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerAccount(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCategoryCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProductWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.tax.TaxRatesController getTaxRatesController()>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse indexProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.customers.CustomerController: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.tax.TaxClassApi: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String createBox(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getLanguages(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxRate(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerController: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String getManufacturers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String saveProductPrice(com.salesmanager.shop.admin.model.catalog.ProductPrice,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview create(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct createProduct(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProduct,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus remove(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(java.lang.Long,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: com.salesmanager.shop.model.system.ReadableOptin create(com.salesmanager.shop.model.system.PersistableOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct createProduct(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProduct,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getByfriendlyUrl(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsController: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUsers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String sendEmail(com.salesmanager.shop.model.shop.ContactForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction refundPayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void deleteStoreLogo(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: void saveExpedition(com.salesmanager.shop.model.shipping.ExpeditionConfiguration,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String getProductPrices(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String createBox(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void deleteGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder getOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderApi: com.salesmanager.shop.model.order.v0.ReadableOrder getOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String displayStoreLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayProductGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview create(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity checkUserCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductTypeList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity updateCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void saveStoreMarketing(java.lang.String,com.salesmanager.shop.model.store.PersistableBrand,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction capturePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategories(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveTemplate(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStoreCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity pageImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.configurations.CacheApi getCacheApi()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String displayProductReview(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption createCustomerOption(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: java.lang.String displayListingPage(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity refundOrder(com.salesmanager.shop.admin.model.orders.Refund,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String saveMerchantStore(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String paymentAction(com.salesmanager.shop.model.order.ShopOrder,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String displayTaxConfiguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsController: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeCreate(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.optionset.ReadableProductOptionSet get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi: com.salesmanager.shop.model.customer.ReadableCustomer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity checkStoreCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void addLogo(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayCustomProductGroup(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String displaySearch(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCategoryCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData displayMiniCart(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void addLogo(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String addKeyword(com.salesmanager.shop.admin.model.catalog.Keyword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderActionsControler: org.springframework.http.ResponseEntity sendInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImagesUrl(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity updateCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.PersistableOrder createOrder(java.lang.String,com.salesmanager.shop.model.order.v0.PersistableOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.PersistableOrder createOrder(java.lang.String,com.salesmanager.shop.model.order.v0.PersistableOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void updateVisible(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity removeUser(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String zoneName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi getAuthenticateUserApi()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.entity.NameEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity delete(org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String listOrders(org.springframework.ui.Model,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String saveSystemConfigurations(com.salesmanager.core.model.system.MerchantConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct removeProductFromCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: com.salesmanager.shop.model.marketplace.ReadableMarketPlace marketPlace(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: com.salesmanager.shop.model.marketplace.ReadableMarketPlace marketPlace(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: byte[] downloadFile(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String saveOptionSet(com.salesmanager.core.model.customer.attribute.CustomerOptionSet,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer createManufacturer(java.lang.String,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayAddProductToCategories(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionValueExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: org.springframework.http.ResponseEntity optionValueExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayProductGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImages(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String saveCustomProductGroup(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.variation.ReadableProductVariation get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.group.ProductGroup creteGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayStoreLanding(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updateBox(com.salesmanager.shop.model.content.box.PersistableContentBox,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String saveFiles(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void uploadMultipleFiles(org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.http.ResponseEntity delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: void deleteCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageKeywords(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String createManufacturer(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(java.lang.Long,com.salesmanager.shop.model.content.PersistableContentEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary calculateTotal(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String duplicateProduct(java.lang.Long,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveEmailSettings(com.salesmanager.core.business.modules.email.EmailConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void storeSignupVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity checkStoreCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxRatesApi: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void updateV2(java.lang.Long,com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus upload(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String,java.lang.Long,java.lang.String,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteManufacturer(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice price(java.lang.Long,com.salesmanager.shop.model.catalog.product.ProductPriceRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogs(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Optional,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String savePaymentMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData addShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity setDefaultImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String updateCustomerAddress(com.salesmanager.shop.model.customer.address.Address,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController: java.lang.String updateCustomerAddress(com.salesmanager.shop.model.customer.address.Address,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: java.lang.String displayProducts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxClass(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String saveAttribute(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: com.salesmanager.shop.model.shipping.ExpeditionConfiguration expedition(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImagesUrl(com.salesmanager.core.model.catalog.product.image.ProductImage,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableBrand getStoreMarketing(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void deleteCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse deleteOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOptionValue(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity checkRegionCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.util.List getCustomers(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void deletePackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi: com.salesmanager.shop.model.customer.PersistableCustomer update(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveConfigurations(com.salesmanager.shop.admin.model.web.ConfigListWrapper,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void updateCatalog(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: byte[] downloadFile(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String saveProductPrice(com.salesmanager.shop.admin.model.catalog.ProductPrice,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategoryList list(java.util.List,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String getDigitalProduct(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String saveOrder(com.salesmanager.shop.admin.model.orders.Order,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.orders.OrderControler: java.lang.String saveOrder(com.salesmanager.shop.admin.model.orders.Order,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String paymentAction(com.salesmanager.shop.model.order.ShopOrder,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getByfriendlyUrl(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: com.salesmanager.shop.model.system.Configs getConfig(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.system.PublicConfigsApi: com.salesmanager.shop.model.system.Configs getConfig(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveCustomWeightBasedShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageKeywords(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue createProductOptionValue(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity refundOrder(com.salesmanager.shop.admin.model.orders.Refund,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: java.lang.String displayOrders(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String saveTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayStoreLanding(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getCategory(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void create(com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayAddProductToCategories(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateShipping(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductReview(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi: org.springframework.http.ResponseEntity deleteCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void updateEnabled(java.lang.Long,com.salesmanager.shop.model.user.PersistableUser,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addPrice(java.lang.String,com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuoteWeightItem,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String saveContentImages(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview createProductReview(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProductReview,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String saveUser(com.salesmanager.core.model.user.User,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: com.salesmanager.shop.model.references.SizeReferences measures(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteManufacturer(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void updateEnabled(java.lang.Long,com.salesmanager.shop.model.user.PersistableUser,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String saveProduct(com.salesmanager.shop.admin.model.catalog.Product,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity pageUsers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void updateEnabled(java.lang.Long,com.salesmanager.shop.model.user.PersistableUser,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity delete(org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayHomeStub(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void deleteStoreLogo(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String download(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi: java.lang.String download(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.shipping.PackageDetails getPackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse indexProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.search.SearchRESTController: com.salesmanager.core.business.utils.ajax.AjaxResponse indexProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: void printInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String displayTaxConfiguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String editTaxClass(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveStoreBranding(org.springframework.web.multipart.MultipartFile,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.customer.CustomerApi getCustomerApi()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus remove(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImages(com.salesmanager.shop.admin.model.content.ProductImages,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByManufacturer(int,int,java.lang.String,java.lang.String,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: java.util.List getCountry(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayAccountsConfguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer create(com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse deleteOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void storeSignupVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableAnonymousOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeShoppingCartItem(java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: java.lang.String displayAccounts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory create(com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists boxExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.system.IntegrationConfiguration shippingModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.group.ProductGroup creteGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImages(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: void deleteProduct(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController: void deleteProduct(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity getOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductTypeList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxClass get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createBox(com.salesmanager.shop.model.content.box.PersistableContentBox,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.util.List getCategories(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity refundOrder(com.salesmanager.shop.admin.model.orders.Refund,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String orderDetails(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String duplicateProduct(java.lang.Long,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview createProductReview(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProductReview,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList addProductToGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String displayStoreBranding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.StoreBrandingController: java.lang.String displayStoreBranding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderApi: com.salesmanager.shop.model.order.v0.ReadableOrder get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String editManufacturer(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String listContentBoxes(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String registerCustomer(com.salesmanager.shop.model.customer.SecuredShopPersistableCustomer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxRatesApi: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductTypeApi: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse store(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.store.StoreContactRESTController: com.salesmanager.core.business.utils.ajax.AjaxResponse store(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.product.ProductTypeApi: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: java.lang.String displayContent(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String autocomplete(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.util.List list(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculatePrice(java.lang.Long[],java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImages(com.salesmanager.shop.admin.model.content.ProductImages,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity pageUsers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitOrder(java.lang.String,com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String displayShippingConfigs(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveTemplate(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductPrice(java.lang.String,com.salesmanager.shop.model.catalog.product.ProductPriceEntity,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayFileBrowser(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v0.system.SystemRESTController: void <init>()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String zoneName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String saveSystemConfigurations(com.salesmanager.core.model.system.MerchantConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.shop.model.references.ReadableAddress shippingOrigin(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductPrice(java.lang.String,com.salesmanager.shop.model.catalog.product.ProductPriceEntity,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer customerInformation(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayAccountsConfguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveConfigurations(com.salesmanager.shop.admin.model.web.ConfigListWrapper,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductType get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct addProductToCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity checkContentCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity updateStatus(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String editManufacturer(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveCustomWeightBasedShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeShoppingCartItem(java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice price(java.lang.Long,com.salesmanager.shop.model.catalog.product.ProductPriceRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String displayCreateProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: java.lang.String displayConfirmation(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptionsSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String listContentPages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String displayShippingConfigs(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String displayShippingConfigs(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String displayShippingOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.content.ContentPagesController getContentPagesController()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String saveShippingConfiguration(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList addProductToGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deletePrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculateVariant(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.ReadableSelectedProductVariant,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeCustomProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String editTaxRate(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String listOrders(org.springframework.ui.Model,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String displaySearch(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity register(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImagesUrl(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.admin.model.secutity.Password,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableBrand getStoreMarketing(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: void saveExpedition(com.salesmanager.shop.model.shipping.ExpeditionConfiguration,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listPaymentConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShipping(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listShippingConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi: java.util.List listShippingConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity checkAttributeType(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct addProductToCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List supportedLanguages(com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity pageUsers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void uploadImages(java.lang.Long,org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStoreCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList addProductToGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: java.lang.String displayCustomerDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.entity.NameEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeCustomProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi getProductManufacturerApi()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity changePassword(com.salesmanager.shop.store.security.PasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: void deleteCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List listPermissions(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: void create(java.lang.Long,com.salesmanager.shop.model.order.history.PersistableOrderStatusHistory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController: java.lang.String displayOptionValueCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductInventoryApi: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listPaymentConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getProduct(java.lang.String,java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String saveFile(com.salesmanager.shop.admin.model.digital.ProductFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.group.ProductGroup creteGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists pageExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: com.salesmanager.shop.model.shipping.ExpeditionConfiguration expedition(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerBillingAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayFileBrowser(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShipping(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryNoReference(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(java.lang.Long,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableBrand getStoreMarketing(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList attributes(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateOrderTotal(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity register(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder getOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String updateCustomerAddress(com.salesmanager.shop.model.customer.address.Address,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: java.lang.String displayProductReviews(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: com.salesmanager.shop.model.system.ReadableOptin create(com.salesmanager.shop.model.system.PersistableOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.populator.customer.ReadableCustomerList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity createOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.model.customer.CustomerPassword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.PersistableOrder createOrder(java.lang.String,com.salesmanager.shop.model.order.v0.PersistableOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String listContentPages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: java.lang.String displayContent(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity captureOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductTypeList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog getCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String saveTaxConfiguration(com.salesmanager.core.model.tax.TaxConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String saveShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData addShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductType get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogs(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Optional,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageKeywords(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateOrderTotal(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String orderDetails(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeCustomProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String editProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus remove(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String saveFiles(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updateBox(com.salesmanager.shop.model.content.box.PersistableContentBox,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void upload(org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void deletePackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderApi: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String autocomplete(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayLogon(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String displaySearch(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculatePrice(java.lang.Long[],java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionValueExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void updateGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStores(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayProductGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: void deleteCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCountries(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String displayCreateProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String duplicateProduct(java.lang.Long,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayCustomProductGroup(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String updateTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitPreAuthorizedOrder(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String duplicateProduct(java.lang.Long,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String saveShippingPackaging(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog createCatalog(com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.variation.ReadableProductVariation get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity moveCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String saveSystemConfigurations(com.salesmanager.core.model.system.MerchantConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getProvinces(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog getCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void storeSignupVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateOrderTotal(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageManufacturers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void updateVisible(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void password(com.salesmanager.shop.model.user.UserPassword,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer customerInformation(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCurrency(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.controller.ImagesController getImagesController()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void updatePackage(java.lang.String,com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String duplicateProduct(java.lang.Long,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getCreditCardDates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String saveOrder(com.salesmanager.shop.admin.model.orders.Order,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteRegion(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity captureOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProduct(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists boxExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String deleteShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String createManufacturer(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: java.lang.String displayProductReviews(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void saveStoreMarketing(java.lang.String,com.salesmanager.shop.model.store.PersistableBrand,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage page(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getByfriendlyUrl(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList pages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList list(java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.Long,java.util.List,java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: java.lang.String displayProducts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: java.util.List paymentModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary payment(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction refundPayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi: com.salesmanager.shop.model.order.transaction.ReadableTransaction refundPayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList pages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveConfigurations(com.salesmanager.shop.admin.model.web.ConfigListWrapper,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String saveTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi: com.salesmanager.shop.model.catalog.category.ReadableCategory get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageManufacturers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption createProductOption(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.products.RelatedItemsController getRelatedItemsController()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController: java.lang.String displayShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(java.lang.Integer,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayProductAttributes(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String saveMerchantStore(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.order.OrderTotalApi: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerAccount(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String saveMerchantStore(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveConfigurations(com.salesmanager.shop.admin.model.web.ConfigListWrapper,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomer(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: java.util.List getCountry(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueList optionsValues(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity activateProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: java.lang.String displayAccounts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String createBox(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String listContentPages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentPagesController: java.lang.String listContentPages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,org.springframework.ui.Model,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxClass get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.category.ShoppingCategoryController getShoppingCategoryController()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImages(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxRatesApi: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String submitProductReview(com.salesmanager.shop.model.catalog.product.PersistableProductReview,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: void delete(java.lang.String,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCustomRegion(java.lang.String,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus upload(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String,java.lang.Long,java.lang.String,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity updateOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String displayKeywords(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String saveContentImages(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.group.ProductGroup creteGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity checkRegionCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct createProduct(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProduct,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayStoreLanding(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.UniqueEntity,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.system.PublicConfigsApi$$InterceptorProxy: com.salesmanager.shop.model.system.Configs getConfig(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String saveMerchantStore(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String saveAttribute(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.model.customer.CustomerPassword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController: java.lang.String changePassword(com.salesmanager.shop.model.customer.CustomerPassword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String display(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayCustomProductGroup(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String listOrders(org.springframework.ui.Model,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayHomeStub(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByManufacturer(int,int,java.lang.String,java.lang.String,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePrices(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeShoppingCartItem(java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxRate(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String saveFile(com.salesmanager.shop.admin.model.digital.ProductFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity checkUserCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductImageApi: void deleteImage(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.product.ShopProductController: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String editAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists pageExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategories(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOrUpdateModule(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList pages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: com.salesmanager.shop.model.shipping.ExpeditionConfiguration expedition(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String displayCheckout(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deletePage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity register(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity checkContentCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.user.PersistableUser,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ReadableContentFull content(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOrUpdateModule(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: java.lang.String displayFeaturedItems(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.util.List getCustomers(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void saveStoreMarketing(java.lang.String,com.salesmanager.shop.model.store.PersistableBrand,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeShoppingCartItem(java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveConfigurations(com.salesmanager.shop.admin.model.web.ConfigListWrapper,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderApi: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String jsonLogon(com.salesmanager.shop.model.customer.SecuredCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity setCredentials(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData displayMiniCart(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList children(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList attributes(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductQuantity(java.lang.String,java.lang.String,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity createAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUserList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox getBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox manageBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomer(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity captureOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.products.DigitalProductController: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String displaySysyemConfgurations(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List groups(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshAndGetAuthenticationToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList boxes(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.StaticContentController: org.springframework.http.ResponseEntity pageStaticContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getByfriendlyUrl(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String createManufacturer(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(com.salesmanager.shop.model.content.page.PersistableContentPage,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption createCustomerOption(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableAnonymousOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveCustomWeightBasedShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.search.SearchController: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayProductAttributes(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitPreAuthorizedOrder(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String saveCategory(com.salesmanager.shop.admin.model.catalog.Category,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity updateStatus(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity activateProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String createPage(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createPage(com.salesmanager.shop.model.content.page.PersistableContentPage,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshAndGetAuthenticationToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void signup(com.salesmanager.shop.model.marketplace.SignupStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.customers.CustomerController getCustomerController()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity createAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity pageImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void deleteStoreLogo(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String saveTaxConfiguration(com.salesmanager.core.model.tax.TaxConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData displayMiniCart(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadProduct(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.http.ResponseEntity delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController: java.lang.String deleteShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity changePassword(com.salesmanager.shop.store.security.PasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory create(com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity removeUser(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String displaySysyemConfgurations(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUserList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOrUpdateModule(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.products.ProductsController getProductsController()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity listTransactions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus rename(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAuthUserAddress(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String display(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.product.ShopProductController: java.lang.String display(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshAndGetAuthenticationToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductInventoryApi: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void addFolder(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String displayTaxConfiguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List listPermissions(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList list(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String displaySearch(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String displayPaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.payments.PaymentsController: java.lang.String displayPaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayHomeStub(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void updateVisible(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists pageExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary payment(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeCreate(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeCustomProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct createProduct(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProduct,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity updateCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController: java.lang.String saveShippingMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: java.util.List getCountry(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction refundPayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String paymentAction(com.salesmanager.shop.model.order.ShopOrder,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String saveProduct(com.salesmanager.shop.admin.model.catalog.Product,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String displayStoreBranding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCategoryCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox manageBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct create(com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategories(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStoreCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController: java.lang.String displayMerchantStoreCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteManufacturer(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ManufacturerController: org.springframework.http.ResponseEntity deleteManufacturer(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String saveShippingOptions(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayProductAttributes(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductAttributeController: java.lang.String displayProductAttributes(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayDenied(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayProductGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayHomeStub(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void deleteGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List permissions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer createCustomer(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsController: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void addLogo(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createBox(com.salesmanager.shop.model.content.box.PersistableContentBox,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage pageByName(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.group.ProductGroup creteGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi: com.salesmanager.shop.model.catalog.product.group.ProductGroup creteGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String addKeyword(com.salesmanager.shop.admin.model.catalog.Keyword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview create(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String updateCustomerAddress(com.salesmanager.shop.model.customer.address.Address,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String saveCategory(com.salesmanager.shop.admin.model.catalog.Category,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUsers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(java.lang.Long,com.salesmanager.shop.model.content.PersistableContentEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImagesUrl(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog getCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductReview(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String submitProductReview(com.salesmanager.shop.model.catalog.product.PersistableProductReview,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String basicLogon(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.lang.Long,java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String editManufacturer(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.configurations.CacheApi: void <init>()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String removeShoppingCartItem(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void updateV2(java.lang.Long,com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategoryList list(java.util.List,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview create(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct create(com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String saveShippingPackaging(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayStoreLanding(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String saveSystemConfigurations(com.salesmanager.core.model.system.MerchantConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String displayStoreLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.util.List list(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse indexProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCountries(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitOrder(java.lang.String,com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController: java.lang.String commitOrder(java.lang.String,com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void updatePackage(java.lang.String,com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomer(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String saveStoreLanding(com.salesmanager.shop.admin.model.merchant.StoreLanding,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeShoppingCartItem(java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct removeProductFromCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductApi: com.salesmanager.shop.model.catalog.product.ReadableProduct removeProductFromCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(java.lang.Integer,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryHierarchy(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxRate(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void saveStoreMarketing(java.lang.String,com.salesmanager.shop.model.store.PersistableBrand,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveEmailSettings(com.salesmanager.core.business.modules.email.EmailConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculateVariant(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.ReadableSelectedProductVariant,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.util.List getCategories(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void saveShippingOrigin(com.salesmanager.shop.model.references.PersistableAddress,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveConfigurations(com.salesmanager.shop.admin.model.web.ConfigListWrapper,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: java.lang.String displayOrders(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity createOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview create(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus rename(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(com.salesmanager.shop.model.content.page.PersistableContentPage,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayProductAttributes(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String countryName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController: java.lang.String countryName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createBox(com.salesmanager.shop.model.content.box.PersistableContentBox,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList removeProductFromGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteManufacturer(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void uploadMultipleFiles(org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption createProductOption(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: void saveExpedition(com.salesmanager.shop.model.shipping.ExpeditionConfiguration,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists pageExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.products.ProductKeywordsController: void <init>()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(int,int,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity checkUserCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitPreAuthorizedOrder(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveTemplate(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogEntry(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder folder(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxClass get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductReview(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImages(com.salesmanager.shop.admin.model.content.ProductImages,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController: java.lang.String saveProductImages(com.salesmanager.shop.admin.model.content.ProductImages,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String addProductToCategory(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption createProductOption(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.http.ResponseEntity delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueList optionsValues(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity activateProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController: org.springframework.http.ResponseEntity activateProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String editProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createV2(com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerAccount(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: java.lang.String displayAccounts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: java.lang.String displayCustomerDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void updateV2(java.lang.Long,com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void deleteCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: void updateOrderCustomer(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void deleteGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageManufacturers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getZones(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAuthUserAddress(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.search.SearchApi: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String listOrders(org.springframework.ui.Model,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.http.ResponseEntity delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi: org.springframework.http.ResponseEntity delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategoryList list(java.util.List,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void updateCatalog(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi: void updateCatalog(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption createCustomerOption(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void addFolder(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog getCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList removeProductFromGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity removeUser(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String displayStoreLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: com.salesmanager.shop.model.references.SizeReferences measures(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.product.ProductImageApi getProductImageApi()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser update(com.salesmanager.shop.model.user.PersistableUser,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductVariationApi: void update(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCurrency(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: java.lang.String displayCustomerDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void updateV2(java.lang.Long,com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void saveStoreMarketing(java.lang.String,com.salesmanager.shop.model.store.PersistableBrand,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeEdit(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData addShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ReadableContentFull content(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists pageExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String displayPaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerAccount(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController: java.lang.String displayCustomerAccount(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.order.OrderApi getOrderApi()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String updateShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem[],javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String createManufacturer(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview createProductReview(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProductReview,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String basicLogon(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct createProduct(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProduct,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.user.UserController getUserController()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List listPackages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageKeywords(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getByfriendlyUrl(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductApi: com.salesmanager.shop.model.catalog.product.ReadableProduct getByfriendlyUrl(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String saveMerchantStore(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore storeFull(java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createBox(com.salesmanager.shop.model.content.box.PersistableContentBox,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct addProductToCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listPaymentConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList list(java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.Long,java.util.List,java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.configurations.CacheController: void <init>()>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void signup(com.salesmanager.shop.model.marketplace.SignupStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getWeightBasedShippingMethod(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOrUpdateModule(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: java.lang.String displayFeaturedItems(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore storeFull(java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String deletePaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void createPackage(com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayLogon(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String editCustomShipping(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableAnonymousOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.http.ResponseEntity contact(com.salesmanager.shop.model.shop.ContactForm,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String displayShippingPackaging(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void storeSignupVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String autocomplete(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayHomeStub(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.LandingController: java.lang.String displayHomeStub(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: com.salesmanager.shop.model.system.IntegrationModuleConfiguration paymentModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(int,int,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus rename(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List pagesSummary(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: java.util.List pagesSummary(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderConfirmationController$$InterceptorProxy: java.lang.String displayConfirmation(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity setCredentials(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void createPackage(com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.group.ProductGroup creteGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getProvinces(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: java.lang.String displayCustomerDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePermissions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.util.List getCountries(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController: java.util.List getCountries(javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String displayProductReview(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getCreditCardDates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction capturePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi: com.salesmanager.shop.model.user.ReadableUser get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String saveManufacturer(com.salesmanager.shop.admin.model.catalog.Manufacturer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage pageByName(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void deleteCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi: void deleteCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePermissions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updateBox(com.salesmanager.shop.model.content.box.PersistableContentBox,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void updateGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi: void updateGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity removeMerchantStore(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity removeMerchantStore(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.http.ResponseEntity contact(com.salesmanager.shop.model.shop.ContactForm,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogs(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Optional,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String createBox(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentBoxesController: java.lang.String createBox(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String displayRegistration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct removeProductFromCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.shop.model.customer.address.AddressLocation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview createProductReview(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProductReview,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity createOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction refundPayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: void deleteProduct(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi getConfigurationsApi()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String saveShippingOptions(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeEdit(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.product.ProductVariationApi getProductVariationApi()>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: com.salesmanager.shop.model.marketplace.ReadableMarketPlace marketPlace(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi: com.salesmanager.shop.model.marketplace.ReadableMarketPlace marketPlace(java.lang.String,java.lang.String)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductQuantity(java.lang.String,java.lang.String,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String display(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUserList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeKeyword(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser update(com.salesmanager.shop.model.user.PersistableUser,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCustomRegion(java.lang.String,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData addShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController: com.salesmanager.shop.model.shoppingcart.ShoppingCartData addShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List listPermissions(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCategoryCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: java.lang.String displayListingPage(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void deleteStoreLogo(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductQuantity(java.lang.String,java.lang.String,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.product.definition.ReadableProductDefinition getV2(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionList options(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String saveCustomProductGroup(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List contents(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void saveStoreMarketing(java.lang.String,com.salesmanager.shop.model.store.PersistableBrand,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImagesUrl(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStoreCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueList optionsValues(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductPrice(java.lang.String,com.salesmanager.shop.model.catalog.product.ProductPriceEntity,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: java.lang.String displayCustomerDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void deletePackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShippingDetails(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String saveShippingPackaging(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String saveOptionSet(com.salesmanager.core.model.customer.attribute.CustomerOptionSet,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList attributes(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOrders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.entity.NameEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOptionValue(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.OptionsController: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShippingDetails(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String saveTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.customer.CustomerOrdersController: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAuthUserAddress(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String saveOrder(com.salesmanager.shop.admin.model.orders.Order,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculatePrice(java.lang.Long[],java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: com.salesmanager.shop.model.references.SizeReferences measures(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void uploadImages(java.lang.Long,org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductImageApi: void uploadImages(java.lang.Long,org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProduct(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePrices(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.optionset.ReadableProductOptionSet get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String saveCategory(com.salesmanager.shop.admin.model.catalog.Category,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getByfriendlyUrl(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.user.GroupsController getGroupsController()>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String basicLogon(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteRegion(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveEmailSettings(com.salesmanager.core.business.modules.email.EmailConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.configurations.ConfigurationController: java.lang.String saveEmailSettings(com.salesmanager.core.business.modules.email.EmailConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void addLogo(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getMonthsOfYear(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteFile(com.salesmanager.shop.model.content.ContentName,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity refundOrder(com.salesmanager.shop.admin.model.orders.Refund,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity getOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: java.lang.String displayFeaturedItems(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.lang.Long,java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void updateGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String saveTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.tax.TaxClassController: java.lang.String saveTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog createCatalog(com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOptionValue(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendDownloadEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderActionsControler: org.springframework.http.ResponseEntity sendDownloadEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList list(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String display(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String savePaymentMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.lang.String nextTransaction(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePermissions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void updateCatalog(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayContentImagesCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentImageController: java.lang.String displayContentImagesCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary payment(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity setCredentials(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerController: org.springframework.http.ResponseEntity setCredentials(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deletePrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogs(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Optional,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void addFolder(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String removeShoppingCartItem(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeEdit(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveCustomWeightBasedShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductApi: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryHierarchy(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryNoReference(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity activateProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox getBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String duplicateProduct(java.lang.Long,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.ProductController: java.lang.String duplicateProduct(java.lang.Long,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProduct(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCategoryCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List groups(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: java.lang.String displayAccounts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String sendEmail(com.salesmanager.shop.model.shop.ContactForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String saveOptionSet(com.salesmanager.core.model.customer.attribute.CustomerOptionSet,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List supportedLanguages(com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentBoxesController: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory create(com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createPage(com.salesmanager.shop.model.content.page.PersistableContentPage,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.util.List getCustomers(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String deleteShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity captureOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String displaySysyemConfgurations(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser getAuthUser(com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String getProductPrices(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory update(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deletePage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse deleteOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity updateStatus(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String saveUser(com.salesmanager.core.model.user.User,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: java.lang.String displayCustomerDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList children(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController: void <init>()>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.lang.Void create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi: java.lang.Void create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void uploadImages(java.lang.Long,org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List listPermissions(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: void create(java.lang.Long,com.salesmanager.shop.model.order.history.PersistableOrderStatusHistory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionValueExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.LandingController: java.lang.String displayLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview create(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxClassApi: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String paymentAction(com.salesmanager.shop.model.order.ShopOrder,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String listContentBoxes(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String displayPaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String editTaxClass(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.store.ContactController: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePrices(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionList options(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionList options(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.model.customer.CustomerPassword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayStoreLanding(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.FeaturedItemsController: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.shipping.PackageDetails getPackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String saveCategory(com.salesmanager.shop.admin.model.catalog.Category,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.categories.CategoryController: java.lang.String saveCategory(com.salesmanager.shop.admin.model.catalog.Category,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String editTaxClass(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void create(com.salesmanager.shop.model.customer.optin.PersistableCustomerOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String autocomplete(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxClass get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String saveShippingOptions(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController: java.lang.String saveShippingOptions(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void deleteGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String basicLogon(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String updateShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem[],javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.order.OrderRESTController: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxRate get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: java.lang.String displayListingPage(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String displayRegistration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableBrand getStoreMarketing(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity checkContentCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser update(com.salesmanager.shop.model.user.PersistableUser,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi: com.salesmanager.shop.model.user.ReadableUser update(com.salesmanager.shop.model.user.PersistableUser,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.product.definition.ReadableProductDefinition getV2(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.util.List getCategories(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getAuthUser(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptionsSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String displayRegistration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteManufacturer(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String createBox(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getAuthUser(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String displayCheckout(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogs(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.util.Optional,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox manageBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String saveCustomProductGroup(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity register(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.product.ShopProductController getShopProductController()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveStoreBranding(org.springframework.web.multipart.MultipartFile,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String duplicateProduct(java.lang.Long,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String displayCheckout(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: com.salesmanager.shop.model.shipping.ExpeditionConfiguration expedition(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShippingDetails(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.PersistableOrder createOrder(java.lang.String,com.salesmanager.shop.model.order.v0.PersistableOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String displayShippingPackaging(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addPrice(java.lang.String,com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuoteWeightItem,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deletePage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: void deletePage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePrices(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductReview(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionList options(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String saveCustomProductGroup(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview create(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List contents(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: java.util.List contents(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String saveCustomProductGroup(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void updateV2(java.lang.Long,com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomer(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog createCatalog(com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String getProductPrices(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void addOptionValueImage(java.lang.Long,org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String getDigitalProduct(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableAnonymousOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxClass(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getAuthUser(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.merchant.StoreLandingController: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxRate(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePermissions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUsers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: java.lang.String displayAccounts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.PermissionController: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption createCustomerOption(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String orderDetails(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveCustomWeightBasedShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.LightPersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductType get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductTypeApi: com.salesmanager.shop.model.catalog.product.type.ReadableProductType get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData displayMiniCart(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity getOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStores(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox getBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity setCredentials(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String displayOrderEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void addOptionValueImage(java.lang.Long,org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List listPackages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct create(com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryHierarchy(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory update(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerBillingAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeEdit(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse indexProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogEntry(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImagesUrl(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listCapturableOrders(java.time.LocalDate,java.time.LocalDate,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity checkAttributeType(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeEdit(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void deleteStoreLogo(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity setDefaultImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveStoreBranding(org.springframework.web.multipart.MultipartFile,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.StoreBrandingController: java.lang.String saveStoreBranding(org.springframework.web.multipart.MultipartFile,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.shipping.PackageDetails getPackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi: void move(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List shippingModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getMonthsOfYear(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String submitProductReview(com.salesmanager.shop.model.catalog.product.PersistableProductReview,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void removeCatalogEntry(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getProvinces(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity changePassword(com.salesmanager.shop.store.security.PasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCartItem(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String saveOptionSet(com.salesmanager.core.model.customer.attribute.CustomerOptionSet,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void updatePackage(java.lang.String,com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox getBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder folder(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxClass(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity checkUserCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsController: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String submitProductReview(com.salesmanager.shop.model.catalog.product.PersistableProductReview,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveConfigurations(com.salesmanager.shop.admin.model.web.ConfigListWrapper,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayStores(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String saveShippingPackaging(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void deleteStoreLogo(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.products.ProductAttributeController: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String displayCreateProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser getAuthUser(com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void updateEnabled(java.lang.Long,com.salesmanager.shop.model.user.PersistableUser,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus rename(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.util.List list(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity updateCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableAnonymousOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProduct(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String saveShippingOptions(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.user.PersistableUser,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String saveCategory(com.salesmanager.shop.admin.model.catalog.Category,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction refundPayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity getOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity createAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProduct(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity getOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String saveContentImages(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List groups(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String updateTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: java.lang.String displayFeaturedItems(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void updateGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String saveShippingConfiguration(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStores(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String registerCustomer(com.salesmanager.shop.model.customer.SecuredShopPersistableCustomer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption createProductOption(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer create(com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController: org.springframework.http.ResponseEntity deleteOptionSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String saveOrder(com.salesmanager.shop.admin.model.orders.Order,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String saveManufacturer(com.salesmanager.shop.admin.model.catalog.Manufacturer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview createProductReview(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProductReview,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController: com.salesmanager.shop.model.catalog.product.PersistableProductReview createProductReview(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProductReview,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void deleteGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController: java.lang.String displayMerchantStore(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.shop.model.customer.address.AddressLocation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.user.PersistableUser,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: java.lang.String displayOrders(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeCustomProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController: org.springframework.http.ResponseEntity removeCustomProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveConfigurations(com.salesmanager.shop.admin.model.web.ConfigListWrapper,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxRate get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductAttributeController: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String savePaymentMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String editTaxClass(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.util.List getCustomers(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeCreate(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String displaySearch(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.product.ProductImageApi: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createBox(com.salesmanager.shop.model.content.box.PersistableContentBox,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: com.salesmanager.shop.model.entity.Entity createBox(com.salesmanager.shop.model.content.box.PersistableContentBox,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxClass(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteBox(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData addShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImages(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction capturePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategoryList list(java.util.List,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductTypeList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder getOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalogCategoryEntry addCatalogEntry(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi: com.salesmanager.shop.model.catalog.catalog.ReadableCatalogCategoryEntry addCatalogEntry(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary calculateTotal(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getByfriendlyUrl(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List shippingModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void updateEnabled(java.lang.Long,com.salesmanager.shop.model.user.PersistableUser,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String editTaxRate(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity checkRegionCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String displayTaxClasses(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: java.lang.String displayProductReviews(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct createProduct(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProduct,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.util.List getCategories(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary calculateTotal(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String getManufacturers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity updateStatus(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.lang.Void create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String getPaymentMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductReviews(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void create(com.salesmanager.shop.model.customer.optin.PersistableCustomerOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductFromCategory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String displayCreateProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductPriceController: java.lang.String displayCreateProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.model.customer.CustomerPassword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List listPermissions(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption createCustomerOption(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List contents(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.system.IntegrationConfiguration shippingModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: java.lang.String displayCustomerDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore store(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.user.PersistableUser,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: com.salesmanager.shop.model.references.SizeReferences measures(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String countryName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: void create(java.lang.Long,com.salesmanager.shop.model.order.history.PersistableOrderStatusHistory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueList optionsValues(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueList optionsValues(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePermissions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String displayTaxClasses(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxClassController: java.lang.String displayTaxClasses(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: void deleteProduct(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: void deleteProduct(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus remove(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductReview(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String sendEmail(com.salesmanager.shop.model.shop.ContactForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOrUpdateModule(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.product.ProductVariationApi: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String displayProductReview(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getMonthsOfYear(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity pageImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String save(com.salesmanager.shop.admin.model.permission.GroupDetails,org.springframework.validation.BindingResult,java.util.Locale,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String editTaxRate(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus upload(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String,java.lang.Long,java.lang.String,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus upload(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String,java.lang.Long,java.lang.String,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.SecurityController: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentImageController: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String updateShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem[],javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus rename(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeShoppingCartItem(java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity moveCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity checkRegionCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void updateCatalog(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: org.springframework.http.ResponseEntity exists(java.lang.String)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox manageBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String saveCustomer(com.salesmanager.core.model.customer.Customer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String saveStoreLanding(com.salesmanager.shop.admin.model.merchant.StoreLanding,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity captureOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption createCustomerOption(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayAddProductToCategories(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUserList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxClassApi: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue createProductOptionValue(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayStores(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayProductGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String save(com.salesmanager.shop.admin.model.permission.GroupDetails,org.springframework.validation.BindingResult,java.util.Locale,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.product.ProductApi: void <init>()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String editManufacturer(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(java.lang.Integer,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController: java.lang.String displayMerchantStore(java.lang.Integer,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOrders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxClassApi: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue createCustomerOptionValue(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProduct(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct update(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void updatePackage(java.lang.String,com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer create(com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity updateStatus(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity setDefaultImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void signup(com.salesmanager.shop.model.marketplace.SignupStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void deletePackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi: void deletePackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController getShippingMethodsController()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList boxes(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveCustomWeightBasedShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: java.lang.String displayAccounts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitOrder(java.lang.String,com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void password(com.salesmanager.shop.model.user.UserPassword,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi: void password(com.salesmanager.shop.model.user.UserPassword,java.lang.Long)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String createManufacturer(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview createProductReview(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProductReview,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deletePage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi getMarketPlaceApi()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore storeFull(java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: com.salesmanager.shop.model.shipping.ExpeditionConfiguration expedition(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity updateStatus(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.util.List list(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList addProductToGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String listContentPages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCountries(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus upload(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String,java.lang.Long,java.lang.String,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList list(java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.Long,java.util.List,java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptinCustomer(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.system.SystemRESTController: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptinCustomer(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.security.SecurityApi getSecurityApi()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String sendEmail(com.salesmanager.shop.model.shop.ContactForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory update(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview createProductReview(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProductReview,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String autocomplete(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse contact(java.lang.String,com.salesmanager.shop.model.shop.ContactForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String editManufacturer(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ManufacturerController: java.lang.String editManufacturer(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: java.lang.String displayProducts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String deletePaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer create(com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.shop.model.references.ReadableAddress shippingOrigin(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String countryName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableBrand getStoreMarketing(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void updateEnabled(java.lang.Long,com.salesmanager.shop.model.user.PersistableUser,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String saveOptionSet(com.salesmanager.core.model.customer.attribute.CustomerOptionSet,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder folder(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.model.customer.CustomerPassword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.populator.customer.ReadableCustomerList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionValueExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity checkRegionCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String saveShippingOptions(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity moveCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.categories.CategoryController: org.springframework.http.ResponseEntity moveCategory(javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStores(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer customerInformation(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List contents(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUsers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity removeUser(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(java.lang.Long,com.salesmanager.shop.model.content.PersistableContentEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser update(com.salesmanager.shop.model.user.PersistableUser,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser getAuthUser(com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List supportedLanguages(com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse deleteOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String updateTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayDenied(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String saveShippingPackaging(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductFromCategory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory create(com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: com.salesmanager.shop.model.system.IntegrationModuleConfiguration paymentModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadProduct(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.FilesController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.system.ContactApi getContactApi()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String editManufacturer(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity createOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitOrder(java.lang.String,com.salesmanager.shop.model.order.ShopOrder,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImages(com.salesmanager.shop.admin.model.content.ProductImages,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String displayTaxConfiguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String saveUser(com.salesmanager.core.model.user.User,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory update(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String editAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi getResetCustomerPasswordApi()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String createPage(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.GroupsController: java.lang.String displayGroup(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.PersistableOrder createOrder(java.lang.String,com.salesmanager.shop.model.order.v0.PersistableOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.http.ResponseEntity delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String returnPayPalPayment(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController: java.lang.String returnPayPalPayment(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableAnonymousOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController: org.springframework.http.ResponseEntity pageProductImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductInventoryApi: com.salesmanager.shop.model.entity.ReadableEntityList get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void saveStoreMarketing(java.lang.String,com.salesmanager.shop.model.store.PersistableBrand,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionValueExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updateBox(com.salesmanager.shop.model.content.box.PersistableContentBox,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrdersController$$InterceptorProxy: java.lang.String displayOrders(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v0.customer.CustomerRESTController getCustomerRESTController()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImages(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController: java.lang.String displayProductImages(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getProduct(java.lang.String,java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String createBox(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: com.salesmanager.shop.model.marketplace.ReadableMarketPlace marketPlace(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String displayCreateProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.StaticContentController: org.springframework.http.ResponseEntity removeFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String getPaymentMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String displayStoreBranding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProduct(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String displayRegistration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String createManufacturer(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List supportedLanguages(com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String listOrders(org.springframework.ui.Model,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsController: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: java.lang.String displayListingPage(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStoreCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveStoreBranding(org.springframework.web.multipart.MultipartFile,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity register(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List listPackages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueList optionsValues(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String saveStoreLanding(com.salesmanager.shop.admin.model.merchant.StoreLanding,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageManufacturers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ManufacturerController: org.springframework.http.ResponseEntity pageManufacturers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageRelatedItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: void deleteCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(java.lang.Long,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void create(com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveTemplate(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteContent(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.product.ProductTypeApi getProductTypeApi()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice price(java.lang.Long,com.salesmanager.shop.model.catalog.product.ProductPriceRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductApi: com.salesmanager.shop.model.catalog.product.ReadableProductPrice price(java.lang.Long,com.salesmanager.shop.model.catalog.product.ProductPriceRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShipping(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController: org.springframework.http.ResponseEntity pageCustomShipping(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductTypeList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageManufacturers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.categories.CategoryController: org.springframework.http.ResponseEntity pageCategories(javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String saveCustomProductGroup(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String displayCheckout(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionList options(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String saveCustomer(com.salesmanager.core.model.customer.Customer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveCustomWeightBasedShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController: java.lang.String saveCustomWeightBasedShippingMethod(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String displayShippingOrigin(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String deleteShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog createCatalog(com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String submitProductReview(com.salesmanager.shop.model.catalog.product.PersistableProductReview,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.user.GroupsController: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox getBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteBox(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List shippingModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String save(com.salesmanager.shop.admin.model.permission.GroupDetails,org.springframework.validation.BindingResult,java.util.Locale,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity checkRegionCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductsController: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProductWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitPreAuthorizedOrder(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity moveCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: com.salesmanager.shop.model.system.IntegrationModuleConfiguration paymentModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity checkContentCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String saveStoreLanding(com.salesmanager.shop.admin.model.merchant.StoreLanding,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.group.ProductGroup creteGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String returnPayPalPayment(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCategoryCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.categories.CategoryController: org.springframework.http.ResponseEntity checkCategoryCode(javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String saveCategory(com.salesmanager.shop.admin.model.catalog.Category,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void saveShippingOrigin(com.salesmanager.shop.model.references.PersistableAddress,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity pagePrices(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getLanguages(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List supportedLanguages(com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: java.lang.String displayProductWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteManufacturer(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.products.ProductAttributeController getProductAttributeController()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayHomeStub(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.entity.UniqueEntity,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String editCustomShipping(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductVariationApi: void create(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: java.lang.String displayAccounts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductQuantity(java.lang.String,java.lang.String,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String displayShippingOrigin(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createPage(com.salesmanager.shop.model.content.page.PersistableContentPage,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryWithReference(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String displayTaxConfiguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String download(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteManufacturer(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity checkRegionCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController: org.springframework.http.ResponseEntity checkRegionCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductReviews(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String saveFiles(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String editAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity changePassword(com.salesmanager.shop.store.security.PasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listShippingConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptionsSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController: org.springframework.http.ResponseEntity pageOptionsSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String getDigitalProduct(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByGroup(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.order.OrderShippingApi getOrderShippingApi()>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: java.lang.String displayContent(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder folder(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.lang.String nextTransaction(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getByfriendlyUrl(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer customerInformation(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImages(com.salesmanager.shop.admin.model.content.ProductImages,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.product.definition.ReadableProductDefinition getV2(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String saveProductPrice(com.salesmanager.shop.admin.model.catalog.ProductPrice,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String displayShippingPackaging(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryNoReference(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCustomRegion(java.lang.String,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController: java.lang.String addCustomRegion(java.lang.String,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayAttributeEdit(java.lang.Long,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.AdminController: void <init>()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData displayMiniCart(java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity moveCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.shipping.PackageDetails getPackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview create(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String download(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.lang.String nextTransaction(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByManufacturer(int,int,java.lang.String,java.lang.String,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String displayDenied(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity removeMerchantStore(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore store(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String displaySearch(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String displayOrderEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String save(com.salesmanager.shop.admin.model.permission.GroupDetails,org.springframework.validation.BindingResult,java.util.Locale,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String download(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerBillingAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerBillingAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImages(com.salesmanager.shop.admin.model.content.ProductImages,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity pageUsers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String displayProductReview(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void saveShippingOrigin(com.salesmanager.shop.model.references.PersistableAddress,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.util.List getCategories(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryHierarchy(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayProductGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore store(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String saveStoreLanding(com.salesmanager.shop.admin.model.merchant.StoreLanding,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer customerInformation(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.products.ProductImagesController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionValueExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void createPackage(com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String displaySysyemConfgurations(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listPaymentConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: com.salesmanager.shop.model.system.ReadableOptin create(com.salesmanager.shop.model.system.PersistableOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.http.ResponseEntity contact(com.salesmanager.shop.model.shop.ContactForm,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableAnonymousOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse store(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ReadableContentFull content(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.lang.String nextTransaction(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void createPackage(com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void addFolder(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCurrency(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitPreAuthorizedOrder(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController: java.lang.String commitPreAuthorizedOrder(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void deleteGroup(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshAndGetAuthenticationToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: void deleteCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity createOptionValue(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList get(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer createManufacturer(java.lang.String,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void saveShippingOrigin(com.salesmanager.shop.model.references.PersistableAddress,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview create(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String saveFile(com.salesmanager.shop.admin.model.digital.ProductFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStores(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String saveFile(com.salesmanager.shop.admin.model.digital.ProductFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List listPackages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,org.springframework.ui.Model,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity updateStatus(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String updateTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String paymentAction(com.salesmanager.shop.model.order.ShopOrder,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity activateProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.user.LoginController: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShipping(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteManufacturer(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String unauthorized(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity getOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String displayTaxClasses(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct removeProductFromCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void create(com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.variation.ReadableProductVariation get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus remove(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogEntry(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsController: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void deleteCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerBillingAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController: java.lang.String displayCustomerBillingAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductType get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage page(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: void printInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore storeFull(java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String countryName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayContentImagesCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String displayPaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerAccount(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity listTransactions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary payment(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUserList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String displayTaxConfiguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.tax.TaxConfigurationController: java.lang.String displayTaxConfiguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUserList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionValueExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController: java.lang.String displayUserEdit(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory update(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity createOptionValue(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void updateGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse contact(java.lang.String,com.salesmanager.shop.model.shop.ContactForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void uploadMultipleFiles(org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String saveCustomer(com.salesmanager.core.model.customer.Customer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus upload(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String,java.lang.Long,java.lang.String,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.product.ProductReviewApi getProductReviewApi()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.populator.customer.ReadableCustomerList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: void create(java.lang.Long,com.salesmanager.shop.model.order.history.PersistableOrderStatusHistory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: java.util.List categoryVariantList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String displayShippingOrigin(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.util.List getCategories(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController: java.util.List getCategories(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue createCustomerOptionValue(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getAuthUser(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String saveCustomer(com.salesmanager.core.model.customer.Customer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: com.salesmanager.shop.model.system.ReadableOptin create(com.salesmanager.shop.model.system.PersistableOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.OptionsValueController: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus rename(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String displayStoreLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayStoreLanding(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: com.salesmanager.shop.model.system.IntegrationModuleConfiguration paymentModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateShipping(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderController: com.salesmanager.shop.model.order.ReadableShopOrder calculateShipping(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.shop.model.references.ReadableAddress shippingOrigin(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String basicLogon(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxClasses(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity pageImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getLanguages(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void createPackage(com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi: void createPackage(com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String editAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.PersistableOrder createOrder(java.lang.String,com.salesmanager.shop.model.order.v0.PersistableOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct update(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.order.OrderShippingApi: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String updateTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.tax.TaxClassController: java.lang.String updateTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deletePage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductFromCategory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v0.order.OrderRESTController: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveEmailSettings(com.salesmanager.core.business.modules.email.EmailConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageRelatedItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.RelatedItemsController: org.springframework.http.ResponseEntity pageRelatedItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: java.lang.String displayProductReviews(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.shop.model.customer.address.AddressLocation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImagesUrl(com.salesmanager.core.model.catalog.product.image.ProductImage,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentImageController: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList list(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String updateShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem[],javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String saveShippingPackaging(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController: java.lang.String saveShippingPackaging(com.salesmanager.core.model.shipping.ShippingConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary payment(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity removeUser(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategoryList list(java.util.List,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProducts(int,int,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String saveOrder(com.salesmanager.shop.admin.model.orders.Order,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.system.IntegrationConfiguration shippingModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(com.salesmanager.shop.model.content.page.PersistableContentPage,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getWeightBasedShippingMethod(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity pageImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOption(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct addProductToCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String updateCustomerAddress(com.salesmanager.shop.model.customer.address.Address,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String updateShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem[],javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController: java.lang.String updateShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem[],javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String jsonLogon(com.salesmanager.shop.model.customer.SecuredCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionValueExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void removeCatalogEntry(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi: void removeCatalogEntry(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxRate get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String displayShippingOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String display(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void updatePackage(java.lang.String,com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,org.springframework.ui.Model,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse deleteOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductReview(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductReviewController: org.springframework.http.ResponseEntity deleteProductReview(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String savePaymentMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String editProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String displaySysyemConfgurations(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValues(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.populator.customer.ReadableCustomerList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi: com.salesmanager.shop.populator.customer.ReadableCustomerList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String removeShoppingCartItem(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: java.lang.String displayContent(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteFile(com.salesmanager.shop.model.content.ContentName,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: java.lang.String getDigitalProduct(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getZones(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController: com.salesmanager.shop.model.catalog.product.ReadableProductList getProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview createProductReview(java.lang.String,com.salesmanager.shop.model.catalog.product.PersistableProductReview,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: com.salesmanager.shop.model.system.ReadableOptin create(com.salesmanager.shop.model.system.PersistableOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity pageAttributes(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore storeFull(java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalogCategoryEntry addCatalogEntry(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void addLogo(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategoryList list(java.util.List,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateOptionValue(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer createCustomer(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController getSystemConfigurationController()>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.http.ResponseEntity contact(com.salesmanager.shop.model.shop.ContactForm,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductEdit(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionList options(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getByfriendlyUrl(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String returnPayPalPayment(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: com.salesmanager.shop.model.shipping.ExpeditionConfiguration expedition(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogEntry(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.http.ResponseEntity delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPasswordSecurityQtn(com.salesmanager.shop.admin.model.userpassword.UserReset,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void updateCatalog(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct addProductToCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductApi: com.salesmanager.shop.model.catalog.product.ReadableProduct addProductToCategory(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity changePassword(com.salesmanager.shop.store.security.PasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: java.lang.String displayProductReviews(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionList options(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturer get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshAndGetAuthenticationToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer createManufacturer(java.lang.String,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomer(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List shippingModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImagesUrl(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String addProductToCategory(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void removeCatalogEntry(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity createAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList children(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createPage(com.salesmanager.shop.model.content.page.PersistableContentPage,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: java.lang.String displayAccounts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.shipping.PackageDetails getPackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.tax.TaxClassController getTaxClassController()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus upload(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String,java.lang.Long,java.lang.String,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteContent(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List pagesSummary(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String displayPaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategories(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity checkUserCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity setCredentials(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayStoreLanding(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.util.List getCustomers(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String paymentAction(com.salesmanager.shop.model.order.ShopOrder,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue createProductOptionValue(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.product.ShopProductRESTController: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue createProductOptionValue(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageManufacturers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct update(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductType get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: java.lang.String displayContent(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String displayTaxClasses(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList list(java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.Long,java.util.List,java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listPaymentConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String saveProductPrice(com.salesmanager.shop.admin.model.catalog.ProductPrice,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String addProductToCategory(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List groups(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.security.SecurityApi: java.util.List groups()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String updateTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.util.List getCategories(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void addFolder(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: void addFolder(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: java.lang.String displayAccounts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.configurations.CacheController: java.lang.String displayAccounts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String editManufacturer(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: void create(java.lang.Long,com.salesmanager.shop.model.order.history.PersistableOrderStatusHistory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayStoreLanding(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String sendEmail(com.salesmanager.shop.model.shop.ContactForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList attributes(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String saveProduct(com.salesmanager.shop.admin.model.catalog.Product,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getZones(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryNoReference(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductPrice(java.lang.String,com.salesmanager.shop.model.catalog.product.ProductPriceEntity,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList children(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi getContentAdministrationApi()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice price(java.lang.Long,com.salesmanager.shop.model.catalog.product.ProductPriceRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.group.ProductGroup creteGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String orderDetails(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void signup(com.salesmanager.shop.model.marketplace.SignupStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi: void signup(com.salesmanager.shop.model.marketplace.SignupStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity checkContentCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: com.salesmanager.shop.model.references.SizeReferences measures(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void addFolder(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String jsonLogon(com.salesmanager.shop.model.customer.SecuredCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String download(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList listByStore(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void create(com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String editTaxClass(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct create(com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductApi: com.salesmanager.shop.model.catalog.product.PersistableProduct create(com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity delete(org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void saveStoreMarketing(java.lang.String,com.salesmanager.shop.model.store.PersistableBrand,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: void saveStoreMarketing(java.lang.String,com.salesmanager.shop.model.store.PersistableBrand,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists boxExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: void update(java.lang.String,com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.user.PersistableUser,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String updateTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi: void <init>()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(java.lang.Long,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderDownloadController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String displayTaxConfiguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageRelatedItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String unauthorized(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct create(com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: java.lang.String commitPreAuthorizedOrder(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus upload(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String,java.lang.Long,java.lang.String,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadFile(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity pageUsers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: void create(java.lang.Long,com.salesmanager.shop.model.order.history.PersistableOrderStatusHistory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity getOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.product.ProductReviewApi: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String addKeyword(com.salesmanager.shop.admin.model.catalog.Keyword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity listTransactions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptionsSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: void deleteProduct(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayContentImagesCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: java.util.List getCustomers(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.controller.customer.CustomerProductReviewController getCustomerProductReviewController()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List pagesSummary(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String saveProductPrice(com.salesmanager.shop.admin.model.catalog.ProductPrice,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void updateEnabled(java.lang.Long,com.salesmanager.shop.model.user.PersistableUser,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String paymentAction(com.salesmanager.shop.model.order.ShopOrder,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: java.lang.String orderDetails(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String saveCustomer(com.salesmanager.core.model.customer.Customer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity moveCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalogCategoryEntry addCatalogEntry(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImagesUrl(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayCustomProductGroup(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String jsonLogon(com.salesmanager.shop.model.customer.SecuredCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductTypeList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity activateProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.util.List getCategories(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void uploadImages(java.lang.Long,org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity createOptionValue(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listShippingConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String saveCustomer(com.salesmanager.core.model.customer.Customer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.customers.CustomerController: java.lang.String saveCustomer(com.salesmanager.core.model.customer.Customer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductReviews(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList getCatalogEntry(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity createV2(com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity moveCategory(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory update(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.category.CategoryApi: com.salesmanager.shop.model.catalog.category.PersistableCategory update(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentPagesController: org.springframework.http.ResponseEntity pageStaticContent(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductInventoryApi: void update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(java.lang.Long,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsValueController: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String saveCustomProductGroup(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String displayStoreBranding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptinCustomer(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.customer.attribute.CustomerOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity pageUsers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryNoReference(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void updateAddress(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsController: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity addItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct update(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductApi: com.salesmanager.shop.model.catalog.product.PersistableProduct update(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String saveProductImages(com.salesmanager.shop.admin.model.content.ProductImages,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.product.ProductRelationshipApi: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List shippingModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList children(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList list(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList list(java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.Long,java.util.List,java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: void deleteProduct(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: java.lang.String displayCategoryNoReference(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController: java.lang.String displayCategoryNoReference(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String getPaymentMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: java.util.List listTransactions(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity removeUser(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.product.ProductGroupApi getProductGroupApi()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getProduct(java.lang.String,java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String deletePaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity checkUserCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.ContactApi$$InterceptorProxy: org.springframework.http.ResponseEntity contact(com.salesmanager.shop.model.shop.ContactForm,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String getContentImages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void createPackage(com.salesmanager.core.model.shipping.PackageDetails,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxRate(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String displayOrderEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderControler: java.lang.String displayOrderEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listPaymentConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String displayStoreBranding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.lang.Void create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse store(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String paymentAction(com.salesmanager.shop.model.order.ShopOrder,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController: java.lang.String paymentAction(com.salesmanager.shop.model.order.ShopOrder,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity createAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity createAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: void saveExpedition(com.salesmanager.shop.model.shipping.ExpeditionConfiguration,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: com.salesmanager.shop.model.shipping.ExpeditionConfiguration expedition(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData addShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String displayProductReview(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.FilesController$$InterceptorProxy: byte[] downloadProduct(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String getProductPrices(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ReadableContentFull content(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptionsSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity createOptionValue(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer createManufacturer(java.lang.String,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshAndGetAuthenticationToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCustomer(java.lang.Long,java.util.Optional,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String addKeyword(com.salesmanager.shop.admin.model.catalog.Keyword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String displayOrderEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,org.springframework.ui.Model,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxRate(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShippingDetails(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: java.lang.String displayContentImagesCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String displaySearch(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void deletePackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.configurations.CacheController: org.springframework.http.ResponseEntity clearCache(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String saveCategory(com.salesmanager.shop.admin.model.catalog.Category,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deletePrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox manageBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.util.List listShippingConfigurations(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String zoneName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayAccountsConfguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String zoneName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData addShoppingCartItem(com.salesmanager.shop.model.shoppingcart.ShoppingCartItem,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: org.springframework.http.ResponseEntity optionExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteContent(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity createOptionValue(com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct update(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String editProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void uploadMultipleFiles(org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: void uploadMultipleFiles(org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder getOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalogCategoryEntry addCatalogEntry(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity getOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImages(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayProductGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController: java.lang.String displayProductGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductTypeList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductTypeList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: void signup(com.salesmanager.shop.model.marketplace.SignupStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String display(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: java.lang.String saveFiles(com.salesmanager.shop.admin.model.content.ContentFiles,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction authorizePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String displayCreateProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void deleteCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableBrand getStoreMarketing(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ValueList autocomplete(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(com.salesmanager.shop.model.content.page.PersistableContentPage,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPasswordSecurityQtn(com.salesmanager.shop.admin.model.userpassword.UserReset,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.variation.PersistableProductVariation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCountries(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getAuthUser(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi: com.salesmanager.shop.model.customer.ReadableCustomer getAuthUser(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List pagesSummary(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.product.LightPersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayStores(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: java.util.List getAll(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String editProductPrice(long,long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageKeywords(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: void delete(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerOrdersController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductTypeList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductTypeApi: com.salesmanager.shop.model.catalog.product.type.ReadableProductTypeList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String saveOptionSet(com.salesmanager.core.model.customer.attribute.CustomerOptionSet,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,org.springframework.ui.Model,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List supportedLanguages(com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity checkAttributeType(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageTaxRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: com.salesmanager.shop.model.system.ReadableOptin create(com.salesmanager.shop.model.system.PersistableOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: java.lang.String displayProductAttributes(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroup(java.lang.Integer,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String displayTaxRates(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getProduct(java.lang.String,java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.product.definition.ReadableProductDefinition getV2(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity activateProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUserList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendDownloadEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity refundOrder(com.salesmanager.shop.admin.model.orders.Refund,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder folder(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse deleteOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getCategory(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.product.ShopProductController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculatePrice(java.lang.Long[],java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory create(com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String getPaymentMethods(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity register(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getCountry(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.references.ReferencesApi: java.util.List getCountry(javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity pageUsers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists pageExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity captureOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory create(com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.model.customer.CustomerPassword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeCustomProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List permissions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder images(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String listContentBoxes(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentBoxesController: java.lang.String listContentBoxes(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String unauthorized(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.LoginController: java.lang.String unauthorized(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String saveShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.DigitalProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.DigitalProductController: org.springframework.http.ResponseEntity removeFile(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity updateStatus(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderActionsControler: org.springframework.http.ResponseEntity updateStatus(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse store(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void addLogo(java.lang.String,org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList children(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayHomeStub(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerAccount(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList list(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity removeImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void delete(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductReviews(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity activateProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableShopOrder calculateShipping(com.salesmanager.shop.model.order.ShopOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: com.salesmanager.shop.model.system.IntegrationModuleConfiguration paymentModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerAccount(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List listPackages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: void updateVisible(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String save(com.salesmanager.shop.admin.model.permission.GroupDetails,org.springframework.validation.BindingResult,java.util.Locale,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.GroupsController: java.lang.String save(com.salesmanager.shop.admin.model.permission.GroupDetails,org.springframework.validation.BindingResult,java.util.Locale,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: void updateV2(java.lang.Long,com.salesmanager.shop.model.catalog.product.product.definition.PersistableProductDefinition,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String updateTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void uploadMultipleFiles(org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary payment(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.PersistableOrder createOrder(java.lang.String,com.salesmanager.shop.model.order.v0.PersistableOrder,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String saveUser(com.salesmanager.core.model.user.User,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.variation.ReadableProductVariation get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderShippingApi$$InterceptorProxy: com.salesmanager.shop.model.order.shipping.ReadableShippingSummary shipping(java.lang.String,com.salesmanager.shop.model.customer.address.AddressLocation,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductPrice calculateVariant(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.ReadableSelectedProductVariant,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,org.springframework.ui.Model,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String getManufacturers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse contact(java.lang.String,com.salesmanager.shop.model.shop.ContactForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveStoreBranding(org.springframework.web.multipart.MultipartFile,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOrUpdateModule(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi: com.salesmanager.shop.model.customer.PersistableCustomerReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.configurations.ConfigurationsApi$$InterceptorProxy: java.lang.Void create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity changePassword(com.salesmanager.shop.store.security.PasswordRequest,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String displayRegistration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String save(com.salesmanager.shop.admin.model.permission.GroupDetails,org.springframework.validation.BindingResult,java.util.Locale,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String deleteShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUsers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: java.lang.String displayProductReview(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String saveShippingMethod(com.salesmanager.core.model.system.IntegrationConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: void update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi getProductOptionSetApi()>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getCreditCardDates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.util.List getZones(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerRegistrationController: java.util.List getZones(javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImages(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String unauthorized(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList addProductToGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity setDefaultImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: java.lang.String autocomplete(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.search.SearchController: java.lang.String autocomplete(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayStoreLanding(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList pages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductType get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStoreList children(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: com.salesmanager.shop.model.store.ReadableMerchantStoreList children(java.lang.String,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getProvinces(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview create(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: java.lang.String displayProducts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void removeOptionValueImage(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deletePrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(java.lang.Long,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: org.springframework.http.ResponseEntity saveCustomerAttributes(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.box.ReadableContentBox manageBoxByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory create(com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayProductCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue createCustomerOptionValue(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String saveSystemConfigurations(com.salesmanager.core.model.system.MerchantConfig,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxClass(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.tax.TaxClassController: org.springframework.http.ResponseEntity removeTaxClass(javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.optionset.ReadableProductOptionSet get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity register(com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer createCustomer(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.user.PersistableUser,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.admin.model.secutity.Password,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerAccount(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageStaticContent(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.admin.controller.tax.TaxClassController: void <init>()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void deleteStoreLogo(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: void deleteStoreLogo(java.lang.String,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction authorizePayment(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer update(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String displayOrderEdit(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void password(com.salesmanager.shop.model.user.UserPassword,java.lang.Long,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptinCustomer(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.shipping.PackageDetails getPackage(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer createCustomer(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser getAuthUser(com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsController: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getProduct(java.lang.String,java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getCreditCardDates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity refundOrder(com.salesmanager.shop.admin.model.orders.Refund,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueList optionsValues(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.store.StoreContactRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse contact(java.lang.String,com.salesmanager.shop.model.shop.ContactForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.admin.controller.configurations.CacheController$$InterceptorProxy: org.springframework.http.ResponseEntity clearCache(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: org.springframework.http.ResponseEntity pageUsers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String displayCustomerChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController: java.lang.String displayCustomerChangePassword(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxClass,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeCustomProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String zoneName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List groups(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.OptionsValueController: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void passwordResetVerify(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String displayKeywords(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage page(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOrUpdateModule(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setViewName(java.lang.String)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryCreate(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategories(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: com.salesmanager.shop.model.system.IntegrationModuleConfiguration paymentModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String createPage(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.ContentPagesController: java.lang.String createPage(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.EntityExists boxExists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer customerInformation(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity refundOrder(com.salesmanager.shop.admin.model.orders.Refund,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.search.SearchController$$InterceptorProxy: com.salesmanager.shop.model.catalog.SearchProductList search(com.salesmanager.shop.model.catalog.SearchProductRequest,org.springframework.ui.Model,com.salesmanager.core.model.reference.language.Language,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCustomRegion(java.lang.String,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String jsonLogon(com.salesmanager.shop.model.customer.SecuredCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.customer.CustomerLoginController: java.lang.String jsonLogon(com.salesmanager.shop.model.customer.SecuredCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.customer.CustomerRESTController: com.salesmanager.shop.model.customer.ReadableCustomer getCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.configurations.SystemConfigurationController$$InterceptorProxy: java.lang.String displaySysyemConfgurations(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v1.ReadableOrderConfirmation checkout(java.lang.String,com.salesmanager.shop.model.order.v1.PersistableAnonymousOrder,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: java.lang.String displayProductImagesUrl(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ProductImagesController: java.lang.String displayProductImagesUrl(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity checkRegionCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer createCustomer(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse indexProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: java.util.List list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi$$InterceptorProxy: com.salesmanager.shop.model.shipping.ExpeditionConfiguration expedition(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shipping.ShippingExpeditionApi: com.salesmanager.shop.model.shipping.ExpeditionConfiguration expedition(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String listContentPages(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage pageByName(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.SecurityController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: void updateOrderCustomer(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String displayCategoryHierarchy(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.categories.CategoryController: java.lang.String displayCategoryHierarchy(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List shippingModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void create(com.salesmanager.shop.model.customer.optin.PersistableCustomerOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List groups(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductFromCategory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setView(org.springframework.web.servlet.View)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteManufacturer(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void <init>()>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: void deleteCatalog(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String duplicateProduct(java.lang.Long,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: com.salesmanager.shop.model.catalog.ProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.category.ShoppingCategoryController: com.salesmanager.shop.model.catalog.ProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.products.ProductReviewController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductReviews(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionApi: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.configurations.CacheApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: void delete(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String displayStoreLanding(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.merchant.StoreLandingController$$InterceptorProxy: java.lang.String saveStoreLanding(com.salesmanager.shop.admin.model.merchant.StoreLanding,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayStoreLanding(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart getByCode(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.admin.model.secutity.Password,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List groups(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void create(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void addFolder(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: java.lang.String saveContent(com.salesmanager.core.model.content.Content,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductFromCategory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.FeaturedItemsController: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayAccountsConfguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.category.ShoppingCategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.marketplace.MarketPlaceApi$$InterceptorProxy: com.salesmanager.shop.model.marketplace.ReadableMarketPlace marketPlace(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.category.ShoppingCategoryRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void uploadImages(java.lang.Long,org.springframework.web.multipart.MultipartFile[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxConfigurationController$$InterceptorProxy: java.lang.String saveTaxConfiguration(com.salesmanager.core.model.tax.TaxConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.tax.TaxConfigurationController: java.lang.String saveTaxConfiguration(com.salesmanager.core.model.tax.TaxConfiguration,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String saveOrder(com.salesmanager.shop.admin.model.orders.Order,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalogCategoryEntry addCatalogEntry(java.lang.Long,com.salesmanager.shop.model.catalog.catalog.PersistableCatalogCategoryEntry,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: java.lang.String countryName(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShippingDetails(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity pageOptionsSet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: java.lang.String displayShippingConfigs(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String saveConfigurations(com.salesmanager.shop.admin.model.web.ConfigListWrapper,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: java.lang.String paymentAction(com.salesmanager.shop.model.order.ShopOrder,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.api.v1.user.ResetUserPasswordApi: void <init>()>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String displayTaxRates(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity removeContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary calculateTotal(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomer(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore store(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.store.MerchantStoreApi: com.salesmanager.shop.model.store.ReadableMerchantStore store(java.lang.String,java.lang.String)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductTypeApi: com.salesmanager.shop.model.entity.Entity create(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: void deleteImage(java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(com.salesmanager.shop.model.content.page.PersistableContentPage,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxClassApi: void delete(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: void update(com.salesmanager.core.model.merchant.MerchantStore,java.lang.Long,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.tax.PersistableTaxRate,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerProductReviewController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview create(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: org.springframework.http.ResponseEntity removeTaxClass(javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getAuthUser(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: java.lang.String displayStoreLanding(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.AdminController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteFile(com.salesmanager.shop.model.content.ContentName,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String updateCustomerAddress(com.salesmanager.shop.model.customer.address.Address,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsSetController$$InterceptorProxy: org.springframework.http.ResponseEntity updateOrder(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOptionsController$$InterceptorProxy: java.lang.String displayShippingOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: void updateGroup(com.salesmanager.shop.model.catalog.product.group.ProductGroup,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: java.lang.String deletePaymentMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String saveTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategoryList list(java.util.List,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.order.ShoppingOrderPaymentController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getModelAndViewInstance()>-><org.springframework.web.servlet.ModelAndView: void setStatus(org.springframework.http.HttpStatus)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.optionset.ReadableProductOptionSet get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi: com.salesmanager.shop.model.catalog.product.attribute.optionset.ReadableProductOptionSet get(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: java.lang.String displayCustomers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.controller.content.ShopContentController$$InterceptorProxy: java.lang.String displayContent(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue createCustomerOptionValue(java.lang.String,com.salesmanager.shop.model.customer.attribute.PersistableCustomerOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList boxes(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue createProductOptionValue(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: void create(java.lang.Long,com.salesmanager.shop.model.order.history.PersistableOrderStatusHistory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOptions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.system.OptinApi$$InterceptorProxy: com.salesmanager.shop.model.system.ReadableOptin create(com.salesmanager.shop.model.system.PersistableOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProductReview create(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProductReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String saveShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayAccountsConfguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.configurations.ConfigurationController: java.lang.String displayAccountsConfguration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.model.content.ContentFolder folder(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v0.product.ProductItemsRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductItemsByManufacturer(int,int,java.lang.String,java.lang.String,java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: org.springframework.http.ResponseEntity checkStoreCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: void updateEnabled(java.lang.Long,com.salesmanager.shop.model.user.PersistableUser,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableMerchantStore store(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity activateProductGroup(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void updatePage(java.lang.Long,com.salesmanager.shop.model.content.PersistableContentEntity,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductInstanceApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String saveTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.admin.controller.tax.TaxRatesController: java.lang.String saveTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: com.salesmanager.shop.model.store.ReadableBrand getStoreMarketing(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.user.UserController$$InterceptorProxy: java.lang.String displayUserEdit(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList addProductToGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.catalog.CatalogApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.catalog.ReadableCatalog createCatalog(com.salesmanager.shop.model.catalog.catalog.PersistableCatalog,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String getWeightBasedShippingMethod(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController: java.lang.String getWeightBasedShippingMethod(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption createProductOption(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOption,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController getShippingConfigsController()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerApi$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getAuthUser(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: java.util.List shippingModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderPaymentApi$$InterceptorProxy: com.salesmanager.shop.model.order.transaction.ReadableTransaction init(com.salesmanager.shop.model.order.transaction.PersistablePayment,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShipping(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.type.PersistableProductType,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.util.List contents(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.ShoppingCartController$$InterceptorProxy: java.lang.String displayShoppingCart(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String editAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.customer.CustomerAccountController: java.lang.String editAddress(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.lang.Boolean)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptinCustomer(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: java.util.List paymentModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayAddProductToCategories(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity removeItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductVariantApi$$InterceptorProxy: java.util.List categoryVariantList(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.order.OrderStatusHistoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v0.order.OrderRESTController$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList listOrders(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: void update(java.lang.String,com.salesmanager.shop.model.store.PersistableMerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity getOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct getProduct(java.lang.String,java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomer createCustomer(java.lang.String,com.salesmanager.shop.model.customer.PersistableCustomer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionList options(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue createProductOptionValue(java.lang.String,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String createManufacturer(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.LandingController$$InterceptorProxy: java.lang.String displayHomeStub(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderControler$$InterceptorProxy: java.lang.String saveOrder(com.salesmanager.shop.admin.model.orders.Order,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.PersistableCategory update(java.lang.Long,com.salesmanager.shop.model.catalog.category.PersistableCategory,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: java.lang.String saveCategory(com.salesmanager.shop.admin.model.catalog.Category,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.user.AuthenticateUserApi$$InterceptorProxy: org.springframework.http.ResponseEntity authenticate(com.salesmanager.shop.store.security.AuthenticationRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.store.ContactController$$InterceptorProxy: java.lang.String display(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductImageApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.merchant.StoreBrandingController$$InterceptorProxy: java.lang.String saveTemplate(com.salesmanager.core.model.merchant.MerchantStore,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String editManufacturer(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String displayOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerAccountController$$InterceptorProxy: java.lang.String changePassword(com.salesmanager.shop.model.customer.CustomerPassword,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductReviewApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity listTransactions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: com.salesmanager.core.model.system.IntegrationConfiguration shippingModule(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.http.ResponseEntity removeFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.content.StaticContentController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.admin.controller.products.RelatedItemsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageRelatedItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsController$$InterceptorProxy: java.lang.String displayOptionCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductPriceController$$InterceptorProxy: java.lang.String getProductPrices(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String save(com.salesmanager.shop.admin.model.permission.GroupDetails,org.springframework.validation.BindingResult,java.util.Locale,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List supportedLanguages(com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.content.page.ReadableContentPage page(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendDownloadEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.admin.controller.shipping.ShippingConfigsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCountries(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void deleteOption(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String displayShippingOrigin(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.user.LoginController getLoginController()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: java.lang.String displayCustomerDashboard(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.controller.ImagesController$$InterceptorProxy: byte[] printImage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: java.lang.String displayCustomProductGroup(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.payment.PaymentApi$$InterceptorProxy: java.util.List paymentModules(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingOriginController$$InterceptorProxy: java.lang.String deleteShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.ShippingOriginController: java.lang.String deleteShippingOrigin(com.salesmanager.core.model.shipping.ShippingOrigin,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String editManufacturer(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.LoginController$$InterceptorProxy: java.lang.String unauthorized(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.ManufacturerController: org.springframework.http.ResponseEntity checkCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrderList list(java.lang.Long,java.lang.Integer,java.lang.Integer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.PermissionController$$InterceptorProxy: java.lang.String displayPermissions(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturerList list(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,java.lang.String,java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProducts(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.http.ResponseEntity refreshToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.products.CustomProductGroupsController getCustomProductGroupsController()>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: java.lang.String displayProducts(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxClassApi$$InterceptorProxy: com.salesmanager.shop.model.tax.ReadableTaxClass get(com.salesmanager.core.model.merchant.MerchantStore,java.lang.String,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.configurations.ConfigurationController$$InterceptorProxy: java.lang.String displayEmailSettings(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList attributes(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct create(com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionSetApi$$InterceptorProxy: void update(com.salesmanager.shop.model.catalog.product.attribute.optionset.PersistableProductOptionSet,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.search.SearchApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ValueList autocomplete(com.salesmanager.shop.model.catalog.SearchProductRequest,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void updateAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductAttributeController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProductPrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.categories.CategoryController$$InterceptorProxy: org.springframework.http.ResponseEntity checkCategoryCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.content.ContentImageController$$InterceptorProxy: org.springframework.http.ResponseEntity pageImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory create(com.salesmanager.shop.model.catalog.product.inventory.PersistableInventory,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: java.util.List list(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String displayTaxRates(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String addCountryToCustomRegion(com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesRegion,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.controller.customer.CustomerLoginController$$InterceptorProxy: java.lang.String basicLogon(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.customer.CustomerRESTController$$InterceptorProxy: com.salesmanager.shop.model.customer.ReadableCustomer getCustomer(java.lang.String,java.lang.Long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.search.SearchRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse indexProducts(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductTypeApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.type.ReadableProductTypeList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String displayRegistration(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.tax.TaxRatesApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.tax.TaxRatesApi: com.salesmanager.shop.model.entity.ReadableEntityList list(int,int,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.payments.PaymentsController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: com.salesmanager.shop.admin.controller.payments.PaymentsController getPaymentsController()>
<com.salesmanager.shop.admin.controller.shipping.ShippingPackagingController$$InterceptorProxy: java.lang.String displayShippingPackaging(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.customer.AuthenticateCustomerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.store.MerchantStoreApi$$InterceptorProxy: java.util.List supportedLanguages(com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity setDefaultImage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem[],com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderTotalApi$$InterceptorProxy: com.salesmanager.shop.model.order.ReadableOrderTotalSummary calculateTotal(java.lang.String,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: com.salesmanager.shop.model.entity.ReadableEntityList pages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.content.ContentApi: com.salesmanager.shop.model.entity.ReadableEntityList pages(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,int,int)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: java.lang.String displayAddProductToCategories(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse createOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomGroups(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.products.CustomProductGroupsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: void updateOrderCustomer(java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.content.ContentPagesController$$InterceptorProxy: org.springframework.http.ResponseEntity checkContentCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.references.ReferencesApi$$InterceptorProxy: java.util.List getZones(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.products.ProductController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductCategories(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.customers.CustomerController$$InterceptorProxy: org.springframework.http.ResponseEntity setCredentials(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.controller.customer.CustomerRegistrationController$$InterceptorProxy: java.lang.String registerCustomer(com.salesmanager.shop.model.customer.SecuredShopPersistableCustomer,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList getProductsFilteredByType(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity getAttribute(java.lang.Long,java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void passwordResetRequest(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.store.security.ResetPasswordRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueCreate(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.products.ProductImagesController$$InterceptorProxy: org.springframework.http.ResponseEntity pageProductImages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: void create(com.salesmanager.shop.model.customer.optin.PersistableCustomerOptin,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.customer.CustomerNewsletterApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity createAttribute(java.lang.Long,com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder getOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.store.api.v1.content.ContentApi$$InterceptorProxy: void deleteContent(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteShippingMethod(org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ReadableShoppingCart addToCart(com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.shoppingCart.ShoppingCartApi$$InterceptorProxy: org.springframework.http.ResponseEntity modifyCart(java.lang.String,com.salesmanager.shop.model.shoppingcart.PersistableShoppingCartItem,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: com.salesmanager.shop.model.shoppingcart.ShoppingCartData removeShoppingCartItem(java.lang.Long,java.lang.String,javax.servlet.http.HttpServletRequest,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><com.salesmanager.shop.store.controller.shoppingCart.MiniCartController$$InterceptorProxy: java.lang.String getString()>
<com.salesmanager.shop.store.api.v1.order.OrderApi$$InterceptorProxy: com.salesmanager.shop.model.order.v0.ReadableOrder getOrder(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.http.ResponseEntity sendInvoice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.orders.OrderActionsControler$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: void addOptionValueImage(java.lang.Long,org.springframework.web.multipart.MultipartFile,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOption(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity pageCustomShipping(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.security.SecurityApi$$InterceptorProxy: java.util.List permissions(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: java.lang.String displayOptionValueEdit(long,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.customers.CustomerOptionsValueController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteOptionValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.OptionsController$$InterceptorProxy: java.lang.String saveOption(com.salesmanager.core.model.catalog.product.attribute.ProductOption,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.customer.CustomerReviewApi$$InterceptorProxy: com.salesmanager.shop.model.customer.PersistableCustomerReview update(java.lang.Long,java.lang.Long,com.salesmanager.shop.model.customer.PersistableCustomerReview,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.product.ProductGroupApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProductList addProductToGroup(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String displayGroups(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.PersistableProduct update(java.lang.Long,com.salesmanager.shop.model.catalog.product.PersistableProduct,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.FeaturedItemsController$$InterceptorProxy: java.lang.String displayFeaturedItems(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.salesmanager.shop.controller.ReferenceController$$InterceptorProxy: org.springframework.http.ResponseEntity getMonthsOfYear(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.store.api.v1.shipping.ShippingConfigurationApi$$InterceptorProxy: void configure(com.salesmanager.shop.model.system.IntegrationModuleConfiguration,com.salesmanager.core.model.merchant.MerchantStore,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: org.springframework.http.ResponseEntity deletePrice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: void update(java.lang.Long,com.salesmanager.shop.model.catalog.manufacturer.PersistableManufacturer,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.store.api.v1.product.ProductManufacturerApi$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.salesmanager.shop.store.api.v1.user.UserApi$$InterceptorProxy: com.salesmanager.shop.model.user.ReadableUser create(com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,com.salesmanager.shop.model.user.PersistableUser,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.controller.items.ListItemsController$$InterceptorProxy: void <init>()>-><com.salesmanager.shop.store.controller.items.ListItemsController: void <init>()>
<com.salesmanager.shop.store.api.v1.product.ProductVariationApi$$InterceptorProxy: org.springframework.http.ResponseEntity exists(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.ShippingMethodsController$$InterceptorProxy: java.lang.String displayShippingMethod(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.store.api.v0.system.SystemRESTController$$InterceptorProxy: com.salesmanager.core.business.utils.ajax.AjaxResponse deleteOptin(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.content.ContentBoxesController$$InterceptorProxy: java.lang.String getContentDetails(java.lang.Long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProduct(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.controller.customer.CustomerDashboardController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.salesmanager.shop.store.api.v1.customer.ResetCustomerPasswordApi$$InterceptorProxy: void changePassword(com.salesmanager.shop.store.security.PasswordRequest,java.lang.String,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.admin.controller.merchant.MerchantStoreController$$InterceptorProxy: java.lang.String displayMerchantStore(java.lang.Integer,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: void <init>()>
<com.salesmanager.shop.admin.controller.products.ManufacturerController$$InterceptorProxy: java.lang.String getManufacturers(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.products.ProductsController$$InterceptorProxy: org.springframework.http.ResponseEntity deleteProduct(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.products.ProductKeywordsController$$InterceptorProxy: java.lang.String displayKeywords(long,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String editTaxRate(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.store.api.v1.product.ProductInventoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.inventory.ReadableInventory get(java.lang.Long,java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.tax.TaxClassController$$InterceptorProxy: java.lang.String displayTaxClasses(org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.salesmanager.shop.admin.controller.shipping.CustomShippingMethodsController$$InterceptorProxy: java.lang.String deleteRegion(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Locale,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v0.product.ShopProductRESTController$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.ReadableProduct updateProductQuantity(java.lang.String,java.lang.String,int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.category.CategoryApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.category.ReadableCategory getByfriendlyUrl(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: java.lang.String save(com.salesmanager.shop.admin.model.permission.GroupDetails,org.springframework.validation.BindingResult,java.util.Locale,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.salesmanager.shop.admin.controller.user.GroupsController$$InterceptorProxy: org.springframework.http.ResponseEntity delete(org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><com.salesmanager.shop.admin.controller.user.GroupsController: org.springframework.http.ResponseEntity delete(org.springframework.ui.Model,java.util.Locale,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.salesmanager.shop.admin.controller.tax.TaxRatesController$$InterceptorProxy: java.lang.String updateTaxRate(com.salesmanager.core.model.tax.taxrate.TaxRate,org.springframework.validation.BindingResult,org.springframework.ui.Model,javax.servlet.http.HttpServletRequest,java.util.Locale,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.salesmanager.shop.store.api.v1.product.ProductOptionApi$$InterceptorProxy: com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity getOptionValue(java.lang.Long,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$$InterceptorProxy: com.salesmanager.shop.store.api.v1.content.ContentAdministrationApi$FileStatus remove(java.lang.String,com.salesmanager.core.model.merchant.MerchantStore,com.salesmanager.core.model.reference.language.Language,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.i18n.LocaleChangeInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
